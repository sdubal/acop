cscope 15 /ws/sdubal-bgl/acop               0001910929
	@include/ac_app_api.h

7 #i‚de‡
__AC_APP_API_H__


8 
	~<time.h
>

9 
	~"ac_ty≥s.h
"

10 
	~"ac_≠p_defs.h
"

11 
	~"ac_d©aba£.h
"

14 
	$acRëu∫_t
 (*
	tacAµH™dÀrFunc_p
)(
	tacPìrNode_t
 *
	t≥î_node
, 
	tacAµP¨£r_t
 *
	t≠p_D©a
);

16 
	sacAµH™dÀrs_s
 {

17 
acAµIndexM≠_t
 
ödex
;

18 
acAµIdítifyM≠_t
 
¥ŸId
;

19 
acAµH™dÀrFunc_p
 
func
;

20 }
	tacAµH™dÀrs_t
;

28 
acRëu∫_t
 
	`acAµPktH™dÀr
(
acPìrTblKey_t
 *
pktInfoKey
, 
acAµP¨£r_t
 *
d©a
);

29 
acRëu∫_t
 
	`acAµAΩPktH™dÀr
(
acPìrNode_t
 *
≥îNode
, 
acAµP¨£r_t
 *
≠p_d©a
);

30 
uöt32_t
 
	`acAµIdToIndex
(uöt32_à
≠pId
);

	@include/ac_app_defs.h

7 #i‚de‡
__AC_APP_DEFS_H__


8 
	#__AC_APP_DEFS_H__


	)

10 
	~<time.h
>

11 
	~"ac_ty≥s.h
"

13 
	eacAµIndexM≠_e
 {

14 
	mAC_APP_ARP_INDEX
 = 0,

15 
	mAC_APP_ICMP_INDEX
 = 1,

17 
	mAC_MAX_APP_INDEX


18 }
	tacAµIndexM≠_t
;

20 
	eacAµIdítifiˇti⁄M≠_e
 {

21 
	mAC_APP_ARP_ID
 = 0x0806,

22 
	mAC_APP_ICMP_ID
 = 0x01,

24 
	mAC_APP_MAX
 = 0xFFFF

25 }
	tacAµIdítifyM≠_t
;

31 
	sacAµAΩPrŸInfo_s
 {

33 
uöt32_t
 
	m°©e
;

34 
uöt32_t
 
	mrxPktC¡
;

35 
uöt32_t
 
	mtxPktC¡
;

36 
uöt32_t
 
	mrxPktByãC¡
;

37 
uöt32_t
 
	mtxPktByãC¡
;

38 
uöt32_t
 
	mtxPktR©e
;

39 
uöt32_t
 
	mtxPktR©e_˙t
;

40 
uöt32_t
 
	mrxPktR©e
;

41 
uöt32_t
 
	mrxPktR©e_˙t
;

43 
time_t
 
	mœ°PktRcvdTime
;

44 
time_t
 
	mœ°TpkTxdTime
;

46 
time_t
 
	mmöRxDñè
;

47 
time_t
 
	mmaxRxDñè
;

48 }
	tacAµAΩPrŸInfo_t
;

	@include/ac_database.h

7 #i‚de‡
__AC_DATABASE_H__


8 
	#__AC_DATABASE_H__


	)

10 
	~<time.h
>

11 
	~"ac_ty≥s.h
"

12 
	~"ac_≠p_defs.h
"

15 
	#AC_MAX_PORTS
 24

	)

16 
	#AC_MAX_APPS
 
AC_MAX_APP_INDEX


	)

17 
	#AC_MAX_PEER_ENTRIES
 100

	)

23 
	#AC_MAX_PEER_TBL_HASH
 55

	)

26 
	sacPìrTblKey_s
 {

27 
uch¨8_t
 
	mp‹tId
;

28 
uöt32_t
 
	m≠pId
;

29 
uöt32_t
 
	mvœnId
;

30 
acIpAddr_t
 
	m§cIp
;

31 
acIpAddr_t
 
	m≥îIp
;

32 }
	t__©åibuã__
((
	t∑cked
))
	tacPìrTblKey_t
;

35 
	sacAµP¨£d_s
 {

36 
acPìrTblKey_t
 
	mkey
;

37 
uch¨8_t
 
	mdúe˘i⁄
;

38 
uöt32_t
 
	mpktSz
;

40 }
	tacAµP¨£r_t
;

45 
	sacP‹tTbl_s
 {

47 
uöt32_t
 
	mp‹t
;

48 
uöt32_t
 
	mtxPktC¡
;

49 
uöt32_t
 
	mrxPktC¡
;

50 }
	tacP‹tTbl_t
;

53 
	sacAµTbl_s
 {

54 
ush‹t16_t
 
	m≠pId
;

55 
uöt32_t
 
	mtxPktC¡
;

56 
uöt32_t
 
	mrxPktC¡
;

58 
uöt32_t
 
	mtxPktR©e
;

59 
uöt32_t
 
	mrxPktR©e
;

61 
time_t
 
	mœ°PktRcvdTime
;

62 
time_t
 
	mœ°TpkTxdTime
;

64 }
	tacAµTbl_t
;

68 
acPìrNode_s
 
	tacPìrNode_t
;

69 
	sacP‹tAµTbl_s
 {

71 
ush‹t16_t
 
	mp‹t
;

72 
ush‹t16_t
 
	m≠pId
;

74 
uöt32_t
 
	mtxPktC¡
;

75 
uöt32_t
 
	mrxPktC¡
;

77 
uöt32_t
 
	mtxPktR©e
;

78 
uöt32_t
 
	mrxPktR©e
;

80 
time_t
 
	mœ°PktRcvdTime
;

81 
time_t
 
	mœ°TpkTxdTime
;

83 
uöt32_t
 
	m≥îsC¡
;

84 
acPìrNode_t
 *
	mhódp
;

85 
acPìrNode_t
 *
	mèûp
;

87 }
	tacP‹tAµTbl_t
;

89 
	uacAµPrŸD©a_u
 {

91 
acAµAΩPrŸInfo_t
 
	m¨p
;

93 }
	tacAµPrŸD©a_t
;

96 
	sacPìrNode_s
 {

97 
acPìrTblKey_t
 
	mkey
;

101 
acAµPrŸD©a_t
 
	md©a
;

102 
acPìrNode_t
 *
	m√xç
;

103 
acPìrNode_t
 *
	m¥evp
;

107 
	sacPìrTbl_s
 {

109 
acPìrNode_t
 *
	mhódp
;

110 
acPìrNode_t
 *
	mèûp
;

111 
acP‹tAµTbl_t
 *
	mp‹tAµP¨ít
;

113 }
	tacPìrTbl_t
;

124 *
acPìrTblE¡ryFöd
(
acPìrTblKey_t
 *
key
);

125 *
acPìrTblE¡ryCª©e
(
acPìrTblKey_t
 *
key
);

126 
acRëu∫_t
 
acPìrTblE¡ryDñëe
(
acPìrTblKey_t
 *
key
);

127 *
acPìrTblE¡ryFödAndCª©e
(
acPìrTblKey_t
 *
key
);

	@include/ac_types.h

7 #i‚de‡
__ACOPP_TYPES_H__


8 
	#__ACOPP_TYPES_H__


	)

11 #i‚de‡
ch¨8_t


12 
	tch¨8_t
;

15 #i‚de‡
ush‹t16_t


16 
	tuch¨8_t
;

19 #i‚de‡
ush‹t16_t


20 
	tsh‹t16_t
;

23 #i‚de‡
ush‹t16_t


24 
	tush‹t16_t
;

27 #i‚de‡
öt32_t


28 
	töt32_t
;

31 #i‚de‡
uöt32_t


32 
	tuöt32_t
;

35 #i‚de‡
öt64_t


37 sig√d 
	tac_öt64_t
;

40 #i‚de‡
uöt64_t


42 
	tac_uöt64_t
;

49 
	mIP_ADDR_TYPE_V4
 = 0,

50 
	mIP_ADDR_TYPE_V6
 = 1,

53 
	sacIpAddt_s
 {

54 
uch¨8_t
 
	mty≥
;

56 
uöt32_t
 
	mv4addr
;

57 
uch¨8_t
 
	mv6addr
[16];

58 }
	maddr
;

59 }
	tacIpAddr_t
;

64 
	eAC_RETURN_s
 {

65 
	mAC_SUCCESS
 = 0,

66 
	mAC_FAILURE
 = 1,

67 
	mAC_NOT_EXISTS
,

68 
	mAC_NOT_FOUND
,

69 
	mAC_INVALID_PARAMS
,

70 
	mAC_WRONG_IP
,

72 }
	tacRëu∫_t
;

	@include/ipfix_def.h

7 #i‚de‡
IPFIX_DEF_H


8 
	#IPFIX_DEF_H


	)

10 
	#IPFIX_CODING_INT
 1

	)

11 
	#IPFIX_CODING_UINT
 2

	)

12 
	#IPFIX_CODING_BYTES
 3

	)

13 
	#IPFIX_CODING_STRING
 4

	)

14 
	#IPFIX_CODING_FLOAT
 5

	)

15 
	#IPFIX_CODING_NTP
 6

	)

16 
	#IPFIX_CODING_IPADDR
 7

	)

18 
	#REV_PEN
 29305

	)

20 (*
	tùfix_ícode_func
Ë(*, *, 
	tsize_t
);

21 (*
	tùfix_decode_func
Ë(*, *, 
	tsize_t
);

22 (*
	tùfix_¢¥öt_func
Ë(*, 
	tsize_t
, *, size_t);

26 
ío
;

27 
·y≥
;

28 
ssize_t
 
Àngth
;

29 
codög
;

30 *
«me
;

31 *
documíèti⁄
;

33 } 
	tùfix_fõld_ty≥_t
;

35 
	sùfix_fõld


37 
ùfix_fõld
 *
√xt
;

38 
ùfix_fõld_ty≥_t
 *
·
;

39 
ùfix_ícode_func
 
ícode
;

40 
ùfix_decode_func
 
decode
;

41 
ùfix_¢¥öt_func
 
¢¥öt
;

43 } 
	tùfix_fõld_t
;

45 
	#IPFIX_FT_OCTETDELTACOUNT
 1

	)

46 
	#IPFIX_FT_PACKETDELTACOUNT
 2

	)

47 
	#IPFIX_FT_FLOWS
 3

	)

48 
	#IPFIX_FT_PROTOCOLIDENTIFIER
 4

	)

49 
	#IPFIX_FT_IPCLASSOFSERVICE
 5

	)

50 
	#IPFIX_FT_TCPCONTROLBITS
 6

	)

51 
	#IPFIX_FT_SOURCETRANSPORTPORT
 7

	)

52 
	#IPFIX_FT_SOURCEIPV4ADDRESS
 8

	)

53 
	#IPFIX_FT_SOURCEIPV4PREFIXLENGTH
 9

	)

54 
	#IPFIX_FT_INGRESSINTERFACE
 10

	)

55 
	#IPFIX_FT_DESTINATIONTRANSPORTPORT
 11

	)

56 
	#IPFIX_FT_DESTINATIONIPV4ADDRESS
 12

	)

57 
	#IPFIX_FT_DESTINATIONIPV4PREFIXLENGTH
 13

	)

58 
	#IPFIX_FT_EGRESSINTERFACE
 14

	)

59 
	#IPFIX_FT_IPNEXTHOPIPV4ADDRESS
 15

	)

60 
	#IPFIX_FT_BGPSOURCEASNUMBER
 16

	)

61 
	#IPFIX_FT_BGPDESTINATIONASNUMBER
 17

	)

62 
	#IPFIX_FT_BGPNEXTHOPIPV4ADDRESS
 18

	)

63 
	#IPFIX_FT_POSTMCASTPACKETDELTACOUNT
 19

	)

64 
	#IPFIX_FT_POSTMCASTOCTETDELTACOUNT
 20

	)

65 
	#IPFIX_FT_FLOWENDSYSUPTIME
 21

	)

66 
	#IPFIX_FT_FLOWSTARTSYSUPTIME
 22

	)

67 
	#IPFIX_FT_POSTOCTETDELTACOUNT
 23

	)

68 
	#IPFIX_FT_POSTPACKETDELTACOUNT
 24

	)

69 
	#IPFIX_FT_MINIMUMIPTOTALLENGTH
 25

	)

70 
	#IPFIX_FT_MAXIMUMIPTOTALLENGTH
 26

	)

71 
	#IPFIX_FT_SOURCEIPV6ADDRESS
 27

	)

72 
	#IPFIX_FT_DESTINATIONIPV6ADDRESS
 28

	)

73 
	#IPFIX_FT_SOURCEIPV6PREFIXLENGTH
 29

	)

74 
	#IPFIX_FT_DESTINATIONIPV6PREFIXLENGTH
 30

	)

75 
	#IPFIX_FT_FLOWLABELIPV6
 31

	)

76 
	#IPFIX_FT_ICMPTYPECODEIPV4
 32

	)

77 
	#IPFIX_FT_IGMPTYPE
 33

	)

78 
	#IPFIX_FT_SAMPLING_INTERVAL
 34

	)

79 
	#IPFIX_FT_SAMPLING_ALGORITHM
 35

	)

80 
	#IPFIX_FT_FLOWACTIVETIMEOUT
 36

	)

81 
	#IPFIX_FT_FLOWIDLETIMEOUT
 37

	)

82 
	#IPFIX_FT_ENGINE_TYPE
 38

	)

83 
	#IPFIX_FT_ENGINE_ID
 39

	)

84 
	#IPFIX_FT_EXPORTEDOCTETTOTALCOUNT
 40

	)

85 
	#IPFIX_FT_EXPORTEDMESSAGETOTALCOUNT
 41

	)

86 
	#IPFIX_FT_EXPORTEDFLOWRECORDTOTALCOUNT
 42

	)

87 
	#IPFIX_FT_SOURCEIPV4PREFIX
 44

	)

88 
	#IPFIX_FT_DESTINATIONIPV4PREFIX
 45

	)

89 
	#IPFIX_FT_MPLSTOPLABELTYPE
 46

	)

90 
	#IPFIX_FT_MPLSTOPLABELIPV4ADDRESS
 47

	)

91 
	#IPFIX_FT_FLOW_SAMPLER_ID
 48

	)

92 
	#IPFIX_FT_FLOW_SAMPLER_MODE
 49

	)

93 
	#IPFIX_FT_FLOW_SAMPLER_RANDOM_INTERVAL
 50

	)

94 
	#IPFIX_FT_MINIMUMTTL
 52

	)

95 
	#IPFIX_FT_MAXIMUMTTL
 53

	)

96 
	#IPFIX_FT_FRAGMENTIDENTIFICATION
 54

	)

97 
	#IPFIX_FT_POSTIPCLASSOFSERVICE
 55

	)

98 
	#IPFIX_FT_SOURCEMACADDRESS
 56

	)

99 
	#IPFIX_FT_POSTDESTINATIONMACADDRESS
 57

	)

100 
	#IPFIX_FT_VLANID
 58

	)

101 
	#IPFIX_FT_POSTVLANID
 59

	)

102 
	#IPFIX_FT_IPVERSION
 60

	)

103 
	#IPFIX_FT_FLOWDIRECTION
 61

	)

104 
	#IPFIX_FT_IPNEXTHOPIPV6ADDRESS
 62

	)

105 
	#IPFIX_FT_BGPNEXTHOPIPV6ADDRESS
 63

	)

106 
	#IPFIX_FT_IPV6EXTENSIONHEADERS
 64

	)

107 
	#IPFIX_FT_MPLSTOPLABELSTACKSECTION
 70

	)

108 
	#IPFIX_FT_MPLSLABELSTACKSECTION2
 71

	)

109 
	#IPFIX_FT_MPLSLABELSTACKSECTION3
 72

	)

110 
	#IPFIX_FT_MPLSLABELSTACKSECTION4
 73

	)

111 
	#IPFIX_FT_MPLSLABELSTACKSECTION5
 74

	)

112 
	#IPFIX_FT_MPLSLABELSTACKSECTION6
 75

	)

113 
	#IPFIX_FT_MPLSLABELSTACKSECTION7
 76

	)

114 
	#IPFIX_FT_MPLSLABELSTACKSECTION8
 77

	)

115 
	#IPFIX_FT_MPLSLABELSTACKSECTION9
 78

	)

116 
	#IPFIX_FT_MPLSLABELSTACKSECTION10
 79

	)

117 
	#IPFIX_FT_DESTINATIONMACADDRESS
 80

	)

118 
	#IPFIX_FT_POSTSOURCEMACADDRESS
 81

	)

119 
	#IPFIX_FT_OCTETTOTALCOUNT
 85

	)

120 
	#IPFIX_FT_PACKETTOTALCOUNT
 86

	)

121 
	#IPFIX_FT_FRAGMENTOFFSET
 88

	)

122 
	#IPFIX_FT_MPLSVPNROUTEDISTINGUISHER
 90

	)

123 
	#IPFIX_FT_BGPNEXTADJACENTASNUMBER
 128

	)

124 
	#IPFIX_FT_BGPPREVADJACENTASNUMBER
 129

	)

125 
	#IPFIX_FT_EXPORTERIPV4ADDRESS
 130

	)

126 
	#IPFIX_FT_EXPORTERIPV6ADDRESS
 131

	)

127 
	#IPFIX_FT_DROPPEDOCTETDELTACOUNT
 132

	)

128 
	#IPFIX_FT_DROPPEDPACKETDELTACOUNT
 133

	)

129 
	#IPFIX_FT_DROPPEDOCTETTOTALCOUNT
 134

	)

130 
	#IPFIX_FT_DROPPEDPACKETTOTALCOUNT
 135

	)

131 
	#IPFIX_FT_FLOWENDREASON
 136

	)

132 
	#IPFIX_FT_COMMONPROPERTIESID
 137

	)

133 
	#IPFIX_FT_OBSERVATIONPOINTID
 138

	)

134 
	#IPFIX_FT_ICMPTYPECODEIPV6
 139

	)

135 
	#IPFIX_FT_MPLSTOPLABELIPV6ADDRESS
 140

	)

136 
	#IPFIX_FT_LINECARDID
 141

	)

137 
	#IPFIX_FT_PORTID
 142

	)

138 
	#IPFIX_FT_METERINGPROCESSID
 143

	)

139 
	#IPFIX_FT_EXPORTINGPROCESSID
 144

	)

140 
	#IPFIX_FT_TEMPLATEID
 145

	)

141 
	#IPFIX_FT_WLANCHANNELID
 146

	)

142 
	#IPFIX_FT_WLANSSID
 147

	)

143 
	#IPFIX_FT_FLOWID
 148

	)

144 
	#IPFIX_FT_OBSERVATIONDOMAINID
 149

	)

145 
	#IPFIX_FT_FLOWSTARTSECONDS
 150

	)

146 
	#IPFIX_FT_FLOWENDSECONDS
 151

	)

147 
	#IPFIX_FT_FLOWSTARTMILLISECONDS
 152

	)

148 
	#IPFIX_FT_FLOWENDMILLISECONDS
 153

	)

149 
	#IPFIX_FT_FLOWSTARTMICROSECONDS
 154

	)

150 
	#IPFIX_FT_FLOWENDMICROSECONDS
 155

	)

151 
	#IPFIX_FT_FLOWSTARTNANOSECONDS
 156

	)

152 
	#IPFIX_FT_FLOWENDNANOSECONDS
 157

	)

153 
	#IPFIX_FT_FLOWSTARTDELTAMICROSECONDS
 158

	)

154 
	#IPFIX_FT_FLOWENDDELTAMICROSECONDS
 159

	)

155 
	#IPFIX_FT_SYSTEMINITTIMEMILLISECONDS
 160

	)

156 
	#IPFIX_FT_FLOWDURATIONMILLISECONDS
 161

	)

157 
	#IPFIX_FT_FLOWDURATIONMICROSECONDS
 162

	)

158 
	#IPFIX_FT_OBSERVEDFLOWTOTALCOUNT
 163

	)

159 
	#IPFIX_FT_IGNOREDPACKETTOTALCOUNT
 164

	)

160 
	#IPFIX_FT_IGNOREDOCTETTOTALCOUNT
 165

	)

161 
	#IPFIX_FT_NOTSENTFLOWTOTALCOUNT
 166

	)

162 
	#IPFIX_FT_NOTSENTPACKETTOTALCOUNT
 167

	)

163 
	#IPFIX_FT_NOTSENTOCTETTOTALCOUNT
 168

	)

164 
	#IPFIX_FT_DESTINATIONIPV6PREFIX
 169

	)

165 
	#IPFIX_FT_SOURCEIPV6PREFIX
 170

	)

166 
	#IPFIX_FT_POSTOCTETTOTALCOUNT
 171

	)

167 
	#IPFIX_FT_POSTPACKETTOTALCOUNT
 172

	)

168 
	#IPFIX_FT_FLOWKEYINDICATOR
 173

	)

169 
	#IPFIX_FT_POSTMCASTPACKETTOTALCOUNT
 174

	)

170 
	#IPFIX_FT_POSTMCASTOCTETTOTALCOUNT
 175

	)

171 
	#IPFIX_FT_ICMPTYPEIPV4
 176

	)

172 
	#IPFIX_FT_ICMPCODEIPV4
 177

	)

173 
	#IPFIX_FT_ICMPTYPEIPV6
 178

	)

174 
	#IPFIX_FT_ICMPCODEIPV6
 179

	)

175 
	#IPFIX_FT_UDPSOURCEPORT
 180

	)

176 
	#IPFIX_FT_UDPDESTINATIONPORT
 181

	)

177 
	#IPFIX_FT_TCPSOURCEPORT
 182

	)

178 
	#IPFIX_FT_TCPDESTINATIONPORT
 183

	)

179 
	#IPFIX_FT_TCPSEQUENCENUMBER
 184

	)

180 
	#IPFIX_FT_TCPACKNOWLEDGEMENTNUMBER
 185

	)

181 
	#IPFIX_FT_TCPWINDOWSIZE
 186

	)

182 
	#IPFIX_FT_TCPURGENTPOINTER
 187

	)

183 
	#IPFIX_FT_TCPHEADERLENGTH
 188

	)

184 
	#IPFIX_FT_IPHEADERLENGTH
 189

	)

185 
	#IPFIX_FT_TOTALLENGTHIPV4
 190

	)

186 
	#IPFIX_FT_PAYLOADLENGTHIPV6
 191

	)

187 
	#IPFIX_FT_IPTTL
 192

	)

188 
	#IPFIX_FT_NEXTHEADERIPV6
 193

	)

189 
	#IPFIX_FT_MPLSPAYLOADLENGTH
 194

	)

190 
	#IPFIX_FT_IPDIFFSERVCODEPOINT
 195

	)

191 
	#IPFIX_FT_IPPRECEDENCE
 196

	)

192 
	#IPFIX_FT_FRAGMENTFLAGS
 197

	)

193 
	#IPFIX_FT_OCTETDELTASUMOFSQUARES
 198

	)

194 
	#IPFIX_FT_OCTETTOTALSUMOFSQUARES
 199

	)

195 
	#IPFIX_FT_MPLSTOPLABELTTL
 200

	)

196 
	#IPFIX_FT_MPLSLABELSTACKLENGTH
 201

	)

197 
	#IPFIX_FT_MPLSLABELSTACKDEPTH
 202

	)

198 
	#IPFIX_FT_MPLSTOPLABELEXP
 203

	)

199 
	#IPFIX_FT_IPPAYLOADLENGTH
 204

	)

200 
	#IPFIX_FT_UDPMESSAGELENGTH
 205

	)

201 
	#IPFIX_FT_ISMULTICAST
 206

	)

202 
	#IPFIX_FT_IPV4IHL
 207

	)

203 
	#IPFIX_FT_IPV4OPTIONS
 208

	)

204 
	#IPFIX_FT_TCPOPTIONS
 209

	)

205 
	#IPFIX_FT_PADDINGOCTETS
 210

	)

206 
	#IPFIX_FT_COLLECTORIPV4ADDRESS
 211

	)

207 
	#IPFIX_FT_COLLECTORIPV6ADDRESS
 212

	)

208 
	#IPFIX_FT_COLLECTORINTERFACE
 213

	)

209 
	#IPFIX_FT_COLLECTORPROTOCOLVERSION
 214

	)

210 
	#IPFIX_FT_COLLECTORTRANSPORTPROTOCOL
 215

	)

211 
	#IPFIX_FT_COLLECTORTRANSPORTPORT
 216

	)

212 
	#IPFIX_FT_EXPORTERTRANSPORTPORT
 217

	)

213 
	#IPFIX_FT_TCPSYNTOTALCOUNT
 218

	)

214 
	#IPFIX_FT_TCPFINTOTALCOUNT
 219

	)

215 
	#IPFIX_FT_TCPRSTTOTALCOUNT
 220

	)

216 
	#IPFIX_FT_TCPPSHTOTALCOUNT
 221

	)

217 
	#IPFIX_FT_TCPACKTOTALCOUNT
 222

	)

218 
	#IPFIX_FT_TCPURGTOTALCOUNT
 223

	)

219 
	#IPFIX_FT_IPTOTALLENGTH
 224

	)

220 
	#IPFIX_FT_POSTMPLSTOPLABELEXP
 237

	)

221 
	#IPFIX_FT_TCPWINDOWSCALE
 238

	)

222 
	#IPFIX_FT_OBSERVATIONPOINTID_PSAMP
 300

	)

223 
	#IPFIX_FT_SELECTIONSEQUENCEID
 301

	)

224 
	#IPFIX_FT_SELECTORID
 302

	)

225 
	#IPFIX_FT_INFORMATIONELEMENTID
 303

	)

226 
	#IPFIX_FT_SELECTORALGORITHM
 304

	)

227 
	#IPFIX_FT_SAMPLINGPACKETINTERVAL
 305

	)

228 
	#IPFIX_FT_SAMPLINGPACKETSPACE
 306

	)

229 
	#IPFIX_FT_SAMPLINGTIMEINTERVAL
 307

	)

230 
	#IPFIX_FT_SAMPLINGTIMESPACE
 308

	)

231 
	#IPFIX_FT_SAMPLINGSIZE
 309

	)

232 
	#IPFIX_FT_SAMPLINGPOPULATION
 310

	)

233 
	#IPFIX_FT_SAMPLINGPROBABILITY
 311

	)

234 
	#IPFIX_FT_DATALINKFRAMESIZE
 312

	)

235 
	#IPFIX_FT_IPHEADERPACKETSECTION
 313

	)

236 
	#IPFIX_FT_IPPAYLOADPACKETSECTION
 314

	)

237 
	#IPFIX_FT_DATALINKFRAMESECTION
 315

	)

238 
	#IPFIX_FT_MPLSLABELSTACKSECTION
 316

	)

239 
	#IPFIX_FT_MPLSPAYLOADPACKETSECTION
 317

	)

240 
	#IPFIX_FT_PACKETSOBSERVED
 318

	)

241 
	#IPFIX_FT_PACKETSSELECTED
 319

	)

242 
	#IPFIX_FT_FIXEDERROR
 320

	)

243 
	#IPFIX_FT_RELATIVEERROR
 321

	)

244 
	#IPFIX_FT_OBSERVATIONTIMESECONDS
 322

	)

245 
	#IPFIX_FT_OBSERVATIONTIMEMILLISECONDS
 323

	)

246 
	#IPFIX_FT_OBSERVATIONTIMEMICROSECONDS
 324

	)

247 
	#IPFIX_FT_OBSERVATIONTIMENANOSECONDS
 325

	)

248 
	#IPFIX_FT_DIGESTHASHVALUE
 326

	)

249 
	#IPFIX_FT_HASHIPPAYLOADOFFSET
 327

	)

250 
	#IPFIX_FT_HASHIPPAYLOADSIZE
 328

	)

251 
	#IPFIX_FT_HASHOUTPUTRANGEMIN
 329

	)

252 
	#IPFIX_FT_HASHOUTPUTRANGEMAX
 330

	)

253 
	#IPFIX_FT_HASHSELECTEDRANGEMIN
 331

	)

254 
	#IPFIX_FT_HASHSELECTEDRANGEMAX
 332

	)

255 
	#IPFIX_FT_HASHDIGESTOUTPUT
 333

	)

256 
	#IPFIX_FT_HASHINITIALISERVALUE
 334

	)

259 
	#IPFIX_FT_INBOUND_RATE
 501

260 
	#IPFIX_FT_OUTBOUND_RATE
 501

261 

	)

264 
	#IPFIX_CN_OCTETDELTACOUNT
 "õ0_1"

	)

265 
	#IPFIX_CN_PACKETDELTACOUNT
 "õ0_2"

	)

266 
	#IPFIX_CN_FLOWS
 "õ0_3"

	)

267 
	#IPFIX_CN_PROTOCOLIDENTIFIER
 "õ0_4"

	)

268 
	#IPFIX_CN_IPCLASSOFSERVICE
 "õ0_5"

	)

269 
	#IPFIX_CN_TCPCONTROLBITS
 "õ0_6"

	)

270 
	#IPFIX_CN_SOURCETRANSPORTPORT
 "õ0_7"

	)

271 
	#IPFIX_CN_SOURCEIPV4ADDRESS
 "õ0_8"

	)

272 
	#IPFIX_CN_SOURCEIPV4PREFIXLENGTH
 "õ0_9"

	)

273 
	#IPFIX_CN_INGRESSINTERFACE
 "õ0_a"

	)

274 
	#IPFIX_CN_DESTINATIONTRANSPORTPORT
 "õ0_b"

	)

275 
	#IPFIX_CN_DESTINATIONIPV4ADDRESS
 "õ0_c"

	)

276 
	#IPFIX_CN_DESTINATIONIPV4PREFIXLENGTH
 "õ0_d"

	)

277 
	#IPFIX_CN_EGRESSINTERFACE
 "õ0_e"

	)

278 
	#IPFIX_CN_IPNEXTHOPIPV4ADDRESS
 "õ0_f"

	)

279 
	#IPFIX_CN_BGPSOURCEASNUMBER
 "õ0_10"

	)

280 
	#IPFIX_CN_BGPDESTINATIONASNUMBER
 "õ0_11"

	)

281 
	#IPFIX_CN_BGPNEXTHOPIPV4ADDRESS
 "õ0_12"

	)

282 
	#IPFIX_CN_POSTMCASTPACKETDELTACOUNT
 "õ0_13"

	)

283 
	#IPFIX_CN_POSTMCASTOCTETDELTACOUNT
 "õ0_14"

	)

284 
	#IPFIX_CN_FLOWENDSYSUPTIME
 "õ0_15"

	)

285 
	#IPFIX_CN_FLOWSTARTSYSUPTIME
 "õ0_16"

	)

286 
	#IPFIX_CN_POSTOCTETDELTACOUNT
 "õ0_17"

	)

287 
	#IPFIX_CN_POSTPACKETDELTACOUNT
 "õ0_18"

	)

288 
	#IPFIX_CN_MINIMUMIPTOTALLENGTH
 "õ0_19"

	)

289 
	#IPFIX_CN_MAXIMUMIPTOTALLENGTH
 "õ0_1a"

	)

290 
	#IPFIX_CN_SOURCEIPV6ADDRESS
 "õ0_1b"

	)

291 
	#IPFIX_CN_DESTINATIONIPV6ADDRESS
 "õ0_1c"

	)

292 
	#IPFIX_CN_SOURCEIPV6PREFIXLENGTH
 "õ0_1d"

	)

293 
	#IPFIX_CN_DESTINATIONIPV6PREFIXLENGTH
 "õ0_1e"

	)

294 
	#IPFIX_CN_FLOWLABELIPV6
 "õ0_1f"

	)

295 
	#IPFIX_CN_ICMPTYPECODEIPV4
 "õ0_20"

	)

296 
	#IPFIX_CN_IGMPTYPE
 "õ0_21"

	)

297 
	#IPFIX_CN_SAMPLING_INTERVAL
 "õ0_22"

	)

298 
	#IPFIX_CN_SAMPLING_ALGORITHM
 "õ0_23"

	)

299 
	#IPFIX_CN_FLOWACTIVETIMEOUT
 "õ0_24"

	)

300 
	#IPFIX_CN_FLOWIDLETIMEOUT
 "õ0_25"

	)

301 
	#IPFIX_CN_ENGINE_TYPE
 "õ0_26"

	)

302 
	#IPFIX_CN_ENGINE_ID
 "õ0_27"

	)

303 
	#IPFIX_CN_EXPORTEDOCTETTOTALCOUNT
 "õ0_28"

	)

304 
	#IPFIX_CN_EXPORTEDMESSAGETOTALCOUNT
 "õ0_29"

	)

305 
	#IPFIX_CN_EXPORTEDFLOWRECORDTOTALCOUNT
 "õ0_2a"

	)

306 
	#IPFIX_CN_SOURCEIPV4PREFIX
 "õ0_2c"

	)

307 
	#IPFIX_CN_DESTINATIONIPV4PREFIX
 "õ0_2d"

	)

308 
	#IPFIX_CN_MPLSTOPLABELTYPE
 "õ0_2e"

	)

309 
	#IPFIX_CN_MPLSTOPLABELIPV4ADDRESS
 "õ0_2f"

	)

310 
	#IPFIX_CN_FLOW_SAMPLER_ID
 "õ0_30"

	)

311 
	#IPFIX_CN_FLOW_SAMPLER_MODE
 "õ0_31"

	)

312 
	#IPFIX_CN_FLOW_SAMPLER_RANDOM_INTERVAL
 "õ0_32"

	)

313 
	#IPFIX_CN_MINIMUMTTL
 "õ0_34"

	)

314 
	#IPFIX_CN_MAXIMUMTTL
 "õ0_35"

	)

315 
	#IPFIX_CN_FRAGMENTIDENTIFICATION
 "õ0_36"

	)

316 
	#IPFIX_CN_POSTIPCLASSOFSERVICE
 "õ0_37"

	)

317 
	#IPFIX_CN_SOURCEMACADDRESS
 "õ0_38"

	)

318 
	#IPFIX_CN_POSTDESTINATIONMACADDRESS
 "õ0_39"

	)

319 
	#IPFIX_CN_VLANID
 "õ0_3a"

	)

320 
	#IPFIX_CN_POSTVLANID
 "õ0_3b"

	)

321 
	#IPFIX_CN_IPVERSION
 "õ0_3c"

	)

322 
	#IPFIX_CN_FLOWDIRECTION
 "õ0_3d"

	)

323 
	#IPFIX_CN_IPNEXTHOPIPV6ADDRESS
 "õ0_3e"

	)

324 
	#IPFIX_CN_BGPNEXTHOPIPV6ADDRESS
 "õ0_3f"

	)

325 
	#IPFIX_CN_IPV6EXTENSIONHEADERS
 "õ0_40"

	)

326 
	#IPFIX_CN_MPLSTOPLABELSTACKSECTION
 "õ0_46"

	)

327 
	#IPFIX_CN_MPLSLABELSTACKSECTION2
 "õ0_47"

	)

328 
	#IPFIX_CN_MPLSLABELSTACKSECTION3
 "õ0_48"

	)

329 
	#IPFIX_CN_MPLSLABELSTACKSECTION4
 "õ0_49"

	)

330 
	#IPFIX_CN_MPLSLABELSTACKSECTION5
 "õ0_4a"

	)

331 
	#IPFIX_CN_MPLSLABELSTACKSECTION6
 "õ0_4b"

	)

332 
	#IPFIX_CN_MPLSLABELSTACKSECTION7
 "õ0_4c"

	)

333 
	#IPFIX_CN_MPLSLABELSTACKSECTION8
 "õ0_4d"

	)

334 
	#IPFIX_CN_MPLSLABELSTACKSECTION9
 "õ0_4e"

	)

335 
	#IPFIX_CN_MPLSLABELSTACKSECTION10
 "õ0_4f"

	)

336 
	#IPFIX_CN_DESTINATIONMACADDRESS
 "õ0_50"

	)

337 
	#IPFIX_CN_POSTSOURCEMACADDRESS
 "õ0_51"

	)

338 
	#IPFIX_CN_OCTETTOTALCOUNT
 "õ0_55"

	)

339 
	#IPFIX_CN_PACKETTOTALCOUNT
 "õ0_56"

	)

340 
	#IPFIX_CN_FRAGMENTOFFSET
 "õ0_58"

	)

341 
	#IPFIX_CN_MPLSVPNROUTEDISTINGUISHER
 "õ0_5a"

	)

342 
	#IPFIX_CN_BGPNEXTADJACENTASNUMBER
 "õ0_80"

	)

343 
	#IPFIX_CN_BGPPREVADJACENTASNUMBER
 "õ0_81"

	)

344 
	#IPFIX_CN_EXPORTERIPV4ADDRESS
 "õ0_82"

	)

345 
	#IPFIX_CN_EXPORTERIPV6ADDRESS
 "õ0_83"

	)

346 
	#IPFIX_CN_DROPPEDOCTETDELTACOUNT
 "õ0_84"

	)

347 
	#IPFIX_CN_DROPPEDPACKETDELTACOUNT
 "õ0_85"

	)

348 
	#IPFIX_CN_DROPPEDOCTETTOTALCOUNT
 "õ0_86"

	)

349 
	#IPFIX_CN_DROPPEDPACKETTOTALCOUNT
 "õ0_87"

	)

350 
	#IPFIX_CN_FLOWENDREASON
 "õ0_88"

	)

351 
	#IPFIX_CN_COMMONPROPERTIESID
 "õ0_89"

	)

352 
	#IPFIX_CN_OBSERVATIONPOINTID
 "õ0_8a"

	)

353 
	#IPFIX_CN_ICMPTYPECODEIPV6
 "õ0_8b"

	)

354 
	#IPFIX_CN_MPLSTOPLABELIPV6ADDRESS
 "õ0_8c"

	)

355 
	#IPFIX_CN_LINECARDID
 "õ0_8d"

	)

356 
	#IPFIX_CN_PORTID
 "õ0_8e"

	)

357 
	#IPFIX_CN_METERINGPROCESSID
 "õ0_8f"

	)

358 
	#IPFIX_CN_EXPORTINGPROCESSID
 "õ0_90"

	)

359 
	#IPFIX_CN_TEMPLATEID
 "õ0_91"

	)

360 
	#IPFIX_CN_WLANCHANNELID
 "õ0_92"

	)

361 
	#IPFIX_CN_WLANSSID
 "õ0_93"

	)

362 
	#IPFIX_CN_FLOWID
 "õ0_94"

	)

363 
	#IPFIX_CN_OBSERVATIONDOMAINID
 "õ0_95"

	)

364 
	#IPFIX_CN_FLOWSTARTSECONDS
 "õ0_96"

	)

365 
	#IPFIX_CN_FLOWENDSECONDS
 "õ0_97"

	)

366 
	#IPFIX_CN_FLOWSTARTMILLISECONDS
 "õ0_98"

	)

367 
	#IPFIX_CN_FLOWENDMILLISECONDS
 "õ0_99"

	)

368 
	#IPFIX_CN_FLOWSTARTMICROSECONDS
 "õ0_9a"

	)

369 
	#IPFIX_CN_FLOWENDMICROSECONDS
 "õ0_9b"

	)

370 
	#IPFIX_CN_FLOWSTARTNANOSECONDS
 "õ0_9c"

	)

371 
	#IPFIX_CN_FLOWENDNANOSECONDS
 "õ0_9d"

	)

372 
	#IPFIX_CN_FLOWSTARTDELTAMICROSECONDS
 "õ0_9e"

	)

373 
	#IPFIX_CN_FLOWENDDELTAMICROSECONDS
 "õ0_9f"

	)

374 
	#IPFIX_CN_SYSTEMINITTIMEMILLISECONDS
 "õ0_a0"

	)

375 
	#IPFIX_CN_FLOWDURATIONMILLISECONDS
 "õ0_a1"

	)

376 
	#IPFIX_CN_FLOWDURATIONMICROSECONDS
 "õ0_a2"

	)

377 
	#IPFIX_CN_OBSERVEDFLOWTOTALCOUNT
 "õ0_a3"

	)

378 
	#IPFIX_CN_IGNOREDPACKETTOTALCOUNT
 "õ0_a4"

	)

379 
	#IPFIX_CN_IGNOREDOCTETTOTALCOUNT
 "õ0_a5"

	)

380 
	#IPFIX_CN_NOTSENTFLOWTOTALCOUNT
 "õ0_a6"

	)

381 
	#IPFIX_CN_NOTSENTPACKETTOTALCOUNT
 "õ0_a7"

	)

382 
	#IPFIX_CN_NOTSENTOCTETTOTALCOUNT
 "õ0_a8"

	)

383 
	#IPFIX_CN_DESTINATIONIPV6PREFIX
 "õ0_a9"

	)

384 
	#IPFIX_CN_SOURCEIPV6PREFIX
 "õ0_Ø"

	)

385 
	#IPFIX_CN_POSTOCTETTOTALCOUNT
 "õ0_ab"

	)

386 
	#IPFIX_CN_POSTPACKETTOTALCOUNT
 "õ0_ac"

	)

387 
	#IPFIX_CN_FLOWKEYINDICATOR
 "õ0_ad"

	)

388 
	#IPFIX_CN_POSTMCASTPACKETTOTALCOUNT
 "õ0_´"

	)

389 
	#IPFIX_CN_POSTMCASTOCTETTOTALCOUNT
 "õ0_af"

	)

390 
	#IPFIX_CN_ICMPTYPEIPV4
 "õ0_b0"

	)

391 
	#IPFIX_CN_ICMPCODEIPV4
 "õ0_b1"

	)

392 
	#IPFIX_CN_ICMPTYPEIPV6
 "õ0_b2"

	)

393 
	#IPFIX_CN_ICMPCODEIPV6
 "õ0_b3"

	)

394 
	#IPFIX_CN_UDPSOURCEPORT
 "õ0_b4"

	)

395 
	#IPFIX_CN_UDPDESTINATIONPORT
 "õ0_b5"

	)

396 
	#IPFIX_CN_TCPSOURCEPORT
 "õ0_b6"

	)

397 
	#IPFIX_CN_TCPDESTINATIONPORT
 "õ0_b7"

	)

398 
	#IPFIX_CN_TCPSEQUENCENUMBER
 "õ0_b8"

	)

399 
	#IPFIX_CN_TCPACKNOWLEDGEMENTNUMBER
 "õ0_b9"

	)

400 
	#IPFIX_CN_TCPWINDOWSIZE
 "õ0_ba"

	)

401 
	#IPFIX_CN_TCPURGENTPOINTER
 "õ0_bb"

	)

402 
	#IPFIX_CN_TCPHEADERLENGTH
 "õ0_bc"

	)

403 
	#IPFIX_CN_IPHEADERLENGTH
 "õ0_bd"

	)

404 
	#IPFIX_CN_TOTALLENGTHIPV4
 "õ0_be"

	)

405 
	#IPFIX_CN_PAYLOADLENGTHIPV6
 "õ0_bf"

	)

406 
	#IPFIX_CN_IPTTL
 "õ0_c0"

	)

407 
	#IPFIX_CN_NEXTHEADERIPV6
 "õ0_c1"

	)

408 
	#IPFIX_CN_MPLSPAYLOADLENGTH
 "õ0_c2"

	)

409 
	#IPFIX_CN_IPDIFFSERVCODEPOINT
 "õ0_c3"

	)

410 
	#IPFIX_CN_IPPRECEDENCE
 "õ0_c4"

	)

411 
	#IPFIX_CN_FRAGMENTFLAGS
 "õ0_c5"

	)

412 
	#IPFIX_CN_OCTETDELTASUMOFSQUARES
 "õ0_c6"

	)

413 
	#IPFIX_CN_OCTETTOTALSUMOFSQUARES
 "õ0_c7"

	)

414 
	#IPFIX_CN_MPLSTOPLABELTTL
 "õ0_c8"

	)

415 
	#IPFIX_CN_MPLSLABELSTACKLENGTH
 "õ0_c9"

	)

416 
	#IPFIX_CN_MPLSLABELSTACKDEPTH
 "õ0_ˇ"

	)

417 
	#IPFIX_CN_MPLSTOPLABELEXP
 "õ0_cb"

	)

418 
	#IPFIX_CN_IPPAYLOADLENGTH
 "õ0_cc"

	)

419 
	#IPFIX_CN_UDPMESSAGELENGTH
 "õ0_cd"

	)

420 
	#IPFIX_CN_ISMULTICAST
 "õ0_˚"

	)

421 
	#IPFIX_CN_IPV4IHL
 "õ0_cf"

	)

422 
	#IPFIX_CN_IPV4OPTIONS
 "õ0_d0"

	)

423 
	#IPFIX_CN_TCPOPTIONS
 "õ0_d1"

	)

424 
	#IPFIX_CN_PADDINGOCTETS
 "õ0_d2"

	)

425 
	#IPFIX_CN_COLLECTORIPV4ADDRESS
 "õ0_d3"

	)

426 
	#IPFIX_CN_COLLECTORIPV6ADDRESS
 "õ0_d4"

	)

427 
	#IPFIX_CN_COLLECTORINTERFACE
 "õ0_d5"

	)

428 
	#IPFIX_CN_COLLECTORPROTOCOLVERSION
 "õ0_d6"

	)

429 
	#IPFIX_CN_COLLECTORTRANSPORTPROTOCOL
 "õ0_d7"

	)

430 
	#IPFIX_CN_COLLECTORTRANSPORTPORT
 "õ0_d8"

	)

431 
	#IPFIX_CN_EXPORTERTRANSPORTPORT
 "õ0_d9"

	)

432 
	#IPFIX_CN_TCPSYNTOTALCOUNT
 "õ0_da"

	)

433 
	#IPFIX_CN_TCPFINTOTALCOUNT
 "õ0_db"

	)

434 
	#IPFIX_CN_TCPRSTTOTALCOUNT
 "õ0_dc"

	)

435 
	#IPFIX_CN_TCPPSHTOTALCOUNT
 "õ0_dd"

	)

436 
	#IPFIX_CN_TCPACKTOTALCOUNT
 "õ0_de"

	)

437 
	#IPFIX_CN_TCPURGTOTALCOUNT
 "õ0_df"

	)

438 
	#IPFIX_CN_IPTOTALLENGTH
 "õ0_e0"

	)

439 
	#IPFIX_CN_POSTMPLSTOPLABELEXP
 "õ0_ed"

	)

440 
	#IPFIX_CN_TCPWINDOWSCALE
 "õ0_ì"

	)

441 
	#IPFIX_CN_OBSERVATIONPOINTID_PSAMP
 "õ0_12c"

	)

442 
	#IPFIX_CN_SELECTIONSEQUENCEID
 "õ0_12d"

	)

443 
	#IPFIX_CN_SELECTORID
 "õ0_12e"

	)

444 
	#IPFIX_CN_INFORMATIONELEMENTID
 "õ0_12f"

	)

445 
	#IPFIX_CN_SELECTORALGORITHM
 "õ0_130"

	)

446 
	#IPFIX_CN_SAMPLINGPACKETINTERVAL
 "õ0_131"

	)

447 
	#IPFIX_CN_SAMPLINGPACKETSPACE
 "õ0_132"

	)

448 
	#IPFIX_CN_SAMPLINGTIMEINTERVAL
 "õ0_133"

	)

449 
	#IPFIX_CN_SAMPLINGTIMESPACE
 "õ0_134"

	)

450 
	#IPFIX_CN_SAMPLINGSIZE
 "õ0_135"

	)

451 
	#IPFIX_CN_SAMPLINGPOPULATION
 "õ0_136"

	)

452 
	#IPFIX_CN_SAMPLINGPROBABILITY
 "õ0_137"

	)

453 
	#IPFIX_CN_DATALINKFRAMESIZE
 "õ0_138"

	)

454 
	#IPFIX_CN_IPHEADERPACKETSECTION
 "õ0_139"

	)

455 
	#IPFIX_CN_IPPAYLOADPACKETSECTION
 "õ0_13a"

	)

456 
	#IPFIX_CN_DATALINKFRAMESECTION
 "õ0_13b"

	)

457 
	#IPFIX_CN_MPLSLABELSTACKSECTION
 "õ0_13c"

	)

458 
	#IPFIX_CN_MPLSPAYLOADPACKETSECTION
 "õ0_13d"

	)

459 
	#IPFIX_CN_PACKETSOBSERVED
 "õ0_13e"

	)

460 
	#IPFIX_CN_PACKETSSELECTED
 "õ0_13f"

	)

461 
	#IPFIX_CN_FIXEDERROR
 "õ0_140"

	)

462 
	#IPFIX_CN_RELATIVEERROR
 "õ0_141"

	)

463 
	#IPFIX_CN_OBSERVATIONTIMESECONDS
 "õ0_142"

	)

464 
	#IPFIX_CN_OBSERVATIONTIMEMILLISECONDS
 "õ0_143"

	)

465 
	#IPFIX_CN_OBSERVATIONTIMEMICROSECONDS
 "õ0_144"

	)

466 
	#IPFIX_CN_OBSERVATIONTIMENANOSECONDS
 "õ0_145"

	)

467 
	#IPFIX_CN_DIGESTHASHVALUE
 "õ0_146"

	)

468 
	#IPFIX_CN_HASHIPPAYLOADOFFSET
 "õ0_147"

	)

469 
	#IPFIX_CN_HASHIPPAYLOADSIZE
 "õ0_148"

	)

470 
	#IPFIX_CN_HASHOUTPUTRANGEMIN
 "õ0_149"

	)

471 
	#IPFIX_CN_HASHOUTPUTRANGEMAX
 "õ0_14a"

	)

472 
	#IPFIX_CN_HASHSELECTEDRANGEMIN
 "õ0_14b"

	)

473 
	#IPFIX_CN_HASHSELECTEDRANGEMAX
 "õ0_14c"

	)

474 
	#IPFIX_CN_HASHDIGESTOUTPUT
 "õ0_14d"

	)

475 
	#IPFIX_CN_HASHINITIALISERVALUE
 "õ0_14e"

	)

	@libipfix_110224/collector/collector.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<öây≥s.h
>

37 
	~<uni°d.h
>

38 
	~<°rög.h
>

39 
	~<î∫o.h
>

40 
	~<sig«l.h
>

41 
	~<limôs.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/sockë.h
>

44 
	~<sys/time.h
>

45 
	~<time.h
>

46 
	~<√töë/ö.h
>

47 
	~<libgí.h
>

48 
	~<°d¨g.h
>

49 
	~<f˙é.h
>

50 
	~<√tdb.h
>

52 #ifde‡
HAVE_CONFIG_H


53 
	~"../c⁄fig.h
"

55 #ifde‡
HAVE_GETOPT_H


56 
	~<gë›t.h
>

58 
	~"misc.h
"

59 
	~<ùfix.h
>

60 #ifde‡
DBSUPPORT


61 
	~"ùfix_db.h
"

63 
	~"ùfix_cﬁ.h
"

64 
	~"ùfix_def_fokus.h
"

65 
	~"ùfix_fõlds_fokus.h
"

69 
	#CAFILE
 "roŸ˚π.≥m"

	)

70 
	#CADIR
 
NULL


	)

71 
	#KEYFILE
 "£rvî.≥m"

	)

72 
	#CERTFILE
 "£rvî.≥m"

	)

76 
	sùfix_cﬁÀ˘‹_›ts


78 
	m¥og«me
[30];

79 
	mdebug
;

80 *
	mlogfûe
;

82 *
	md©adú
;

83 
	mdbexp‹t
;

84 *
	mdbu£r
;

85 *
	mdbpw
;

86 *
	mdb«me
;

87 *
	mdbho°
;

89 
	mudp
;

90 
	mt˝
;

91 
	ms˘p
;

92 
	ms¶
;

93 *
	mˇfûe
;

94 *
	mˇdú
;

95 *
	mkeyfûe
;

96 *
	m˚πfûe
;

97 
	mp‹t
;

98 
	mmaxc⁄
;

99 
	mÁmûy
;

101 } 
	tùfix_cﬁ_›ts_t
;

105 
ùfix_cﬁ_›ts_t
 
	g∑r
;

106 
	gvîbo£_Àvñ
 = 0;

107 *
	gt˝_s
=
NULL
, 
	g¡˝_s
=0;

108 *
	gudp_s
=
NULL
, 
	gnudp_s
=0;

109 *
	gs˘p_s
=
NULL
, 
	gns˘p_s
=0;

110 
ùfix_cﬁ_t
 *
	gscﬁ
=
NULL
;

116 
	$ußge
–*
èsk«me
)

118 c⁄° 
hñ±xt
[] =

130 #ifde‡
DBSUPPORT


131 #ifde‡
HAVE_GETOPT_LONG


141 #ifde‡
SSLSUPPORT


152 
	`Ârötf
–
°dîr
, "\nipfix collector (%s %s)\n",

153 "$Revisi⁄: 1.12 $", 
__DATE__
 );

155 
	`Ârötf
–
°dîr
,"\nusage: %s %sexample: %s -stu -vv -o . \n\n",

156 
èsk«me
, 
hñ±xt
,Åaskname );

158 
	}
}

160 
	$exô_func
 ( 
ªtvÆ
 )

162 
i
;

164 i‡–
∑r
.
t˝
 && 
t˝_s
 ) {

165  
i
=0; i<
¡˝_s
; i++ ) {

166 
	`ùfix_cﬁ_˛o£
–
t˝_s
[
i
] );

168 
	`‰ì
–
t˝_s
 );

170 i‡–
∑r
.
udp
 && 
udp_s
 ) {

171  
i
=0; i<
nudp_s
; i++ ) {

172 
	`ùfix_cﬁ_˛o£
–
udp_s
[
i
] );

174 
	`‰ì
–
udp_s
 );

176 i‡–
∑r
.
s˘p
 && 
s˘p_s
 ) {

177  
i
=0; i<
ns˘p_s
; i++ ) {

178 
	`ùfix_cﬁ_˛o£
–
s˘p_s
[
i
] );

180 
	`‰ì
–
s˘p_s
 );

182 i‡–
∑r
.
s¶
 && 
scﬁ
 ) {

183 
	`ùfix_cﬁ_˛o£_s¶
–
scﬁ
 );

186 i‡–
∑r
.
d©adú
 ) 
	`ùfix_cﬁ_°›_fûìxp‹t
();

187 #ifde‡
DBSUPPORT


188 i‡–
∑r
.
dbexp‹t
 ) 
	`ùfix_cﬁ_°›_mysqÀxp‹t
();

190 (Ë
	`ùfix_cﬁ_°›_msglog
();

191 
	`ùfix_cﬁ_˛ónup
();

192 
	`ùfix_˛ónup
();

193 
	`mlog_˛o£
();

194 
	`exô
–
ªtvÆ
 );

195 
	}
}

197 
	$sig_func
–
signo
 )

199 i‡–
vîbo£_Àvñ
 )

200 
	`Ârötf
–
°dîr
, "\n[%s] gŸ signÿ%d, bye.\n\n", 
∑r
.
¥og«me
, 
signo
 );

202 
	`exô_func
( 1 );

203 
	}
}

205 
	$do_cﬁÀ˘
()

207 
i
, 
ªtvÆ
 = -1;

208 
ùfix_s¶_›ts_t
 
›ts
;

210 i‡–
∑r
.
s¶
 ) {

211 
›ts
.
ˇfûe
 = 
∑r
.cafile;

212 
›ts
.
ˇdú
 = 
∑r
.cadir;

213 
›ts
.
keyfûe
 = 
∑r
.keyfile;

214 
›ts
.
˚πfûe

∑r
.certfile;

219 i‡–
∑r
.
d©adú
 )

220 (Ë
	`ùfix_cﬁ_öô_fûìxp‹t
–
∑r
.
d©adú
 );

222 #ifde‡
DBSUPPORT


223 i‡–
∑r
.
dbexp‹t
 ) {

224 i‡–
	`ùfix_cﬁ_öô_mysqÀxp‹t
–
∑r
.
dbho°
,Ö¨.
dbu£r
,

225 
∑r
.
dbpw
,Ö¨.
db«me
 ) <0 ) {

226 
	`mlogf
–0, "[%s] c™nŸ c⁄√˘Åÿd©aba£\n", 
∑r
.
¥og«me
 );

234 i‡–
∑r
.
t˝
 ) {

235 i‡–
∑r
.
s¶
 ) {

236 i‡–
	`ùfix_cﬁ_li°í_s¶
–&
scﬁ
, 
IPFIX_PROTO_TCP
,

237 
∑r
.
p‹t
,Ö¨.
Ámûy
,Ö¨.
maxc⁄
,

238 &
›ts
 ) <0 ) {

239 
	`Ârötf
–
°dîr
, "ipfix_listen_ssl(tcp) failed: %s\n",

240 
	`°ªº‹
(
î∫o
) );

244 i‡–
	`ùfix_cﬁ_li°í
–&
¡˝_s
, &
t˝_s
, 
IPFIX_PROTO_TCP
,

245 
∑r
.
p‹t
,Ö¨.
Ámûy
,Ö¨.
maxc⁄
 ) <0 ) {

246 
	`Ârötf
–
°dîr
, "ipfix_listen(tcp) failed: %s\n",

247 
	`°ªº‹
(
î∫o
) );

252 i‡–
∑r
.
udp
 ) {

253 i‡–
∑r
.
s¶
 ) {

254 i‡–
	`ùfix_cﬁ_li°í_s¶
–&
scﬁ
, 
IPFIX_PROTO_UDP
,

255 
∑r
.
p‹t
,Ö¨.
Ámûy
, 0, &
›ts
 ) <0 ) {

256 
	`Ârötf
–
°dîr
, "ipfix_listen_ssl(udp) failed: %s\n",

257 
	`°ªº‹
(
î∫o
) );

261 i‡–
	`ùfix_cﬁ_li°í
–&
nudp_s
, &
udp_s
, 
IPFIX_PROTO_UDP
,

262 
∑r
.
p‹t
,Ö¨.
Ámûy
, 0 ) <0 ) {

263 
	`Ârötf
–
°dîr
, "ipfix_listen(udp) failed: %s\n",

264 
	`°ªº‹
(
î∫o
) );

265 
íd
;

269 i‡–
∑r
.
s˘p
 ) {

270 i‡–
	`ùfix_cﬁ_li°í
–&
ns˘p_s
, &
s˘p_s
, 
IPFIX_PROTO_SCTP
,

271 
∑r
.
p‹t
,Ö¨.
Ámûy
,Ö¨.
maxc⁄
 ) <0 ) {

272 
	`Ârötf
–
°dîr
, "ipfix_listen(sctp) failed: %s\n",

273 
	`°ªº‹
(
î∫o
) );

274 
íd
;

282 i‡–
	`mpﬁl_lo›
( 10 ) <0 )

287 
íd
:

288 i‡–
∑r
.
t˝
 && 
t˝_s
 ) {

289  
i
=0; i<
¡˝_s
; i++ )

290 
	`ùfix_cﬁ_˛o£
–
t˝_s
[
i
] );

292 i‡–
∑r
.
udp
 && 
udp_s
 ) {

293  
i
=0; i<
nudp_s
; i++ )

294 
	`ùfix_cﬁ_˛o£
–
udp_s
[
i
] );

296 i‡–
∑r
.
s˘p
 && 
s˘p_s
 ) {

297  
i
=0; i<
ns˘p_s
; i++ )

298 
	`ùfix_cﬁ_˛o£
–
s˘p_s
[
i
] );

300  
ªtvÆ
;

301 
	}
}

303 
	$maö
 (
¨gc
, *
¨gv
[])

305 
¨g
;

306 
l›tidx
=0;

307 
›t
[] = "64stuhl:p:vo:";

308 #ifde‡
HAVE_GETOPT_LONG


309 
›ti⁄
 
l›t
[] = {

327 
∑r
.
t˝
 = 0;

328 
∑r
.
udp
 = 0;

329 
∑r
.
s˘p
 = 0;

330 
∑r
.
s¶
 = 0;

331 
∑r
.
ˇfûe
 = 
CAFILE
;

332 
∑r
.
ˇdú
 = 
CADIR
;

333 
∑r
.
keyfûe
 = 
KEYFILE
;

334 
∑r
.
˚πfûe

CERTFILE
;

335 
∑r
.
p‹t
 = 0;

336 
∑r
.
Ámûy
 = 
AF_UNSPEC
;

337 
∑r
.
logfûe
 = 
NULL
;

338 
∑r
.
maxc⁄
 = 10;

339 
∑r
.
d©adú
 = 
NULL
;

340 
∑r
.
dbexp‹t
 = 0;

341 
∑r
.
dbho°
 = 
DFLT_MYSQL_HOST
;

342 
∑r
.
db«me
 = 
DFLT_MYSQL_DBNAME
;

343 
∑r
.
dbu£r
 = 
DFLT_MYSQL_USER
;

344 
∑r
.
dbpw
 = 
DFLT_MYSQL_PASSWORD
;

346 
	`¢¥ötf
–
∑r
.
¥og«me
, ’¨.¥og«me), "%s", 
	`ba£«me
–
¨gv
[0]) );

350 #ifde‡
HAVE_GETOPT_LONG


351 (
¨g
=
	`gë›t_l⁄g
–
¨gc
, 
¨gv
, 
›t
, 
l›t
, &
l›tidx
)) >=0 )

353  (
¨g
=
	`gë›t
–
¨gc
, 
¨gv
, 
›t
 )Ë!
EOF
 )

356 
¨g
)

359 
l›tidx
) {

361 
∑r
.
dbho°
 = 
›èrg
;

364 
∑r
.
db«me
 = 
›èrg
;

367 
∑r
.
dbu£r
 = 
›èrg
;

370 
∑r
.
dbpw
 = 
›èrg
;

373 
∑r
.
dbexp‹t
 = 1;

376 
∑r
.
s¶
 = 1;

379 
∑r
.
keyfûe
 = 
›èrg
;

382 
∑r
.
˚πfûe
 = 
›èrg
;

385 
∑r
.
ˇfûe
 = 
›èrg
;

388 
∑r
.
ˇdú
 = 
›èrg
;

391 
	`ußge
(
∑r
.
¥og«me
);

392 
	`exô
(1);

397 #ifde‡
INET6


398 
∑r
.
Ámûy
 = (∑r.Ámûy==
AF_INET6
)? 
AF_UNSPEC
 : 
AF_INET
;

402 
∑r
.
Ámûy
 = (∑r.Ámûy==
AF_INET
)? 
AF_UNSPEC
 : 
AF_INET6
;

407 
∑r
.
dbexp‹t
 = 1;

411 
∑r
.
logfûe
 = 
›èrg
;

415 
∑r
.
s˘p
 ++;

419 
∑r
.
t˝
 ++;

423 
∑r
.
udp
 ++;

427 
∑r
.
d©adú
 = 
›èrg
;

428 i‡–
	`ac˚ss
–
›èrg
, 
W_OK
|
X_OK
 ) <0 ) {

429 
	`Ârötf
–
°dîr
, "cannotáccess dir '%s': %s!\n",

430 
›èrg
, 
	`°ªº‹
(
î∫o
) );

431 
	`exô
(1);

436 i‡((
∑r
.
p‹t
=
	`©oi
(
›èrg
)) <0)

438 
	`Ârötf
–
°dîr
, "Invalid -párgument!\n" );

439 
	`exô
(1);

444 
vîbo£_Àvñ
 ++;

449 
	`ußge
(
∑r
.
¥og«me
);

450 
	`exô
(1);

454 i‡–!
∑r
.
udp
 && !∑r.
t˝
 && !∑r.
s˘p
 )

455 
∑r
.
t˝
++;

457 i‡–!
∑r
.
dbexp‹t
 && !∑r.
d©adú
 ) {

458 
	`Ârötf
–
°dîr
, "info: message dump,Ço data storage.\n" );

459 
	`fÊush
–
°dîr
 );

462 i‡–
∑r
.
p‹t
==0 ) {

463 
∑r
.
p‹t
 =Ö¨.
s¶
?
IPFIX_TLS_PORTNO
:
IPFIX_PORTNO
;

468 
	`mlog_£t_vÀvñ
–
vîbo£_Àvñ
 );

469 i‡–
∑r
.
logfûe
 )

470 (Ë
	`mlog_›í
–
∑r
.
logfûe
, 
NULL
 );

471 i‡–(!
∑r
.
dbexp‹t
 && !∑r.
d©adú
)

472 || (
vîbo£_Àvñ
 >2) )

473 (Ë
	`ùfix_cﬁ_°¨t_msglog
–
°dîr
 );

475 
	`mlogf
( 1, "[%s]Üisten onÖort %d, writeÅo %s ...\n",

476 
∑r
.
¥og«me
,Ö¨.
p‹t
,

477 
∑r
.
dbexp‹t
?"d©aba£":∑r.
d©adú
?"files":"stdout" );

481 i‡–
	`ùfix_öô
() <0 ) {

482 
	`Ârötf
–
°dîr
, "ùfix_öô(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

483 
	`exô
(1);

485 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_·_fokus
 ) <0 ) {

486 
	`Ârötf
–
°dîr
, "ùfix_add_õ(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

487 
	`exô
(1);

493 
	`sig«l
–
SIGKILL
, 
sig_func
 );

494 
	`sig«l
–
SIGTERM
, 
sig_func
 );

495 
	`sig«l
–
SIGINT
, 
sig_func
 );

499 i‡–
	`do_cﬁÀ˘
() <0 )

500 
	`exô_func
(1);

502 
	`exô_func
(0);

504 
	}
}

	@libipfix_110224/config.h

5 
	#HAVE_ARPA_INET_H
 1

	)

8 
	#HAVE_BASENAME
 1

	)

14 
	#HAVE_FCNTL_H
 1

	)

17 
	#HAVE_GETHOSTBYNAME
 1

	)

20 
	#HAVE_GETOPT_H
 1

	)

23 
	#HAVE_GETOPT_LONG
 1

	)

26 
	#HAVE_GETTIMEOFDAY
 1

	)

29 
	#HAVE_HSTRERROR
 1

	)

32 
	#HAVE_INET_NTOA
 1

	)

35 
	#HAVE_INTTYPES_H
 1

	)

38 
	#HAVE_LIBGEN_H
 1

	)

50 
	#HAVE_LIMITS_H
 1

	)

53 
	#HAVE_MEMMOVE
 1

	)

56 
	#HAVE_MEMORY_H
 1

	)

59 
	#HAVE_MEMSET
 1

	)

62 
	#HAVE_MKDIR
 1

	)

65 
	#HAVE_NETDB_H
 1

	)

68 
	#HAVE_NETINET_IN_H
 1

	)

71 
	#HAVE_PCAP_BREAKLOOP
 1

	)

74 
	#HAVE_PCAP_FREECODE
 1

	)

77 
	#HAVE_SELECT
 1

	)

80 
	#HAVE_SETSOCKOPT
 1

	)

83 
	#HAVE_STDINT_H
 1

	)

86 
	#HAVE_STDLIB_H
 1

	)

89 
	#HAVE_STRDUP
 1

	)

92 
	#HAVE_STRERROR
 1

	)

95 
	#HAVE_STRFTIME
 1

	)

98 
	#HAVE_STRINGS_H
 1

	)

101 
	#HAVE_STRING_H
 1

	)

104 
	#HAVE_SYS_SELECT_H
 1

	)

107 
	#HAVE_SYS_SOCKET_H
 1

	)

110 
	#HAVE_SYS_STAT_H
 1

	)

113 
	#HAVE_SYS_TIME_H
 1

	)

116 
	#HAVE_SYS_TYPES_H
 1

	)

119 
	#HAVE_UNISTD_H
 1

	)

122 
	#HAVE_VPRINTF
 1

	)

125 
	#PACKAGE_BUGREPORT
 ""

	)

128 
	#PACKAGE_NAME
 "libùfix"

	)

131 
	#PACKAGE_STRING
 "libùfix 1.0"

	)

134 
	#PACKAGE_TARNAME
 "libùfix"

	)

137 
	#PACKAGE_VERSION
 "1.0"

	)

140 
	#RETSIGTYPE
 

	)

143 
	#SELECT_TYPE_ARG1
 

	)

146 
	#SELECT_TYPE_ARG234
 (
fd_£t
 *)

	)

149 
	#SELECT_TYPE_ARG5
 (
timevÆ
 *)

	)

152 
	#STDC_HEADERS
 1

	)

155 
	#TIME_WITH_SYS_TIME
 1

	)

	@libipfix_110224/examples/example_collector.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<öây≥s.h
>

38 
	~<uni°d.h
>

39 
	~<°rög.h
>

40 
	~<î∫o.h
>

41 
	~<sys/sockë.h
>

42 
	~<sig«l.h
>

43 
	~<libgí.h
>

44 
	~<limôs.h
>

45 
	~<°d¨g.h
>

47 
	~"ùfix.h
"

48 
	~"ùfix_cﬁ.h
"

49 
	~"ùfix_def_fokus.h
"

50 
	~"ùfix_fõlds_fokus.h
"

51 
	~"misc.h
"

55 
	g¥og«me
[30];

56 
	gvîbo£_Àvñ
 = 0;

57 *
	gt˝_s
=
NULL
, 
	g¡˝_s
=0;

61 
	$ußge
–*
èsk«me
)

63 c⁄° 
hñ±xt
[] =

72 
	`Ârötf
–
°dîr
, "\nipfixÉxample collector\n" );

73 
	`Ârötf
(
°dîr
,"\nußge: %†%s\n", 
èsk«me
, 
hñ±xt
);

75 
	}
}

77 
	$exô_func
 ( 
signo
 )

79 i‡–
vîbo£_Àvñ
 && 
signo
 )

80 
	`Ârötf
–
°dîr
, "\n[%s] gŸ signÿ%d, bye.\n\n", 
¥og«me
, 
signo
 );

82 i‡–
t˝_s
 ) {

83 
i
;

85  
i
=0; i<
¡˝_s
; i++ )

86 
	`˛o£
–
t˝_s
[
i
] );

89 
	`ùfix_cﬁ_˛ónup
();

90 
	`ùfix_˛ónup
();

91 
	`exô
( 1 );

92 
	}
}

96 
	$maö
 (
¨gc
, *
¨gv
[])

98 
›t
;

99 
›t°r
[] = "hp:vo:";

100 
p‹t
;

101 *
d©adú
;

105 
p‹t
 = 4739;

106 
d©adú
 = ".";

107 
	`¢¥ötf
–
¥og«me
, ’rog«me), "%s", 
	`ba£«me
–
¨gv
[0]) );

111  ( 
›t
 = 
	`gë›t
–
¨gc
, 
¨gv
, 
›t°r
 ) ) !
EOF
 ) {

113  
›t
 )

116 
d©adú
 = 
›èrg
;

117 i‡–
	`ac˚ss
–
›èrg
, 
W_OK
 ) <0 ) {

118 
	`Ârötf
–
°dîr
, "cannotáccess '%s': %s!\n",

119 
›èrg
, 
	`°ªº‹
(
î∫o
) );

120 
	`exô
(1);

125 i‡((
p‹t
=
	`©oi
(
›èrg
)) <0) {

126 
	`Ârötf
–
°dîr
, "Invalid -párgument!\n" );

127 
	`exô
(1);

132 
vîbo£_Àvñ
 ++;

137 
	`ußge
(
¥og«me
);

138 
	`exô
(1);

144 
	`mlog_£t_vÀvñ
–
vîbo£_Àvñ
 );

148 i‡–
	`ùfix_öô
() <0 ) {

149 
	`Ârötf
–
°dîr
, "ùfix_öô(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

150 
	`exô
(1);

152 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_·_fokus
 ) <0 ) {

153 
	`Ârötf
–
°dîr
, "ùfix_add_õ(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

154 
	`exô
(1);

159 
	`sig«l
–
SIGKILL
, 
exô_func
 );

160 
	`sig«l
–
SIGTERM
, 
exô_func
 );

161 
	`sig«l
–
SIGINT
, 
exô_func
 );

165 (Ë
	`ùfix_cﬁ_öô_fûìxp‹t
–
d©adú
 );

169 i‡–
	`ùfix_cﬁ_li°í
–&
¡˝_s
, &
t˝_s
, 
IPFIX_PROTO_TCP
,

170 
p‹t
, 
AF_INET
, 10 ) <0 ) {

171 
	`Ârötf
–
°dîr
, "[%s] ipfix_listen(tcp) failed.\n",

172 
¥og«me
 );

178 (Ë
	`mpﬁl_lo›
( -1 );

180 
	`exô
(1);

181 
	}
}

	@libipfix_110224/examples/example_collector_db.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<öây≥s.h
>

37 
	~<uni°d.h
>

38 
	~<°rög.h
>

39 
	~<î∫o.h
>

40 
	~<sys/sockë.h
>

41 
	~<sig«l.h
>

42 
	~<libgí.h
>

43 
	~<limôs.h
>

44 
	~<°d¨g.h
>

45 #ifde‡
HAVE_CONFIG_H


46 
	~"../c⁄fig.h
"

49 
	~<ùfix.h
>

50 
	~"ùfix_db.h
"

51 
	~"ùfix_cﬁ.h
"

52 
	~"ùfix_def_fokus.h
"

53 
	~"ùfix_fõlds_fokus.h
"

54 
	~"misc.h
"

58 
	#MYSQL_HOST
 "loˇlho°"

	)

59 
	#MYSQL_DBNAME
 "ùfix"

	)

60 
	#MYSQL_USER
 "ùfix"

	)

61 
	#MYSQL_PASSWORD
 "ùfix"

	)

65 
	g¥og«me
[30];

66 
	gvîbo£_Àvñ
 = 0;

67 *
	gt˝_s
=
NULL
, 
	g¡˝_s
=0;

71 
	$ußge
–*
èsk«me
)

73 c⁄° 
hñ±xt
[] =

81 
	`Ârötf
–
°dîr
, "\nipfixÉxample collector\n" );

82 
	`Ârötf
–
°dîr
, "\nußge: %†%s\n", 
èsk«me
, 
hñ±xt
);

84 
	}
}

86 
	$exô_func
 ( 
signo
 )

88 i‡–
vîbo£_Àvñ
 && 
signo
 )

89 
	`Ârötf
–
°dîr
, "\n[%s] gŸ signÿ%d, bye.\n\n", 
¥og«me
, 
signo
 );

91 i‡–
t˝_s
 ) {

92 
i
;

94  
i
=0; i<
¡˝_s
; i++ )

95 
	`˛o£
–
t˝_s
[
i
] );

98 
	`ùfix_cﬁ_˛ónup
();

99 
	`ùfix_˛ónup
();

100 
	`exô
( 1 );

102 
	}
}

106 
	$maö
 (
¨gc
, *
¨gv
[])

108 
p‹t
;

109 *
dbu£r
;

110 *
dbpw
;

111 *
db«me
;

112 *
dbho°
;

114 
¨g
;

115 
›t
[] = "hp:v";

120 
p‹t
 = 4739;

121 
dbho°
 = 
MYSQL_HOST
;

122 
db«me
 = 
MYSQL_DBNAME
;

123 
dbu£r
 = 
MYSQL_USER
;

124 
dbpw
 = 
MYSQL_PASSWORD
;

126 
	`¢¥ötf
–
¥og«me
, ’rog«me), "%s", 
	`ba£«me
–
¨gv
[0]) );

130  (
¨g
=
	`gë›t
–
¨gc
, 
¨gv
, 
›t
 )Ë!
EOF
 )

132 
¨g
)

135 i‡((
p‹t
=
	`©oi
(
›èrg
)) <0)

137 
	`Ârötf
–
°dîr
, "invalid -párgument!\n" );

138 
	`exô
(1);

143 
vîbo£_Àvñ
 ++;

148 
	`ußge
(
¥og«me
);

149 
	`exô
(1);

155 
	`mlog_£t_vÀvñ
–
vîbo£_Àvñ
 );

159 
	`sig«l
–
SIGKILL
, 
exô_func
 );

160 
	`sig«l
–
SIGTERM
, 
exô_func
 );

161 
	`sig«l
–
SIGINT
, 
exô_func
 );

165 i‡–
	`ùfix_öô
() <0 ) {

166 
	`Ârötf
–
°dîr
, "ùfix_öô(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

167 
	`exô
(1);

169 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_·_fokus
 ) <0 ) {

170 
	`Ârötf
–
°dîr
, "ùfix_add_õ(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

171 
	`ùfix_˛ónup
();

172 
	`exô
(1);

177 i‡–
	`ùfix_cﬁ_öô_mysqÀxp‹t
–
dbho°
, 
dbu£r
,

178 
dbpw
, 
db«me
 ) <0 ) {

179 
	`Ârötf
–
°dîr
, "cannot connectÅo database\n" );

180 
	`ùfix_˛ónup
();

181 
	`exô
(1);

186 i‡–
	`ùfix_cﬁ_li°í
–&
¡˝_s
, &
t˝_s
, 
IPFIX_PROTO_TCP
,

187 
p‹t
, 
AF_INET
, 10 ) <0 ) {

188 
	`Ârötf
–
°dîr
, "[%s] ipfix_listen(tcp) failed.\n",

189 
¥og«me
 );

195 (Ë
	`mpﬁl_lo›
( -1 );

197 
	`exô
(1);

198 
	}
}

	@libipfix_110224/examples/example_exporter.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<°rög.h
>

11 
	~<î∫o.h
>

13 
	~<ùfix.h
>

14 
	~<mlog.h
>

16 
	$maö
 ( 
¨gc
, **
¨gv
 )

18 *
›t°r
="hc:p:vstu";

19 
›t
;

20 
cho°
[256];

21 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

22 
j
;

23 
uöt32_t
 
byãs
 = 1234;

24 
buf
[31] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,

28 
ùfix_t
 *
ùfixh
 = 
NULL
;

29 
ùfix_ãm∂©e_t
 *
ùfixt
 = 
NULL
;

30 
sour˚id
 = 12345;

31 
p‹t
 = 
IPFIX_PORTNO
;

32 
vîbo£_Àvñ
 = 0;

35 
	`°r˝y
(
cho°
, "localhost");

39  ( 
›t
 = 
	`gë›t
–
¨gc
, 
¨gv
, 
›t°r
 ) ) !
EOF
 )

41  
›t
 )

44 i‡((
p‹t
=
	`©oi
(
›èrg
)) <0) {

45 
	`Ârötf
–
°dîr
, "Invalid -párgument!\n" );

46 
	`exô
(1);

51 
	`°r˝y
(
cho°
, 
›èrg
);

55 
¥Ÿocﬁ
 = 
IPFIX_PROTO_SCTP
;

59 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

63 
¥Ÿocﬁ
 = 
IPFIX_PROTO_UDP
;

67 
vîbo£_Àvñ
 ++;

72 
	`Ârötf
–
°dîr
, "usage: %s [-hstuv] [-c collector] [-pÖortno]\n"

80 
¨gv
[0], 
IPFIX_PORTNO
 );

81 
	`exô
(1);

87 
	`mlog_£t_vÀvñ
–
vîbo£_Àvñ
 );

91 i‡–
	`ùfix_öô
() <0) {

92 
	`Ârötf
–
°dîr
, "ˇ¬Ÿ inô ipfix moduÀ: %s\n", 
	`°ªº‹
(
î∫o
) );

93 
	`exô
(1);

98 i‡–
	`ùfix_›í
–&
ùfixh
, 
sour˚id
, 
IPFIX_VERSION
 ) <0 ) {

99 
	`Ârötf
–
°dîr
, "ùfix_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

100 
	`exô
(1);

105 i‡–
	`ùfix_add_cﬁÀ˘‹
–
ùfixh
, 
cho°
, 
p‹t
, 
¥Ÿocﬁ
 ) <0 ) {

106 
	`Ârötf
–
°dîr
, "ipfix_add_collector(%s,%d) failed: %s\n",

107 
cho°
, 
p‹t
, 
	`°ªº‹
(
î∫o
));

108 
	`exô
(1);

113 i‡–
	`ùfix_√w_d©a_ãm∂©e
–
ùfixh
, &
ùfixt
, 2 ) <0 ) {

114 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

115 
	`°ªº‹
(
î∫o
) );

116 
	`exô
(1);

118 i‡–(
	`ùfix_add_fõld
–
ùfixh
, 
ùfixt
,

119 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 )

120 || (
	`ùfix_add_fõld
–
ùfixh
, 
ùfixt
,

121 0, 
IPFIX_FT_PACKETDELTACOUNT
, 4 ) <0 ) ) {

122 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

123 
	`°ªº‹
(
î∫o
) );

124 
	`exô
(1);

129  
j
=0; j<10; j++ ) {

131 
	`¥ötf
–"[%d]Éxp‹àsomêd©®... ", 
j
 );

132 
	`fÊush
–
°dout
) ;

134 i‡–
	`ùfix_exp‹t
–
ùfixh
, 
ùfixt
, 
buf
, &
byãs
 ) <0 ) {

135 
	`Ârötf
–
°dîr
, "ipfix_export() failed: %s\n",

136 
	`°ªº‹
(
î∫o
) );

137 
	`exô
(1);

140 i‡–
	`ùfix_exp‹t_Êush
–
ùfixh
 ) <0 ) {

141 
	`Ârötf
–
°dîr
, "ipfix_export_flush() failed: %s\n",

142 
	`°ªº‹
(
î∫o
) );

143 
	`exô
(1);

146 
	`¥ötf
( "done.\n" );

147 
byãs
++;

148 
	`¶ìp
(1);

151 
	`¥ötf
( "dataÉxported.\n" );

155 
	`ùfix_dñëe_ãm∂©e
–
ùfixh
, 
ùfixt
 );

156 
	`ùfix_˛o£
–
ùfixh
 );

157 
	`ùfix_˛ónup
();

158 
	`exô
(0);

159 
	}
}

	@libipfix_110224/lib/ipfix.c

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<uni°d.h
>

47 
	~<°rög.h
>

48 
	~<î∫o.h
>

49 
	~<sig«l.h
>

50 
	~<limôs.h
>

51 
	~<°d¨g.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/sockë.h
>

54 
	~<sys/time.h
>

55 
	~<time.h
>

56 
	~<√töë/ö.h
>

57 #ifde‡
SCTPSUPPORT


58 
	~<√töë/s˘p.h
>

60 #i‚de‡
NOTHREADS


61 
	~<±hªad.h
>

63 
	~<f˙é.h
>

64 
	~<√tdb.h
>

66 
	~"libmisc/misc.h
"

67 
	~"ùfix.h
"

68 
	~"ùfix_fõlds.h
"

69 
	~"ùfix_ªvî£_fõlds.h
"

70 #ifde‡
SSLSUPPORT


71 
	~"ùfix_s¶.h
"

76 
	#NODEBUG


	)

77 
	#IPFIX_DEFAULT_BUFLEN
 1400

	)

79 #i‚de‡
NTOHLL


80 
uöt8_t
 
	gg_isLôéeEndün
 = 0;

81 
	$ã°Endü¬ess
() {

82 
uöt32_t
 
tmp
 = 0x0a0b0c0d;

83 
g_isLôéeEndün
 = (
tmp
 !
	`¡ohl
(tmp));

84 
	}
}

85 
	#HTONLL
(
vÆ
Ë(
g_isLôéeEndün
 ? ((
uöt64_t
)(
	`ht⁄l
((
uöt32_t
)((val)>>32))) | \

86 (((
uöt64_t
)
	`ht⁄l
((
uöt32_t
)((
vÆ
)&0xFFFFFFFF)))<<32)Ë: (vÆ))

	)

87 
	#NTOHLL
(
vÆ
Ë(
g_isLôéeEndün
 ? ((
uöt64_t
)(
	`¡ohl
((
uöt32_t
)((val)>>32))) | \

88 (((
uöt64_t
)
	`¡ohl
((
uöt32_t
)((
vÆ
)&0xFFFFFFFF)))<<32)Ë: (vÆ))

	)

91 
	#INSERTU16
(
b
,
l
,
vÆ
) \

92 { 
uöt16_t
 
_t
=
	`ht⁄s
((
vÆ
)); 
	`mem˝y
((
b
),&_t,2); (
l
)+=2; }

	)

93 
	#INSERTU32
(
b
,
l
,
vÆ
) \

94 { 
uöt32_t
 
_t
=
	`ht⁄l
((
vÆ
)); 
	`mem˝y
((
b
),&_t,4); (
l
)+=4; }

	)

99 c⁄° 
	gcvsid
[]="$Id: ipfix.c 996 2009-03-19 18:14:44Z csc $";

103 
	sùfixiobuf


105 
ùfixiobuf
 *
	m√xt
;

106 
size_t
 
	mbuÊí
;

107 
	mbuf„r
[
IPFIX_DEFAULT_BUFLEN
+
IPFIX_HDR_BYTES_NF9
];

108 } 
	tiobuf_t
;

110 
	sùfix_mesßge


112 
	mbuf„r
[
IPFIX_DEFAULT_BUFLEN
];

113 
	mƒec‹ds
;

114 
size_t
 
	moff£t
;

115 } 
	tùfix_mesßge_t
;

117 
	sùfix_node


119 
ùfix_node
 *
	m√xt
;

120 
ùfix_t
 *
	mifh
;

122 } 
	tùfix_node_t
;

124 
	scﬁÀ˘‹_node


126 
cﬁÀ˘‹_node
 *
	m√xt
;

127 
	mu£cou¡
;

129 *
	mcho°
;

130 
	m˝‹t
;

131 
ùfix_¥Ÿo_t
 
	m¥Ÿocﬁ
;

132 
	mfd
;

133 
	ms¶_Êag
;

134 #ifde‡
SSLSUPPORT


135 
ùfix_s¶_›ts_t
 *
	ms¶_›ts
;

136 
BIO
 *
	mbio
;

137 
SSL_CTX
 *
	m˘x
;

138 
SSL
 *
	ms¶
;

140 
sockaddr
 *
	mto
;

141 
sockÀn_t
 
	mtﬁí
;

142 
time_t
 
	mœ°ac˚ss
;

143 
ùfix_mesßge_t
 
	mmesßge
;

145 } 
	tùfix_cﬁÀ˘‹_t
;

147 
time_t
 
	gg_t°¨t
 = 0;

148 
iobuf_t
 
	gg_iobuf
[2], *
	gg_buÊi°
 =
NULL
;

149 
ùfix_cﬁÀ˘‹_t
 *
	gg_cﬁÀ˘‹s
 =
NULL
;

150 
ùfix_node_t
 *
	gg_ùfixli°
 =
NULL
;

151 
uöt16_t
 
	gg_œ°tid
;

152 
ùfix_d©¨ec‹d_t
 
	gg_d©a
 = { 
NULL
, NULL, 0 };

154 
ùfix_fõld_t
 *
	gg_ùfix_fõlds
;

155 #i‚de‡
NOTHREADS


156 
±hªad_muãx_t
 
	gg_muãx
;

157 
	#mod_lock
() { \

158 i‡–
	`±hªad_muãx_lock
–&
g_muãx
 ) !=0 ) \

159 
	`mlogf
( 0, "[ipfix] mutex_lock() failed: %s\n", \

160 
	`°ªº‹
–
î∫o
 ) ); \

161 }

	)

162 
	#mod_u∆ock
(Ë{ 
	`±hªad_muãx_u∆ock
–&
g_muãx
 ); }

	)

164 
	#mod_lock
()

	)

165 
	#mod_u∆ock
()

	)

170 
_ùfix_dr›_cﬁÀ˘‹
–
ùfix_cﬁÀ˘‹_t
 **
cﬁ
 );

171 
_ùfix_wrôe_ãm∂©e
–
ùfix_t
 *
ifh
, 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
,

172 
ùfix_ãm∂©e_t
 *
ãm∂
 );

173 
_ùfix_£nd_mesßge
–
ùfix_t
 *
ifh
, 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
, 
Êag
,

174 
ùfix_mesßge_t
 *
mesßge
 );

175 
_ùfix_wrôe_msghdr
–
ùfix_t
 *
ifh
, 
ùfix_mesßge_t
 *
msg
, 
iobuf_t
 *
buf
 );

176 
_ùfix_disc⁄√˘
–
ùfix_cﬁÀ˘‹_t
 *
cﬁ
 );

177 
_ùfix_exp‹t_Êush
–
ùfix_t
 *
ifh
 );

187 #ifde‡
NONBLOCKING_TCP


188 
	$do_wrôe£À˘
–
fd
, 
£c
, *
Êag
 )

190 
fd_£t
 
≥rm
;

191 
fds
;

192 
timevÆ
 
timeout
;

194 
	`FD_ZERO
(&
≥rm
);

195 
	`FD_SET
(
fd
, &
≥rm
);

196 
fds
 = 
fd
 +1;

198 
timeout
.
tv_£c
 = 
£c
;

199 
timeout
.
tv_u£c
 = 1;

201 i‡–
	`£À˘
(
fds
, 
NULL
, &
≥rm
, NULL, &
timeout
 ) <0 ) {

202 *
Êag
 = 0;

206 *
Êag
 = 
	`FD_ISSET
(
fd
, &
≥rm
);

208 
	}
}

219 
	$do_wrôí
–
ùfix_cﬁÀ˘‹_t
 *
cﬁ
, *
±r
, 
nbyãs
 )

221 
∆e·
, 
nwrôãn
;

222 #ifde‡
DEBUG


223 
i
;

225  
i
=0; i<
nbyãs
; i++ )

226 
	`Ârötf
–
°dîr
, "[%02x]", (
±r
[
i
]&0xFF) );

227 
	`Ârötf
–
°dîr
, "\n" );

230 
∆e·
 = 
nbyãs
;

231 
∆e·
 > 0) {

232 i‡–
cﬁ
->
s¶_Êag
 == 0 ) {

233 
nwrôãn
 = 
	`wrôe
–
cﬁ
->
fd
, 
±r
, 
∆e·
);

234 i‡–
nwrôãn
 <= 0 )

235  ( 
nwrôãn
 );

237 #ifde‡
SSLSUPPORT


239 
nwrôãn
 = 
	`SSL_wrôe
–
cﬁ
->
s¶
, 
±r
, 
∆e·
 );

240 i‡–
nwrôãn
 <= 0 ) {

242 
îr
 = 
	`SSL_gë_îr‹
–
cﬁ
->
s¶
, 
nwrôãn
 );

243  
îr
 ) {

244 
SSL_ERROR_SSL
:

245 
	`_ùfix_disc⁄√˘
–
cﬁ
 );

248 
	`mlogf
–0, "[ùfix] s¶_wrôêÁûed: %d\n", 
îr
 );

249 
	`_ùfix_disc⁄√˘
–
cﬁ
 );

252  ( 
nwrôãn
 );

256 
∆e·
 -
nwrôãn
;

257 
±r
 +
nwrôãn
;

259 (
nbyãs
 - 
∆e·
);

260 
	}
}

262 #ifde‡
INCR_RXTX_BUFSIZE


265 
	$_ad≠t_¢dbuf
–
sock
 )

267 
sockbufsize
;

268 
sockÀn_t
 
Àn
 = (
sockbufsize
);

270 
sockbufsize
 = 0;

271 i‡–
	`gësock›t
–
sock
, 
SOL_SOCKET
, 
SO_SNDBUF
,

272 (*)&
sockbufsize
, &
Àn
 )==0 ) {

273 
	`mlogf
–4, "[ùfix] deÁu… sndbu‡i†%dkB\n", 
sockbufsize
/1024 );

275 
sockbufsize
 = 131072;

276 i‡–
	`£tsock›t
–
sock
, 
SOL_SOCKET
, 
SO_SNDBUF
,

277 (*)&
sockbufsize
, 
Àn
 ) <0 ) {

278 
	`mlogf
–0, "[ùfix] sësock›t(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

281 
	`mlogf
–3, "[ùfix] së sndbu‡tÿ%dkB\n", 
sockbufsize
/1024 );

282 
sockbufsize
 = 0;

283 i‡–
	`gësock›t
–
sock
, 
SOL_SOCKET
, 
SO_SNDBUF
,

284 (*)&
sockbufsize
, &
Àn
 )==0 ) {

285 
	`mlogf
–4, "[ùfix] sndbu‡i†now %dkB\n", 
sockbufsize
/1024 );

289 
	}
}

292 
	$_c⁄√˘_n⁄b
–
sockfd
, 
sockaddr
 *
ß±r
,

293 
sockÀn_t
 
ßÀn
, 
£c
)

295 
Êags
, 
n
, 
îr‹
;

296 
sockÀn_t
 
Àn
;

297 
fd_£t
 
r£t
, 
w£t
;

298 
timevÆ
 
tvÆ
;

300 
Êags
 = 
	`f˙é
(
sockfd
, 
F_GETFL
, 0);

301 i‡–(
Êags
==-1Ë|| (
	`f˙é
(
sockfd
, 
F_SETFL
, fœg†| 
O_NONBLOCK
) <0) )

304 
îr‹
 = 0;

305 i‡–(
n
 = 
	`c⁄√˘
(
sockfd
, (
sockaddr
 *Ë
ß±r
, 
ßÀn
)) < 0)

306 i‡(
î∫o
 !
EINPROGRESS
)

311 i‡(
n
 == 0)

312 
d⁄e
;

314 
	`FD_ZERO
(&
r£t
);

315 
	`FD_SET
(
sockfd
, &
r£t
);

316 
w£t
 = 
r£t
;

317 
tvÆ
.
tv_£c
 = 
£c
;

318 
tvÆ
.
tv_u£c
 = 0;

320 i‡–(
n
=
	`£À˘
(
sockfd
+1, &
r£t
, &
w£t
, 
NULL
, 
£c
 ? &
tvÆ
 : NULL)) == 0) {

321 
î∫o
 = 
ETIMEDOUT
;

325 i‡(
	`FD_ISSET
(
sockfd
, &
r£t
Ë|| FD_ISSET(sockfd, &
w£t
)) {

326 
Àn
 = (
îr‹
);

327 i‡(
	`gësock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr‹
, &
Àn
) < 0)

330 
	`mlogf
( 0, "[ipfix] selectÉrror: sockfdÇot set");

332 
d⁄e
:

333 i‡–
	`f˙é
(
sockfd
, 
F_SETFL
, 
Êags
) <0 )

334 
	`mlogf
–0, "[ùfix] fn˘»Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

336 i‡(
îr‹
) {

337 
î∫o
 = 
îr‹
;

341 
	}
}

343 
iobuf_t
 *
	$_ùfix_gëbuf
 ( )

345 
iobuf_t
 *
b
 = 
g_buÊi°
;

347 i‡–
b
 ) {

348 
g_buÊi°
 = 
b
->
√xt
;

349 
b
->
√xt
 = 
NULL
;

352  
b
;

353 
	}
}

355 
	$_ùfix_‰ìbuf
–
iobuf_t
 *
b
 )

357 i‡–
b
 ) {

358 
b
->
√xt
 = 
g_buÊi°
;

359 
g_buÊi°
 = 
b
;

361 
	}
}

363 
	$_‰ì_fõld_ty≥s
–
ùfix_fõld_t
 **
Êi°
 )

365 
ùfix_fõld_t
 *
tmp
, *
n
 = *
Êi°
;

367  
n
 ) {

368 
tmp
 = 
n
->
√xt
;

369 
	`‰ì
–
n
 );

370 
n
 = 
tmp
;

373 *
Êi°
 = 
NULL
;

374 
	}
}

379 
	$ùfix_ícode_öt
–*
ö
, *
out
, 
size_t
 
Àn
 )

381 *
i
 = (*Ë
ö
;

382 *
o
 = (*Ë
out
;

383 
uöt16_t
 
tmp16
;

384 
uöt32_t
 
tmp32
;

385 
uöt64_t
 
tmp64
;

387  
Àn
 )

390 
o
[0] = 
i
[0];

393 
	`mem˝y
–&
tmp16
, 
i
, 
Àn
 );

394 
tmp16
 = 
	`ht⁄s
(Åmp16 );

395 
	`mem˝y
–
out
, &
tmp16
, 
Àn
 );

398 
	`mem˝y
–&
tmp32
, 
i
, 
Àn
 );

399 
tmp32
 = 
	`ht⁄l
(Åmp32 );

400 
	`mem˝y
–
out
, &
tmp32
, 
Àn
 );

403 
	`mem˝y
–&
tmp64
, 
i
, 
Àn
 );

404 
tmp64
 = 
	`HTONLL
(Åmp64 );

405 
	`mem˝y
–
out
, &
tmp64
, 
Àn
 );

408 
	`mem£t
–
out
, 0xff, 
Àn
 );

412 
	}
}

414 
	$ùfix_decode_öt
–*
ö
, *
out
, 
size_t
 
Àn
 )

416 *
i
 = (*Ë
ö
;

417 *
o
 = (*Ë
out
;

418 
uöt16_t
 
tmp16
;

419 
uöt32_t
 
tmp32
;

420 
uöt64_t
 
tmp64
;

422  
Àn
 )

425 
o
[0] = 
i
[0];

428 
	`mem˝y
–&
tmp16
, 
i
, 
Àn
 );

429 
tmp16
 = 
	`¡ohs
(Åmp16 );

430 
	`mem˝y
–
out
, &
tmp16
, 
Àn
 );

433 
	`mem˝y
–&
tmp32
, 
i
, 
Àn
 );

434 
tmp32
 = 
	`¡ohl
(Åmp32 );

435 
	`mem˝y
–
out
, &
tmp32
, 
Àn
 );

438 
	`mem˝y
–&
tmp64
, 
i
, 
Àn
 );

439 
tmp64
 = 
	`NTOHLL
(Åmp64 );

440 
	`mem˝y
–
out
, &
tmp64
, 
Àn
 );

443 
	`mem£t
–
out
, 0xff, 
Àn
 );

447 
	}
}

449 
	$ùfix_¢¥öt_öt
–*
°r
, 
size_t
 
size
, *
d©a
, size_à
Àn
 )

451 
öt8_t
 
tmp8
;

452 
öt16_t
 
tmp16
;

453 
öt32_t
 
tmp32
;

454 
öt64_t
 
tmp64
;

456  
Àn
 ) {

458 
	`mem˝y
–&
tmp8
, 
d©a
, 
Àn
 );

459  
	`¢¥ötf
–
°r
, 
size
, "%d", 
tmp8
 );

461 
	`mem˝y
–&
tmp16
, 
d©a
, 
Àn
 );

463  
	`¢¥ötf
–
°r
, 
size
, "%d", 
tmp16
 );

465 
	`mem˝y
–&
tmp32
, 
d©a
, 
Àn
 );

467  
	`¢¥ötf
–
°r
, 
size
, "%d", ()
tmp32
 );

469 
	`mem˝y
–&
tmp64
, 
d©a
, 
Àn
 );

471  
	`¢¥ötf
–
°r
, 
size
, "%Œd", ()
tmp64
 );

475  
	`¢¥ötf
–
°r
, 
size
, "err" );

476 
	}
}

478 
	$ùfix_¢¥öt_uöt
–*
°r
, 
size_t
 
size
, *
d©a
, size_à
Àn
 )

480 
uöt8_t
 
tmp8
;

481 
uöt16_t
 
tmp16
;

482 
uöt32_t
 
tmp32
;

483 
uöt64_t
 
tmp64
;

485  
Àn
 ) {

487 
	`mem˝y
–&
tmp8
, 
d©a
, 
Àn
 );

488  
	`¢¥ötf
–
°r
, 
size
, "%u", 
tmp8
 );

490 
	`mem˝y
–&
tmp16
, 
d©a
, 
Àn
 );

492  
	`¢¥ötf
–
°r
, 
size
, "%u", 
tmp16
 );

494 
	`mem˝y
–&
tmp32
, 
d©a
, 
Àn
 );

496  
	`¢¥ötf
–
°r
, 
size
, "%u", ()
tmp32
 );

498 
	`mem˝y
–&
tmp64
, 
d©a
, 
Àn
 );

500  
	`¢¥ötf
–
°r
, 
size
, "%Œu", ()
tmp64
 );

504  
	`¢¥ötf
–
°r
, 
size
, "err" );

505 
	}
}

507 
	$ùfix_ícode_byãs
–*
ö
, *
out
, 
size_t
 
Àn
 )

509 i‡–
ö
 !
out
 )

510 
	`mem˝y
–
out
, 
ö
, 
Àn
 );

512 
	}
}

514 
	$ùfix_decode_byãs
–*
ö
, *
out
, 
size_t
 
Àn
 )

516 i‡–
ö
 !
out
 )

517 
	`mem˝y
–
out
, 
ö
, 
Àn
 );

519 
	}
}

521 
	$ùfix_¢¥öt_byãs
–*
°r
, 
size_t
 
size
, *
d©a
, size_à
Àn
 )

523 
size_t
 
i
, 
n
 = 0;

524 
uöt8_t
 *
ö
 = (uöt8_t*Ë
d©a
;

526 i‡–
size
 < 4 )

527  
	`¢¥ötf
–
°r
, 
size
, "err" );

529  ((
Àn
*2Ë+ 2Ë> 
size
 )

530 
Àn
--;

532 
	`•rötf
–
°r
, "0x" );

533 
n
 = 2;

534  
i
=0; i<
Àn
; i++ ) {

535 
	`•rötf
–
°r
+
n
, "%02x", *
ö
 );

536 
n
 += 2;

537 
ö
++;

539  
n
;

540 
	}
}

542 
	$ùfix_¢¥öt_°rög
–*
°r
, 
size_t
 
size
, *
d©a
, size_à
Àn
 )

544 
ssize_t
 
i
;

545 
uöt8_t
 *
ö
 = (uöt8_t*Ë
d©a
;

547  
i
=
Àn
-1; i>=0; i-- ) {

548 i‡–
ö
[
i
] == '\0' ) {

549  
	`¢¥ötf
–
°r
, 
size
, "%s", 
ö
 );

553 i‡–
Àn
 < 
size
 ) {

554 
	`mem˝y
–
°r
, 
ö
, 
Àn
 );

555 
°r
[
Àn
] = '\0';

556  
Àn
;

559  
	`¢¥ötf
–
°r
, 
size
, "err" );

560 
	}
}

562 
	$ùfix_¢¥öt_ùaddr
–*
°r
, 
size_t
 
size
, *
d©a
, size_à
Àn
 )

564 
uöt8_t
 *
ö
 = (uöt8_t*)
d©a
;

565 
tmpbuf
[100];

567  
Àn
 ) {

569  
	`¢¥ötf
–
°r
, 
size
, "%u.%u.%u.%u",

570 
ö
[0], in[1], in[2], in[3] );

575 
uöt16_t
 
i
, 
tmp16
;

577  
i
=0, *
tmpbuf
=0; i<16; i+=2 ) {

578 
	`mem˝y
–&
tmp16
, (*)
d©a
+
i
, 2 );

579 
tmp16
 = 
	`ht⁄s
(Åmp16 );

580 
	`•rötf
–
tmpbuf
+
	`°æí
—mpbuf), "%s%x", 
i
?":":"", 
tmp16
 );

582  
	`¢¥ötf
–
°r
, 
size
, "%s", 
tmpbuf
 );

586  
	`ùfix_¢¥öt_byãs
–
°r
, 
size
, 
d©a
, 
Àn
 );

588 
	}
}

590 
	$ùfix_ícode_Êﬂt
–*
ö
, *
out
, 
size_t
 
Àn
 )

592 
uöt32_t
 
tmp32
;

593 
uöt64_t
 
tmp64
;

595  
Àn
 ) {

597 
	`mem˝y
–&
tmp32
, 
ö
, 
Àn
 );

598 
tmp32
 = 
	`ht⁄l
(Åmp32 );

599 
	`mem˝y
–
out
, &
tmp32
, 
Àn
 );

602 
	`mem˝y
–&
tmp64
, 
ö
, 
Àn
 );

603 
tmp64
 = 
	`HTONLL
(Åmp64 );

604 
	`mem˝y
–
out
, &
tmp64
, 
Àn
 );

607 
	`mem£t
–
out
, 0xff, 
Àn
 );

612 
	}
}

614 
	$ùfix_decode_Êﬂt
–*
ö
, *
out
, 
size_t
 
Àn
 )

616  
	`ùfix_ícode_Êﬂt
–
ö
, 
out
, 
Àn
 );

617 
	}
}

619 
	$ùfix_¢¥öt_Êﬂt
–*
°r
, 
size_t
 
size
, *
d©a
, size_à
Àn
 )

624  
Àn
 ) {

627  
	`¢¥ötf
–
°r
, 
size
, "%f", *(*)
d©a
 );

630  
	`¢¥ötf
–
°r
, 
size
, "%lf", *(*)
d©a
);

635  
	`¢¥ötf
–
°r
, 
size
, "err" );

636 
	}
}

640 
	$ùfix_‰ì_unknown_·öfo
–
ùfix_fõld_t
 *
f
 )

642 i‡–
f
 ) {

643 i‡–
f
->
·
 ) {

644 i‡–
f
->
·
->
«me
 )

645 
	`‰ì
–
f
->
·
->
«me
 );

646 i‡–
f
->
·
->
documíèti⁄
 )

647 
	`‰ì
–
f
->
·
->
documíèti⁄
 );

648 
	`‰ì
–
f
->
·
 );

650 
	`‰ì
–
f
 );

652 
	}
}

658 
ùfix_fõld_t
 *
	$ùfix_¸óã_unknown_·öfo
–
ío
, 
ty≥
 )

660 
ùfix_fõld_t
 *
f
;

661 
ùfix_fõld_ty≥_t
 *
·
;

662 
tmpbuf
[50];

664 i‡–(
f
=
	`ˇŒoc
(1, (
ùfix_fõld_t
))Ë==
NULL
 ) {

665  
NULL
;

667 i‡–(
·
=
	`ˇŒoc
(1, (
ùfix_fõld_ty≥_t
))Ë==
NULL
 ) {

668 
	`‰ì
–
f
 );

669  
NULL
;

672 
	`•rötf
–
tmpbuf
, "%u_%u", 
ío
, 
ty≥
 );

673 
·
->
«me
 = 
	`°rdup
–
tmpbuf
 );

674 
·
->
documíèti⁄
 = 
	`°rdup
–
tmpbuf
 );

675 
·
->
ío
 =Éno;

676 
·
->
·y≥
 = 
ty≥
;

677 
·
->
codög
 = 
IPFIX_CODING_BYTES
;

679 
f
->
√xt
 = 
NULL
;

680 
f
->
·
 = ft;

681 
f
->
ícode
 = 
ùfix_ícode_byãs
;

682 
f
->
decode
 = 
ùfix_decode_byãs
;

683 
f
->
¢¥öt
 = 
ùfix_¢¥öt_byãs
;

685  
f
;

686 
	}
}

692 
ùfix_fõld_t
 *
	$ùfix_gë_·öfo
–
ío
, 
ty≥
 )

694 
ùfix_fõld_t
 *
ñems
 = 
g_ùfix_fõlds
;

696  
ñems
 ) {

697 if–(
ñems
->
·
->
·y≥
 =
ty≥
Ë&& (ñems->·->
ío
==eno) )

698  
ñems
;

700 
ñems
 =ÉÀms->
√xt
;

703  
NULL
;

704 
	}
}

706 
	$ùfix_gë_ío_õid
–*
fõld
, *
ío
, *
õid
 )

708 
ùfix_fõld_t
 *
ñems
 = 
g_ùfix_fõlds
;

710  
ñems
 ) {

711 if–
	`°rˇ£cmp
–
fõld
, 
ñems
->
·
->
«me
) ==0) {

712 *
ío
 = 
ñems
->
·
->eno;

713 *
õid
 = 
ñems
->
·
->
·y≥
;

716 
ñems
 =ÉÀms->
√xt
;

720 
	}
}

727 
	$ùfix_öô
( )

731 
	`ã°Endü¬ess
();

733 i‡–
g_t°¨t
 ) {

734 
	`ùfix_˛ónup
();

737 #i‚de‡
NOTHREADS


738 i‡–
	`±hªad_muãx_öô
–&
g_muãx
, 
NULL
 ) !=0 ) {

739 
	`mlogf
( 0, "[ipfix]Öthread_mutex_init() failed: %s\n",

740 
	`°ªº‹
(
î∫o
) );

744 
g_t°¨t
 = 
	`time
(
NULL
);

745 
	`sig«l
–
SIGPIPE
, 
SIG_IGN
 );

746 
g_œ°tid
 = 255;

751 
g_buÊi°
 = &(
g_iobuf
[0]);

752 
g_iobuf
[0].
√xt
 = &(g_iobuf[1]);

753 
g_iobuf
[1].
√xt
 = 
NULL
;

760 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_fõld_ty≥s
 ) <0 ) {

764 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_ªvî£_fõld_ty≥s
 ) <0 ) {

769 
	}
}

778 
	$ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_fõld_ty≥_t
 *
fõlds
 )

780 
ùfix_fõld_ty≥_t
 *
·
;

781 
ùfix_fõld_t
 *
n
;

783 i‡–! 
g_t°¨t
 ) {

784 i‡–
	`ùfix_öô
() < 0 )

790 
·
 = 
fõlds
;

791  
·
->
·y≥
 !=0 ) {

794 i‡((
n
=
	`ˇŒoc
–1, (
ùfix_fõld_t
))Ë==
NULL
 )

795 
îr
;

796 
n
->
·
 = ft;

797 i‡–
·
->
codög
 =
IPFIX_CODING_INT
 ) {

798 
n
->
ícode
 = 
ùfix_ícode_öt
;

799 
n
->
decode
 = 
ùfix_decode_öt
;

800 
n
->
¢¥öt

ùfix_¢¥öt_öt
;

802 i‡–
·
->
codög
 =
IPFIX_CODING_UINT
 ) {

803 
n
->
ícode
 = 
ùfix_ícode_öt
;

804 
n
->
decode
 = 
ùfix_decode_öt
;

805 
n
->
¢¥öt

ùfix_¢¥öt_uöt
;

807 i‡–
·
->
codög
 =
IPFIX_CODING_NTP
 ) {

808 
n
->
ícode
 = 
ùfix_ícode_öt
;

809 
n
->
decode
 = 
ùfix_decode_öt
;

810 
n
->
¢¥öt

ùfix_¢¥öt_uöt
;

812 i‡–
·
->
codög
 =
IPFIX_CODING_FLOAT
 ) {

813 
n
->
ícode
 = 
ùfix_ícode_Êﬂt
;

814 
n
->
decode
 = 
ùfix_decode_Êﬂt
;

815 
n
->
¢¥öt

ùfix_¢¥öt_Êﬂt
;

817 i‡–
·
->
codög
 =
IPFIX_CODING_IPADDR
 ) {

818 
n
->
ícode
 = 
ùfix_ícode_byãs
;

819 
n
->
decode
 = 
ùfix_decode_byãs
;

820 
n
->
¢¥öt

ùfix_¢¥öt_ùaddr
;

822 i‡–
·
->
codög
 =
IPFIX_CODING_STRING
 ) {

823 
n
->
ícode
 = 
ùfix_ícode_byãs
;

824 
n
->
decode
 = 
ùfix_decode_byãs
;

825 
n
->
¢¥öt

ùfix_¢¥öt_°rög
;

828 
n
->
ícode
 = 
ùfix_ícode_byãs
;

829 
n
->
decode
 = 
ùfix_decode_byãs
;

830 
n
->
¢¥öt

ùfix_¢¥öt_byãs
;

835 i‡–
g_ùfix_fõlds
 ) {

836 
n
->
√xt
 = 
g_ùfix_fõlds
;

837 
g_ùfix_fõlds
 = 
n
;

840 
n
->
√xt
 = 
NULL
;

841 
g_ùfix_fõlds
 = 
n
;

843 
·
++;

846 
îr
:

848 
	`_‰ì_fõld_ty≥s
–&
g_ùfix_fõlds
 );

853 
	}
}

855 
	$ùfix_˛ónup
 ( )

857  
g_ùfixli°
 ) {

858 
	`ùfix_˛o£
–
g_ùfixli°
->
ifh
 );

860 
	`_‰ì_fõld_ty≥s
–&
g_ùfix_fõlds
 );

861 
g_t°¨t
 = 0;

862 i‡–
g_d©a
.
Àns
 ) 
	`‰ì
( g_data.lens );

863 i‡–
g_d©a
.
addrs
 ) 
	`‰ì
( g_data.addrs );

864 
g_d©a
.
maxfõlds
 = 0;

865 
g_d©a
.
Àns
 = 
NULL
;

866 
g_d©a
.
addrs
 = 
NULL
;

867 #i‚de‡
NOTHREADS


868 ()
	`±hªad_muãx_de°roy
–&
g_muãx
 );

870 
	}
}

872 
	$_ùfix_c⁄√˘
 ( 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
 )

874 *
£rvî
 = 
cﬁ
->
cho°
;

875 
p‹t
 = 
cﬁ
->
˝‹t
;

876 
sockty≥
, 
sock¥Ÿo
;

877 
sock
 = -1;

878 #ifde‡
INET6


879 
addröfo
 *
ªs
, *
aù
;

880 
addröfo
 
höts
;

881 
p‹t°r
[30];

882 
îr‹
;

884 
sockaddr_ö
 
£rv_addr
;

885 
ho°ít
 *
h
;

888  
cﬁ
->
¥Ÿocﬁ
 ) {

889 
IPFIX_PROTO_TCP
:

890 
sockty≥
 = 
SOCK_STREAM
;

891 
sock¥Ÿo
= 0;

893 
IPFIX_PROTO_UDP
:

894 
sockty≥
 = 
SOCK_DGRAM
;

895 
sock¥Ÿo
= 0;

897 #ifde‡
SCTPSUPPORT


898 
IPFIX_PROTO_SCTP
:

899 
sockty≥
 = 
SOCK_SEQPACKET
;

900 
sock¥Ÿo

IPPROTO_SCTP
;

904 
î∫o
 = 
ENOTSUP
;

905 
cﬁ
->
fd
 = -1;

909 i‡–
cﬁ
->
fd
 >= 0 )

912 #ifde‡
INET6


915 
	`mem£t
–&
höts
, 0,  (hints));

916 
höts
.
ai_sockty≥
 = 
sockty≥
;

917 
höts
.
ai_Ámûy
 = 
PF_UNSPEC
;

918 
	`•rötf
–
p‹t°r
, "%d", 
p‹t
 );

919 #ifde‡
SCTPSUPPORT


920 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

921 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

922 
höts
.
ai_¥Ÿocﬁ
 = 0;

925 
îr‹
 = 
	`gëaddröfo
(
£rvî
, 
p‹t°r
, &
höts
, &
ªs
);

926 i‡(
îr‹
 != 0) {

927 
	`mlogf
( 0, "[ipfix] getaddrinfo( %s, %s ) failed: %s\n",

928 
£rvî
, 
p‹t°r
, 
	`gai_°ªº‹
(
îr‹
) );

932 
aù
 = 
ªs
;áù !
NULL
;áù =áù->
ai_√xt
) {

936 #ifde‡
SCTPSUPPORT


937 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

938 
aù
->
ai_sockty≥
 = 
sockty≥
;

939 
aù
->
ai_¥Ÿocﬁ
 = 
sock¥Ÿo
;

942 
sock
 = 
	`sockë
(
aù
->
ai_Ámûy
,áù->
ai_sockty≥
,áù->
ai_¥Ÿocﬁ
);

943 i‡(
sock
 == -1) {

944 
	`mlogf
–0, "[ùfix] sockë(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

945 
	`‰ìaddröfo
(
ªs
);

948 #ifde‡
INCR_RXTX_BUFSIZE


949 ()
	`_ad≠t_¢dbuf
–
sock
 );

951 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_TCP
 ) {

953 i‡–
	`_c⁄√˘_n⁄b
–
sock
, 
aù
->
ai_addr
,áù->
ai_addæí
, 2) <0) {

954 
	`mlogf
( 2, "[ipfix] %scannot connectÅo %s: %s\n",

955 (
aù
->
ai_Ámûy
==
AF_INET6
)?"IPv6 "

956 :(
aù
->
ai_Ámûy
==
AF_INET
)?"IPv4 ":"",

957 
£rvî
, 
	`°ªº‹
(
î∫o
) );

958 
	`˛o£
(
sock
);

959 
sock
 = -1;

962 #ifde‡
DEBUG


964 
	`mlogf
( 2, "[ipfix] %sconnectedÅo %s\n",

965 (
aù
->
ai_Ámûy
==
AF_INET6
)?"IPv6 "

966 :(
aù
->
ai_Ámûy
==
AF_INET
)?"IPv4 ":"", 
£rvî
 );

970 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_UDP
 ) {

973 i‡–(
cﬁ
->
to
=
	`ˇŒoc
–1, 
aù
->
ai_addæí
 )Ë==
NULL
) {

974 
	`˛o£
(
sock
);

975 
	`‰ìaddröfo
(
ªs
);

978 
	`mem˝y
–
cﬁ
->
to
, 
aù
->
ai_addr
,áù->
ai_addæí
 );

979 
cﬁ
->
tﬁí
 = 
aù
->
ai_addæí
;

981 #ifde‡
SCTPSUPPORT


982 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

983 
s˘p_evít_subs¸ibe
 
evíts
;

986 i‡–(
cﬁ
->
to
=
	`ˇŒoc
–1, 
aù
->
ai_addæí
 )Ë==
NULL
) {

987 
	`˛o£
(
sock
);

988 
	`‰ìaddröfo
(
ªs
);

991 
	`mem˝y
–
cﬁ
->
to
, 
aù
->
ai_addr
,áù->
ai_addæí
 );

992 
cﬁ
->
tﬁí
 = 
aù
->
ai_addæí
;

995 
	`mem£t
–&
evíts
, 0, (events) );

996 
evíts
.
s˘p_d©a_io_evít
 = 1;

997 i‡–
	`£tsock›t
–
sock
, 
IPPROTO_SCTP
, 
SCTP_EVENTS
,

998 &
evíts
, (events) ) <0 ) {

999 
	`mlogf
( 0, "[ipfix] setsockopt() failed: %s\n",

1000 
	`°ªº‹
(
î∫o
) );

1001 
	`˛o£
(
sock
);

1002 
	`‰ìaddröfo
(
ªs
);

1009 
	`‰ìaddröfo
(
ªs
);

1013 i‡–(
h
=
	`gëho°by«me
(
£rvî
)Ë==
NULL
) {

1014 
	`mlogf
( 0, "[ipfix] cannot getáddress of host '%s': %s\n",

1015 
£rvî
, 
	`h°ªº‹
(
h_î∫o
) );

1016 
î∫o
 = 
EINVAL
;

1019 
	`mem£t
((*)&
£rv_addr
, 0, (serv_addr));

1020 
	`mem˝y
(&(
£rv_addr
.
sö_addr
), 
h
->
h_addr
, (
ö_addr
));

1021 
£rv_addr
.
sö_Ámûy
 = 
AF_INET
;

1022 
£rv_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1026 i‡–(
sock
=
	`sockë
–
AF_INET
, 
sockty≥
, 
sock¥Ÿo
)) <0 ) {

1027 
	`mlogf
–0, "[ùfix] sockë(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

1030 #ifde‡
INCR_RXTX_BUFSIZE


1031 ()
	`_ad≠t_¢dbuf
–
sock
 );

1033 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_TCP
 ) {

1036 i‡–
	`_c⁄√˘_n⁄b
–
sock
, (
sockaddr
 *)&
£rv_addr
,

1037 (
£rv_addr
), 2 ) < 0) {

1038 
	`˛o£
–
sock
 );

1039 
sock
 = -1;

1042 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_UDP
 ) {

1045 i‡–(
cﬁ
->
to
=
	`ˇŒoc
–1, (
£rv_addr
Ë)Ë==
NULL
) {

1046 
	`˛o£
(
sock
);

1049 
	`mem˝y
–
cﬁ
->
to
, &
£rv_addr
, (serv_addr) );

1050 
cﬁ
->
tﬁí
 = (
£rv_addr
);

1052 #ifde‡
SCTPSUPPORT


1053 i‡–
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

1054 
s˘p_evít_subs¸ibe
 
evíts
;

1057 i‡–(
cﬁ
->
to
=
	`ˇŒoc
–1, (
£rv_addr
Ë)Ë==
NULL
) {

1058 
	`˛o£
(
sock
);

1061 
	`mem˝y
–
cﬁ
->
to
, &
£rv_addr
, (serv_addr) );

1062 
cﬁ
->
tﬁí
 = (
£rv_addr
);

1065 
	`mem£t
–&
evíts
, 0, (events) );

1066 
evíts
.
s˘p_d©a_io_evít
 = 1;

1067 i‡–
	`£tsock›t
–
sock
, 
IPPROTO_SCTP
, 
SCTP_EVENTS
,

1068 &
evíts
, (events) ) <0 ) {

1069 
	`mlogf
–0, "[ùfix] sësock›t(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

1070 
	`˛o£
(
sock
);

1077 i‡(
sock
 <0 ) {

1078 
	`mlogf
( 1, "[ipfix] cannot connectÅo %s: %s\n",

1079 
£rvî
, 
	`°ªº‹
(
î∫o
) );

1082 #ifde‡
SSLSUPPORT


1083 i‡–
cﬁ
->
s¶_Êag
 ) {

1084 
îr
;

1086 i‡–
cﬁ
->
˘x
 =
NULL
 ) {

1089 i‡–
	`ùfix_s¶_£tup_˛õ¡_˘x
–&
cﬁ
->
˘x
,

1090 
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_UDP
?

1091 
	`DTLSv1_˛õ¡_mëhod
():

1092 
	`SSLv23_mëhod
(),

1093 
cﬁ
->
s¶_›ts
 ) <0 ) {

1094 
îr
;

1098  
cﬁ
->
¥Ÿocﬁ
 ) {

1099 
IPFIX_PROTO_TCP
:

1100 i‡–(
cﬁ
->
bio
=
	`BIO_√w_sockë
–
sock
, 
BIO_NOCLOSE
 )Ë==
NULL
 ) {

1101 
	`mlogf
( 0, "[ipfix] BIO_new_socket() failed: %s\n",

1102 
	`°ªº‹
(
î∫o
) );

1103 
îr
;

1105 
cﬁ
->
s¶
 = 
	`SSL_√w
–cﬁ->
˘x
 );

1106 
	`SSL_£t_bio
–
cﬁ
->
s¶
, cﬁ->
bio
, col->bio );

1107 i‡–
	`SSL_c⁄√˘
–
cﬁ
->
s¶
 ) <= 0 ) {

1108 
	`mlogf
( 0, "[ipfix] SSL_connect failed: %s\n",

1109 
	`°ªº‹
(
î∫o
) );

1110 
îr
;

1112 i‡((
îr
=
	`ùfix_s¶_po°_c⁄√˘i⁄_check
–
cﬁ
->
s¶
, 
£rvî
 ))

1113 !
X509_V_OK
) {

1114 
	`mlogf
( 0, "[ipfix]Érror:Öeer certificate: %s\n",

1115 
	`X509_vîify_˚π_îr‹_°rög
(
îr
));

1116 
	`mlogf
( 0, "[ipfix]Érror checking sslÖeer" );

1118 
	`mlogf
( 1, "[ipfix] ssl connection opened\n" );

1121 
IPFIX_PROTO_UDP
:

1122 
IPFIX_PROTO_SCTP
:

1124 
	`mlogf
( 0, "[ipfix] internalÉrror:ÖrotocolÇot supported\n" );

1125 
	`˛o£
–
sock
 );

1126 
îr
;

1131 
cﬁ
->
fd
 = 
sock
;

1132 
cﬁ
->
œ°ac˚ss
 = 
	`time
(
NULL
);

1137 
ùfix_node_t
 *
node
;

1138 
ùfix_cﬁÀ˘‹_t
 *
˙ode
;

1139 
ùfix_ãm∂©e_t
 *
äode
;

1141  
node
=
g_ùfixli°
;Çode!=
NULL
;ÇodeÚode->
√xt
 ) {

1142  
˙ode
=(
ùfix_cﬁÀ˘‹_t
*)
node
->
ifh
->
cﬁÀ˘‹s
;

1143 
˙ode
!=
NULL
; cnode=˙ode->
√xt
 ) {

1144 i‡–
cﬁ
 =
˙ode
 ) {

1145  
äode
=
node
->
ifh
->
ãm∂©es
;

1146 
äode
!=
NULL
;ÅnodeÒnode->
√xt
 ) {

1147  
cﬁ
->
¥Ÿocﬁ
 ) {

1148 
IPFIX_PROTO_SCTP
:

1149 
IPFIX_PROTO_TCP
:

1150 i‡(
	`_ùfix_wrôe_ãm∂©e
–
node
->
ifh
, 
cﬁ
,

1151 
äode
 ) <0 )

1154 
IPFIX_PROTO_UDP
:

1155 
äode
->
t£nd
 = 0;

1162 i‡–
cﬁ
->
mesßge
.
off£t
 ) {

1163 i‡–
	`_ùfix_£nd_mesßge
–
node
->
ifh
, 
cﬁ
,

1164 (
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
)?1:0,

1165 &
cﬁ
->
mesßge
 ) < 0 )

1172 #ifde‡
SSLSUPPORT


1173 
îr
:

1174 i‡–
cﬁ
 && cﬁ->
˘x
 ) {

1175 
	`SSL_CTX_‰ì
–
cﬁ
->
˘x
 );

1176 
cﬁ
->
˘x
 = 
NULL
;

1177 i‡–
cﬁ
->
s¶
 )

1178 
	`SSL_‰ì
–
cﬁ
->
s¶
 );

1179 i‡–
cﬁ
->
bio
 )

1180 
	`BIO_‰ì
(
cﬁ
->
bio
);

1181 
cﬁ
->
s¶
 = 
NULL
;

1182 
cﬁ
->
bio
 = 
NULL
;

1186 
	}
}

1188 
	$_ùfix_disc⁄√˘
–
ùfix_cﬁÀ˘‹_t
 *
cﬁ
 )

1190 #ifde‡
SSLSUPPORT


1191 i‡–
cﬁ
->
s¶_Êag
 ) {

1192 i‡–
cﬁ
->
s¶
 )

1193 
	`SSL_‰ì
(
cﬁ
->
s¶
);

1194 i‡–
cﬁ
->
bio
 )

1195 
	`BIO_‰ì
(
cﬁ
->
bio
);

1196 
cﬁ
->
bio
 = 
NULL
;

1197 
cﬁ
->
s¶
 = 
NULL
;

1201 i‡–((
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_UDP
Ë&& cﬁ->
to
 )

1202 || ((
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
Ë&& cﬁ->
to
 )) {

1203 
	`‰ì
–
cﬁ
->
to
 );

1204 
cﬁ
->
to
=
NULL
;

1207 i‡–
cﬁ
->
fd
 >= 0 ) {

1208 
	`˛o£
–
cﬁ
->
fd
 );

1209 
cﬁ
->
fd
 = -1;

1211 
	}
}

1213 #ifde‡
SCTPSUPPORT


1214 
	$_ùfix_£nd_msg_s˘p
–
ùfix_t
 *
ifh
, 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
,

1215 
iobuf_t
 *
buf
, 
°ªam
 )

1217 i‡–
	`s˘p_£ndmsg
–
cﬁ
->
fd
, 
buf
->
buf„r
, buf->
buÊí
,

1218 
cﬁ
->
to
, cﬁ->
tﬁí
, 0, 0 ,

1219 
°ªam
, 0, 0 ) !
buf
->
buÊí
 ) {

1220 
	`mlogf
–0, "[ùfix] s˘p_£ndmsg(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

1225 
	}
}

1228 
	$_ùfix_£nd_mesßge
–
ùfix_t
 *
ifh
, 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
, 
Êag
,

1229 
ùfix_mesßge_t
 *
mesßge
 )

1231 
iobuf_t
 *
buf
;

1233 i‡–
cﬁ
->
fd
 <0 )

1236 i‡–(
buf
=
	`_ùfix_gëbuf
()Ë==
NULL
 )

1239 
	`_ùfix_wrôe_msghdr
–
ifh
, 
mesßge
, 
buf
 );

1240 
	`mem˝y
–
buf
->
buf„r
+buf->
buÊí
, 
mesßge
->buf„r, mesßge->
off£t
 );

1241 
buf
->
buÊí
 +
mesßge
->
off£t
;

1243  
cﬁ
->
¥Ÿocﬁ
 ) {

1244 
IPFIX_PROTO_TCP
:

1246 i‡–
	`do_wrôí
–
cﬁ
, 
buf
->
buf„r
, buf->
buÊí
 ) != ()buf->buflen ) {

1247 i‡–(
î∫o
 =
EPIPE
Ë|| (î∫o==
ECONNRESET
) ) {

1249 
	`_ùfix_disc⁄√˘
–
cﬁ
 );

1251 
îªnd
;

1255 
IPFIX_PROTO_UDP
:

1257 
ssize_t
 
n
=0, 
∆e·

buf
->
buÊí
;

1258 
uöt8_t
 *
p
 = (uöt8_t*)(
buf
->
buf„r
);

1260  
∆e·
>0 ) {

1261 i‡–
cﬁ
->
s¶_Êag
 ==0 ) {

1262 
n
=
	`£ndto
–
cﬁ
->
fd
, 
p
, 
∆e·
, 0, cﬁ->
to
, cﬁ->
tﬁí
 );

1263 i‡–
n
<=0 )

1264 
îªnd
;

1266 #ifde‡
SSLSUPPORT


1268 
n
 = 
	`do_wrôí
–
cﬁ
, (*)
p
, 
∆e·
 );

1269 i‡–
n
<=0 )

1270 
îªnd
;

1273 
∆e·
 -
n
;

1274 
p
 +
n
;

1278 #ifde‡
SCTPSUPPORT


1279 
IPFIX_PROTO_SCTP
:

1280 i‡–
	`_ùfix_£nd_msg_s˘p
–
ifh
, 
cﬁ
, 
buf
, 
Êag
?1:0 ) <0 ) {

1281 i‡–(
î∫o
 =
EPIPE
Ë|| (î∫o==
ECONNRESET
) ) {

1283 
	`_ùfix_disc⁄√˘
–
cﬁ
 );

1285 
îªnd
;

1290 
îªnd
;

1293 
mesßge
->
ƒec‹ds
 = 0;

1294 
mesßge
->
off£t
 = 0;

1295 
cﬁ
->
œ°ac˚ss
 = 
	`time
(
NULL
);

1296 
	`_ùfix_‰ìbuf
–
buf
 );

1299 
îªnd
:

1300 
	`_ùfix_‰ìbuf
–
buf
 );

1302 
	}
}

1304 
	$_ùfix_£nd_msg
–
ùfix_t
 *
ifh
, 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
, 
iobuf_t
 *
buf
 )

1306 
i
, 
ªtvÆ
 =-1;

1308 i‡–
	`_ùfix_c⁄√˘
–
cﬁ
 ) <0 )

1313 i‡–
cﬁ
->
mesßge
.
off£t
 ) {

1314 i‡–
	`_ùfix_£nd_mesßge
–
ifh
, 
cﬁ
, 0, &cﬁ->
mesßge
 ) < 0 ) {

1315 
	`mlogf
–1, "[ùfix] sídÅem∑ã†Áûed: %s\n", 
	`°ªº‹
(
î∫o
) );

1320  
cﬁ
->
¥Ÿocﬁ
 )

1322 
IPFIX_PROTO_TCP
:

1323  
i
=0; i<2; i++ ) {

1324 #ifde‡
NONBLOCKING_TCP


1325 
Êag
 =0;

1327 i‡–
cﬁ
->
s¶_Êag
 == 0 ) {

1328 i‡–
	`do_wrôe£À˘
–
cﬁ
->
fd
, 0, &
Êag
 ) <0 ) {

1329 
ªc⁄√˘
;

1332 i‡–
Êag
==0 ) {

1334 
	`mlogf
( 4, "[ipfix] output buf full: cannot send msg!\n");

1335 
î∫o
 = 
EAGAIN
;

1341 i‡–
	`do_wrôí
–
cﬁ
, 
buf
->
buf„r
, buf->
buÊí
 )

1342 !()
buf
->
buÊí
 ) {

1343 i‡–(
î∫o
 =
EPIPE
Ë|| (î∫o==
ECONNRESET
) )

1344 
ªc⁄√˘
;

1349 
ªtvÆ
 =0;

1352 
ªc⁄√˘
:

1353 
	`mlogf
( 2, "[ipfix] connectionÜost,Ñeconnect.\n" );

1354 
	`_ùfix_disc⁄√˘
–
cﬁ
 );

1355 i‡–
	`_ùfix_c⁄√˘
–
cﬁ
 ) <0 )

1359 
IPFIX_PROTO_UDP
:

1361 
ssize_t
 
n
=0, 
∆e·

buf
->
buÊí
;

1362 
uöt8_t
 *
p
 = (uöt8_t*)(
buf
->
buf„r
);

1364  
∆e·
>0 ) {

1365 i‡–
cﬁ
->
s¶_Êag
 ==0 ) {

1366 
n
=
	`£ndto
–
cﬁ
->
fd
, 
p
, 
∆e·
, 0, cﬁ->
to
, cﬁ->
tﬁí
 );

1367 i‡–
n
<=0 )

1370 #ifde‡
SSLSUPPORT


1372 
n
=
	`do_wrôí
–
cﬁ
, (*)
p
, 
∆e·
 );

1373 i‡–
n
<=0 )

1377 
∆e·
 -
n
;

1378 
p
 +
n
;

1380 
ªtvÆ
 =0;

1383 #ifde‡
SCTPSUPPORT


1384 
IPFIX_PROTO_SCTP
:

1385 
ªtvÆ
 = 
	`_ùfix_£nd_msg_s˘p
–
ifh
, 
cﬁ
, 
buf
, 1 );

1392 
cﬁ
->
œ°ac˚ss
 = 
	`time
(
NULL
);

1393  
ªtvÆ
;

1394 
	}
}

1401 
	$_ùfix_wrôe_hdr
–
ùfix_t
 *
ifh
, 
iobuf_t
 *
buf
 )

1403 
time_t
 
now
 = 
	`time
(
NULL
);

1407 i‡–
ifh
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 ) {

1408 
buf
->
buÊí
 = 0;

1409 
ifh
->
£qno
++;

1410 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
vîsi⁄
 );

1411 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
ƒec‹ds
 );

1412 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, ((
now
-
g_t°¨t
)*1000));

1413 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
now
 );

1414 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
£qno
 );

1415 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
sour˚id
 );

1418 
buf
->
buÊí
 = 0;

1419 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
vîsi⁄
 );

1420 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buflen,

1421 
ifh
->
off£t
 + 
IPFIX_HDR_BYTES
 );

1422 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
now
 );

1423 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
£qno
 - ifh->
ƒec‹ds
 );

1424 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
sour˚id
 );

1428 
	}
}

1434 
	$_ùfix_wrôe_msghdr
–
ùfix_t
 *
ifh
, 
ùfix_mesßge_t
 *
msg
, 
iobuf_t
 *
buf
 )

1436 
time_t
 
now
 = 
	`time
(
NULL
);

1440 i‡–
ifh
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 ) {

1441 
ifh
->
£qno
++;

1442 
buf
->
buÊí
 = 0;

1443 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
vîsi⁄
 );

1444 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
msg
->
ƒec‹ds
 );

1445 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, ((
now
-
g_t°¨t
)*1000));

1446 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
now
 );

1447 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
£qno
 );

1448 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
sour˚id
 );

1451 
buf
->
buÊí
 = 0;

1452 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
vîsi⁄
 );

1453 
	`INSERTU16
–
buf
->
buf„r
+buf->
buÊí
, buf->buflen,

1454 
msg
->
off£t
 + 
IPFIX_HDR_BYTES
 );

1455 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
now
 );

1456 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
£qno
 - ifh->
ƒec‹ds
 );

1457 
	`INSERTU32
–
buf
->
buf„r
+buf->
buÊí
, buf->buÊí, 
ifh
->
sour˚id
 );

1461 
	}
}

1468 
	$_ùfix_wrôe_ãm∂©e
–
ùfix_t
 *
ifh
,

1469 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
,

1470 
ùfix_ãm∂©e_t
 *
ãm∂
 )

1472 
size_t
 
buÊí
, 
tsize
=0, 
ssize
=0, 
osize
=0;

1473 *
buf
;

1474 
uöt16_t
 
tmp16
;

1475 
i
, 
n
;

1479 i‡–
ãm∂
->
ty≥
 =
OPTION_TEMPLATE
 ) {

1480  
i
=0, 
ssize
=0; i<
ãm∂
->
nsc›efõlds
; i++ ) {

1481 
ssize
 += 4;

1482 i‡(
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
ío
 !
IPFIX_FT_NOENO
)

1483 
ssize
 += 4;

1485  
osize
=0; 
i
<
ãm∂
->
nfõlds
; i++ ) {

1486 
osize
 += 4;

1487 i‡(
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
ío
 !
IPFIX_FT_NOENO
)

1488 
osize
 += 4;

1490 
tsize
 = 10 + 
osize
 + 
ssize
;

1492  
tsize
=8,
i
=0; i<
ãm∂
->
nfõlds
; i++ ) {

1493 
tsize
 += 4;

1494 i‡(
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
ío
 !
IPFIX_FT_NOENO
)

1495 
tsize
 += 4;

1499  
cﬁ
->
¥Ÿocﬁ
 ) {

1500 
IPFIX_PROTO_SCTP
:

1502 
buf
 = 
cﬁ
->
mesßge
.
buf„r
;

1503 
buÊí
 = 
cﬁ
->
mesßge
.
off£t
;

1506 
IPFIX_PROTO_TCP
:

1508 
buf
 = 
cﬁ
->
mesßge
.
buf„r
;

1509 
buÊí
 = 
cﬁ
->
mesßge
.
off£t
;

1511 i‡–
buÊí
 + 
tsize
 > 
IPFIX_DEFAULT_BUFLEN
 ) {

1512 i‡–
	`_ùfix_£nd_mesßge
–
ifh
, 
cﬁ
, 0, &cﬁ->
mesßge
 ) < 0 )

1515 
cﬁ
->
mesßge
.
off£t
 =0;

1516 
cﬁ
->
mesßge
.
ƒec‹ds
 =0;

1520 i‡–
tsize
+
ifh
->
off£t
 > 
IPFIX_DEFAULT_BUFLEN
 )

1528 i‡–
tsize
+
ifh
->
off£t
 > 
IPFIX_DEFAULT_BUFLEN
 ) {

1529 i‡–
	`_ùfix_exp‹t_Êush
–
ifh
 ) < 0 )

1531 i‡–
tsize
+
ifh
->
off£t
 > 
IPFIX_DEFAULT_BUFLEN
 )

1536 i‡–
ifh
->
off£t
 > 0 ) {

1537 
	`memmove
–
ifh
->
buf„r
 + 
tsize
, ifh->buf„r, ifh->
off£t
 );

1538 i‡–
ifh
->
cs_tid
 )

1539 
ifh
->
cs_hódî
 +
tsize
;

1542 
buf
 = 
ifh
->
buf„r
;

1543 
buÊí
 = 0;

1549 i‡–
ifh
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 ) {

1550 i‡–
ãm∂
->
ty≥
 =
OPTION_TEMPLATE
 ) {

1551 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
IPFIX_SETID_OPTTEMPLATE_NF9
);

1552 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
tsize
 );

1553 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
tid
 );

1554 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ssize
 );

1555 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
osize
 );

1557 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
IPFIX_SETID_TEMPLATE_NF9
);

1558 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
tsize
 );

1559 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
tid
 );

1560 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
nfõlds
 );

1563 i‡–
ãm∂
->
ty≥
 =
OPTION_TEMPLATE
 ) {

1564 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
IPFIX_SETID_OPTTEMPLATE
 );

1565 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
tsize
 );

1566 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
tid
 );

1567 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
nfõlds
 );

1568 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
nsc›efõlds
 );

1570 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
IPFIX_SETID_TEMPLATE
);

1571 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
tsize
 );

1572 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
tid
 );

1573 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
nfõlds
 );

1577 i‡–
ãm∂
->
ty≥
 =
OPTION_TEMPLATE
 ) {

1578 
n
 = 
ãm∂
->
nfõlds
;

1579  
i
=0; i<
ãm∂
->
nsc›efõlds
; i++ ) {

1580 i‡–
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
ío
 =
IPFIX_FT_NOENO
 ) {

1581 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
·y≥
 );

1582 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
Êígth
 );

1584 
tmp16
 = 
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
·y≥
|
IPFIX_EFT_VENDOR_BIT
;

1585 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
tmp16
 );

1586 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
Êígth
 );

1587 
	`INSERTU32
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
ío
 );

1591 
i
 = 0;

1592 
n
 = 
ãm∂
->
nfõlds
;

1595  ; 
i
<
ãm∂
->
nfõlds
; i++ )

1597 i‡–
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
ío
 =
IPFIX_FT_NOENO
 ) {

1598 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
·y≥
 );

1599 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
Êígth
 );

1601 
tmp16
 = 
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
·y≥
|
IPFIX_EFT_VENDOR_BIT
;

1602 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
tmp16
 );

1603 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
Êígth
 );

1604 
	`INSERTU32
–
buf
+
buÊí
, buÊí, 
ãm∂
->
fõlds
[
i
].
ñem
->
·
->
ío
 );

1607 
ãm∂
->
t£nd
 = 
	`time
(
NULL
);

1609  
cﬁ
->
¥Ÿocﬁ
 ) {

1610 #ifde‡
SCTPSUPPORT


1611 
IPFIX_PROTO_SCTP
:

1612 
cﬁ
->
mesßge
.
off£t
 = 
buÊí
;

1613 i‡–
ifh
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 )

1614 
cﬁ
->
mesßge
.
ƒec‹ds
++;

1617 
IPFIX_PROTO_TCP
:

1618 
cﬁ
->
mesßge
.
off£t
 = 
buÊí
;

1619 i‡–
ifh
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 )

1620 
cﬁ
->
mesßge
.
ƒec‹ds
++;

1623 
ifh
->
off£t
 +
buÊí
;

1624 i‡–
ifh
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 )

1625 
ifh
->
ƒec‹ds
++;

1630 
	}
}

1637 
	$ùfix_›í
–
ùfix_t
 **
ùfixh
, 
sour˚id
, 
ùfix_vîsi⁄
 )

1639 
ùfix_t
 *
i
;

1640 
ùfix_node_t
 *
node
;

1642 i‡–! 
g_t°¨t
 )

1646 i‡–
	`ùfix_öô
() < 0 )

1650  
ùfix_vîsi⁄
 ) {

1651 
IPFIX_VERSION_NF9
:

1653 
IPFIX_VERSION
:

1656 
î∫o
 = 
ENOTSUP
;

1660 i‡–(
i
=
	`ˇŒoc
–1, (
ùfix_t
Ë)Ë==
NULL
 )

1663 i‡–(
i
->
buf„r
=
	`ˇŒoc
–1, 
IPFIX_DEFAULT_BUFLEN
 )Ë==
NULL
 ) {

1664 
	`‰ì
–
i
 );

1668 
i
->
sour˚id
 = sourceid;

1669 
i
->
off£t
 = 0;

1670 
i
->
vîsi⁄
 = 
ùfix_vîsi⁄
;

1671 
i
->
£qno
 = 0;

1675 i‡–(
node
=
	`ˇŒoc
–1, (
ùfix_node_t
))Ë==
NULL
) {

1676 
	`‰ì
(
i
->
buf„r
);

1677 
	`‰ì
(
i
);

1680 
node
->
ifh
 = 
i
;

1682 
	`mod_lock
();

1683 
node
->
√xt
 = 
g_ùfixli°
;

1684 
g_ùfixli°
 = 
node
;

1685 
	`mod_u∆ock
();

1687 *
ùfixh
 = 
i
;

1689 
	}
}

1696 
	$ùfix_˛o£
–
ùfix_t
 *
h
 )

1698 i‡–
h
 )

1700 
ùfix_node_t
 *
l
, *
n
;

1702 
	`mod_lock
();

1703 
	`_ùfix_exp‹t_Êush
–
h
 );

1705  
h
->
cﬁÀ˘‹s
 )

1706 
	`_ùfix_dr›_cﬁÀ˘‹
–(
ùfix_cﬁÀ˘‹_t
**)&
h
->
cﬁÀ˘‹s
 );

1710  
l
=
g_ùfixli°
, 
n
ˆ;Ç!=
NULL
;ÇÚ->
√xt
 ) {

1711 i‡–
g_ùfixli°
->
ifh
 =
h
 ) {

1712 
g_ùfixli°
 = g_ùfixli°->
√xt
;

1715 i‡–
n
->
ifh
 =
h
 ) {

1716 
l
->
√xt
 = 
n
->next;

1719 
l
 = 
n
;

1721 i‡–
n
 )

1722 
	`‰ì
–
n
 );

1723 #ifde‡
DEBUG


1725 
	`Ârötf
–
°dîr
, "INTERNAL ERROR: ipfixÇodeÇot found!\n" );

1727 
	`‰ì
(
h
->
buf„r
);

1728 
	`‰ì
(
h
);

1729 
	`mod_u∆ock
();

1731 
	}
}

1738 
	$_dr›_cﬁÀ˘‹
–
ùfix_cﬁÀ˘‹_t
 **
li°
,

1739 
ùfix_cﬁÀ˘‹_t
 *
node
 )

1741 i‡–!
li°
 || !(*li°Ë|| !
node
 )

1744 i‡–*
li°
 =
node
 ) {

1745 *
li°
 = (*li°)->
√xt
;

1748 
ùfix_cﬁÀ˘‹_t
 *
œ°
 = *
li°
;

1749 
ùfix_cﬁÀ˘‹_t
 *
n
 = (*
li°
)->
√xt
;

1751  
n
 ) {

1752 i‡–
n
 =
node
 ) {

1753 
œ°
->
√xt
 = 
n
->next;

1756 
œ°
 = 
n
;

1757 
n
 =Ç->
√xt
;

1760 
	}
}

1762 
	$_ùfix_dr›_cﬁÀ˘‹
–
ùfix_cﬁÀ˘‹_t
 **
cﬁ
 )

1764 i‡–*
cﬁ
==
NULL
 )

1767 (*
cﬁ
)->
u£cou¡
--;

1768 i‡–(*
cﬁ
)->
u£cou¡
==0 )

1770 
ùfix_cﬁÀ˘‹_t
 *
node
 = *
cﬁ
;

1772 
	`_ùfix_disc⁄√˘
–*
cﬁ
 );

1773 
	`_dr›_cﬁÀ˘‹
–&
g_cﬁÀ˘‹s
, *
cﬁ
 );

1774 *
cﬁ
 = 
NULL
;

1775 #ifde‡
SSLSUPPORT


1776 i‡–
node
->
s¶_Êag
 ) {

1777 
	`ùfix_s¶_›ts_‰ì
–
node
->
s¶_›ts
 );

1778 i‡–
node
->
˘x
 ) 
	`SSL_CTX_‰ì
(Çode->ctx );

1779 i‡–
node
->
s¶
 ) 
	`SSL_‰ì
(Çode->ssl );

1782 
	`‰ì
–
node
->
cho°
 );

1783 
	`‰ì
–
node
 );

1786 *
cﬁ
 = 
NULL
;

1789 
	}
}

1795 
	$_ùfix_add_cﬁÀ˘‹
–
ùfix_t
 *
ifh
, *
ho°
, 
p‹t
,

1796 
ùfix_¥Ÿo_t
 
¥Ÿ
, 
s¶_Êag
,

1797 
ùfix_s¶_›ts_t
 *
s¶_›ts
 )

1799 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
;

1801 i‡–(
ifh
==
NULL
Ë|| (
ho°
==NULL) )

1804 #i‚de‡
SSLSUPPORT


1805 i‡–
s¶_Êag
 ) {

1806 
î∫o
 = 
ENOTSUP
;

1810 i‡–
s¶_Êag
 ) {

1811 i‡–! 
›ís¶_is_öô
 ) {

1812 ()
	`SSL_libøry_öô
();

1813 
	`SSL_lﬂd_îr‹_°rögs
();

1815 
›ís¶_is_öô
 ++;

1817 i‡–(
s¶_›ts
==
NULL
Ë|| (s¶_›ts->
keyfûe
==NULL)

1818 || (
s¶_›ts
->
˚πfûe
==
NULL
) ) {

1819 
î∫o
 = 
EINVAL
;

1827 i‡–
ifh
->
cﬁÀ˘‹s
 ) {

1828 
î∫o
 = 
EAGAIN
;

1834  
cﬁ
=
g_cﬁÀ˘‹s
; cﬁ; cﬁ=cﬁ->
√xt
 ) {

1835 i‡–(
	`°rcmp
–
cﬁ
->
cho°
, 
ho°
 ) ==0)

1836 && (
cﬁ
->
˝‹t
==
p‹t
Ë&& (cﬁ->
¥Ÿocﬁ
==
¥Ÿ
) ) {

1838 
cﬁ
->
u£cou¡
++;

1839 
ifh
->
cﬁÀ˘‹s
 = (*)
cﬁ
;

1844 i‡–(
cﬁ
=
	`ˇŒoc
–1, (
ùfix_cﬁÀ˘‹_t
))Ë==
NULL
)

1847 i‡–(
cﬁ
->
cho°
=
	`°rdup
–
ho°
 )Ë==
NULL
 ) {

1848 
	`‰ì
–
cﬁ
 );

1852 
cﬁ
->
˝‹t
 = 
p‹t
;

1853 
cﬁ
->
s¶_Êag
 = ssl_flag;

1854  
¥Ÿ
 ) {

1855 
IPFIX_PROTO_TCP
:

1856 
cﬁ
->
¥Ÿocﬁ
 = 
¥Ÿ
;

1858 
IPFIX_PROTO_UDP
:

1859 
IPFIX_PROTO_SCTP
:

1860 
cﬁ
->
¥Ÿocﬁ
 = 
¥Ÿ
;

1861 i‡–
s¶_Êag
 ) {

1862 
	`‰ì
–
cﬁ
->
cho°
 );

1863 
	`‰ì
–
cﬁ
 );

1864 
î∫o
 = 
ENOTSUP
;

1869 
	`‰ì
–
cﬁ
->
cho°
 );

1870 
	`‰ì
–
cﬁ
 );

1871 
î∫o
 = 
EPROTONOSUPPORT
;

1875 #ifde‡
SSLSUPPORT


1876 i‡–
s¶_Êag
 ) {

1877 i‡–
	`ùfix_s¶_›ts_√w
–&(
cﬁ
->
s¶_›ts
), ssl_opts ) <0 ) {

1878 
	`‰ì
–
cﬁ
->
cho°
 );

1879 
	`‰ì
–
cﬁ
 );

1884 
cﬁ
->
fd
 = -1;

1885 
cﬁ
->
u£cou¡
 = 1;

1886 
cﬁ
->
√xt
 = 
g_cﬁÀ˘‹s
;

1888 
g_cﬁÀ˘‹s
 = 
cﬁ
;

1889 
ifh
->
cﬁÀ˘‹s
 = (*)
cﬁ
;

1893  
	`_ùfix_c⁄√˘
–
cﬁ
 );

1894 
	}
}

1900 
	$ùfix_add_cﬁÀ˘‹
–
ùfix_t
 *
ifh
, *
ho°
, 
p‹t
,

1901 
ùfix_¥Ÿo_t
 
¥Ÿ
 )

1903  
	`_ùfix_add_cﬁÀ˘‹
–
ifh
, 
ho°
, 
p‹t
, 
¥Ÿ
, 0, 
NULL
 );

1904 
	}
}

1910 
	$ùfix_add_cﬁÀ˘‹_s¶
–
ùfix_t
 *
ifh
, *
ho°
, 
p‹t
,

1911 
ùfix_¥Ÿo_t
 
¥Ÿ
, 
ùfix_s¶_›ts_t
 *
›ts
 )

1913  
	`_ùfix_add_cﬁÀ˘‹
–
ifh
, 
ho°
, 
p‹t
, 
¥Ÿ
, 1, 
›ts
 );

1914 
	}
}

1921 
	$ùfix_√w_ãm∂©e
–
ùfix_t
 *
ifh
,

1922 
ùfix_ãm∂©e_t
 **
ãm∂
,

1923 
nfõlds
 )

1925 
ùfix_ãm∂©e_t
 *
t
;

1927 i‡–!
ifh
 || !
ãm∂
 || (
nfõlds
<1) ) {

1928 
î∫o
 = 
EINVAL
;

1934 i‡–(
t
=
	`ˇŒoc
–1, (
ùfix_ãm∂©e_t
Ë)Ë==
NULL
 )

1937 i‡–(
t
->
fõlds
=
	`ˇŒoc
–
nfõlds
, (
ùfix_ãm∂©e_fõld_t
Ë)Ë==
NULL
 ) {

1938 
	`‰ì
(
t
);

1944 
g_œ°tid
++;

1945 
t
->
tid
 = 
g_œ°tid
;

1946 
t
->
nfõlds
 = 0;

1947 
t
->
maxfõlds
 = 
nfõlds
;

1948 *
ãm∂
 = 
t
;

1952 
t
->
√xt
 = 
ifh
->
ãm∂©es
;

1953 
ifh
->
ãm∂©es
 = 
t
;

1955 
	}
}

1962 
	$ùfix_√w_d©a_ãm∂©e
–
ùfix_t
 *
ifh
,

1963 
ùfix_ãm∂©e_t
 **
ãm∂
,

1964 
nfõlds
 )

1966 i‡–
	`ùfix_√w_ãm∂©e
–
ifh
, 
ãm∂
, 
nfõlds
 ) <0 )

1969 (*
ãm∂
)->
ty≥
 = 
DATA_TEMPLATE
;

1971 
	}
}

1978 
	$ùfix_√w_›ti⁄_ãm∂©e
–
ùfix_t
 *
ifh
,

1979 
ùfix_ãm∂©e_t
 **
ãm∂
,

1980 
nfõlds
 )

1982 i‡–
	`ùfix_√w_ãm∂©e
–
ifh
, 
ãm∂
, 
nfõlds
 ) <0 )

1985 (*
ãm∂
)->
ty≥
 = 
OPTION_TEMPLATE
;

1987 
	}
}

1994 
	$ùfix_add_fõld
–
ùfix_t
 *
ifh
,

1995 
ùfix_ãm∂©e_t
 *
ãm∂
,

1996 
uöt32_t
 
ío
,

1997 
uöt16_t
 
ty≥
,

1998 
uöt16_t
 
Àngth
 )

2000 
i
;

2002 i‡–(
ãm∂
->
nfõlds
 <Åem∂->
maxfõlds
)

2003 && (
ty≥
 < 
IPFIX_EFT_VENDOR_BIT
) ) {

2006 
i
 = 
ãm∂
->
nfõlds
;

2007 
ãm∂
->
fõlds
[
i
].
Êígth
 = 
Àngth
;

2009 i‡((
ãm∂
->
fõlds
[
i
].
ñem
 = 
	`ùfix_gë_·öfo
–
ío
, 
ty≥
))==
NULL
) {

2010 
î∫o
 = 
EINVAL
;

2014 
ãm∂
->
nfõlds
 ++;

2015 
ãm∂
->
nd©afõlds
 ++;

2018 
î∫o
 = 
EINVAL
;

2023 
	}
}

2030 
	$ùfix_add_sc›e_fõld
–
ùfix_t
 *
ifh
,

2031 
ùfix_ãm∂©e_t
 *
ãm∂
,

2032 
uöt32_t
 
ío
,

2033 
uöt16_t
 
ty≥
,

2034 
uöt16_t
 
Àngth
 )

2036 
i
;

2038 i‡–
ãm∂
->
ty≥
 !
OPTION_TEMPLATE
 ) {

2039 
î∫o
 = 
EINVAL
;

2043 i‡–
ãm∂
->
nfõlds
 <Åem∂->
maxfõlds
 ) {

2045 i‡–
ãm∂
->
nd©afõlds
 ) {

2048 
	`memmove
–&(
ãm∂
->
fõlds
[ãm∂->
nsc›efõlds
+1]),

2049 &(
ãm∂
->
fõlds
[ãm∂->
nsc›efõlds
]),

2050 
ãm∂
->
nd©afõlds
 * (
ùfix_ãm∂©e_fõld_t
) );

2055 
i
 = 
ãm∂
->
nsc›efõlds
;

2056 
ãm∂
->
fõlds
[
i
].
Êígth
 = 
Àngth
;

2058 i‡((
ãm∂
->
fõlds
[
i
].
ñem


2059 
	`ùfix_gë_·öfo
–
ío
, 
ty≥
))==
NULL
){

2060 
î∫o
 = 
EINVAL
;

2064 
ãm∂
->
nsc›efõlds
 ++;

2065 
ãm∂
->
nfõlds
 ++;

2069 
	}
}

2076 
	$ùfix_gë_ãm∂©e
–
ùfix_t
 *
ifh
,

2077 
ùfix_ãm∂©e_t
 **
ãm∂
,

2078 
nfõlds
, ... )

2080 
ùfix_ãm∂©e_t
 *
t
;

2081 
i
, 
îr‹
;

2082 
uöt16_t
 
·y≥
, 
Êígth
;

2083 
va_li°
 
¨gs
;

2087 i‡–
	`ùfix_√w_ãm∂©e
–
ifh
, &
t
, 
nfõlds
 ) <0 )

2092 
	`va_°¨t
(
¨gs
, 
nfõlds
);

2093  
îr‹
=0, 
i
=0; i<
nfõlds
; i++ )

2095 
·y≥
 = 
	`va_¨g
–
¨gs
, );

2096 
Êígth
 = 
	`va_¨g
–
¨gs
, );

2097 i‡–
	`ùfix_add_fõld
–
ifh
, 
t
, 0, 
·y≥
, 
Êígth
 ) <0 )

2098 
îr‹
 =1;

2100 
	`va_íd
(
¨gs
);

2102 i‡(
îr‹
) {

2103 
	`ùfix_dñëe_ãm∂©e
–
ifh
, 
t
 );

2107 *
ãm∂
 = 
t
;

2109 
	}
}

2117 
	$ùfix_gë_ãm∂©e_¨øy
–
ùfix_t
 *
ifh
,

2118 
ùfix_ãm∂©e_t
 **
ãm∂
,

2119 
nfõlds
,

2120 *
ty≥s
,

2121 *
Àngths
 )

2123 
ùfix_ãm∂©e_t
 *
t
;

2124 
i
, 
îr‹
, 
Àn
=0;

2128 i‡–(
t
=
	`ˇŒoc
–1, (
ùfix_ãm∂©e_t
Ë)Ë==
NULL
 )

2131 i‡–(
t
->
fõlds
=
	`ˇŒoc
–
nfõlds
, (
ùfix_ãm∂©e_fõld_t
Ë)Ë==
NULL
 )

2133 
	`‰ì
(
t
);

2139  
îr‹
=0, 
i
=0; i<
nfõlds
; i++ )

2141 
t
->
fõlds
[
i
].
ñem
->
·
->
·y≥
 = 
ty≥s
[i];

2142 
t
->
fõlds
[
i
].
Êígth
 = 
Àngths
[i];

2144 
Àn
 +
t
->
fõlds
[
i
].
Êígth
;

2145 i‡((
t
->
fõlds
[
i
].
ñem


2146 
	`ùfix_gë_·öfo
–0, 
t
->
fõlds
[
i
].
ñem
->
·
->
·y≥
 )Ë==
NULL
) {

2147 
îr‹
 =1;

2151 i‡(
îr‹
) {

2152 
î∫o
 = 
EINVAL
;

2153 
	`‰ì
(
t
);

2159 
g_œ°tid
++;

2160 
t
->
tid
 = 
g_œ°tid
;

2161 
t
->
nfõlds
 =Çfields;

2162 *
ãm∂
 = 
t
;

2166 
t
->
√xt
 = 
ifh
->
ãm∂©es
;

2167 
ifh
->
ãm∂©es
 = 
t
;

2169 
	}
}

2178 
	$ùfix_make_ãm∂©e
–
ùfix_t
 *
h™dÀ
, 
ùfix_ãm∂©e_t
 **
ãm∂
,

2179 
exp‹t_fõlds_t
 *
fõlds
, 
nfõlds
 )

2181 
ùfix_ãm∂©e_t
 *
t
;

2182 
i
;

2184 i‡–
	`ùfix_√w_d©a_ãm∂©e
–
h™dÀ
, &
t
, 
nfõlds
 ) <0 ) {

2185 
	`mlogf
–0, "ùfix_√w_ãm∂©e(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

2189  
i
=0; i<
nfõlds
; i++ ) {

2190 i‡–
	`ùfix_add_fõld
–
h™dÀ
, 
t
, 
fõlds
[
i
].
ío
,

2191 
fõlds
[
i
].
õnum
, fõlds[i].
Àngth
 ) <0 ) {

2192 
	`mlogf
–0, "ùfix_add_fõld(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

2193 
	`ùfix_dñëe_ãm∂©e
–
h™dÀ
, 
t
 );

2198 *
ãm∂
 = 
t
;

2200 
	}
}

2208 
	$ùfix_‰ì_ãm∂©e
–
ùfix_ãm∂©e_t
 *
ãm∂
 )

2210 i‡–
ãm∂
 )

2212 i‡–
ãm∂
->
fõlds
 )

2213 
	`‰ì
–
ãm∂
->
fõlds
 );

2214 
	`‰ì
–
ãm∂
 );

2216 
	}
}

2223 
	$ùfix_dñëe_ãm∂©e
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
 )

2225 
ùfix_ãm∂©e_t
 *
l
, *
n
;

2227 i‡–! 
ãm∂
 )

2232  
l
=
ifh
->
ãm∂©es
, 
n
ˆ;Ç!=
NULL
;ÇÚ->
√xt
 ) {

2233 i‡–
ifh
->
ãm∂©es
==
ãm∂
 ) {

2234 
ifh
->
ãm∂©es
 = 
ãm∂
->
√xt
;

2237 i‡–
n
==
ãm∂
 ) {

2238 
l
->
√xt
 = 
n
->next;

2241 
l
=
n
;

2246 
	`ùfix_‰ì_ãm∂©e
–
ãm∂
 );

2247 
	}
}

2254 
	$ùfix_ªÀa£_ãm∂©e
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
 )

2256 
	`ùfix_dñëe_ãm∂©e
–
ifh
, 
ãm∂
 );

2257 
	}
}

2260 
	$_föish_cs
–
ùfix_t
 *
ifh
 )

2262 
size_t
 
buÊí
;

2263 
uöt8_t
 *
buf
;

2266 i‡–(
buf
=
ifh
->
cs_hódî
Ë==
NULL
 )

2268 
buÊí
 = 0;

2269 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ifh
->
cs_tid
 );

2270 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ifh
->
cs_byãs
 );

2271 
ifh
->
cs_byãs
 = 0;

2272 
ifh
->
cs_hódî
 = 
NULL
;

2273 
ifh
->
cs_tid
 = 0;

2274 
	}
}

2276 
	$ùfix_exp‹t
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
, ... )

2278 
i
;

2279 
va_li°
 
¨gs
;

2281 i‡–!
ãm∂
 ) {

2282 
î∫o
 = 
EINVAL
;

2286 i‡–
ãm∂
->
nfõlds
 > 
g_d©a
.
maxfõlds
 ) {

2287 i‡–
g_d©a
.
addrs
 ) 
	`‰ì
( g_data.addrs );

2288 i‡–
g_d©a
.
Àns
 ) 
	`‰ì
( g_data.lens );

2289 i‡–(
g_d©a
.
Àns
=
	`ˇŒoc
–
ãm∂
->
nfõlds
, (
uöt16_t
))Ë==
NULL
) {

2290 
g_d©a
.
maxfõlds
 = 0;

2293 i‡–(
g_d©a
.
addrs
=
	`ˇŒoc
–
ãm∂
->
nfõlds
, (*))Ë==
NULL
) {

2294 
	`‰ì
–
g_d©a
.
Àns
 );

2295 
g_d©a
.
Àns
 = 
NULL
;

2296 
g_d©a
.
maxfõlds
 = 0;

2299 
g_d©a
.
maxfõlds
 = 
ãm∂
->
nfõlds
;

2304 
	`va_°¨t
(
¨gs
, 
ãm∂
);

2305  
i
=0; i<
ãm∂
->
nfõlds
; i++ )

2307 
g_d©a
.
addrs
[
i
] = 
	`va_¨g
(
¨gs
, *);

2308 i‡–
ãm∂
->
fõlds
[
i
].
Êígth
 =
IPFIX_FT_VARLEN
 )

2309 
g_d©a
.
Àns
[
i
] = 
	`va_¨g
(
¨gs
, );

2311 
g_d©a
.
Àns
[
i
] = 
ãm∂
->
fõlds
[i].
Êígth
;

2313 
	`va_íd
(
¨gs
);

2315  
	`ùfix_exp‹t_¨øy
–
ifh
, 
ãm∂
,Åem∂->
nfõlds
,

2316 
g_d©a
.
addrs
, g_d©a.
Àns
 );

2317 
	}
}

2319 
	$_ùfix_exp‹t_¨øy
–
ùfix_t
 *
ifh
,

2320 
ùfix_ãm∂©e_t
 *
ãm∂
,

2321 
nfõlds
,

2322 **
fõlds
,

2323 
uöt16_t
 *
Àngths
 )

2325 
i
, 
√w£t_f
=0;

2326 
size_t
 
buÊí
, 
d©a£éí
;

2327 
uöt8_t
 *
p
, *
buf
;

2331 i‡–(
ãm∂
==
NULL
Ë|| (
nfõlds
!=templ->nfields) ) {

2332 
î∫o
 = 
EINVAL
;

2340 i‡–
ãm∂
->
t£nd
 == 0 ) {

2341 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
 = 
ifh
->
cﬁÀ˘‹s
;

2343  
cﬁ
 ) {

2344 i‡–
	`_ùfix_wrôe_ãm∂©e
–
ifh
, 
cﬁ
, 
ãm∂
 ) <0 )

2346 
cﬁ
 = cﬁ->
√xt
;

2352 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
 = 
ifh
->
cﬁÀ˘‹s
;

2353 
time_t
 
now
 = 
	`time
(
NULL
);

2355  
cﬁ
 ) {

2356 i‡––
cﬁ
->
¥Ÿocﬁ
==
IPFIX_PROTO_UDP
 )

2357 && ((
now
-
ãm∂
->
t£nd
)>
IPFIX_DFLT_TEMPLRESENDINT
) ) {

2358 i‡–
	`_ùfix_wrôe_ãm∂©e
–
ifh
, 
cﬁ
, 
ãm∂
 ) <0 ) {

2363 
cﬁ
 = cﬁ->
√xt
;

2369 i‡–
ãm∂
->
tid
 =
ifh
->
cs_tid
 ) {

2370 
√w£t_f
 = 0;

2371 
d©a£éí
 = 0;

2374 i‡–
ifh
->
cs_tid
 > 0 ) {

2375 
	`_föish_cs
–
ifh
 );

2377 
√w£t_f
 = 1;

2378 
d©a£éí
 = 4;

2381  
i
=0; i<
nfõlds
; i++ ) {

2382 i‡–
ãm∂
->
fõlds
[
i
].
Êígth
 =
IPFIX_FT_VARLEN
 ) {

2383 i‡–
Àngths
[
i
]>254 )

2384 
d©a£éí
 += 3;

2386 
d©a£éí
 += 1;

2388 i‡–
Àngths
[
i
] > 
ãm∂
->
fõlds
[i].
Êígth
 ) {

2389 
î∫o
 = 
EINVAL
;

2393 
d©a£éí
 +
Àngths
[
i
];

2396 i‡–(
ifh
->
off£t
 + 
d©a£éí
Ë> 
IPFIX_DEFAULT_BUFLEN
 ) {

2397 i‡–
ifh
->
cs_tid
 )

2398 
	`_föish_cs
–
ifh
 );

2399 
√w£t_f
 = 1;

2401 i‡–
	`_ùfix_exp‹t_Êush
–
ifh
 ) <0 )

2406 
buf
 = (
uöt8_t
*)(
ifh
->
buf„r
Ë+ ifh->
off£t
;

2407 
buÊí
 = 0;

2409 i‡–
√w£t_f
 ) {

2412 
ifh
->
cs_byãs
 = 0;

2413 
ifh
->
cs_hódî
 = 
buf
;

2414 
ifh
->
cs_tid
 = 
ãm∂
->
tid
;

2415 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
ãm∂
->
tid
 );

2416 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
d©a£éí
 );

2423  
i
=0; i<
nfõlds
; i++ ) {

2424 i‡–
ãm∂
->
fõlds
[
i
].
Êígth
 =
IPFIX_FT_VARLEN
 ) {

2425 i‡–
Àngths
[
i
]>254 ) {

2426 *(
buf
+
buÊí
) = 0xFF;

2427 
buÊí
++;

2428 
	`INSERTU16
–
buf
+
buÊí
, buÊí, 
Àngths
[
i
] );

2431 *(
buf
+
buÊí
Ë
Àngths
[
i
];

2432 
buÊí
++;

2435 
p
 = 
fõlds
[
i
];

2436 i‡–
ãm∂
->
fõlds
[
i
].
ªœy_f
 ) {

2437 
	`ùfix_ícode_byãs
–
p
, 
buf
+
buÊí
, 
Àngths
[
i
] );

2440 
ãm∂
->
fõlds
[
i
].
ñem
->
	`ícode
–
p
, 
buf
+
buÊí
, 
Àngths
[i] );

2442 
buÊí
 +
Àngths
[
i
];

2445 
ifh
->
ƒec‹ds
 ++;

2446 
ifh
->
off£t
 +
buÊí
;

2447 
ifh
->
cs_byãs
 +
buÊí
;

2448 i‡–
ifh
->
vîsi⁄
 =
IPFIX_VERSION
 ) {

2449 
ifh
->
£qno
 ++;

2452 
	}
}

2458 
	$_ùfix_exp‹t_Êush
–
ùfix_t
 *
ifh
 )

2460 
iobuf_t
 *
buf
;

2461 
ùfix_cﬁÀ˘‹_t
 *
cﬁ
;

2462 
ªt
;

2464 i‡–(
ifh
==
NULL
Ë|| (ifh->
off£t
==0) )

2467 i‡–
ifh
->
cs_tid
 > 0 ) {

2469 
	`_föish_cs
–
ifh
 );

2472 i‡–(
buf
=
	`_ùfix_gëbuf
()Ë==
NULL
 )

2475 #ifde‡
DEBUG


2476 
	`mlogf
( 0, "[ipfix_export_flush] msg has %dÑecords, %d bytes\n",

2477 
ifh
->
ƒec‹ds
, ifh->
off£t
 );

2479 
	`_ùfix_wrôe_hdr
–
ifh
, 
buf
 );

2480 
	`mem˝y
–
buf
->
buf„r
+buf->
buÊí
, 
ifh
->buf„r, ifh->
off£t
 );

2481 
buf
->
buÊí
 +
ifh
->
off£t
;

2483 
cﬁ
 = 
ifh
->
cﬁÀ˘‹s
;

2484 
ªt
 = 0;

2485  
cﬁ
 ) {

2486 i‡–
	`_ùfix_£nd_msg
–
ifh
, 
cﬁ
, 
buf
 ) <0 ) {

2487 
ªt
 = -1;

2490 
ifh
->
off£t
 = 0;

2491 
ifh
->
ƒec‹ds
 = 0;

2494 
cﬁ
 = cﬁ->
√xt
;

2497 
	`_ùfix_‰ìbuf
–
buf
 );

2498  
ªt
;

2499 
	}
}

2501 
	$ùfix_exp‹t_¨øy
–
ùfix_t
 *
ifh
,

2502 
ùfix_ãm∂©e_t
 *
ãm∂
,

2503 
nfõlds
,

2504 **
fõlds
,

2505 
uöt16_t
 *
Àngths
 )

2507 
ªt
;

2509 
	`mod_lock
();

2510 
ªt
 = 
	`_ùfix_exp‹t_¨øy
–
ifh
, 
ãm∂
, 
nfõlds
, 
fõlds
, 
Àngths
 );

2511 
	`mod_u∆ock
();

2513  
ªt
;

2514 
	}
}

2516 
	$ùfix_exp‹t_Êush
–
ùfix_t
 *
ifh
 )

2518 
ªt
;

2520 
	`mod_lock
();

2521 
ªt
 = 
	`_ùfix_exp‹t_Êush
–
ifh
 );

2522 
	`mod_u∆ock
();

2524  
ªt
;

2525 
	}
}

	@libipfix_110224/lib/ipfix.h

32 #i‚de‡
IPFIX_H


33 
	#IPFIX_H


	)

35 #ifde‡
__˝lu•lus


39 
	~<öây≥s.h
>

40 
	~<ùfix_def.h
>

42 #i‚de‡
ENOTSUP


43 
	#ENOTSUP
 
EOPNOTSUPP


	)

77 
uöt16_t
 
vîsi⁄
;

80 
uöt16_t
 
cou¡
;

81 
uöt32_t
 
sysu±ime
;

82 
uöt32_t
 
unixtime
;

83 } 
nf9
;

85 
uöt16_t
 
Àngth
;

86 
uöt32_t
 
exp‹âime
;

87 } 
ùfix
;

88 } 
u
;

89 
uöt32_t
 
£qno
;

90 
uöt32_t
 
sour˚id
;

92 } 
	tùfix_hdr_t
;

94 
	#IPFIX_VERSION_NF9
 0x09

	)

95 
	#IPFIX_HDR_BYTES_NF9
 20

	)

96 
	#IPFIX_SETID_TEMPLATE_NF9
 0

	)

97 
	#IPFIX_SETID_OPTTEMPLATE_NF9
 1

	)

99 
	#IPFIX_VERSION
 0x0A

	)

100 
	#IPFIX_HDR_BYTES
 16

	)

101 
	#IPFIX_SETID_TEMPLATE
 2

	)

102 
	#IPFIX_SETID_OPTTEMPLATE
 3

	)

103 
	#IPFIX_FT_VARLEN
 65535

	)

104 
	#IPFIX_FT_NOENO
 0

	)

105 
	#IPFIX_EFT_VENDOR_BIT
 0x8000

	)

107 
	#IPFIX_PORTNO
 4739

	)

108 
	#IPFIX_TLS_PORTNO
 4740

	)

110 
	#IPFIX_DFLT_TEMPLRESENDINT
 30

	)

111 
	#IPFIX_DFLT_TEMPLLIFETIME
 300

	)

116 
IPFIX_PROTO_SCTP
 = 132,

117 
IPFIX_PROTO_TCP
 = 6,

118 
IPFIX_PROTO_UDP
 = 17

119 } 
	tùfix_¥Ÿo_t
;

123 
uöt16_t
 
Êígth
;

124 
unknown_f
;

125 
ªœy_f
;

126 
ùfix_fõld_t
 *
ñem
;

127 } 
	tùfix_ãm∂©e_fõld_t
;

129 
	sùfix_d©¨ec‹d


131 **
addrs
;

132 
uöt16_t
 *
Àns
;

133 
uöt16_t
 
maxfõlds
;

134 } 
	tùfix_d©¨ec‹d_t
;

137 
DATA_TEMPLATE
, 
OPTION_TEMPLATE


138 } 
	tùfix_ãm∂_ty≥_t
;

140 
	sùfix_ãm∂©e


142 
ùfix_ãm∂©e
 *
√xt
;

143 
ùfix_ãm∂_ty≥_t
 
ty≥
;

144 
time_t
 
t£nd
;

146 
uöt16_t
 
tid
;

147 
nd©afõlds
;

148 
nsc›efõlds
;

149 
nfõlds
;

150 
ùfix_ãm∂©e_fõld_t
 *
fõlds
;

151 
maxfõlds
;

152 } 
	tùfix_ãm∂©e_t
;

156 
sour˚id
;

157 
vîsi⁄
;

158 *
cﬁÀ˘‹s
;

159 
ùfix_ãm∂©e_t
 *
ãm∂©es
;

161 *
buf„r
;

162 
ƒec‹ds
;

163 
size_t
 
off£t
;

164 
uöt32_t
 
£qno
;

167 
cs_tid
;

168 
cs_byãs
;

169 
uöt8_t
 *
cs_hódî
;

171 } 
	tùfix_t
;

174 
ío
;

175 
uöt16_t
 
õnum
;

176 
uöt16_t
 
Àngth
;

177 } 
	texp‹t_fõlds_t
;

181 
ùfix_›í
–
ùfix_t
 **
ifh
, 
sour˚id
, 
ùfix_vîsi⁄
 );

182 
ùfix_add_cﬁÀ˘‹
–
ùfix_t
 *
ifh
, *
ho°
, 
p‹t
,

183 
ùfix_¥Ÿo_t
 
¥Ÿocﬁ
 );

184 
ùfix_√w_d©a_ãm∂©e
–
ùfix_t
 *
ifh
,

185 
ùfix_ãm∂©e_t
 **
ãm∂
, 
nfõlds
 );

186 
ùfix_√w_›ti⁄_ãm∂©e
–
ùfix_t
 *
ifh
,

187 
ùfix_ãm∂©e_t
 **
ãm∂
, 
nfõlds
 );

188 
ùfix_add_fõld
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
,

189 
uöt32_t
 
íãΩri£_numbî
,

190 
uöt16_t
 
ty≥
, uöt16_à
Àngth
 );

191 
ùfix_add_sc›e_fõld
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
,

192 
uöt32_t
 
íãΩri£_numbî
,

193 
uöt16_t
 
ty≥
, uöt16_à
Àngth
 );

194 
ùfix_dñëe_ãm∂©e
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
 );

195 
ùfix_make_ãm∂©e
–
ùfix_t
 *
h™dÀ
, 
ùfix_ãm∂©e_t
 **
ãm∂
,

196 
exp‹t_fõlds_t
 *
fõlds
, 
nfõlds
 );

197 
ùfix_exp‹t
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
, ... );

198 
ùfix_exp‹t_¨øy
–
ùfix_t
 *
ifh
, 
ùfix_ãm∂©e_t
 *
ãm∂
,

199 
nfõlds
, **
fõlds
, 
uöt16_t
 *
Àngths
 );

200 
ùfix_exp‹t_Êush
–
ùfix_t
 *
ifh
 );

201 
ùfix_˛o£
–
ùfix_t
 *
ifh
 );

205 
	sùfix_s¶_›ti⁄s
 {

206 *
ˇfûe
;

207 *
ˇdú
;

208 *
keyfûe
;

209 *
˚πfûe
;

210 } 
	tùfix_s¶_›ts_t
;

212 
ùfix_add_cﬁÀ˘‹_s¶
–
ùfix_t
 *
ifh
, *
ho°
, 
p‹t
,

213 
ùfix_¥Ÿo_t
 
¥Ÿocﬁ
,

214 
ùfix_s¶_›ts_t
 *
s¶_›ts
 );

218 
ùfix_fõld_t
 *
ùfix_gë_·öfo
–
ío
, 
·id
 );

219 
ùfix_gë_ío_õid
–*
fõld
, *
ío
, *
õid
 );

220 
ùfix_fõld_t
 *
ùfix_¸óã_unknown_·öfo
–
ío
, 
·id
 );

221 
ùfix_‰ì_unknown_·öfo
–
ùfix_fõld_t
 *
f
 );

226 
ùfix_öô
( );

227 
ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_fõld_ty≥_t
 *
fõlds
 );

228 
ùfix_˛ónup
( );

230 #ifde‡
__˝lu•lus


	@libipfix_110224/lib/ipfix_col.c

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<uni°d.h
>

45 
	~<°rög.h
>

46 
	~<î∫o.h
>

47 
	~<sig«l.h
>

48 
	~<limôs.h
>

49 
	~<°d¨g.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/°©.h
>

52 
	~<sys/sockë.h
>

53 
	~<sys/time.h
>

54 
	~<time.h
>

55 
	~<√töë/ö.h
>

56 #ifde‡
SCTPSUPPORT


57 
	~<√töë/s˘p.h
>

59 
	~<¨∑/öë.h
>

60 
	~<f˙é.h
>

61 
	~<√tdb.h
>

63 
	~"libmisc/misc.h
"

64 
	~"ùfix.h
"

65 #ifde‡
SSLSUPPORT


66 
	~"ùfix_s¶.h
"

68 #ifde‡
DBSUPPORT


69 
	~"ùfix_db.h
"

71 
	~"ùfix_cﬁ.h
"

75 
	#DFLT_TEMPL_LIFETIME
 300

	)

77 #i‚de‡
INET6_ADDRSTRLEN


78 
	#INET6_ADDRSTRLEN
 100

	)

81 
	#READ16
(
b
Ë((*(b)<<8)|*((b)+1))

	)

82 
	#READ32
(
b
Ë((((((*(b)<<8)|*(b+1))<<8)|(*(b+2)))<<8)|*(b+3))

	)

86 
	st˝_c⁄n_node


88 
ùfixs_node_t
 *
	msour˚s
;

89 
ùfix_öput_t
 *
	mdëaûs
;

90 } 
	tt˝_c⁄n_t
;

92 
	ss˘p_assoc_node


94 
s˘p_assoc_node
 *
	m√xt
;

95 
ùfixs_node_t
 *
	msour˚s
;

96 
uöt32_t
 
	massoc_id
;

97 } 
	ts˘p_assoc_node_t
;

99 #ifde‡
SSLSUPPORT


100 
	ss¶_c⁄n_node


102 
s¶_c⁄n_node
 *
	m√xt
;

103 
s¶_c⁄n_node
 *
	m¥ev
;

105 
SSL
 *
	ms¶
;

106 
BIO
 *
	mbio
;

107 
ùfixs_node_t
 *
	msour˚s
;

108 
ùfix_öput_t
 *
	mdëaûs
;

109 } 
	ts¶_c⁄n_t
;

111 
	sùfix_cﬁ_s¶_node


113 
ùfix_cﬁ_s¶_node
 *
	m√xt
;

114 
s¶_c⁄n_t
 *
	msc⁄
;

116 
SSL_CTX
 *
	m˘x
;

118 } 
	tùfix_cﬁ_s¶_node_t
;

120 
	sùfix_cﬁ_s¶


122 
ùfix_cﬁ_s¶_node_t
 *
	mnodes
;

124 
	mi
, *
	msocks
, 
	mnsocks
;

125 
SSL_CTX
 *
	m˘x
;

127 } 
	tùfix_cﬁ_s¶_t
;

133 c⁄° 
	gcvsid
[]="$Id: ipfix_col.c 166 2010-02-23 10:15:04Z csc $";

137 
	gg_ãm∂©e_li„time
 = 
DFLT_TEMPL_LIFETIME
;

139 
ùfixe_node_t
 *
	gg_exp‹ãr
 = 
NULL
;

140 
ùfixs_node_t
 *
	gudp_sour˚s
 = 
NULL
;

141 
m±imî_t
 
	gg_mt
;

143 #ifde‡
SCTPSUPPORT


144 
s˘p_assoc_node_t
 *
	gs˘p_assocs
 = 
NULL
;

149 
ùfixt_node_t
 *
_gë_ùfixt
–ùfixt_node_à*
éi°
, 
tid
 );

150 
ùfixs_node_t
 *
_gë_ùfix_sour˚
–ùfixs_node_à**
¶i°
,

151 
ùfix_öput_t
 *
öput
, 
uöt32_t
 
odid
 );

152 
_dñëe_ùfixt
–
ùfixt_node_t
 **
éi°
, ipfixt_node_à*
node
 );

153 
_dñëe_ùfix_sour˚
–
ùfixs_node_t
 **
¶i°
, ipfixs_node_à*
node
 );

161 
ùfixt_node_t
 *
	$_gë_ùfixt
–
ùfixt_node_t
 *
éi°
, 
tid
 )

163  
éi°
 )

165 i‡–
éi°
->
ùfixt
->
tid
 ==Åid )

166  
éi°
;

168 
éi°
 =Åli°->
√xt
;

171  
NULL
;

172 
	}
}

174 
	$_dñëe_ùfixt
–
ùfixt_node_t
 **
éi°
, ipfixt_node_à*
node
 )

176 
ùfixt_node_t
 *
œ°
, *
n
 = *
éi°
;

177 
i
;

179 if–
n
==
NULL
 ) {

182 i‡–
n
==
node
 ) {

183 *
éi°
 = 
node
->
√xt
;

184 
‰ìnode
;

187 
œ°
 = 
n
;

190  
n
 ) {

191 i‡–
n
 =
node
 ) {

192 
œ°
->
√xt
 = 
node
->next;

193 
‰ìnode
;

196 
œ°
 = 
n
;

197 
n
 =Ç->
√xt
;

200 
	`mlogf
–1, "[dñëe_ùfixt]Çodê%†nŸ found!\n", 
node
->
idít
 );

202 
‰ìnode
:

203  
i
=0; i < 
node
->
ùfixt
->
nfõlds
; i++ ) {

204 i‡–
node
->
ùfixt
->
fõlds
[
i
].
unknown_f
 ) {

205 
	`ùfix_‰ì_unknown_·öfo
–
node
->
ùfixt
->
fõlds
[
i
].
ñem
 );

208 
	`‰ì
(
node
->
ùfixt
->
fõlds
);

209 
	`‰ì
(
node
->
ùfixt
);

210 
	`‰ì
(
node
);

212 
	}
}

216 c⁄° *
	$my_öë_¡ﬂ
–
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
,

217 *
addrbuf
, 
size_t
 
addrbuÊí
, *
p‹t
 )

219 #ifde‡
INET6


220 
sockaddr_°‹age
 *
ˇddr
 = (sockaddr_°‹agê*)
addr
;

221 
sockaddr_ö
 *
sö
 =(sockaddr_ö *)
ˇddr
;

222 
sockaddr_ö6
 *
sö6
=(sockaddr_ö6 *)
ˇddr
;

224  
ˇddr
->
ss_Ámûy
 ) {

225 
AF_INET6
:

226 *
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

227  
	`öë_¡›
–
AF_INET6
,

228 (*)&(
sö6
->
sö6_addr
), 
addrbuf
, 
addrbuÊí
 );

229 
AF_INET
:

230 *
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

231  
	`öë_¡›
–
AF_INET
,

232 (*)&(
sö
->
sö_addr
), 
addrbuf
, 
addrbuÊí
 );

234 *
p‹t
 = 0;

238 
sockaddr_ö
 *
sö
 =(sockaddr_ö *)
addr
;

239 *
°r
 =
	`öë_¡ﬂ
–
sö
->
sö_addr
 );

241 *
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

242 
	`¢¥ötf
–
addrbuf
, 
addrbuÊí
, "%s", 
°r
?str:"unknown" );

243  
addrbuf
;

245 
	}
}

247 #ifde‡
INCR_RXTX_BUFSIZE


250 
	$_ad≠t_rcvdbuf
–
sock
 )

252 
sockbufsize
;

253 
sockÀn_t
 
Àn
 = (
sockbufsize
);

255 
sockbufsize
 = 0;

256 i‡–
	`gësock›t
–
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
,

257 (*)&
sockbufsize
, &
Àn
 )==0 ) {

258 
	`mlogf
–4, "[ùfix] deÁu…Ñcvbu‡i†%dkB\n", 
sockbufsize
/1024 );

260 
sockbufsize
 = 131072;

261 i‡–
	`£tsock›t
–
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
,

262 (*)&
sockbufsize
, 
Àn
 ) <0 ) {

263 
	`mlogf
–0, "[ùfix] sësock›t(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

266 
	`mlogf
–3, "[ùfix] sëÑcvbu‡tÿ%dkB\n", 
sockbufsize
/1024 );

267 
sockbufsize
 = 0;

268 i‡–
	`gësock›t
–
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
,

269 (*)&
sockbufsize
, &
Àn
 )==0 ) {

270 
	`mlogf
–4, "[ùfix]Ñcvbu‡i†now %dkB\n", 
sockbufsize
/1024 );

274 
	}
}

279 c⁄° *
	$ùfix_cﬁ_öput_gë_idít
–
ùfix_öput_t
 *
öput
 )

281 
addrbuf
[
INET6_ADDRSTRLEN
+1];

282 
p‹t
;

284 i‡–
öput
->
ty≥
 =
IPFIX_INPUT_IPCON
 ) {

285  
	`my_öë_¡ﬂ
–
öput
->
u
.
ùc⁄
.
addr
, i≈ut->u.ùc⁄.
addæí
,

286 
addrbuf
, ◊ddrbuf), &
p‹t
 );

291 
	}
}

295 
ùfix_öput_t
 *
	$_√w_ùfix_öput
–
ùfix_öput_t
 *
öput
 )

297 
ùfix_öput_t
 *
√w
;

299 i‡–
öput
==
NULL
 ) {

300 
î∫o
 = 
EINVAL
;

301  
NULL
;

304 i‡–(
√w
=
	`ˇŒoc
–1, (
ùfix_öput_t
))Ë==
NULL
)

305  
NULL
;

307 
√w
->
ty≥
 = 
öput
->type;

309  
öput
->
ty≥
 ) {

310 
IPFIX_INPUT_IPCON
:

311 
√w
->
u
.
ùc⁄
.
addæí
 = 
öput
->u.ipcon.addrlen;

312 i‡–(
√w
->
u
.
ùc⁄
.
addr
=
	`ˇŒoc
–1,Çew->u.ùc⁄.
addæí
 )Ë==
NULL
 ) {

313 
	`‰ì
–
√w
 );

314  
NULL
;

316 
	`mem˝y
–
√w
->
u
.
ùc⁄
.
addr
, 
öput
->u.ipcon.addr,

317 
√w
->
u
.
ùc⁄
.
addæí
 );

320 
IPFIX_INPUT_FILE
:

321 i‡–(
√w
->
u
.
fûe
.
«me
=
	`°rdup
–
öput
->u.fûe.«mê)Ë==
NULL
 ) {

322 
	`‰ì
–
√w
 );

323  
NULL
;

328 
î∫o
 = 
EINVAL
;

329  
NULL
;

332  
√w
;

333 
	}
}

337 
	$_‰ì_ùfix_öput
–
ùfix_öput_t
 *
öput
 )

339 i‡–
öput
==
NULL
 )

342 i‡–
öput
->
ty≥
==
IPFIX_INPUT_IPCON
 ) {

343 
	`‰ì
–
öput
->
u
.
ùc⁄
.
addr
 );

345 i‡–
öput
->
ty≥
==
IPFIX_INPUT_FILE
 ) {

346 
	`‰ì
–
öput
->
u
.
fûe
.
«me
 );

349 
	`‰ì
–
öput
 );

350 
	}
}

354 
	$_‰ì_ùfix_sour˚
–
ùfixs_node_t
 *
s
 )

356 i‡–
s
==
NULL
 )

359 i‡–
s
->
öput
 ) {

360 
	`_‰ì_ùfix_öput
–
s
->
öput
 );

363 
	`‰ì
–
s
 );

364 
	}
}

370 
ùfixs_node_t
 *
	$_gë_ùfix_sour˚
–
ùfixs_node_t
 **
¶i°
,

371 
ùfix_öput_t
 *
öput
,

372 
uöt32_t
 
odid
 )

374 
ùfixs_node_t
 *
s
 = *
¶i°
;

375 
ùfixe_node_t
 *
e
;

377  
s
 ) {

378 i‡–
s
->
odid
 == odid ) {

379 i‡–
öput
 =
NULL
 )

380  
s
;

382 i‡(
s
->
öput
->
ty≥
 == input->type) {

383  
öput
->
ty≥
 ) {

384 
IPFIX_INPUT_IPCON
:

385 i‡–(
s
->
öput
->
u
.
ùc⁄
.
addæí
 == input->u.ipcon.addrlen)

386 && (
	`memcmp
–
s
->
öput
->
u
.
ùc⁄
.
addr
,

387 
öput
->
u
.
ùc⁄
.
addr
,

388 
öput
->
u
.
ùc⁄
.
addæí
 ) ==0 ) ) {

389  
s
;

392 
IPFIX_INPUT_FILE
:

393 i‡–
	`°rcmp
–
s
->
öput
->
u
.
fûe
.
«me
,

394 
öput
->
u
.
fûe
.
«me
 ) ==0 ) {

395  
s
;

399 
î∫o
 = 
EINVAL
;

400  
NULL
;

405 
s
 = s->
√xt
;

410 i‡–(
s
=
	`ˇŒoc
–1, (
ùfixs_node_t
))Ë==
NULL
)

411  
NULL
;

412 
s
->
odid
 = odid;

415 i‡–(
s
->
öput
=
	`_√w_ùfix_öput
–öpuà)Ë==
NULL
 ) {

416 
	`‰ì
–
s
 );

417  
NULL
;

422  
e
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

423 i‡–
e
->
ñem
->
exp‹t_√wsour˚
 )

424 i‡–
e
->
ñem
->
	`exp‹t_√wsour˚
–
s
,É->ñem->
d©a
 ) <0 ) {

425 
	`_‰ì_ùfix_sour˚
(
s
);

426  
NULL
;

432 
s
->
√xt
 = *
¶i°
;

433 *
¶i°
 = 
s
;

434  
s
;

435 
	}
}

437 
	$_dñëe_ùfix_sour˚
–
ùfixs_node_t
 **
¶i°
, ipfixs_node_à*
node
 )

439 
ùfixs_node_t
 *
œ°
, *
n
 = *
¶i°
;

441 if–
n
==
NULL
 ) {

444 i‡–
n
==
node
 ) {

445 *
¶i°
 = 
node
->
√xt
;

446 
‰ìnode
;

449 
œ°
 = 
n
;

452  
n
 ) {

453 i‡–
n
 =
node
 ) {

454 
œ°
->
√xt
 = 
node
->next;

455 
‰ìnode
;

458 
œ°
 = 
n
;

459 
n
 =Ç->
√xt
;

462 
	`mlogf
–1, "[dñëe_ùfixs]Çodê%uÇŸ found!\n", (
u_öt
)
node
->
odid
 );

464 
‰ìnode
:

465 i‡–
node
->
Â
 ) {

466 
	`f˛o£
–
node
->
Â
 );

468  
node
->
ãm∂©es
 )

469 
	`_dñëe_ùfixt
–&(
node
->
ãm∂©es
),Çode->templates );

470 
	`_‰ì_ùfix_sour˚
–
node
 );

472 
	}
}

482 
	$ªadn
–
fd
, *
±r
, 
nbyãs
)

484 *
p
;

485 
∆e·
, 
ƒód
;

487 
∆e·
 = 
nbyãs
;

488 
p
 = 
±r
;

490 
∆e·
 > 0)

492 
ƒód
 = 
	`ªad
–
fd
, 
±r
, 
∆e·
 );

493 i‡(
ƒód
 <= 0)

494  (
ƒód
);

496 
∆e·
 -
ƒód
;

497 
±r
 +
ƒód
;

499  (
nbyãs
 - 
∆e·
);

500 
	}
}

502 #ifde‡
SSLSUPPORT


503 
	$s¶_ªadn
–
SSL
 *
s¶
, *
±r
, 
nbyãs
 )

505 *
p
;

506 
∆e·
, 
ƒód
;

508 
∆e·
 = 
nbyãs
;

509 
p
 = 
±r
;

511 
∆e·
 > 0) {

512 
ƒód
 = 
	`SSL_ªad
–
s¶
, 
±r
, 
∆e·
 );

513 i‡(
ƒód
 <= 0)

514  (
ƒód
);

516 
∆e·
 -
ƒód
;

517 
±r
 +
ƒód
;

519  (
nbyãs
 - 
∆e·
);

520 
	}
}

528 
	$ùfix_∑r£_hdr
–c⁄° 
uöt8_t
 *
buf
, 
size_t
 
buÊí
, 
ùfix_hdr_t
 *
hdr
 )

530 
uöt16_t
 
vîsi⁄
 = 
	`READ16
(
buf
);

532  
vîsi⁄
 ) {

533 
IPFIX_VERSION_NF9
:

534 i‡–
buÊí
 < 
IPFIX_HDR_BYTES_NF9
 )

536 
hdr
->
vîsi⁄
 = version;

537 
hdr
->
u
.
nf9
.
cou¡
 = 
	`READ16
(
buf
+2);

538 
hdr
->
u
.
nf9
.
sysu±ime
 = 
	`READ32
(
buf
+4);

539 
hdr
->
u
.
nf9
.
unixtime
 = 
	`READ32
(
buf
+8);

540 
hdr
->
£qno
 = 
	`READ32
(
buf
+12);

541 
hdr
->
sour˚id
 = 
	`READ32
(
buf
+16);

544 
IPFIX_VERSION
:

545 i‡–
buÊí
 < 
IPFIX_HDR_BYTES
 )

547 
hdr
->
vîsi⁄
 = version;

548 
hdr
->
u
.
ùfix
.
Àngth
 = 
	`READ16
(
buf
+2);

549 
hdr
->
u
.
ùfix
.
exp‹âime
 = 
	`READ32
(
buf
+4);

550 
hdr
->
£qno
 = 
	`READ32
(
buf
+8);

551 
hdr
->
sour˚id
 = 
	`READ32
(
buf
+12);

555 
hdr
->
vîsi⁄
 = -1;

559 
	}
}

565 
	$ùfix_ªad_ãm∂_fõld
–c⁄° 
uöt8_t
 *
buf
,

566 
size_t
 
buÊí
,

567 
size_t
 *
ƒód
,

568 
ùfix_ãm∂©e_fõld_t
 *
fõld
 )

570 
·y≥
, 
ío
;

572 i‡–
buÊí
<4 ) {

575 
·y≥
 = 
	`READ16
(
buf
);

576 
fõld
->
Êígth
 = 
	`READ16
(
buf
+2);

577 (*
ƒód
) += 4;

579 i‡–
·y≥
 & 
IPFIX_EFT_VENDOR_BIT
 ) {

580 i‡–
buÊí
<8 ) {

583 
·y≥
 &(~
IPFIX_EFT_VENDOR_BIT
);

584 
ío
 = 
	`READ32
(
buf
+4);

585 (*
ƒód
) += 4;

587 
ío
 = 
IPFIX_FT_NOENO
;

590 i‡((
fõld
->
ñem
 = 
	`ùfix_gë_·öfo
–
ío
, 
·y≥
 )Ë==
NULL
) {

593 i‡((
fõld
->
ñem
 = 
	`ùfix_¸óã_unknown_·öfo
–
ío
, 
·y≥
 )Ë==
NULL
) {

596 
fõld
->
unknown_f
 =1;

598 
fõld
->
unknown_f
 =0;

602 
	}
}

609 
	$ùfix_exp‹t_hdr
–
ùfixs_node_t
 *
s
, 
ùfix_hdr_t
 *
hdr
 )

611 
ùfixe_node_t
 *
e
;

612 
ªtvÆ
=0;

614 i‡–!
hdr
 || !
s
)

619  
e
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

620 i‡–
e
->
ñem
->
exp‹t_√wmsg
 )

621 i‡–
e
->
ñem
->
	`exp‹t_√wmsg
–
s
, 
hdr
,É->ñem->
d©a
 ) <0 )

622 
ªtvÆ
=-1;

625  
ªtvÆ
;

626 
	}
}

633 
	$ùfix_decode_åec‹d
–
ùfixs_node_t
 *
s
,

634 
£tid
,

635 c⁄° 
uöt8_t
 *
buf
,

636 
size_t
 
Àn
,

637 *
ƒód
,

638 
ùfixt_node_t
 **
ãm∂
 )

640 
ùfix_ãm∂©e_t
 *
t
;

641 
ùfixt_node_t
 *
n
;

642 
uöt16_t
 
ãm∂id
, 
nfõlds
, 
nsc›efõlds
, 
nd©afõlds
;

643 
i
, 
√wnode
 =0;

644 
size_t
 
off£t
;

645 *
func
 = "ipfix_decode_trecord";

647 
î∫o
 = 
EIO
;

651  
£tid
 ) {

652 
IPFIX_SETID_OPTTEMPLATE
:

653 i‡–
Àn
<6 )

654 
i€º
;

655 
ãm∂id
 = 
	`READ16
(
buf
);

656 
nfõlds
 = 
	`READ16
(
buf
+2);

657 
nsc›efõlds
 = 
	`READ16
(
buf
+4);

658 
off£t
 = 6;

659 
nd©afõlds
 = 
nfõlds
 - 
nsc›efõlds
;

661 
IPFIX_SETID_OPTTEMPLATE_NF9
:

663 
size_t
 
sc›ñí
, 
›ti⁄Àn
;

665 i‡–
Àn
<6 )

666 
i€º
;

667 
ãm∂id
 = 
	`READ16
(
buf
);

668 
sc›ñí
 = 
	`READ16
(
buf
+2);

669 
›ti⁄Àn
 = 
	`READ16
(
buf
+4);

670 
off£t
 = 6;

671 i‡–(
sc›ñí
+
›ti⁄Àn
Ë< 
Àn
 ) {

672 
	`mlogf
–1, "[%s]Ñód invÆidÇf9Åem∂©ê%d\n", 
func
, 
ãm∂id
 );

675 
nsc›efõlds
 = 
sc›ñí
 / 4;

676 
nd©afõlds
 = 
›ti⁄Àn
 / 4;

677 
nfõlds
 = 
nsc›efõlds
 + 
nd©afõlds
;

680 
IPFIX_SETID_TEMPLATE
:

681 
IPFIX_SETID_TEMPLATE_NF9
:

682 i‡–
Àn
<4 )

683 
i€º
;

684 
ãm∂id
 = 
	`READ16
(
buf
);

685 
nfõlds
 = 
	`READ16
(
buf
+2);

686 
off£t
 = 4;

687 
nd©afõlds
 = 
nfõlds
;

688 
nsc›efõlds
 = 0;

694 i‡–
nfõlds
 == 0 ) {

697 i‡–
ãm∂id
 =
£tid
 ) {

698  
s
->
ãm∂©es
 )

699 
	`_dñëe_ùfixt
–&(
s
->
ãm∂©es
), s->templates );

700 
	`mlogf
( 3, "[%s] %u withdrawállÅemplates\n",

701 
func
, (
u_öt
)
s
->
odid
 );

703 i‡–(
n
=
	`_gë_ùfixt
–
s
->
ãm∂©es
, 
ãm∂id
 )Ë=
NULL
) {

704 
	`mlogf
( 3, "[%s] %u got withdraw forÇon-existantÅemplate %d\n",

705 
func
, (
u_öt
)
s
->
odid
, 
ãm∂id
 );

707 
	`_dñëe_ùfixt
–&(
s
->
ãm∂©es
), 
n
 );

708 
	`mlogf
( 3, "[%s] %u withdrawÅemplate %u\n",

709 
func
, (
u_öt
)
s
->
odid
, 
ãm∂id
 );

712 *
ƒód
 = 
off£t
;

713 *
ãm∂
 = 
NULL
;

714 
î∫o
 = 0;

718 #ifde‡
DEBUG


719 
	`mlogf
( 3, "Åid=%d,Çfields=%d(%ds/%d)\n",

720 
ãm∂id
, 
nfõlds
, 
nsc›efõlds
, 
nd©afõlds
 );

725 i‡–((
n
=
	`_gë_ùfixt
–
s
->
ãm∂©es
, 
ãm∂id
 )Ë=
NULL
)

726 || (
nfõlds
 > 
n
->
ùfixt
->nfields) ) {

728 i‡–
n
 )

729 
	`_dñëe_ùfixt
–&(
s
->
ãm∂©es
), 
n
 );

733 i‡–(
t
=
	`ˇŒoc
–1, (
ùfix_ãm∂©e_t
Ë)Ë==
NULL
 )

736 i‡–(
n
=
	`ˇŒoc
–1, (
ùfixt_node_t
Ë)Ë==
NULL
 ) {

737 
	`‰ì
(
t
);

741 i‡–(
t
->
fõlds
=
	`ˇŒoc
–
nfõlds
,

742 (
ùfix_ãm∂©e_fõld_t
Ë)Ë==
NULL
 ) {

743 
	`‰ì
(
t
);

744 
	`‰ì
(
n
);

748 
√wnode
 =1;

749 
n
->
ùfixt
 = 
t
;

752 
√wnode
 =0;

753 
t
 = 
n
->
ùfixt
;

755  
i
=0; i<
nfõlds
; i++ ) {

756 i‡–
t
->
fõlds
[
i
].
unknown_f
 ) {

757 
	`ùfix_‰ì_unknown_·öfo
–
t
->
fõlds
[
i
].
ñem
 );

762 
t
->
tid
 = 
ãm∂id
;

763 
t
->
nfõlds
 =Çfields;

764 
t
->
nd©afõlds
 =Çdatafields;

765 
t
->
nsc›efõlds
 =Çscopefields;

769  
i
=0; i<
nfõlds
; i++ ) {

770 i‡–(
off£t
 >
Àn
)

771 || (
	`ùfix_ªad_ãm∂_fõld
–
buf
+
off£t
, 
Àn
-offset,

772 &
off£t
, &(
t
->
fõlds
[
i
]) ) <0 ) ) {

773 
îªnd
;

779 i‡–
	`ùfix_gë_ãm∂©e_idít
–
t
, 
n
->
idít
, (n->ident) )<0 ) {

780 
	`mlogf
–1, "[%s] w¨nög: ipfix_gë_ãm∂©e_idít(ËÁûed\n", 
func
 );

785 i‡–
√wnode
 ) {

786 
n
->
√xt
 = 
s
->
ãm∂©es
;

787 
s
->
ãm∂©es
 = 
n
;

789 
n
->
expúe_time
 = 
	`time
(
NULL
Ë+ 
g_ãm∂©e_li„time
;

790 *
ƒód
 = 
off£t
;

791 *
ãm∂
 = 
n
;

792 
î∫o
 = 0;

795 
îªnd
:

796 i‡–
√wnode
 ) {

797 
	`‰ì
(
t
);

798 
	`‰ì
(
n
);

801 
	`_dñëe_ùfixt
–&(
s
->
ãm∂©es
), 
n
 );

805 
i€º
:

806 
	`mlogf
–1, "[%s] invÆid mesßgêÀnght\n", 
func
 );

808 
	}
}

815 
	$ùfix_exp‹t_åec‹d
–
ùfixs_node_t
 *
s
,

816 
ùfixt_node_t
 *
t
 )

818 
ùfixe_node_t
 *
e
;

822  
e
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

823 i‡–
e
->
ñem
->
exp‹t_åec‹d
 )

824 (Ë
e
->
ñem
->
	`exp‹t_åec‹d
–
s
, 
t
,É->ñem->
d©a
 );

828 
	}
}

836 
	$ùfix_exp‹t_d©¨ec‹d
–
ùfixs_node_t
 *
s
,

837 
ùfixt_node_t
 *
t
,

838 
ùfix_d©¨ec‹d_t
 *
d©a
 )

840 
ùfixe_node_t
 *
e
;

844  
e
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

845 i‡–
e
->
ñem
->
exp‹t_dªc‹d
 )

846 (Ë
e
->
ñem
->
	`exp‹t_dªc‹d
–
s
, 
t
, 
d©a
,É->elem->data );

850 
	}
}

859 
	$ùfix_decode_d©¨ec‹d
–
ùfixt_node_t
 *
n
,

860 *
buf
,

861 
buÊí
,

862 *
ƒód
,

863 
ùfix_d©¨ec‹d_t
 *
d©a
 )

865 
uöt8_t
 *
p
;

866 
i
, 
Àn
, 
byã¶e·
;

867 *
func
 = "ipfix_decode_datarecord";

871 i‡–
n
->
ùfixt
->
nfõlds
 > 
d©a
->
maxfõlds
 ) {

872 i‡–
d©a
->
addrs
 ) 
	`‰ì
( data->addrs );

873 i‡–
d©a
->
Àns
 ) 
	`‰ì
( data->lens );

874 i‡–(
d©a
->
Àns
=
	`ˇŒoc
–
n
->
ùfixt
->
nfõlds
, (
uöt16_t
)))==
NULL
) {

875 
d©a
->
maxfõlds
 = 0;

878 i‡–(
d©a
->
addrs
=
	`ˇŒoc
–
n
->
ùfixt
->
nfõlds
, (*)))==
NULL
) {

879 
	`‰ì
–
d©a
->
Àns
 );

880 
d©a
->
Àns
 = 
NULL
;

881 
d©a
->
maxfõlds
 = 0;

884 
d©a
->
maxfõlds
 = 
n
->
ùfixt
->
nfõlds
;

889 
byã¶e·
 = 
buÊí
;

890 *
ƒód
 = 0;

891 
p
 = 
buf
;

892  
i
=0; i<
n
->
ùfixt
->
nfõlds
; i++ ) {

894 
Àn
 = 
n
->
ùfixt
->
fõlds
[
i
].
Êígth
;

895 i‡–
Àn
 =
IPFIX_FT_VARLEN
 ) {

896 
Àn
 =*
p
;

897 
p
++;

898 (*
ƒód
) ++;

899 i‡–
Àn
 == 255 ) {

900 
Àn
 = 
	`READ16
(
p
);

901 
p
 += 2;

902 (*
ƒód
) +=2;

906 
byã¶e·
 -
Àn
;

907 i‡–
byã¶e·
 < 0 ) {

908 
	`mlogf
–0, "[%s]Ñec‹d%d: msgÅoÿsh‹t\n", 
func
, 
i
+1 );

909 
î∫o
 = 
EIO
;

913 
n
->
ùfixt
->
fõlds
[
i
].
ñem
->
	`decode
(
p
,p,
Àn
);

915 
d©a
->
Àns
[
i
] = 
Àn
;

916 
d©a
->
addrs
[
i
] = 
p
;

918 
p
 +
Àn
;

919 (*
ƒód
Ë+
Àn
;

923 
	}
}

925 
	$ùfix_‰ì_d©¨ec‹d
–
ùfix_d©¨ec‹d_t
 *
d©a
 )

927 i‡–
d©a
 ) {

928 i‡–
d©a
->
addrs
 )

929 
	`‰ì
–
d©a
->
addrs
 );

930 i‡–
d©a
->
Àns
 )

931 
	`‰ì
–
d©a
->
Àns
 );

932 
	`mem£t
–
d©a
, 0, (
ùfix_d©¨ec‹d_t
) );

934 
	}
}

936 
	$ùfix_∑r£_msg
–
ùfix_öput_t
 *
öput
,

937 
ùfixs_node_t
 **
sour˚s
,

938 c⁄° 
uöt8_t
 *
msg
, 
size_t
 
nbyãs
 )

940 
ùfix_hdr_t
 
hdr
;

941 
ùfixs_node_t
 *
s
;

942 
ùfix_d©¨ec‹d_t
 
d©a
 = { 
NULL
, NULL, 0 };

943 
ùfixe_node_t
 *
e
;

944 
uöt8_t
 *
buf
;

945 
uöt16_t
 
£tid
, 
£éí
;

946 
i
, 
ƒód
, 
off£t
;

947 
byãs
, 
byã¶e·
;

948 
îr_Êag
 = 0;

949 *
func
 = "ipfix_parse_msg";

951 
ùfix_cﬁ_öfo_t
 *
øw_exp‹ãr
 = 0;

953 i‡–
	`ùfix_∑r£_hdr
–(
uöt8_t
*)
msg
, 
nbyãs
, &
hdr
 ) <0 ) {

954 
	`mlogf
–1, "[%s]Ñód invÆid msg hódî!\n", 
func
 );

958  
hdr
.
vîsi⁄
 ) {

959 
IPFIX_VERSION_NF9
:

960 
buf
 = (
uöt8_t
*)
msg
;

961 
ƒód
 = 
IPFIX_HDR_BYTES_NF9
;

963 
IPFIX_VERSION
:

964 
buf
 = (
uöt8_t
*)
msg
;

965 
ƒód
 = 
IPFIX_HDR_BYTES
;

973 i‡–(
s
=
	`_gë_ùfix_sour˚
–
sour˚s
, 
öput
, 
hdr
.
sour˚id
 )Ë==
NULL
 ) {

974 
	`mlogf
–0, "[%s] c™nŸ inôÇew sour˚Çode!\n", 
func
 );

980 #ifde‡
DBSUPPORT


981 
s
->
œ°_mesßge_¢r
 = 
hdr
.
£qno
;

986 
e
 = 
g_exp‹ãr
;É !
NULL
;É =É->
√xt
) {

987 i‡(
e
->
ñem
->
exp‹t_øwmsg
) {

988 
øw_exp‹ãr
 = 
e
->
ñem
;

989 ()
øw_exp‹ãr
->
	`exp‹t_øwmsg
–
s
, 
msg
, 
nbyãs
,Ñaw_exp‹ãr->
d©a
);

990 
íd
;

994 i‡–
	`ùfix_exp‹t_hdr
–
s
, &
hdr
 ) <0 )

999  
i
=0; (
ƒód
+4)<
nbyãs
; i++ ) {

1001 i‡–(
hdr
.
vîsi⁄
 =
IPFIX_VERSION_NF9
)

1002 && (
i
>=
hdr
.
u
.
nf9
.
cou¡
) ) {

1008 
£tid
 = 
	`READ16
(
buf
+
ƒód
);

1009 
£éí
 = 
	`READ16
(
buf
+
ƒód
+2);

1010 
ƒód
 += 4;

1011 i‡–
£éí
 <4 ) {

1012 
	`mlogf
( 0, "[%s] set%d: invalid setÜength %d\n",

1013 
func
, 
i
+1, 
£éí
 );

1016 
£éí
 -= 4;

1017 i‡–
£éí
 > (
nbyãs
-
ƒód
) ) {

1018 
ii
;

1020  
ii
=0; ii<
nbyãs
; ii++ )

1021 
	`Ârötf
–
°dîr
, "[%02x]", (
msg
[
ii
]&0xFF) );

1022 
	`Ârötf
–
°dîr
, "\n" );

1024 
	`mlogf
( 0, "[%s] set%d: messageÅoo short (%d>%d)!\n",

1025 
func
, 
i
+1, 
£éí
+
ƒód
, ()
nbyãs
 );

1026 
íd
;

1029 i‡–
mlog_vÀvñ
>2 )

1030 
	`mlogf
( 4, "[%s] set%d: sid=%u, setid=%d, setlen=%d\n",

1031 
func
, 
i
+1, (
u_öt
)
hdr
.
sour˚id
, 
£tid
, 
£éí
+4 );

1035 i‡–(
£tid
 =
IPFIX_SETID_TEMPLATE_NF9
)

1036 || (
£tid
 =
IPFIX_SETID_OPTTEMPLATE_NF9
)

1037 || (
£tid
 =
IPFIX_SETID_TEMPLATE
)

1038 || (
£tid
 =
IPFIX_SETID_OPTTEMPLATE
) ) {

1041 
ùfixt_node_t
 *
t
;

1043  
off£t
=
ƒód
, 
byã¶e·
=
£éí
; bytesleft>4; ) {

1045 
	`mlogf
( 3, "[%s] set%d: decodeÅemplate, setlen=%d,Üeft=%d\n",

1046 
func
, 
i
+1, 
£éí
, 
byã¶e·
 );

1048 i‡–
	`ùfix_decode_åec‹d
–
s
, 
£tid
, 
buf
+
off£t
,

1049 
byã¶e·
, &
byãs
, &
t
 ) <0 ) {

1050 
	`mlogf
( 0, "[%s]Ñecord%d: decodeÅemplate failed: %s\n",

1051 
func
, 
i
+1, 
	`°ªº‹
(
î∫o
) );

1055 i‡–
t
 && 
	`ùfix_exp‹t_åec‹d
–
s
,Å ) <0 ) {

1056 
îªnd
;

1058 
byã¶e·
 -
byãs
;

1059 
off£t
 +
byãs
;

1060 
	`mlogf
( 3, "[%s] set%d: %d bytes decoded\n",

1061 
func
, 
i
+1, 
byãs
 );

1064 
ƒód
 +
£éí
;

1066 i‡–
£tid
 >255 )

1070 
ùfixt_node_t
 *
t
;

1072 i‡–(
t
=
	`_gë_ùfixt
–
s
->
ãm∂©es
, 
£tid
 )Ë==
NULL
 ) {

1073 
	`mlogf
( 0, "[%s]ÇoÅemplate for %d, skip data set\n",

1074 
func
, 
£tid
 );

1075 
ƒód
 +
£éí
;

1076 
îr_Êag
 = 1;

1079  
e
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

1080 i‡–
e
->
ñem
->
exp‹t_d£t
 )

1081 (Ë
e
->
ñem
->
	`exp‹t_d£t
–
t
, 
buf
+
ƒód
, 
£éí
,

1082 
e
->
ñem
->
d©a
 );

1087  
off£t
=
ƒód
, 
byã¶e·
=
£éí
; bytesleft>4; ) {

1088 i‡–
	`ùfix_decode_d©¨ec‹d
–
t
, 
buf
+
off£t
, 
byã¶e·
,

1089 &
byãs
, &
d©a
 ) <0 ) {

1090 
	`mlogf
( 0, "[%s] set%d: decodeÑecord failed: %s\n",

1091 
func
, 
i
+1, 
	`°ªº‹
(
î∫o
) );

1092 
îªnd
;

1095 (Ë
	`ùfix_exp‹t_d©¨ec‹d
–
s
, 
t
, &
d©a
 );

1097 
byã¶e·
 -
byãs
;

1098 
off£t
 +
byãs
;

1101 i‡–
byã¶e·
 ) {

1102 
	`mlogf
( 3, "[%s] set%d: skip %d bytesÖadding\n",

1103 
func
, 
i
+1, 
byã¶e·
 );

1105 
ƒód
 +
£éí
;

1109 
	`mlogf
( 0, "[%s] set%d: invalid set id %d, set skipped!\n",

1110 
func
, 
i
+1, 
£tid
 );

1111 
ƒód
 +
£éí
;

1115 i‡–
îr_Êag
 )

1116 
îªnd
;

1118 
íd
:

1119 
	`ùfix_‰ì_d©¨ec‹d
–&
d©a
 );

1120  
ƒód
;

1122 
îªnd
:

1123 
	`ùfix_‰ì_d©¨ec‹d
–&
d©a
 );

1125 
	}
}

1127 
	$ùfix_∑r£_øw_msg
(
ùfixs_node_t
 *
§c
, 
ùfixe_node_t
 *
loˇl_exp‹ãr
, c⁄° 
uöt8_t
 *
msg
, 
size_t
 
nbyãs
 )

1129 
ùfix_hdr_t
 
hdr
;

1130 
ùfix_d©¨ec‹d_t
 
d©a
 = { 
NULL
, NULL, 0 };

1131 
ùfixe_node_t
 *
e
;

1132 
uöt8_t
 *
buf
;

1133 
uöt16_t
 
£tid
, 
£éí
;

1134 
i
, 
ƒód
, 
off£t
;

1135 
byãs
, 
byã¶e·
;

1136 
îr_Êag
 = 0;

1137 *
func
 = "ipfix_parse_raw_msg";

1139 i‡–
	`ùfix_∑r£_hdr
–(
uöt8_t
*)
msg
, 
nbyãs
, &
hdr
 ) <0 ) {

1140 
	`mlogf
–1, "[%s]Ñód invÆid msg hódî!\n", 
func
 );

1144  
hdr
.
vîsi⁄
 ) {

1145 
IPFIX_VERSION_NF9
:

1146 
buf
 = (
uöt8_t
*)
msg
;

1147 
ƒód
 = 
IPFIX_HDR_BYTES_NF9
;

1149 
IPFIX_VERSION
:

1150 
buf
 = (
uöt8_t
*)
msg
;

1151 
ƒód
 = 
IPFIX_HDR_BYTES
;

1157 i‡–
	`ùfix_exp‹t_hdr
–
§c
, &
hdr
 ) <0 )

1162  
i
=0; (
ƒód
+4)<
nbyãs
; i++ ) {

1164 i‡–(
hdr
.
vîsi⁄
 =
IPFIX_VERSION_NF9
)

1165 && (
i
>=
hdr
.
u
.
nf9
.
cou¡
) ) {

1171 
£tid
 = 
	`READ16
(
buf
+
ƒód
);

1172 
£éí
 = 
	`READ16
(
buf
+
ƒód
+2);

1173 
ƒód
 += 4;

1174 i‡–
£éí
 <4 ) {

1175 
	`mlogf
( 0, "[%s] set%d: invalid setÜength %d\n",

1176 
func
, 
i
+1, 
£éí
 );

1179 
£éí
 -= 4;

1180 i‡(
£éí
 > (
nbyãs
 - 
ƒód
)) {

1181 
ii
;

1183 
ii
 = 0; iò< 
nbyãs
; ii++)

1184 
	`Ârötf
(
°dîr
, "[%02x]", (
msg
[
ii
] & 0xFF));

1185 
	`Ârötf
(
°dîr
, "\n");

1187 
	`mlogf
(0, "[%s] së%d: mesßgêtoÿsh‹à(%d>%d)!\n", 
func
, 
i
 + 1,

1188 
£éí
 + 
ƒód
, (Ë
nbyãs
);

1189 
íd
;

1192 
	`mlogf
(4, "[%s] së%d: sid=%u, sëid=%d, sëÀn=%d\n", 
func
, 
i
 + 1,

1193 (
u_öt
Ë
hdr
.
sour˚id
, 
£tid
, 
£éí
 + 4);

1197 i‡–(
£tid
 =
IPFIX_SETID_TEMPLATE_NF9
)

1198 || (
£tid
 =
IPFIX_SETID_OPTTEMPLATE_NF9
)

1199 || (
£tid
 =
IPFIX_SETID_TEMPLATE
)

1200 || (
£tid
 =
IPFIX_SETID_OPTTEMPLATE
) ) {

1203 
ùfixt_node_t
 *
t
;

1205 
off£t
 = 
ƒód
, 
byã¶e·
 = 
£éí
; bytesleft > 4;) {

1207 
	`mlogf
(4, "[%s] set%d: decodeÅemplate, setlen=%d,Üeft=%d\n",

1208 
func
, 
i
 + 1, 
£éí
, 
byã¶e·
);

1210 i‡(
	`ùfix_decode_åec‹d
(
§c
, 
£tid
, 
buf
 + 
off£t
, 
byã¶e·
,

1211 &
byãs
, &
t
) < 0) {

1212 
	`mlogf
(0, "[%s]Ñecord%d: decodeÅemplate failed: %s\n",

1213 
func
, 
i
 + 1, 
	`°ªº‹
(
î∫o
));

1216 
e
 = 
loˇl_exp‹ãr
;É !
NULL
;É =É->
√xt
) {

1217 i‡(
e
->
ñem
->
exp‹t_åec‹d
)

1218 (Ë
e
->
ñem
->
	`exp‹t_åec‹d
(
§c
, 
t
,É->ñem->
d©a
);

1221 
byã¶e·
 -
byãs
;

1222 
off£t
 +
byãs
;

1223 
	`mlogf
(4, "[%s] së%d: %d byã†decoded\n", 
func
, 
i
 + 1,

1224 
byãs
);

1227 
ƒód
 +
£éí
;

1229 i‡–
£tid
 >255 )

1233 
ùfixt_node_t
 *
t
;

1235  
e
=
loˇl_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

1236 i‡–
e
->
ñem
->
exp‹t_d£t
 ) {

1237 (Ë
e
->
ñem
->
	`exp‹t_d£t
–
t
, 
buf
+
ƒód
, 
£éí
,

1238 
e
->
ñem
->
d©a
 );

1242 i‡–(
t
=
	`_gë_ùfixt
–
§c
->
ãm∂©es
, 
£tid
 )Ë==
NULL
 ) {

1243 
	`mlogf
( 0, "[%s]ÇoÅemplate for %d, skip data set\n",

1244 
func
, 
£tid
 );

1245 
ƒód
 +
£éí
;

1246 
îr_Êag
 = 1;

1252  
off£t
=
ƒód
, 
byã¶e·
=
£éí
; bytesleft>4; ) {

1253 i‡–
	`ùfix_decode_d©¨ec‹d
–
t
, 
buf
+
off£t
, 
byã¶e·
,

1254 &
byãs
, &
d©a
 ) <0 ) {

1255 
	`mlogf
( 0, "[%s] set%d: decodeÑecord failed: %s\n",

1256 
func
, 
i
+1, 
	`°ªº‹
(
î∫o
) );

1257 
îªnd
;

1260  
e
=
loˇl_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

1261 i‡–
e
->
ñem
->
exp‹t_dªc‹d
 )

1262 (Ë
e
->
ñem
->
	`exp‹t_dªc‹d
–
§c
, 
t
, &
d©a
,É->elem->data );

1267 
byã¶e·
 -
byãs
;

1268 
off£t
 +
byãs
;

1271 i‡–
byã¶e·
 ) {

1272 
	`mlogf
( 3, "[%s] set%d: skip %d bytesÖadding\n",

1273 
func
, 
i
+1, 
byã¶e·
 );

1275 
ƒód
 +
£éí
;

1279 
	`mlogf
( 0, "[%s] set%d: invalid set id %d, set skipped!\n",

1280 
func
, 
i
+1, 
£tid
 );

1281 
ƒód
 +
£éí
;

1285 i‡–
îr_Êag
 )

1286 
îªnd
;

1288 
íd
:

1289 
	`ùfix_‰ì_d©¨ec‹d
–&
d©a
 );

1290  
ƒód
;

1292 
îªnd
:

1293 
	`ùfix_‰ì_d©¨ec‹d
–&
d©a
 );

1295 
	}
}

1297 
	$¥o˚ss_˛õ¡_t˝
–
fd
, 
mask
, *
d©a
 )

1299 
ùfix_hdr_t
 
hdr
;

1300 
i
;

1301 
Àn
, 
•a˚
;

1302 
tmpbuf
[65500], *
buf
;

1303 
t˝_c⁄n_t
 *
tc⁄
 = (t˝_c⁄n_t*)
d©a
;

1304 *
func
 = "process_client_tcp";

1306 
	`mlogf
–4, "[%s] fd %d mask %d cÆÀd.\n", 
func
, 
fd
, 
mask
 );

1310 i‡–(
i
=
	`ªadn
–
fd
, 
tmpbuf
, 
IPFIX_HDR_BYTES_NF9
 )) !=IPFIX_HDR_BYTES_NF9 ) {

1311 i‡–
i
<0 ) {

1312 
	`mlogf
–1, "[%s]Ñód hódî faûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1313 
íd
;

1315 i‡–
i
==0 ) {

1316 
	`mlogf
–2, "[%s]ÑódÉm±y hódî\n", 
func
 );

1319 
íd
;

1322 i‡–
	`ùfix_∑r£_hdr
–(
uöt8_t
*)
tmpbuf
, 
IPFIX_HDR_BYTES_NF9
, &
hdr
 ) <0 ) {

1323 
	`mlogf
–1, "[%s]Ñód invÆid hódî.\n", 
func
 );

1324 
íd
;

1327 
buf
 = 
tmpbuf
 + 
IPFIX_HDR_BYTES_NF9
;

1328 
•a˚
 = (
tmpbuf
Ë- 
IPFIX_HDR_BYTES_NF9
;

1330 i‡–
hdr
.
vîsi⁄
 =
IPFIX_VERSION_NF9
 ) {

1334  
i
=0; i<
hdr
.
u
.
nf9
.
cou¡
; i++ )

1338 i‡–
•a˚
 < 4 ) {

1339 
	`mlogf
–1, "[%s]Ñec‹d%d: mesßgêtoÿl⁄g!\n", 
func
, 
i
+1 );

1340 
íd
;

1342 i‡–
	`ªadn
–
fd
, 
buf
, 4 ) !=4 ) {

1343 
	`mlogf
–1, "[%s]Ñec‹d%d: hd∏ªadÉº‹!\n", 
func
, 
i
+1 );

1344 
íd
;

1347 
Àn
 = (
	`READ16
(
buf
+2)) - 4;

1348 
buf
 += 4;

1349 
•a˚
 -= 4;

1350 #ifde‡
DEBUG


1351 
	`mlogf
–0, "[%s]Ñec‹d%d:Üí=%d, s∑˚=%d!\n", 
func
, 
i
+1, 
Àn
, 
•a˚
 );

1355 i‡–
•a˚
 < 
Àn
 ) {

1356 
	`mlogf
–0, "[%s]Ñec‹d%d: mesßgêtoÿl⁄g!\n", 
func
, 
i
+1 );

1357 
íd
;

1359 i‡–
	`ªadn
–
fd
, 
buf
, 
Àn
 ) !=len ) {

1360 
	`mlogf
( 0, "[%s]Ñecord%d:Üen=%d,ÑeadÉrror!\n",

1361 
func
, 
i
+1, 
Àn
 );

1362 
íd
;

1364 
buf
 +
Àn
;

1368 i‡–
	`ùfix_∑r£_msg
–
tc⁄
->
dëaûs
, &—c⁄->
sour˚s
),

1369 (
uöt8_t
*)
tmpbuf
, 
buf
-tmpbuf ) < 0 )

1370 
íd
;

1372 i‡–
hdr
.
vîsi⁄
 =
IPFIX_VERSION
 ) {

1376 
Àn
 = 
hdr
.
u
.
ùfix
.
Àngth
 - 
IPFIX_HDR_BYTES_NF9
;

1377 i‡–
•a˚
 < 
Àn
 ) {

1378 
	`mlogf
–0, "[%s] ipfix mesßgêtoÿl⁄g!\n", 
func
 );

1379 
íd
;

1382 i‡–
	`ªadn
–
fd
, 
buf
, 
Àn
 ) !=len ) {

1383 
	`mlogf
–0, "[%s] ipfix mesßgêªadÉº‹!\n", 
func
 );

1384 
íd
;

1387 i‡–
	`ùfix_∑r£_msg
–
tc⁄
->
dëaûs
, &—c⁄->
sour˚s
),

1388 (
uöt8_t
*)
tmpbuf
, 
hdr
.
u
.
ùfix
.
Àngth
 ) <0 )

1389 
íd
;

1392 
íd
;

1396 
íd
:

1399 
	`mlogf
–3, "[%s] fd %d c⁄√˘i⁄ clo£d.\n", 
func
, 
fd
 );

1400 
	`mpﬁl_fdrm
–
fd
 );

1401 
	`˛o£
–
fd
 );

1405  
tc⁄
->
sour˚s
 )

1406 
	`_dñëe_ùfix_sour˚
–&(
tc⁄
->
sour˚s
),Åcon->sources );

1407 
	`_‰ì_ùfix_öput
–
tc⁄
->
dëaûs
 );

1408 
	`‰ì
–
tc⁄
 );

1410 
	}
}

1412 
	$¥o˚ss_˛õ¡_udp
–
fd
, 
mask
, *
d©a
 )

1414 
ssize_t
 
nbyãs
;

1415 
buf
[65500];

1416 #ifde‡
INET6


1417 
sockaddr_°‹age
 
ˇddr
;

1419 
sockaddr_ö
 
ˇddr
;

1421 
sockÀn_t
 
ˇddæí
 = (
ˇddr
);

1422 
ùfix_öput_t
 
öput
;

1423 *
func
 = "process_client_udp";

1425 
	`mlogf
–4, "[%s] %d/%d cÆÀd.\n", 
func
, 
fd
, 
mask
 );

1429 i‡((
nbyãs
=
	`ªcv‰om
–
fd
, 
buf
, 65000, 0,

1430 (
sockaddr
 *)&
ˇddr
, &
ˇddæí
 )) <0 ) {

1431 
	`mlogf
–0, "[%s]Ñecv‰om(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1435 
öput
.
ty≥
 = 
IPFIX_INPUT_IPCON
;

1436 
öput
.
u
.
ùc⁄
.
addr
 = (
sockaddr
 *)&
ˇddr
;

1437 
öput
.
u
.
ùc⁄
.
addæí
 = 
ˇddæí
;

1438 (Ë
	`ùfix_∑r£_msg
–&
öput
, &
udp_sour˚s
, (
uöt8_t
*)
buf
, 
nbyãs
 );

1439 
	}
}

1441 #ifde‡
SCTPSUPPORT


1446 
s˘p_assoc_node_t
 *
	$_s˘p_gë_assoc
–
s˘p_assoc_node_t
 *
li°
,

1447 
uöt32_t
 
assoc_id
 )

1449 
s˘p_assoc_node_t
 *
a
 = 
li°
;

1451  
a
 ) {

1452 i‡–
a
->
assoc_id
 ==ássoc_id )

1453  
a
;

1455 
a
 =á->
√xt
;

1458  
NULL
;

1459 
	}
}

1461 
s˘p_assoc_node_t
 *
	$_s˘p_√w_assoc
–
s˘p_assoc_node_t
 **
li°
,

1462 
uöt32_t
 
assoc_id
 )

1464 
s˘p_assoc_node_t
 *
a
 = *
li°
;

1466  
a
 ) {

1467 i‡–
a
->
assoc_id
 ==ássoc_id ) {

1468 
	`mlogf
( 0, "[ipfix] oops ipfixássoc %xálreadyáctive!\n",

1469 
assoc_id
 );

1471  
a
;

1474 
a
 =á->
√xt
;

1479 i‡–(
a
=
	`ˇŒoc
–1, (
s˘p_assoc_node_t
))Ë==
NULL
)

1480  
NULL
;

1481 
a
->
assoc_id
 =ássoc_id;

1485 
a
->
√xt
 = *
li°
;

1486 *
li°
 = 
a
;

1487  
a
;

1488 
	}
}

1490 
	$_s˘p_dñëe_assoc
–
s˘p_assoc_node_t
 **
li°
, 
uöt32_t
 
assoc_id
 )

1492 
s˘p_assoc_node_t
 *
œ°
=*
li°
, *
n
=*list;

1494 if–
n
==
NULL
 ) {

1497 i‡–
n
->
assoc_id
==assoc_id ) {

1498 *
li°
 = 
n
->
√xt
;

1499 
‰ìnode
;

1502  
n
 ) {

1503 i‡–
n
->
assoc_id
 ==ássoc_id ) {

1504 
œ°
->
√xt
 = 
n
->next;

1505 
‰ìnode
;

1508 
œ°
 = 
n
;

1509 
n
 =Ç->
√xt
;

1512 
‰ìnode
:

1513 i‡–
n
 ) {

1514  
n
->
sour˚s
 ) {

1515 
	`_dñëe_ùfix_sour˚
–&(
n
->
sour˚s
),Ç->sources );

1517 
	`‰ì
–
n
 );

1520 
	}
}

1523 
	$¥o˚ss_˛õ¡_s˘p
–
fd
, 
mask
, *
d©a
 )

1525 #ifde‡
INET6


1526 
sockaddr_°‹age
 
ˇddr
;

1528 
sockaddr_ö
 
ˇddr
;

1530 
sockÀn_t
 
ˇddæí
 = (
ˇddr
);

1531 
ùfix_öput_t
 
öput
;

1532 
s˘p_¢drcvöfo
 
§i
;

1533 
msg_Êags
;

1534 
s˘p_assoc_node_t
 *
assoc
;

1535 
ssize_t
 
nbyãs
;

1536 
buf
[65500];

1537 *
func
 = "process_client_sctp";

1539 
	`mlogf
–4, "[%s] %d/%d cÆÀd.\n", 
func
, 
fd
, 
mask
 );

1543 i‡((
nbyãs
=
	`s˘p_ªcvmsg
–
fd
, 
buf
, 65000,

1544 (
sockaddr
 *)&
ˇddr
, &
ˇddæí
,

1545 &
§i
, &
msg_Êags
 )) <0 ) {

1546 
	`mlogf
–0, "[%s] s˘p_ªcvmsg(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1547 
íd
;

1549 i‡–
msg_Êags
 & 
MSG_NOTIFICATION
 ) {

1550 
s˘p_nŸifiˇti⁄
 *
¢p
 = (s˘p_nŸifiˇti⁄ *)
buf
;

1552 i‡–
¢p
->
¢_hódî
.
¢_ty≥
 =
SCTP_ASSOC_CHANGE
 ) {

1553 
s˘p_assoc_ch™ge
 *
ßc
 = &
¢p
->
¢_assoc_ch™ge
;

1555  
ßc
->
ßc_°©e
 ) {

1556 
SCTP_COMM_UP
:

1557 ()
	`_s˘p_√w_assoc
–&
s˘p_assocs
, 
ßc
->
ßc_assoc_id
 );

1558 
	`mlogf
( 4, "[%s]Çewássoc 0x%x (state=%d)\n",

1559 
func
, 
ßc
->
ßc_assoc_id
, sac->
ßc_°©e
 );

1561 
SCTP_RESTART
:

1562 
	`mlogf
( 4, "[%s]Ñestartássoc 0x%x (state=%d)\n",

1563 
func
, 
ßc
->
ßc_assoc_id
, sac->
ßc_°©e
 );

1566 ()
	`_s˘p_dñëe_assoc
–&
s˘p_assocs
, 
ßc
->
ßc_assoc_id
 );

1567 
	`mlogf
( 4, "[%s]Ñmássoc 0x%x (state=%d)\n",

1568 
func
, 
ßc
->
ßc_assoc_id
, sac->
ßc_°©e
 );

1578 i‡–(
assoc
=
	`_s˘p_gë_assoc
–
s˘p_assocs
, 
§i
.
söfo_assoc_id
 )Ë==
NULL
 ) {

1579 
	`mlogf
( 0, "[%s] unknownássoc_id 0x%x skipped\n",

1580 
func
, 
§i
.
söfo_assoc_id
 );

1584 
	`mlogf
( 3, "[%s] got SCTP message of %lu bytes.\n",

1585 
func
, 
nbyãs
 );

1589 
öput
.
ty≥
 = 
IPFIX_INPUT_IPCON
;

1590 
öput
.
u
.
ùc⁄
.
addr
 = (
sockaddr
 *)&
ˇddr
;

1591 
öput
.
u
.
ùc⁄
.
addæí
 = 
ˇddæí
;

1592 (Ë
	`ùfix_∑r£_msg
–&
öput
, &(
assoc
->
sour˚s
), (
uöt8_t
*)
buf
, 
nbyãs
 );

1593 
	`mlogf
( 3, "[%s] SCTP message had %lu bytes.\n",

1594 
func
, 
nbyãs
 );

1597 
íd
:

1601 
	`mlogf
–3, "[%s] fd %d c⁄√˘i⁄ clo£d.\n", 
func
, 
fd
 );

1602 
	`mpﬁl_fdrm
–
fd
 );

1603 
	`˛o£
–
fd
 );

1604 
	}
}

1607 
	$t˝_ac˚±_cb
–
fd
, 
mask
, *
d©a
 )

1611 #ifde‡
INET6


1612 
sockaddr_°‹age
 
ˇddr
;

1614 
sockaddr_ö
 
ˇddr
;

1616 
sockÀn_t
 
ˇddæí
 = (
ˇddr
);

1617 
√wsockfd
;

1618 
t˝_c⁄n_t
 *
tc⁄
;

1619 
ùfix_öput_t
 
öput
;

1620 *
func
 = "tcp_accept_cb";

1622 
√wsockfd
 = 
	`ac˚±
(
fd
, (
sockaddr
 *Ë&
ˇddr
, &
ˇddæí
);

1623 i‡(
√wsockfd
 < 0) {

1624 
	`mlogf
–0, "[%s]ác˚±(Ëîr‹: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1628 *
°r
, 
addrbuf
[
INET6_ADDRSTRLEN
+1];

1629 
p‹t
;

1631 
°r
 = (*)
	`my_öë_¡ﬂ
–(
sockaddr
 *)&
ˇddr
, 
ˇddæí
,

1632 
addrbuf
, ◊ddrbuf), &
p‹t
 );

1633 
	`mlogf
( 2, "[%s] fd %d connection from %s/%d\n",

1634 
func
, 
√wsockfd
, 
°r
?°r:"îr‹", 
p‹t
 );

1637 i‡–(
tc⁄
=
	`ˇŒoc
–1, (
t˝_c⁄n_t
))Ë==
NULL
 ) {

1638 
	`mlogf
–0, "[%s] ouào‡mem‹y\n", 
func
 );

1639 
	`˛o£
–
√wsockfd
 );

1644 
öput
.
ty≥
 = 
IPFIX_INPUT_IPCON
;

1645 
öput
.
u
.
ùc⁄
.
addr
 = (
sockaddr
 *)&
ˇddr
;

1646 
öput
.
u
.
ùc⁄
.
addæí
 = 
ˇddæí
;

1647 i‡–(
tc⁄
->
dëaûs
=
	`_√w_ùfix_öput
–&
öput
 )Ë==
NULL
 ) {

1648 
	`mlogf
–0, "[%s] faûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1649 
	`‰ì
–
tc⁄
 );

1650 
	`˛o£
–
√wsockfd
 );

1655 i‡–
	`mpﬁl_fdadd
–
√wsockfd
, 
MPOLL_IN
,

1656 
¥o˚ss_˛õ¡_t˝
, (*)
tc⁄
 ) <0 ) {

1657 
	`mlogf
( 0, "[%s] mpoll_fdadd() failed: %s\n",

1658 
func
, 
	`°ªº‹
(
î∫o
) );

1659 
	`˛o£
–
√wsockfd
 );

1660 
	`_‰ì_ùfix_öput
–
tc⁄
->
dëaûs
 );

1661 
	`‰ì
–
tc⁄
 );

1665 
	}
}

1667 #ifde‡
SSLSUPPORT


1668 
	$¥o˚ss_˛õ¡_s¶
–
fd
, 
mask
, *
d©a
 )

1670 
ùfix_hdr_t
 
hdr
;

1671 
i
;

1672 
ssize_t
 
nbyãs
;

1673 
tmpbuf
[65500], *
buf
;

1674 
Àn
, 
•a˚
, 
îr
;

1675 
s¶_c⁄n_t
 *
sc⁄
 = (s¶_c⁄n_t*)
d©a
;

1676 *
func
 = "process_client_ssl";

1678 
	`mlogf
–4, "[%s] %d/%d cÆÀd.\n", 
func
, 
fd
, 
mask
 );

1682 i‡–(
i
=
	`s¶_ªadn
–
sc⁄
->
s¶
,

1683 
tmpbuf
, 
IPFIX_HDR_BYTES_NF9
 )) !=IPFIX_HDR_BYTES_NF9 ) {

1684 i‡–
i
<0 ) {

1685 
îr
 = 
	`SSL_gë_îr‹
–
sc⁄
->
s¶
, 
i
 ) ;

1686 
	`mlogf
( 1, "[%s]Ñead header failed (sslÉrr=%d): %s\n",

1687 
func
, 
îr
, 
	`°ªº‹
(
î∫o
) );

1688 
íd
;

1690 i‡–
i
==0 ) {

1691 
	`mlogf
–2, "[%s]ÑódÉm±y hódî\n", 
func
 );

1694 
íd
;

1697 i‡–
	`ùfix_∑r£_hdr
–(
uöt8_t
*)
tmpbuf
, 
IPFIX_HDR_BYTES_NF9
, &
hdr
 ) <0 ) {

1698 
	`mlogf
–1, "[%s]Ñód invÆid hódî.\n", 
func
 );

1699 
íd
;

1702 
buf
 = 
tmpbuf
 + 
IPFIX_HDR_BYTES_NF9
;

1703 
•a˚
 = (
tmpbuf
Ë- 
IPFIX_HDR_BYTES_NF9
;

1705 i‡–
hdr
.
vîsi⁄
 =
IPFIX_VERSION_NF9
 ) {

1708  
i
=0; i<
hdr
.
u
.
nf9
.
cou¡
; i++ ) {

1711 i‡–
•a˚
 < 4 ) {

1712 
	`mlogf
–1, "[%s]Ñec‹d%d: mesßgêtoÿl⁄g!\n", 
func
, 
i
+1 );

1713 
íd
;

1715 i‡–
	`s¶_ªadn
–
sc⁄
->
s¶
, 
buf
, 4 ) !=4 ) {

1716 
	`mlogf
–1, "[%s]Ñec‹d%d: hd∏ªadÉº‹!\n", 
func
, 
i
+1 );

1717 
íd
;

1720 
Àn
 = (
	`READ16
(
buf
+2)) - 4;

1721 
buf
 += 4;

1722 
•a˚
 -= 4;

1723 #ifde‡
DEBUG


1724 
	`mlogf
–0, "[%s]Ñec‹d%d:Üí=%d, s∑˚=%d!\n", 
func
, 
i
+1, 
Àn
, 
•a˚
 );

1728 i‡–
•a˚
 < 
Àn
 ) {

1729 
	`mlogf
–0, "[%s]Ñec‹d%d: mesßgêtoÿl⁄g!\n", 
func
, 
i
+1 );

1730 
íd
;

1732 i‡–
	`s¶_ªadn
–
sc⁄
->
s¶
, 
buf
, 
Àn
 ) !=len ) {

1733 
	`mlogf
( 0, "[%s]Ñecord%d:Üen=%d,ÑeadÉrror!\n",

1734 
func
, 
i
+1, 
Àn
 );

1735 
íd
;

1737 
buf
 +
Àn
;

1741 i‡–
	`ùfix_∑r£_msg
–
sc⁄
->
dëaûs
, &(sc⁄->
sour˚s
),

1742 (
uöt8_t
*)
tmpbuf
, 
buf
-tmpbuf ) < 0 )

1743 
íd
;

1745 i‡–
hdr
.
vîsi⁄
 =
IPFIX_VERSION
 ) {

1748 
Àn
 = 
hdr
.
u
.
ùfix
.
Àngth
 - 
IPFIX_HDR_BYTES_NF9
;

1749 i‡–
•a˚
 < 
Àn
 ) {

1750 
	`mlogf
–0, "[%s] ipfix mesßgêtoÿl⁄g!\n", 
func
 );

1751 
íd
;

1754 i‡–(
nbyãs
=
	`s¶_ªadn
–
sc⁄
->
s¶
, 
buf
, 
Àn
 )) !=len ) {

1755 
	`mlogf
( 0, "[%s] ipfix messageÑeadÉrror (%d!=%d!\n",

1756 
func
, 
nbyãs
, 
Àn
 );

1757 
	`mlogf
( 0, "[%s] SSL_read() failed (%d/%d): %s\n",

1758 
func
, 
nbyãs
, 
	`SSL_gë_îr‹
–
sc⁄
->
s¶
,Çbytes),

1759 
	`°ªº‹
(
î∫o
) );

1760 
íd
;

1763 i‡–
	`ùfix_∑r£_msg
–
sc⁄
->
dëaûs
, &(sc⁄->
sour˚s
),

1764 (
uöt8_t
*)
tmpbuf
, 
hdr
.
u
.
ùfix
.
Àngth
 ) <0 ) {

1765 
íd
;

1769 
íd
;

1773 
íd
:

1774 
	`mlogf
–2, "[%s] s¶ c⁄√˘i⁄ clo£d, fd=%d\n", 
func
, 
fd
 );

1775 
	`mpﬁl_fdrm
–
fd
 );

1776 i‡–
	`SSL_gë_shutdown
–
sc⁄
->
s¶
Ë& 
SSL_RECEIVED_SHUTDOWN
 )

1777 
	`SSL_shutdown
–
sc⁄
->
s¶
 );

1779 
	`SSL_˛ór
–
sc⁄
->
s¶
 );

1780 
	`SSL_‰ì
(
sc⁄
->
s¶
);

1781 
sc⁄
->
s¶
 = 
NULL
;

1782  
sc⁄
->
sour˚s
 )

1783 
	`_dñëe_ùfix_sour˚
–&(
sc⁄
->
sour˚s
), scon->sources );

1784 
	`_‰ì_ùfix_öput
–
sc⁄
->
dëaûs
 );

1786 i‡–
sc⁄
->
¥ev
 ) {

1787 
sc⁄
->
¥ev
->
√xt
 = scon->next;

1789 i‡–
sc⁄
->
√xt
 ) {

1790 
sc⁄
->
√xt
->
¥ev
 = scon->prev;

1792 
	`‰ì
–
sc⁄
 );

1794 
	}
}

1796 
	$ac˚±_˛õ¡_s¶_cb
–
fd
, 
mask
, *
d©a
 )

1798 #ifde‡
INET6


1799 
sockaddr_°‹age
 
ˇddr
;

1801 
sockaddr_ö
 
ˇddr
;

1803 
sockÀn_t
 
ˇddæí
 = (
ˇddr
);

1804 
√wfd
, 
îr
;

1805 
ùfix_cﬁ_s¶_node_t
 *
cﬁ
 = (ùfix_cﬁ_s¶_node_t*)
d©a
;

1806 
s¶_c⁄n_t
 *
sc⁄
 = 
NULL
;

1807 
ùfix_öput_t
 
öput
;

1808 
BIO
 *
bio
 =
NULL
;

1809 
SSL
 *
s¶
 =
NULL
;

1810 
hbuf
[
NI_MAXHOST
];

1811 *
func
 = "accept_client_ssl_cb";

1815 
√wfd
 = 
	`ac˚±
(
fd
, (
sockaddr
 *Ë&
ˇddr
, &
ˇddæí
);

1816 i‡(
√wfd
 < 0) {

1817 
	`mlogf
–0, "[%s]ác˚±(Ëîr‹: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1821 i‡–
mlog_vÀvñ
 ) {

1822 *
°r
, 
addrbuf
[
INET6_ADDRSTRLEN
+1];

1823 
p‹t
;

1826 
°r
 = (*)
	`my_öë_¡ﬂ
–(
sockaddr
 *)&
ˇddr
, 
ˇddæí
,

1827 
addrbuf
, ◊ddrbuf), &
p‹t
 );

1828 
	`mlogf
( 2, "[%s] fd %d connection from %s/%d\n",

1829 
func
, 
√wfd
, 
°r
?°r:"îr‹", 
p‹t
 );

1833 i‡–(
sc⁄
=
	`ˇŒoc
–1, (
s¶_c⁄n_t
))Ë==
NULL
 ) {

1834 
	`mlogf
–0, "[%s] ouào‡mem‹y\n", 
func
 );

1835 
îr
;

1839 
öput
.
ty≥
 = 
IPFIX_INPUT_IPCON
;

1840 
öput
.
u
.
ùc⁄
.
addr
 = (
sockaddr
 *)&
ˇddr
;

1841 
öput
.
u
.
ùc⁄
.
addæí
 = 
ˇddæí
;

1842 i‡–(
sc⁄
->
dëaûs
=
	`_√w_ùfix_öput
–&
öput
 )Ë==
NULL
 ) {

1843 
	`mlogf
–0, "[%s] faûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1844 
îr
;

1847 i‡–(
bio
=
	`BIO_√w_sockë
–
√wfd
, 
BIO_NOCLOSE
 )Ë==
NULL
 ) {

1848 
	`mlogf
( 0, "[ipfix] BIO_new_socket() failed: %s\n",

1849 
	`°ªº‹
(
î∫o
) );

1850 
îr
;

1853 i‡–(
s¶
=
	`SSL_√w
–
cﬁ
->
˘x
 )Ë==
NULL
 ) {

1854 
	`mlogf
–0, "[ùfix] SSL_√w(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

1855 
îr
;

1858 
	`SSL_£t_ac˚±_°©e
–
s¶
 );

1859 
	`SSL_£t_bio
–
s¶
, 
bio
, bio );

1861 i‡–(
îr
=
	`SSL_ac˚±
(
s¶
)) <= 0) {

1862 
îr
 = 
	`SSL_gë_îr‹
–
s¶
,Érr );

1863 
	`mlogf
( 0, "[%s]Érroráccepting ssl connection:Érr=%d\n",

1864 
func
, 
îr
 );

1865 
îr
;

1868 i‡–
	`gë≥î«me
–
√wfd
, (
sockaddr
*)&
ˇddr
, &
ˇddæí
 ) <0 ) {

1869 
	`mlogf
( 0, "[%s] cannot getÖeeráddress: %s\n",

1870 
func
, 
	`°ªº‹
(
î∫o
) );

1871 
îr
;

1874 i‡–
	`gë«meöfo
–(
sockaddr
*)&
ˇddr
, 
ˇddæí
,

1875 
hbuf
, (hbuf), 
NULL
, 0, 0 ) <0 ) {

1876 
	`mlogf
–0, "[%s] c™nŸ gëÖì∏«me: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

1877 
îr
;

1880 i‡((
îr
 = 
	`ùfix_s¶_po°_c⁄√˘i⁄_check
(
s¶
, 
hbuf
)Ë!
X509_V_OK
) {

1881 
	`mlogf
( 0, "error:Öeer certificate: %s\n",

1882 
	`X509_vîify_˚π_îr‹_°rög
(
îr
));

1883 
	`mlogf
–0, "[%s]Éº‹ checkög s¶ obje˘á·î c⁄√˘i⁄\n", 
func
 );

1884 
îr
;

1888 i‡–
	`mpﬁl_fdadd
–
√wfd
, 
MPOLL_IN
,

1889 
¥o˚ss_˛õ¡_s¶
, (*)
sc⁄
 ) <0 ) {

1890 
	`mlogf
( 0, "[%s] mpoll_fdadd() failed: %s\n",

1891 
func
, 
	`°ªº‹
(
î∫o
) );

1892 
îr
;

1895 
sc⁄
->
s¶
 = ssl;

1896 
sc⁄
->
bio
 = bio;

1897 
sc⁄
->
¥ev
 = 
NULL
;

1898 
sc⁄
->
√xt
 = 
cﬁ
->scon;

1899 i‡–
sc⁄
->
√xt
 )

1900 
sc⁄
->
√xt
->
¥ev
 = scon;

1901 
cﬁ
->
sc⁄
 = scon;

1904 
îr
:

1905 i‡–
bio
 ) 
	`BIO_‰ì
( bio );

1906 i‡–
sc⁄
 ) {

1907 i‡–
sc⁄
->
dëaûs
 )

1908 
	`_‰ì_ùfix_öput
–
sc⁄
->
dëaûs
 );

1909 
	`‰ì
–
sc⁄
 );

1911 
	`˛o£
–
√wfd
 );

1913 
	}
}

1920 
	$cb_maöã«n˚
 ( *
u£r
 )

1924 i‡–
udp_sour˚s
 ) {

1925 
ùfixs_node_t
 *
s
 = 
udp_sour˚s
, *
¢
;

1926 
ùfixt_node_t
 *
t
, *
ä
;

1927 
time_t
 
now
 = 
	`time
–
NULL
 );

1929  
s
 ) {

1930  
t
=
s
->
ãm∂©es
;Å!=
NULL
; ) {

1931 
ä
 = 
t
;

1932 
t
 =Å->
√xt
;

1933 i‡–
now
 > 
ä
->
expúe_time
 ) {

1934 i‡–
mlog_vÀvñ
>2 ) {

1935 
	`mlogf
( 0, "[ipfix_col] dropÅemplate %u:%d\n",

1936 ()
s
->
odid
, 
ä
->
ùfixt
->
tid
 );

1938 
	`_dñëe_ùfixt
–&(
s
->
ãm∂©es
), 
ä
 );

1941 
¢
 = 
s
;

1942 
s
 = s->
√xt
;

1943 i‡–
¢
->
ãm∂©es
 =
NULL
 )

1944 
	`_dñëe_ùfix_sour˚
–&
udp_sour˚s
, 
¢
 );

1950 
g_mt
 = 
	`mpﬁl_timîadd
–30, 
cb_maöã«n˚
, 
NULL
 );

1951 
	}
}

1964 
	$ùfix_gë_ãm∂©e_idít
–
ùfix_ãm∂©e_t
 *
t
,

1965 *
idítbuf
, 
size_t
 
buÊí
 )

1967 
i
, 
j
, 
found
;

1968 
mö
, 
œ°
, 
cur_ío
, 
√xt_ío
, 
·
, 
ío
;

1969 *
idít
;

1970 
size_t
 
Àn
 = 
t
->
nfõlds
*10;

1974 i‡–(
idít
=
	`ˇŒoc
–
Àn
+1, (Ë)Ë==
NULL
) {

1980  
cur_ío
=0, 
√xt_ío
=0x7FFFFFFF;; ) {

1981 
œ°
 = 0;

1982 
mö
 = 0xFFFF;

1984 i‡–
cur_ío
 ) {

1985 
	`¢¥ötf
–
idít
+
	`°æí
(idít), 
Àn
-strlen(ident),

1986 "v%x_", 
cur_ío
 );

1989  
j
=0, 
found
=0; j<
t
->
nfõlds
; j++ ) {

1990  
i
=0; i<
t
->
nfõlds
; i++ ) {

1991 
·
 = 
t
->
fõlds
[
i
].
ñem
->·->
·y≥
;

1992 
ío
 = 
t
->
fõlds
[
i
].
ñem
->
·
->eno;

1994 i‡–(
ío
==
cur_ío
Ë&& (
·
<
mö
Ë&& (·>
œ°
) ) {

1995 
mö
 = 
·
;

1996 
found
 ++;

1999 i‡–(
ío
<
√xt_ío
Ë&& (ío>
cur_ío
) )

2000 
√xt_ío
=
ío
;

2003 i‡–
mö
 == 0xFFFF )

2006 i‡–
j
 && (
found
>1) )

2007 
	`°rˇt
–
idít
, "_" );

2009 
	`¢¥ötf
–
idít
+
	`°æí
(idít), 
Àn
-°æí(idít), "%x", 
mö
 );

2010 
œ°
 = 
mö
;

2011 
mö
 = 0xFFFF;

2014 i‡–
√xt_ío
 == 0x7FFFFFFF )

2017 i‡–(
√xt_ío
>
cur_ío
Ë&& 
found
 )

2018 
	`°rˇt
–
idít
, "_" );

2020 
cur_ío
 = 
√xt_ío
;

2021 
√xt_ío
 = 0x7FFFFFFF;

2024 
	`¢¥ötf
–
idítbuf
, 
buÊí
, "%s", 
idít
 );

2025 
Àn
 = 
	`°æí
–
idít
 );

2026 
	`‰ì
–
idít
 );

2028 i‡–
Àn
 >
buÊí
 ) {

2033 
	}
}

2041 
	$ùfix_cﬁ_˛ónup
( )

2043 
ùfixe_node_t
 *
e
;

2045  
udp_sour˚s
 ) {

2046 
	`_dñëe_ùfix_sour˚
–&
udp_sour˚s
, udp_sources );

2049 #ifde‡
SCTPSUPPORT


2050  
s˘p_assocs
 ) {

2051 
	`_s˘p_dñëe_assoc
–&
s˘p_assocs
, s˘p_assocs->
assoc_id
 );

2055 
	`mpﬁl_timîrm
–
g_mt
 );

2059  
e
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

2060 i‡–
e
->
ñem
->
exp‹t_˛ónup
 )

2061 (Ë
e
->
ñem
->
	`exp‹t_˛ónup
–e->ñem->
d©a
 );

2063 
	}
}

2073 
	$ùfix_li°í
–*
nfds
, **
fds
,

2074 
ùfix_¥Ÿo_t
 
¥Ÿocﬁ
, 
p‹t
, 
Ámûy
, 
maxc⁄
 )

2076 
sock_›t
=1;

2077 *
socks
, 
nsocks
;

2078 
sockty≥
, 
sock¥Ÿo
;

2079 *
func
 = "ipfix_listen";

2081 #ifde‡
INET6


2082 
addröfo
 
höts
;

2083 
addröfo
 *
ªs
, *
aù
;

2084 
p‹t°r
[30];

2085 *
s
, 
îr‹
;

2087 
sockaddr_ö
 
£rv_addr
;

2088 
s
;

2091  
¥Ÿocﬁ
 ) {

2092 
IPFIX_PROTO_TCP
:

2093 
sockty≥
 = 
SOCK_STREAM
;

2094 
sock¥Ÿo
= 0;

2095 i‡–
maxc⁄
 < 1 ) {

2096 
î∫o
 = 
EINVAL
;

2100 
IPFIX_PROTO_UDP
:

2101 
sockty≥
 = 
SOCK_DGRAM
;

2102 
sock¥Ÿo
= 0;

2104 #ifde‡
SCTPSUPPORT


2105 
IPFIX_PROTO_SCTP
:

2106 
sockty≥
 = 
SOCK_SEQPACKET
;

2107 
sock¥Ÿo

IPPROTO_SCTP
;

2108 i‡–
maxc⁄
 < 1 ) {

2109 
î∫o
 = 
EINVAL
;

2115 
î∫o
 = 
ENOTSUP
;

2119 #ifde‡
INET6


2120 
	`mem£t
(&
höts
, 0, (hints));

2121 
höts
.
ai_Ámûy
 = 
Ámûy
;

2122 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

2123 
höts
.
ai_sockty≥
 = 
sockty≥
;

2124 
höts
.
ai_¥Ÿocﬁ
 = 
sock¥Ÿo
;

2125 
	`•rötf
–
p‹t°r
, "%d", 
p‹t
 );

2126 #ifde‡
SCTPSUPPORT


2127 i‡–
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

2128 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

2129 
höts
.
ai_¥Ÿocﬁ
 = 0;

2132 i‡–(
îr‹
=
	`gëaddröfo
–
NULL
, 
p‹t°r
, &
höts
, &
ªs
)) !=0 ) {

2133 
	`mlogf
( 0, "[%s] getaddrinfo() failed: %s\n",

2134 
func
, 
	`gai_°ªº‹
(
îr‹
));

2140  
aù
=
ªs
, 
nsocks
=0;áù!=
NULL
;áù˜ù->
ai_√xt
 )

2141 
nsocks
++;

2142 i‡–(
socks
=
	`ˇŒoc
–
nsocks
, ())Ë==
NULL
) {

2143 
	`mlogf
–0, "[%s] %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2151 
aù
 = 
ªs
, 
s
=
socks
, 
nsocks
=0;

2152 
aù
 !
NULL
;

2153 
aù
 =áù->
ai_√xt
)

2155 #ifde‡
SCTPSUPPORT


2156 i‡–
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

2157 
aù
->
ai_sockty≥
 = 
sockty≥
;

2158 
aù
->
ai_¥Ÿocﬁ
 = 
sock¥Ÿo
;

2161 i‡(((*
s
)=
	`sockë
–
aù
->
ai_Ámûy
,áù->
ai_sockty≥
,

2162 
aù
->
ai_¥Ÿocﬁ
 )) <0) {

2166 i‡(
	`£tsock›t
–*
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

2167 (*Ë&
sock_›t
 , ()) != 0) {

2168 
	`mlogf
–0, "[%s] sësock›t(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2169 
îr
;

2171 #ifde‡
INCR_RXTX_BUFSIZE


2172 ()
	`_ad≠t_rcvdbuf
–*
s
 );

2174 #i‡
	`deföed
(
IPV6_V6ONLY
)

2175 i‡–(
aù
->
ai_Ámûy
 =
AF_INET6
)

2176 && 
	`£tsock›t
–*
s
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

2177 (*)&
sock_›t
 , () ) != 0) {

2178 
	`mlogf
–0, "[%s] sësock›t(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2179 
îr
;

2183 if–
	`böd
–*
s
, 
aù
->
ai_addr
,áù->
ai_addæí
 ) < 0 ) {

2184 
	`mlogf
( 0, "[%s] bind(af%d%s,port=%d) failed: %s\n",

2185 
func
, 
aù
->
ai_Ámûy
,

2186 (
aù
->
ai_Ámûy
==
AF_INET6
)?"(INET6)"

2187 :(
aù
->
ai_Ámûy
==
AF_INET
)?"(INET)":"",

2188 
p‹t
, 
	`°ªº‹
(
î∫o
) );

2189 
	`˛o£
–*
s
 );

2193 i‡–
¥Ÿocﬁ
==
IPFIX_PROTO_TCP
 ) {

2194 i‡–
	`li°í
–*
s
, 
maxc⁄
 ) <0 ) {

2195 
	`mlogf
–0, "[%s]Üi°í(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2199 #ifde‡
SCTPSUPPORT


2200 i‡–
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

2201 
s˘p_evít_subs¸ibe
 
evíts
;

2204 
	`mem£t
–&
evíts
, 0, (events) );

2205 
evíts
.
s˘p_d©a_io_evít
 = 1;

2206 
evíts
.
s˘p_assocüti⁄_evít
 = 1;

2207 i‡–
	`£tsock›t
–*
s
, 
IPPROTO_SCTP
, 
SCTP_EVENTS
,

2208 &
evíts
, (events) ) <0 ) {

2209 
	`mlogf
( 0, "[%s] setsockopt() failed: %s\n",

2210 
func
, 
	`°ªº‹
(
î∫o
) );

2213 i‡–
	`li°í
–*
s
, 
maxc⁄
 ) <0 ) {

2214 
	`mlogf
–0, "[%s]Üi°í(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2215 
	`˛o£
–*
s
 );

2221 
nsocks
++;

2222 
s
++;

2226 
nsocks
++;

2227 
s
++;

2230 
îr
:

2231  
s
 >
socks
 ) {

2232 
	`˛o£
(*
s
);

2233 
s
--;

2235 
	`‰ìaddröfo
(
ªs
);

2236 
	`‰ì
(
socks
);

2239 
	`‰ìaddröfo
(
ªs
);

2241 
	`mem£t
 ((*Ë&
£rv_addr
, 0, ( serv_addr ));

2242 
£rv_addr
.
sö_Ámûy
 = 
AF_INET
;

2243 
£rv_addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

2244 
£rv_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

2246 i‡((
s
=
	`sockë
–
AF_INET
, 
sockty≥
, 
sock¥Ÿo
 )) <0 ) {

2247 
	`mlogf
–0, "[%s] sockë(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2251 i‡(
	`£tsock›t
–
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

2252 (*)&
sock_›t
 , ()) != 0) {

2253 
	`mlogf
–0, "[%s] sësock›t(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2254 
	`˛o£
(
s
);

2257 #ifde‡
INCR_RXTX_BUFSIZE


2258 ()
	`_ad≠t_rcvdbuf
–
s
 );

2260 if–
	`böd
–
s
, (
sockaddr
 *)&
£rv_addr
, (serv_addr) ) <0 ) {

2261 
	`mlogf
( 0, "[%s] bind(port=%d) failed: %s\n",

2262 
func
, 
p‹t
, 
	`°ªº‹
(
î∫o
) );

2263 
	`˛o£
(
s
);

2267 i‡–
¥Ÿocﬁ
==
IPFIX_PROTO_TCP
 ) {

2268 i‡–
	`li°í
–
s
, 
maxc⁄
 ) <0 ) {

2269 
	`mlogf
–0, "[%s]Üi°í(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2273 #ifde‡
SCTPSUPPORT


2274 i‡–
¥Ÿocﬁ
==
IPFIX_PROTO_SCTP
 ) {

2275 
s˘p_evít_subs¸ibe
 
evíts
;

2278 
	`mem£t
–&
evíts
, 0, (events) );

2279 
evíts
.
s˘p_d©a_io_evít
 = 1;

2280 
evíts
.
s˘p_assocüti⁄_evít
 = 1;

2281 i‡–
	`£tsock›t
–
s
, 
IPPROTO_SCTP
, 
SCTP_EVENTS
,

2282 &
evíts
, (events) ) <0 ) {

2283 
	`mlogf
( 0, "[%s] setsockopt() failed: %s\n",

2284 
func
, 
	`°ªº‹
(
î∫o
) );

2287 i‡–
	`li°í
–
s
, 
maxc⁄
 ) <0 ) {

2288 
	`mlogf
–0, "[%s]Üi°í(ËÁûed: %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2289 
	`˛o£
–
s
 );

2295 
nsocks
 = 1;

2296 i‡–(
socks
=
	`ˇŒoc
–
nsocks
, ())Ë==
NULL
) {

2297 
	`mlogf
–0, "[%s] %s\n", 
func
, 
	`°ªº‹
(
î∫o
) );

2298 
	`˛o£
(
s
);

2301 
socks
[0] = 
s
;

2305 i‡–
nsocks
==0 ) {

2306 
	`mlogf
–0, "[%s] c™nŸ së u∞sockë.\n", 
func
 );

2307 
	`‰ì
(
socks
);

2311 *
fds
 = 
socks
;

2312 *
nfds
 = 
nsocks
;

2314 
	}
}

2324 
	$ùfix_cﬁ_li°í
–*
nfds
, **
fds
,

2325 
ùfix_¥Ÿo_t
 
¥Ÿocﬁ
, 
p‹t
, 
Ámûy
, 
maxc⁄
 )

2327 
i
, *
socks
, 
nsocks
;

2328 
pˇŒback_f
 
ˇŒback
;

2329 *
func
 = "ipfix_col_listen";

2331  
¥Ÿocﬁ
 ) {

2332 
IPFIX_PROTO_TCP
:

2333 
ˇŒback
 = 
t˝_ac˚±_cb
;

2335 
IPFIX_PROTO_UDP
:

2336 
ˇŒback
 = 
¥o˚ss_˛õ¡_udp
;

2338 #ifde‡
SCTPSUPPORT


2339 
IPFIX_PROTO_SCTP
:

2340 
ˇŒback
 = 
¥o˚ss_˛õ¡_s˘p
;

2344 
î∫o
 = 
ENOTSUP
;

2348 i‡–
	`ùfix_li°í
–&
nsocks
, &
socks
, 
¥Ÿocﬁ
,

2349 
p‹t
, 
Ámûy
, 
maxc⁄
 ) <0 ) {

2355  
i
=0; i<
nsocks
; i++ ) {

2356 
	`mlogf
–3, "[%s] fd %dÜi°í o¿p‹à%d.\n", 
func
, 
socks
[
i
], 
p‹t
 );

2358 i‡–
	`mpﬁl_fdadd
–
socks
[
i
], 
MPOLL_IN
, 
ˇŒback
, 
NULL
 ) <0 ) {

2359 
	`mlogf
( 0, "[%s] mpoll_fdadd() failed: %s\n",

2360 
func
, 
	`°ªº‹
(
î∫o
) );

2361 
îªnd
;

2365 i‡–! 
g_mt
 ) {

2368 
g_mt
 = 
	`mpﬁl_timîadd
–30, 
cb_maöã«n˚
, 
NULL
 );

2371 *
fds
 = 
socks
;

2372 *
nfds
 = 
nsocks
;

2375 
îªnd
:

2376  
i
=0; i<
nsocks
; i++ ) {

2377 
	`mpﬁl_fdrm
–
socks
[
i
] );

2378 
	`˛o£
–
socks
[
i
] );

2380 
	`‰ì
–
socks
 );

2382 
	}
}

2390 
	$ùfix_cﬁ_˛o£
–
fd
 )

2392 
	`mpﬁl_fdrm
–
fd
 );

2393  
	`˛o£
–
fd
 );

2394 
	}
}

2396 
	$ùfix_cﬁ_ªgi°î_exp‹t
–
ùfix_cﬁ_öfo_t
 *
cﬁöfo
 )

2398 
ùfixe_node_t
 *
n
, *
e
, *
œ°
;

2400 i‡–(
n
=
	`ˇŒoc
–1, (
ùfixe_node_t
))Ë==
NULL
)

2403 
n
->
ñem
 = 
cﬁöfo
;

2407 i‡–
g_exp‹ãr
==
NULL
 ) {

2408 
n
->
√xt
 = 
g_exp‹ãr
;

2409 
g_exp‹ãr
 = 
n
;

2412  
e
=
œ°
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

2413 
œ°
 = 
e
;

2415 
n
->
√xt
 = 
NULL
;

2416 
œ°
->
√xt
 = 
n
;

2420 
	}
}

2422 
	$ùfix_cﬁ_ˇn˚l_exp‹t
–
ùfix_cﬁ_öfo_t
 *
cﬁöfo
 )

2424 
ùfixe_node_t
 *
e
, *
œ°
;

2429 i‡–
g_exp‹ãr
->
ñem
 =
cﬁöfo
 ) {

2430 
e
 = 
g_exp‹ãr
;

2431 
g_exp‹ãr
 = g_exp‹ãr->
√xt
;

2432 
‰ìnode
;

2435  
e
=
œ°
=
g_exp‹ãr
;É!=
NULL
;ÉÛ->
√xt
 ) {

2436 i‡–
e
->
ñem
 =
cﬁöfo
 ) {

2437 
œ°
->
√xt
 = 
e
->next;

2438 
‰ìnode
;

2440 
œ°
 = 
e
;

2444 
î∫o
 = 
EINVAL
;

2447 
‰ìnode
:

2448 i‡–
e
->
ñem
->
exp‹t_˛ónup
 ) {

2449 ()
e
->
ñem
->
	`exp‹t_˛ónup
–e->ñem->
d©a
 );

2452 
	`‰ì
–
e
 );

2454 
	}
}

2456 
	$ùfix_cﬁ_li°í_s¶
–
ùfix_cﬁ_t
 **
h™dÀ
, 
ùfix_¥Ÿo_t
 
¥Ÿocﬁ
,

2457 
p‹t
, 
Ámûy
, 
maxc⁄
,

2458 
ùfix_s¶_›ts_t
 *
s¶_dëaûs
 )

2460 #i‚de‡
SSLSUPPORT


2461 
î∫o
 = 
ENOTSUP
;

2464 
SSL_CTX
 *
˘x
 = 
NULL
;

2465 
SSL_METHOD
 *
mëhod
;

2466 
pˇŒback_f
 
ˇŒback
;

2467 
i
, *
socks
, 
nsocks
;

2468 
ùfix_cﬁ_s¶_t
 *
cﬁ
;

2469 
ùfix_cﬁ_s¶_node_t
 *
node
, *
nodes
;

2470 *
func
 = "ipfix_col_listen_ssl";

2472 i‡–! 
›ís¶_is_öô
 ) {

2473 ()
	`SSL_libøry_öô
();

2474 
	`SSL_lﬂd_îr‹_°rögs
();

2476 
›ís¶_is_öô
 ++;

2479 i‡–!
h™dÀ
 || !
s¶_dëaûs
 ) {

2480 
î∫o
 = 
EINVAL
;

2484  
¥Ÿocﬁ
 ) {

2485 
IPFIX_PROTO_TCP
:

2486 
mëhod
 = 
	`SSLv23_mëhod
();

2489 
î∫o
 = 
ENOTSUP
;

2494 i‡–
	`ùfix_s¶_£tup_£rvî_˘x
–&
˘x
, 
mëhod
, 
s¶_dëaûs
 ) <0 )

2495 
îr
;

2498 i‡–
	`ùfix_li°í
–&
nsocks
, &
socks
, 
¥Ÿocﬁ
,

2499 
p‹t
, 
Ámûy
, 
maxc⁄
 ) <0 )

2500 
îr
;

2502 i‡–(
cﬁ
=
	`ˇŒoc
(1, (
ùfix_cﬁ_s¶_t
))Ë==
NULL
 ) {

2503 
	`mlogf
–0, "[%s] ouào‡mem‹y!\n", 
func
 );

2504 
îr
;

2506 
cﬁ
->
˘x
 = ctx;

2507 
cﬁ
->
socks
 = socks;

2508 
cﬁ
->
nsocks
 =Çsocks;

2511  
i
=0; i<
nsocks
; i++ ) {

2512 
	`mlogf
–3, "[%s] fd %dÜi°í o¿p‹à%d.\n", 
func
, 
socks
[
i
], 
p‹t
 );

2514 i‡–(
node
=
	`ˇŒoc
(1, (
ùfix_cﬁ_s¶_node_t
))Ë==
NULL
 ) {

2515 
	`mlogf
–0, "[%s] ouào‡mem‹y!\n", 
func
 );

2516 
îr
;

2518 
node
->
˘x
 = ctx;

2520  
¥Ÿocﬁ
 ) {

2521 
IPFIX_PROTO_TCP
:

2522 
ˇŒback
 = 
ac˚±_˛õ¡_s¶_cb
;

2525 
î∫o
 = 
ENOTSUP
;

2529 i‡–
	`mpﬁl_fdadd
–
socks
[
i
], 
MPOLL_IN
, 
ˇŒback
, (*)
node
 ) <0 ) {

2530 
	`mlogf
( 0, "[%s] mpoll_fdadd() failed: %s\n",

2531 
func
, 
	`°ªº‹
(
î∫o
) );

2533 
îr
;

2536 
node
->
√xt
 = 
nodes
;

2537 
nodes
 = 
node
;

2540 
cﬁ
->
nodes
 =Çodes;

2541 *
h™dÀ
 = (
ùfix_cﬁ_t
*)
cﬁ
;

2544 
îr
:

2545 i‡–
˘x
 ) 
	`SSL_CTX_‰ì
(ctx);

2546 i‡–
cﬁ
 ) 
	`‰ì
( col );

2548 i‡–
socks
 ) {

2549  
i
=0; i<
nsocks
; i++ ) {

2550 
	`mpﬁl_fdrm
–
socks
[
i
] );

2551 
	`˛o£
–
socks
[
i
] );

2553 
	`‰ì
–
socks
 );

2557 
	}
}

2559 
	$ùfix_cﬁ_˛o£_s¶
–
ùfix_cﬁ_t
 *
h™dÀ
 )

2561 #i‚de‡
SSLSUPPORT


2562 
î∫o
 = 
EINVAL
;

2565 
ùfix_cﬁ_s¶_t
 *
cﬁ
 = (ùfix_cﬁ_s¶_t*)
h™dÀ
;

2566 
ùfix_cﬁ_s¶_node_t
 *
n
, *
node
;

2567 
s¶_c⁄n_t
 *
s
, *
sc⁄
;

2569 i‡–
cﬁ
 ) {

2570 i‡–
cﬁ
->
˘x
 )

2571 
	`SSL_CTX_‰ì
(
cﬁ
->
˘x
);

2572  
node
=
cﬁ
->
nodes
;Çode!=
NULL
 ; ) {

2573  
sc⁄
=
node
->sc⁄; sc⁄!=
NULL
; ) {

2574 i‡–
sc⁄
->
s¶
 )

2575 
	`SSL_‰ì
–
sc⁄
->
s¶
 );

2576 
s
 = 
sc⁄
;

2577 
sc⁄
 = sc⁄->
√xt
;

2578 
	`‰ì
–
s
 );

2580 
n
 = 
node
;

2581 
node
 =Çode->
√xt
;

2582 
	`‰ì
 ( 
n
 );

2584 i‡–
cﬁ
->
socks
 ) {

2585 
i
;

2586  
i
=0; i<
cﬁ
->
nsocks
; i++ ) {

2587 
	`mpﬁl_fdrm
–
cﬁ
->
socks
[
i
] );

2588 
	`˛o£
–
cﬁ
->
socks
[
i
] );

2590 
	`‰ì
–
cﬁ
->
socks
 );

2592 
	`‰ì
–
cﬁ
 );

2596 
	}
}

	@libipfix_110224/lib/ipfix_col.h

32 #i‚de‡
IPFIX_COL_H


33 
	#IPFIX_COL_H


	)

35 
	~<limôs.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/sockë.h
>

38 
	~<ùfix.h
>

39 #ifde‡
DBSUPPORT


40 
	~<ùfix_db.h
>

43 #ifde‡
__˝lu•lus


47 
	#DFLT_MYSQL_HOST
 "loˇlho°"

	)

48 
	#DFLT_MYSQL_DBNAME
 "ùfix"

	)

49 
	#DFLT_MYSQL_USER
 "ùfix"

	)

50 
	#DFLT_MYSQL_PASSWORD
 "ùfix"

	)

52 
	#MAXTEMPLIDENT
 120

	)

55 
IPFIX_INPUT_FILE
, 
IPFIX_INPUT_IPCON


56 } 
	tùfix_öput_ty≥_t
;

58 
	sùfix_öput
 {

59 
ùfix_öput_ty≥_t
 
ty≥
;

62 
sockaddr
 *
addr
;

63 
sockÀn_t
 
addæí
;

64 } 
ùc⁄
;

66 *
«me
;

67 } 
fûe
;

68 } 
u
;

69 } 
	tùfix_öput_t
;

71 
	sùfixt_node


73 
ùfixt_node
 *
√xt
;

74 
time_t
 
expúe_time
;

75 
ùfix_ãm∂©e_t
 *
ùfixt
;

76 
idít
[
MAXTEMPLIDENT
];

77 #ifde‡
DBSUPPORT


78 
èbÀ«me
[
MAXTABLENAMELEN
+1];

79 
ãm∂©e_id
;

80 
mesßge_¢r
;

82 } 
	tùfixt_node_t
;

84 
	sùfixs_node


86 
ùfixs_node
 *
√xt
;

87 
uöt32_t
 
odid
;

88 
ùfix_öput_t
 *
öput
;

89 
ùfixt_node_t
 *
ãm∂©es
;

90 
‚ame
[
PATH_MAX
+1];

91 
FILE
 *
Â
;

92 
œ°_£qno
;

93 #ifde‡
DBSUPPORT


94 
œ°_msgid
;

95 
œ°_mesßge_¢r
;

96 
exp‹ãrid
;

98 } 
	tùfixs_node_t
;

100 
	sùfixi_node


102 
ùfixe_node
 *
√xt
;

103 
ùfix_öput_t
 *
öput
;

104 
ùfixs_node
 *
ods
;

105 } 
	tùfixi_node_t
;

107 
	sùfix_cﬁ_öfo


109 (*
exp‹t_√wsour˚
)(
ùfixs_node_t
*,*);

110 (*
exp‹t_√wmsg
)(
ùfixs_node_t
*,
ùfix_hdr_t
*,*);

111 (*
exp‹t_åec‹d
)(
ùfixs_node_t
*,
ùfixt_node_t
*,*);

112 (*
exp‹t_d£t
)(
ùfixt_node_t
*,c⁄° 
uöt8_t
*,
size_t
,*);

113 (*
exp‹t_dªc‹d
)(
ùfixs_node_t
*,
ùfixt_node_t
*,

114 
ùfix_d©¨ec‹d_t
*,*);

115 (*
exp‹t_øwmsg
)(
ùfixs_node_t
 *
sour˚
, c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
Àn
, *
¨g
);

116 (*
exp‹t_˛ónup
)(*);

117 *
d©a
;

118 } 
	tùfix_cﬁ_öfo_t
;

120 
	sùfix_cﬁ_öfo_node


122 
ùfix_cﬁ_öfo_node
 *
√xt
;

123 
ùfix_cﬁ_öfo
 *
ñem
;

125 } 
	tùfixe_node_t
;

127 * 
	tùfix_cﬁ_t
;

129 
ùfix_cﬁ_öô
( );

130 
ùfix_cﬁ_öô_fûìxp‹t
–*
d©adú
 );

131 
ùfix_cﬁ_°›_fûìxp‹t
( );

132 
ùfix_cﬁ_öô_mysqÀxp‹t
–*
ho°
, *
u£r
, *
pw
, *
«me
 );

133 
ùfix_cﬁ_°›_mysqÀxp‹t
( );

134 
ùfix_cﬁ_ªgi°î_exp‹t
–
ùfix_cﬁ_öfo_t
 *
cﬁöfo
 );

135 
ùfix_cﬁ_ˇn˚l_exp‹t
–
ùfix_cﬁ_öfo_t
 *
cﬁöfo
 );

136 
ùfix_cﬁ_li°í
–*
nfds
, **
fds
, 
ùfix_¥Ÿo_t
 
¥Ÿocﬁ
,

137 
p‹t
, 
Ámûy
, 
maxc⁄
 );

138 
ùfix_cﬁ_°¨t_msglog
–
FILE
 *
Âout
 );

139 
ùfix_cﬁ_°›_msglog
( );

140 
ùfix_cﬁ_˛o£
–
fd
 );

141 
ùfix_cﬁ_˛ónup
( );

144 
ùfix_∑r£_hdr
–c⁄° 
uöt8_t
 *
buf
, 
size_t
 
buÊí
, 
ùfix_hdr_t
 *
hdr
 );

145 
ùfix_∑r£_øw_msg
–
ùfixs_node_t
 *
sour˚
, 
ùfixe_node_t
 *
g_exp‹ãr
,

146 c⁄° 
uöt8_t
 *
msg
, 
size_t
 
nbyãs
 );

147 
ùfix_∑r£_msg
–
ùfix_öput_t
 *
öput
, 
ùfixs_node_t
 **
sour˚s
,

148 c⁄° 
uöt8_t
 *
msg
, 
size_t
 
nbyãs
 );

149 
ùfix_gë_ãm∂©e_idít
–
ùfix_ãm∂©e_t
 *
t
, *
buf
, 
size_t
 
buÊí
 );

150 
ùfix_cﬁ_li°í_s¶
–
ùfix_cﬁ_t
 **
h™dÀ
, 
ùfix_¥Ÿo_t
 
¥Ÿocﬁ
,

151 
p‹t
, 
Ámûy
, 
maxc⁄
,

152 
ùfix_s¶_›ts_t
 *
s¶_›ts
 );

153 
ùfix_cﬁ_˛o£_s¶
–
ùfix_cﬁ_t
 *
h™dÀ
 );

156 c⁄° *
ùfix_cﬁ_öput_gë_idít
–
ùfix_öput_t
 *
öput
 );

158 #ifde‡
__˝lu•lus


	@libipfix_110224/lib/ipfix_col_db.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

38 
	~<î∫o.h
>

39 
	~<sig«l.h
>

40 
	~<limôs.h
>

41 
	~<°d¨g.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<sys/time.h
>

45 
	~<time.h
>

46 
	~<f˙é.h
>

48 
	~"libmisc/misc.h
"

49 
	~"ùfix.h
"

50 
	~"ùfix_cﬁ.h
"

51 #ifde‡
DBSUPPORT


52 
	~"ùfix_db.h
"

53 
	~"ùfix_cﬁ_db.h
"

58 
	#MAXQUERYLEN
 2000

	)

62 #ifde‡
DBSUPPORT


63 
	sùfix_exp‹t_d©a_db


65 
MYSQL
 *
	mmysql
;

66 } 
	tùfixe_d©a_db_t
;

71 
ùfix_cﬁ_öfo_t
 *
	gg_cﬁöfo
 =
NULL
;

75 c⁄° 
	gcvsid
[]="$Id: ipfix_col_db.c 96 2009-03-27 19:19:27Z csc $";

79 #ifde‡
DBSUPPORT


80 
	gquîy
[
MAXQUERYLEN
+1];

85 #ifde‡
DBSUPPORT


86 
	$ùfix_exp‹t_√w§c_db
–
ùfixs_node_t
 *
s
, *
¨g
 )

88 
ùfixe_d©a_db_t
 *
d©a
 = (ùfixe_d©a_db_t*)
¨g
;

89 
öt32_t
 
exp‹ãr_id
 =0;

91 i‡–!
d©a
->
mysql
 ) {

92 
î∫o
 = 
EINVAL
;

96 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

98 
IPFIX_DB_EXP_ID
, 
IPFIX_DB_EXPORTERS
, 
IPFIX_DB_EXP_ODID
, 
s
->
odid
,

99 
IPFIX_DB_EXP_ADDR
, 
	`ùfix_cﬁ_öput_gë_idít
–
s
->
öput
 ) );

100 i‡–
	`ùfix_db_gë_öt
–
d©a
->
mysql
, 
quîy
, &
exp‹ãr_id
 ) !=0 ) {

101 
	`mlogf
–0, "[exp‹t_√w§c_db] quîy(%sËÁûed!\n", 
quîy
 );

105 i‡–
exp‹ãr_id
 == 0 ) {

106 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

108 
IPFIX_DB_EXPORTERS
, 
IPFIX_DB_EXP_ODID
, 
s
->
odid
,

109 
IPFIX_DB_EXP_ADDR
, 
	`ùfix_cﬁ_öput_gë_idít
–
s
->
öput
 ),

110 
IPFIX_DB_EXP_DESCR
 );

111 i‡–
	`mysql_quîy
–
d©a
->
mysql
, 
quîy
 ) !=0 ) {

112 
	`mlogf
( 0, "[export_newmsg_db] mysql_query(%s) failed: %s\n",

113 
quîy
, 
	`mysql_îr‹
(
d©a
->
mysql
) );

116 
exp‹ãr_id
 = (
öt32_t
)
	`mysql_ö£π_id
–
d©a
->
mysql
 );

119 
s
->
exp‹ãrid
 = ()
exp‹ãr_id
;

121 
	}
}

123 
	$ùfix_exp‹t_√wmsg_db
–
ùfixs_node_t
 *
s
, 
ùfix_hdr_t
 *
hdr
, *
¨g
 )

125 
ùfixe_d©a_db_t
 *
d©a
 = (ùfixe_d©a_db_t*)
¨g
;

127 i‡–
d©a
->
mysql
 ) {

128 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

130 
IPFIX_DB_MESSAGETABLE
,

131 
IPFIX_DB_MSGT_EXPID
, 
s
->
exp‹ãrid
, 
IPFIX_DB_MSGT_TIME
,

132 (
hdr
->
vîsi⁄
==
IPFIX_VERSION_NF9
)?

133 (
u_l⁄g
)
hdr
->
u
.
nf9
.
unixtime
:(u_l⁄g)hdr->u.
ùfix
.
exp‹âime
 );

135 i‡–
	`mysql_quîy
–
d©a
->
mysql
, 
quîy
 ) !=0 ) {

136 
	`mlogf
( 0, "[export_newmsg_db] mysql_query(%s) failed: %s\n",

137 
quîy
, 
	`mysql_îr‹
(
d©a
->
mysql
) );

140 
s
->
œ°_msgid
 = (Ë
	`mysql_ö£π_id
–
d©a
->
mysql
 );

144 
	}
}

146 
	$ùfix_exp‹t_åec‹d_db
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
, *
¨g
 )

148 
ùfixe_d©a_db_t
 *
d©a
 = (ùfixe_d©a_db_t*)
¨g
;

149 *
func
 = "export_trecord_db";

151 i‡–!
d©a
->
mysql
 )

156 
	`°r˝y
–
t
->
èbÀ«me
, "" );

157 
t
->
mesßge_¢r
 = 
s
->
œ°_mesßge_¢r
-1;

158 i‡–
	`ùfix_db_gë_èbÀ«me
–
d©a
->
mysql
, 
t
->
èbÀ«me
, 
MAXTABLENAMELEN
,

159 &(
t
->
ãm∂©e_id
),Å->
ùfixt
, 1 ) <0 ) {

162 
	`mlogf
( 1, "[%s] cannot buildÅableÇame forÅemplate %d\n",

163 
func
, 
t
->
ùfixt
->
tid
 );

165 
	`mlogf
( 4, "[%s]Åemplate %d useÅable %s\n",

166 
func
, 
t
->
ùfixt
->
tid
,Å->
èbÀ«me
 );

168 
	}
}

170 
	$ùfix_exp‹t_dªc‹d_db
–
ùfixs_node_t
 *
s
,

171 
ùfixt_node_t
 *
t
,

172 
ùfix_d©¨ec‹d_t
 *
d
,

173 *
¨g
 )

175 
ùfixe_d©a_db_t
 *
d©a
 = (ùfixe_d©a_db_t*)
¨g
;

176 *
func
 = "export_drecord_db";

177 
i
, 
nbyãs
, 
bö¨y_f
=0;

179 i‡–!
d©a
->
mysql
 )

185 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

187 
t
->
èbÀ«me
, 
IPFIX_DB_DT_MSGID
, 
s
->
œ°_msgid
 );

188 
nbyãs
 = 
	`°æí
(
quîy
);

189  
i
=0; i<
t
->
ùfixt
->
nfõlds
; i++ ) {

190 #ifde‡
IENAME_COLUMNS


191 
nbyãs
 +
	`¢¥ötf
–
quîy
+nbytes, (query)-nbytes, ", %s='",

192 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
«me
 );

194 
nbyãs
 +
	`¢¥ötf
–
quîy
+nbytes, (query)-nbytes,

195 ", " 
IPFIX_DB_COLUMNNAME_FORMAT
 "='",

196 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
ío
,

197 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
·y≥
 );

199 i‡–
nbyãs
 >(
quîy
) )

200 
îr
;

202 i‡–
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
codög
 =
IPFIX_CODING_BYTES
 ) {

203 i‡–((
d
->
Àns
[
i
]*2)+2Ë< ((
quîy
)-
nbyãs
) ) {

204 
nbyãs
 +
	`mysql_ªÆ_esˇ≥_°rög
–
d©a
->
mysql
, 
quîy
+nbytes,

205 
d
->
addrs
[
i
], d->
Àns
[i] );

206 
bö¨y_f
++;

210 
nbyãs
 +
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
	`¢¥öt
–
quîy
+nbytes,

211 (
quîy
)-
nbyãs
,

212 
d
->
addrs
[
i
],

213 
d
->
Àns
[
i
] );

215 i‡–(
nbyãs
+1Ë>(
quîy
) )

216 
îr
;

217 
nbyãs
 +
	`¢¥ötf
–
quîy
+nbytes, (query)-nbytes, "'" );

219 
	`mlogf
–4, "[%s] quîy: %s\n", 
func
, 
quîy
 );

220 i‡–
	`mysql_ªÆ_quîy
–
d©a
->
mysql
, 
quîy
, 
nbyãs
 ) !=0 ) {

221 
	`mlogf
( 0, "[%s] mysql_query(%s) failed: %s\n",

222 
func
, 
bö¨y_f
?"":
quîy
, 
	`mysql_îr‹
(
d©a
->
mysql
) );

228 i‡–
t
->
mesßge_¢r
 !
s
->
œ°_mesßge_¢r
 ) {

229 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

231 
IPFIX_DB_MAPPINGTABLE
, 
IPFIX_DB_MT_MSGID
,

232 
s
->
œ°_msgid
, 
IPFIX_DB_MT_TMPLID
, 
t
->
ãm∂©e_id
 );

233 
	`mlogf
–4, "[%s] quîy: %s\n", 
func
, 
quîy
 );

234 i‡–
	`mysql_quîy
–
d©a
->
mysql
, 
quîy
 ) !=0 ) {

235 
	`mlogf
( 0, "[%s] mysql_query(%s) failed: %s\n",

236 
func
, 
quîy
, 
	`mysql_îr‹
(
d©a
->
mysql
) );

242 
t
->
mesßge_¢r
 = 
s
->
œ°_mesßge_¢r
;

247 
îr
:

249 
	}
}

251 
	$ùfix_exp‹t_öô_db
–*
dbho°
, *
dbu£r
,

252 *
dbpw
, *
db«me
, **
¨g
 )

254 
ùfixe_d©a_db_t
 *
d©a
;

256 i‡–(
d©a
=
	`ˇŒoc
–1, (
ùfixe_d©a_db_t
))Ë==
NULL
)

259 i‡–
	`ùfix_db_›í
–&(
d©a
->
mysql
), 
dbho°
, 
dbu£r
, 
dbpw
, 
db«me
 ) <0 ) {

260 
	`‰ì
(
d©a
);

264 *
¨g
 = (**)
d©a
;

266 
	}
}

268 
	$ùfix_exp‹t_˛ónup_db
–*
¨g
 )

270 
ùfixe_d©a_db_t
 *
d©a
 = (ùfixe_d©a_db_t*)
¨g
;

272 i‡–
d©a
 ) {

273 i‡–
d©a
->
mysql
 )

274 
	`ùfix_db_˛o£
–&(
d©a
->
mysql
) );

275 
	`‰ì
(
d©a
);

277 
	}
}

282 
	$ùfix_cﬁ_öô_mysqÀxp‹t
–*
dbho°
, *
dbu£r
,

283 *
dbpw
, *
db«me
 )

285 #ifde‡
DBSUPPORT


286 *
d©a
;

288 i‡–
	`ùfix_exp‹t_öô_db
–
dbho°
, 
dbu£r
, 
dbpw
, 
db«me
, &
d©a
 ) <0 ) {

292 i‡–(
g_cﬁöfo
=
	`ˇŒoc
–1, (
ùfix_cﬁ_öfo_t
))Ë==
NULL
) {

293 
	`ùfix_exp‹t_˛ónup_db
–
d©a
 );

297 
g_cﬁöfo
->
exp‹t_√wsour˚
 = 
ùfix_exp‹t_√w§c_db
;

298 
g_cﬁöfo
->
exp‹t_√wmsg
 = 
ùfix_exp‹t_√wmsg_db
;

299 
g_cﬁöfo
->
exp‹t_åec‹d
 = 
ùfix_exp‹t_åec‹d_db
;

300 
g_cﬁöfo
->
exp‹t_dªc‹d
 = 
ùfix_exp‹t_dªc‹d_db
;

301 
g_cﬁöfo
->
exp‹t_˛ónup
 = 
ùfix_exp‹t_˛ónup_db
;

302 
g_cﬁöfo
->
d©a
 = data;

304  
	`ùfix_cﬁ_ªgi°î_exp‹t
–
g_cﬁöfo
 );

306 
î∫o
 = 
ENODEV
;

308 
	}
}

310 
	$ùfix_cﬁ_°›_mysqÀxp‹t
()

312 i‡–
g_cﬁöfo
 ) {

313 (Ë
	`ùfix_cﬁ_ˇn˚l_exp‹t
–
g_cﬁöfo
 );

314 
	`‰ì
–
g_cﬁöfo
 );

315 
g_cﬁöfo
 = 
NULL
;

317 
	}
}

	@libipfix_110224/lib/ipfix_col_db.h

32 #i‚de‡
IPFIX_COL_DB_H


33 
	#IPFIX_COL_DB_H


	)

35 #ifde‡
__˝lu•lus


39 
ùfix_exp‹t_√w§c_db
–
ùfixs_node_t
 *
s
, *
¨g
 ) ;

40 
ùfix_exp‹t_√wmsg_db
–
ùfixs_node_t
 *
s
, 
ùfix_hdr_t
 *
hdr
, *
¨g
 );

41 
ùfix_exp‹t_åec‹d_db
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
, *
¨g
 );

42 
ùfix_exp‹t_dªc‹d_db
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
,

43 
ùfix_d©¨ec‹d_t
 *
d
, *
¨g
 );

44 
ùfix_exp‹t_˛ónup_db
–*
¨g
 );

45 
ùfix_exp‹t_öô_db
–*
dbho°
, *
dbu£r
,

46 *
dbpw
, *
db«me
, **
d©a
 );

48 #ifde‡
__˝lu•lus


	@libipfix_110224/lib/ipfix_col_files.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

38 
	~<î∫o.h
>

39 
	~<sig«l.h
>

40 
	~<limôs.h
>

41 
	~<°d¨g.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<sys/time.h
>

45 
	~<time.h
>

46 
	~<f˙é.h
>

48 
	~"libmisc/misc.h
"

49 
	~"ùfix.h
"

50 
	~"ùfix_cﬁ.h
"

54 
	sùfix_exp‹t_d©a_fûe


56 *
	md©adú
;

58 } 
	tùfixe_d©a_fûe_t
;

62 
ùfix_cﬁ_öfo_t
 *
	gg_cﬁöfo
 =
NULL
;

66 c⁄° 
	gcvsid
[]="$Id: ipfix_col_files.c 96 2009-03-27 19:19:27Z csc $";

70 
	$exp‹t_√wsour˚_fûe
–
ùfixs_node_t
 *
s
, *
¨g
 )

72 *
func
 = "newsource_file";

73 *
d©adú
 = ((
ùfixe_d©a_fûe_t
*)
¨g
)->datadir;

75 i‡–
d©adú
 ) {

76 
tmpbuf
[30], 
‚ame
[
PATH_MAX
], 
suffix
[30];

77 
i
;

78 
time_t
 
t
 = 
	`time
–
NULL
 );

82 
	`¢¥ötf
–
s
->
‚ame
, 
PATH_MAX
, "%s/%s", 
d©adú
,

83 
	`ùfix_cﬁ_öput_gë_idít
–
s
->
öput
 ) );

84 i‡–(
	`ac˚ss
–
s
->
‚ame
, 
R_OK
 ) <0 )

85 && (
	`mkdú
–
s
->
‚ame
, 
S_IRWXU
 ) <0) ) {

86 
	`mlogf
( 0, "[%s] cannotáccess dir '%s': %s\n",

87 
func
, 
s
->
‚ame
, 
	`°ªº‹
(
î∫o
) );

90 
	`¢¥ötf
–
s
->
‚ame
+
	`°æí
(s->‚ame), 
PATH_MAX
-strlen(s->fname),

91 "/%u", ()
s
->
odid
 );

92 i‡–(
	`ac˚ss
–
s
->
‚ame
, 
R_OK
 ) <0 )

93 && (
	`mkdú
–
s
->
‚ame
, 
S_IRWXU
 ) <0) ) {

94 
	`mlogf
( 0, "[%s] cannotáccess dir '%s': %s\n",

95 
func
, 
s
->
‚ame
, 
	`°ªº‹
(
î∫o
) );

101 
i
=1, *
suffix
=0; i; i++) {

102 
	`°r·ime
–
tmpbuf
, 30, "%Y%m%d", 
	`loˇ…ime
–&
t
 ));

103 
	`¢¥ötf
–
‚ame
, (fname), "%s/%s%s",

104 
s
->
‚ame
, 
tmpbuf
, 
suffix
 );

105 i‡–
	`ac˚ss
–
‚ame
, 
R_OK
 ) <0 ) {

106 
	`¢¥ötf
–
s
->
‚ame
, 
PATH_MAX
, "%s", fname );

109 
	`•rötf
–
suffix
, "-%d", 
i
 );

112 i‡–(
s
->
Â
=
	`f›í
–s->
‚ame
, "a" )Ë==
NULL
 ) {

113 
	`mlogf
( 0, "[%s] cannot open outfile %s: %s\n",

114 
func
, 
s
->
‚ame
, 
	`°ªº‹
(
î∫o
) );

119 
	}
}

121 
	$exp‹t_√wmsg_fûe
–
ùfixs_node_t
 *
s
, 
ùfix_hdr_t
 *
hdr
, *
¨g
 )

123 i‡–
s
->
Â
 ) {

124 
	`Ârötf
–
s
->
Â
, "#hdr: v%d, ", 
hdr
->
vîsi⁄
 );

125 i‡–
hdr
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 ) {

126 
	`Ârötf
–
s
->
Â
, "%.3f, %lu, ",

127 ()(
hdr
->
u
.
nf9
.
sysu±ime
)/1000.0,

128 (
u_l⁄g
)
hdr
->
u
.
nf9
.
unixtime
 );

131 
	`Ârötf
–
s
->
Â
, "%lu, ",

132 (
u_l⁄g
)
hdr
->
u
.
ùfix
.
exp‹âime
 );

134 
	`Ârötf
–
s
->
Â
, "%lu\n", (
u_l⁄g
)
hdr
->
£qno
 );

138 
	}
}

140 
	$exp‹t_åec‹d_fûe
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
, *
¨g
 )

142 
tmpbuf
[2000];

143 
i
, 
nbyãs
;

145 i‡–
s
->
Â
 ) {

146 
	`•rötf
–
tmpbuf
, "#%stemplate: %d",

147 (
t
->
ùfixt
->
nsc›efõlds
)?"option ":"",

148 
t
->
ùfixt
->
tid
 );

149  
i
=0; i<
t
->
ùfixt
->
nfõlds
; i++ ) {

150 
nbyãs
 = 
	`°æí
(
tmpbuf
);

151 
	`¢¥ötf
–
tmpbuf
+
nbyãs
, (tmpbuf)-nbytes, ", %d%s(%s:%d)",

152 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
·y≥
,

153 (
i
<
t
->
ùfixt
->
nsc›efõlds
)?"s":"",

154 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
«me
,

155 
t
->
ùfixt
->
fõlds
[
i
].
Êígth
 );

157 
	`Ârötf
–
s
->
Â
, "%s\n", 
tmpbuf
 );

158 
	`fÊush
–
s
->
Â
 );

162 
	}
}

164 
	$exp‹t_dªc‹d_fûe
–
ùfixs_node_t
 *
s
,

165 
ùfixt_node_t
 *
t
,

166 
ùfix_d©¨ec‹d_t
 *
d©a
,

167 *
¨g
 )

169 
tmpbuf
[2000];

170 
i
, 
nbyãs
;

172 i‡–
s
->
Â
 ) {

175 
	`•rötf
–
tmpbuf
, "%d", 
t
->
ùfixt
->
tid
 );

176  
i
=0; i<
t
->
ùfixt
->
nfõlds
; i++ ) {

178 
nbyãs
 = 
	`°æí
(
tmpbuf
);

179 
	`¢¥ötf
–
tmpbuf
+
nbyãs
, (tmpbuf)-nbytes, ", " );

180 
nbyãs
 += 2;

181 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
	`¢¥öt
–
tmpbuf
+
nbyãs
,

182 (
tmpbuf
)-
nbyãs
,

183 
d©a
->
addrs
[
i
],

184 
d©a
->
Àns
[
i
] );

187 
	`Ârötf
–
s
->
Â
, "%s\n", 
tmpbuf
 );

188 
	`fÊush
–
s
->
Â
 );

192 
	}
}

194 
	$exp‹t_˛ónup_fûe
–*
¨g
 )

196 
ùfixe_d©a_fûe_t
 *
d©a
 = (ùfixe_d©a_fûe_t*)
¨g
;

198 i‡–
d©a
 ) {

199 
	`‰ì
(
d©a
);

201 
	}
}

205 
	$ùfix_cﬁ_öô_fûìxp‹t
–*
d©adú
 )

207 
ùfixe_d©a_fûe_t
 *
d©a
 =
NULL
;

209 i‡–
g_cﬁöfo
 ) {

210 
î∫o
 = 
EAGAIN
;

214 i‡–(
d©a
=
	`ˇŒoc
–1, (
ùfixe_d©a_fûe_t
))Ë==
NULL
)

216 i‡–(
g_cﬁöfo
=
	`ˇŒoc
–1, (
ùfix_cﬁ_öfo_t
))Ë==
NULL
) {

217 
	`‰ì
(
d©a
);

221 
g_cﬁöfo
->
exp‹t_√wsour˚
 = 
exp‹t_√wsour˚_fûe
;

222 
g_cﬁöfo
->
exp‹t_√wmsg
 = 
exp‹t_√wmsg_fûe
;

223 
g_cﬁöfo
->
exp‹t_åec‹d
 = 
exp‹t_åec‹d_fûe
;

224 
g_cﬁöfo
->
exp‹t_dªc‹d
 = 
exp‹t_dªc‹d_fûe
;

225 
g_cﬁöfo
->
exp‹t_˛ónup
 = 
exp‹t_˛ónup_fûe
;

226 
d©a
->
d©adú
 = datadir;

227 
g_cﬁöfo
->
d©a
 = (*)data;

229  
	`ùfix_cﬁ_ªgi°î_exp‹t
–
g_cﬁöfo
 );

230 
	}
}

232 
	$ùfix_cﬁ_°›_fûìxp‹t
()

234 i‡–
g_cﬁöfo
 ) {

235 (Ë
	`ùfix_cﬁ_ˇn˚l_exp‹t
–
g_cﬁöfo
 );

236 
	`‰ì
–
g_cﬁöfo
 );

237 
g_cﬁöfo
 = 
NULL
;

239 
	}
}

	@libipfix_110224/lib/ipfix_db.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<°rög.h
>

40 
	~<î∫o.h
>

41 
	~<sys/time.h
>

43 
	~"libmisc/misc.h
"

44 
	~"ùfix_db.h
"

48 
	#MAXQUERYLEN
 2000

	)

54 
	gquîy
[
MAXQUERYLEN
+1];

58 c⁄° 
	gcvsid
[]="$Id: ipfix_db.c 187 2010-03-18 09:39:32Z csc $";

69 
	$ùfix_db_check_èbÀ
–
MYSQL
 *
mysql
, *
èbÀ«me
, *
¸óãcmd
 )

71 
MYSQL_RES
 *
ªsu…
;

72 *
func
 = "db_check_table";

76 i‡–(
ªsu…
=
	`mysql_li°_èbÀs
–
mysql
, 
èbÀ«me
 )Ë==
NULL
 ) {

77 
	`mlogf
( 1, "[%s] mysql_list_tables() failed: %s\n",

78 
func
, 
	`mysql_îr‹
(
mysql
) );

82 i‡–(
	`mysql_num_rows
–
ªsu…
 )) <1 ) {

84 i‡–
	`mysql_quîy
–
mysql
, 
¸óãcmd
 ) !=0 ) {

85 
	`mlogf
–0, "[%s] %s\n", 
func
, 
¸óãcmd
 );

86 
	`mlogf
( 0, "[%s] mysql_query() failed: %s\n",

87 
func
, 
	`mysql_îr‹
(
mysql
) );

88 
	`mysql_‰ì_ªsu…
–
ªsu…
 );

92 
	`mlogf
–2, "[%s]ÅabÀ %†¸óãd\n", 
func
, 
èbÀ«me
 );

95 
	`mysql_‰ì_ªsu…
–
ªsu…
 );

96 
	`mlogf
–3, "[%s]ÅabÀ %†found\n", 
func
, 
èbÀ«me
 );

99 
	}
}

110 
	$ùfix_db_›í
–
MYSQL
 **
mysqÕ
,

111 *
dbho°
, *
dbu£r
, *
dbpw
, *
db«me
 )

113 
sql
[
MAXQUERYLEN
+1];

114 *
func
 = "ipfix_db_open";

116 i‡–((*
mysqÕ
)=
	`mysql_öô
(
NULL
)) ==NULL ) {

117 
	`mlogf
–0, "[%s] c™nŸ inô DBác˚ss!\n", 
func
 );

120 #i‡
	`deföed
(
MYSQL_OPT_RECONNECT
)

122 
my_boﬁ
 
›ti⁄
 = 1;

124 i‡–
	`mysql_›ti⁄s
–*
mysqÕ
, 
MYSQL_OPT_RECONNECT
, &
›ti⁄
 ) <0 )

125 
	`mlogf
( 0, "[%s] warning: mysql_options( RECONNECT ) failed!\n",

126 
func
 );

132 i‡–
	`mysql_ªÆ_c⁄√˘
–(*
mysqÕ
), 
dbho°
, 
dbu£r
,

133 
dbpw
, 
db«me
, 0, 
NULL
, 0 ) ==NULL ) {

134 
	`mlogf
( 0, "[db_open] mysql_real_connect() failed: %s\n",

135 
	`mysql_îr‹
(*
mysqÕ
) );

138 #ifde‡
HAVE_MYSQL_OPT_RECONNECT


139 i‡–
	`mysql_›ti⁄s
–(*
mysqÕ
), 
MYSQL_OPT_RECONNECT
, 1 ) < 0 ) {

140 
	`mlogf
( 1, "[%s] info: mysql_option(MYSQL_OPT_RECONNECT) failed: %s\n",

141 
func
, 
	`mysql_îr‹
(*
mysqÕ
) );

147 
	`¢¥ötf
–
sql
, 
MAXQUERYLEN
,

151 
IPFIX_DB_EXPORTERS
,

152 
IPFIX_DB_EXP_ID
, 
IPFIX_DB_EXP_ODID
, 
IPFIX_DB_EXP_ADDR
,

153 
IPFIX_DB_EXP_DESCR
, 
IPFIX_DB_EXP_ID
 );

155 i‡–
	`ùfix_db_check_èbÀ
–*
mysqÕ
, 
IPFIX_DB_EXPORTERS
, 
sql
 ) <0 ) {

156 
	`mlogf
( 0, "[%s] checkingÅable %s failed: %s\n",

157 
IPFIX_DB_EXPORTERS
, 
func
, 
	`mysql_îr‹
(*
mysqÕ
) );

163 
	`¢¥ötf
–
sql
, 
MAXQUERYLEN
,

167 
IPFIX_DB_MESSAGETABLE
,

168 
IPFIX_DB_MSGT_ID
, 
IPFIX_DB_MSGT_EXPID
,

169 
IPFIX_DB_MSGT_TIME
, 
IPFIX_DB_MSGT_ID
 );

171 i‡–
	`ùfix_db_check_èbÀ
–*
mysqÕ
, 
IPFIX_DB_MESSAGETABLE
, 
sql
 ) <0 ) {

172 
	`mlogf
( 0, "[%s] checkingÅable %s failed: %s\n",

173 
IPFIX_DB_MESSAGETABLE
, 
func
, 
	`mysql_îr‹
(*
mysqÕ
) );

179 
	`¢¥ötf
–
sql
, 
MAXQUERYLEN
,

183 
IPFIX_DB_TEMPLATETABLE
,

184 
IPFIX_DB_TMPL_ID
, 
IPFIX_DB_TMPL_IDENT
,

185 
IPFIX_DB_TMPL_TABLENAME
, 
IPFIX_DB_TMPL_ID
 );

187 i‡–
	`ùfix_db_check_èbÀ
–*
mysqÕ
, 
IPFIX_DB_TEMPLATETABLE
, 
sql
 ) <0 ) {

188 
	`mlogf
( 0, "[%s] checkingÅable %s failed: %s\n",

189 
IPFIX_DB_TEMPLATETABLE
, 
func
, 
	`mysql_îr‹
(*
mysqÕ
) );

195 
	`¢¥ötf
–
sql
, 
MAXQUERYLEN
,

198 
IPFIX_DB_MAPPINGTABLE
, 
IPFIX_DB_MT_MSGID
,

199 
IPFIX_DB_MT_TMPLID
, 
IPFIX_DB_MT_MSGID
 );

201 i‡–
	`ùfix_db_check_èbÀ
–*
mysqÕ
, 
IPFIX_DB_MAPPINGTABLE
, 
sql
 ) <0 ) {

202 
	`mlogf
( 0, "[%s] checkingÅable %s failed: %s\n",

203 
IPFIX_DB_MAPPINGTABLE
, 
func
, 
	`mysql_îr‹
(*
mysqÕ
) );

208 
	}
}

210 
	$ùfix_db_˛o£
–
MYSQL
 **
mysqÕ
 )

212 
	`mysql_˛o£
–*
mysqÕ
 );

213 (*
mysqÕ
Ë
NULL
;

214 
	}
}

216 
	$ùfix_db_gë_öt
–
MYSQL
 *
mysqÕ
, *
quîy
, *
i
 )

218 
MYSQL_RES
 *
ªsu…
;

219 
MYSQL_ROW
 
row
;

221 i‡–
	`mysql_quîy
–
mysqÕ
, 
quîy
 ) !=0) {

222 
	`mlogf
( 0, "[%s] mysql_query(%s) failed: %s\n",

223 
__func__
, 
quîy
, 
	`mysql_îr‹
(
mysqÕ
) );

226 i‡–(
ªsu…
=
	`mysql_°‹e_ªsu…
(
mysqÕ
)Ë==
NULL
 ) {

227 
	`mlogf
( 0, "[%s] mysql_store_result() failed: %s\n",

228 
__func__
, 
	`mysql_îr‹
(
mysqÕ
) );

232 
row
 = 
	`mysql_„tch_row
(
ªsu…
);

233 i‡–
row
 &&Ñow[0] ) {

234 *
i
 = 
	`©oi
–
row
[0] );

237 *
i
 = 0;

240 
	`mysql_‰ì_ªsu…
–
ªsu…
 );

242 
	}
}

252 
	$ùfix_db_¸óã_èbÀ
–
MYSQL
 *
mysql
, *
èbÀ«me
, 
ùfix_ãm∂©e_t
 *
t
 )

254 
i
;

255 
tmpbuf
[
MAXTABLENAMELEN
];

256 *
func
 = "ipfix_db";

260 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

262 
èbÀ«me
, 
IPFIX_DB_DT_MSGID
 );

263  
i
=0; i<
t
->
nfõlds
; i++ ) {

264 i‡–
	`ùfix_db_gë_cﬁum¬ame
–
t
->
fõlds
[
i
].
ñem
->
·
->
ío
,

265 
t
->
fõlds
[
i
].
ñem
->
·
->
·y≥
,

266 
tmpbuf
, (tmpbuf)) <0 ) {

270  
t
->
fõlds
[
i
].
ñem
->
·
->
codög
 ) {

271 
IPFIX_CODING_INT
:

272 
	`¢¥ötf
–
quîy
+
	`°æí
(quîy), 
MAXQUERYLEN
-strlen(query),

273 ", %†%sINT ", 
tmpbuf
,

274 (
t
->
fõlds
[
i
].
ñem
->
·
->
Àngth
>4)?"BIG":"" );

276 
IPFIX_CODING_UINT
:

277 
	`¢¥ötf
–
quîy
+
	`°æí
(quîy), 
MAXQUERYLEN
-strlen(query),

278 ", %†%sINT UNSIGNED ", 
tmpbuf
,

279 (
t
->
fõlds
[
i
].
ñem
->
·
->
Àngth
>4)?"BIG":"" );

281 
IPFIX_CODING_STRING
:

282 
	`¢¥ötf
–
quîy
+
	`°æí
(quîy), 
MAXQUERYLEN
-strlen(query),

283 ", %†TEXT ", 
tmpbuf
 );

285 
IPFIX_CODING_BYTES
:

286 
	`¢¥ötf
–
quîy
+
	`°æí
(quîy), 
MAXQUERYLEN
-strlen(query),

287 ", %†VARBINARY(%luË", 
tmpbuf
,

288 (
t
->
fõlds
[
i
].
ñem
->
·
->
Àngth
<
MAXBINARYIELEN
)?(t->fields[i].elem->ft->length):()MAXBINARYIELEN);

291 
	`¢¥ötf
–
quîy
+
	`°æí
(quîy), 
MAXQUERYLEN
-strlen(query),

292 ", %†VARBINARY(%dË", 
tmpbuf
, 
MAXBINARYIELEN
 );

296 
	`¢¥ötf
–
quîy
+
	`°æí
(quîy), 
MAXQUERYLEN
-strlen(query), " ) " );

300 i‡–
	`mysql_quîy
–
mysql
, 
quîy
 ) !=0 ) {

301 
	`mlogf
–0, "[%s] %s\n", 
func
, 
quîy
 );

302 
	`mlogf
( 0, "[%s] mysql_query() failed: %s\n",

303 
func
, 
	`mysql_îr‹
(
mysql
) );

306 
	`mlogf
–2, "[%s]ÅabÀ %†¸óãd\n", 
func
, 
èbÀ«me
 );

309 
	}
}

319 
	$ùfix_db_gë_èbÀ«me
–
MYSQL
 *
mysql
, *
èbÀ«me
, 
size_t
 
èbÀ«mñí
,

320 
uöt32_t
 *
ãm∂©e_id
,

321 
ùfix_ãm∂©e_t
 *
t
, 
¸óã_èbÀ_Êag
 )

323 
MYSQL_RES
 *
ªsu…
;

324 
MYSQL_ROW
 
row
;

325 
my_ul⁄gl⁄g
 
num_rows
;

326 
i
, 
j
, 
found
;

327 
mö
, 
œ°
, 
cur_ío
, 
√xt_ío
, 
·
, 
ío
;

328 *
idít
;

329 
size_t
 
Àn
 = 
t
->
nfõlds
*10;

330 *
func
 = "ipfix_db";

332 i‡–
èbÀ«mñí
 > 
MAXTABLENAMELEN
 )

333 
èbÀ«mñí
 = 
MAXTABLENAMELEN
;

336 i‡–(
idít
=
	`ˇŒoc
–
Àn
+1, (Ë)Ë==
NULL
) {

337 
	`mlogf
–1, "[%s] ouào‡mem‹y", 
func
 );

342 
	`¢¥ötf
–
idít
, 
Àn
, "%s", 
IPFIX_DB_TABLENAME_PREFIX
 );

346  
cur_ío
=0, 
√xt_ío
=0x7FFFFFFF;; ) {

347 
œ°
 = 0;

348 
mö
 = 0xFFFF;

350 i‡–
cur_ío
 ) {

351 
	`¢¥ötf
–
idít
+
	`°æí
(idít), 
Àn
-strlen(ident),

352 "v%x_", 
cur_ío
 );

355  
j
=0, 
found
=0; j<
t
->
nfõlds
; j++ ) {

356  
i
=0; i<
t
->
nfõlds
; i++ ) {

357 
·
 = 
t
->
fõlds
[
i
].
ñem
->·->
·y≥
;

358 
ío
 = 
t
->
fõlds
[
i
].
ñem
->
·
->eno;

360 i‡–(
ío
==
cur_ío
Ë&& (
·
<
mö
Ë&& (·>
œ°
) ) {

361 
mö
 = 
·
;

362 
found
 ++;

365 i‡–(
ío
<
√xt_ío
Ë&& (ío>
cur_ío
) )

366 
√xt_ío
=
ío
;

369 i‡–
mö
 == 0xFFFF )

372 i‡–
j
 && (
found
>1) )

373 
	`°rˇt
–
idít
, "_" );

375 
	`¢¥ötf
–
idít
+
	`°æí
(idít), 
Àn
-°æí(idít), "%x", 
mö
 );

376 
œ°
 = 
mö
;

377 
mö
 = 0xFFFF;

380 i‡–
√xt_ío
 == 0x7FFFFFFF )

383 i‡–(
√xt_ío
>
cur_ío
Ë&& 
found
 )

384 
	`°rˇt
–
idít
, "_" );

386 
cur_ío
 = 
√xt_ío
;

387 
√xt_ío
 = 0x7FFFFFFF;

392 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

394 
IPFIX_DB_TMPL_TABLENAME
, 
IPFIX_DB_TMPL_ID
,

395 
IPFIX_DB_TEMPLATETABLE
, 
IPFIX_DB_TMPL_IDENT
, 
idít
 );

397 i‡–
	`mysql_quîy
–
mysql
, 
quîy
 ) !=0 ) {

398 
	`mlogf
–0, "[%s] %s\n", 
func
, 
quîy
 );

399 
	`mlogf
( 0, "[%s] mysql_query() failed: %s\n",

400 
func
, 
	`mysql_îr‹
(
mysql
) );

401 
	`‰ì
(
idít
);

405 i‡–(
ªsu…
=
	`mysql_°‹e_ªsu…
(
mysql
)Ë==
NULL
 ) {

406 
	`mlogf
( 0, "[%s] mysql_store_result() failed: %s\n",

407 
func
, 
	`mysql_îr‹
(
mysql
) );

408 
	`‰ì
(
idít
);

412 i‡–(
num_rows
=
	`mysql_num_rows
–
ªsu…
 )) <0 ) {

413 
	`mlogf
( 0, "[%s] mysql_num_rows() failed: %s\n",

414 
func
, 
	`mysql_îr‹
(
mysql
) );

415 
	`mysql_‰ì_ªsu…
(
ªsu…
);

416 
	`‰ì
(
idít
);

420 i‡–
num_rows
 == 0 ) {

421 
uöt32_t
 
id
;

425 
	`mysql_‰ì_ªsu…
(
ªsu…
);

426 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

428 
IPFIX_DB_TEMPLATETABLE
, 
IPFIX_DB_TMPL_IDENT
,

429 
IPFIX_DB_TMPL_TABLENAME
 );

431 i‡–
	`mysql_quîy
–
mysql
, 
quîy
 ) !=0 ) {

432 
	`mlogf
( 0, "[%s] mysql_query(%s) failed: %s\n",

433 
func
, 
quîy
, 
	`mysql_îr‹
(
mysql
) );

434 
	`‰ì
(
idít
);

437 
id
 = (
uöt32_t
Ë
	`mysql_ö£π_id
–
mysql
 );

443 i‡–
	`°æí
(
idít
Ë> 
èbÀ«mñí
 )

444 
	`¢¥ötf
–
èbÀ«me
, 
èbÀ«mñí
, "%s%u",

445 
IPFIX_DB_TABLENAME_PREFIX
, 
id
 );

447 
	`¢¥ötf
–
èbÀ«me
, 
èbÀ«mñí
, "%s", 
idít
 );

448 *
ãm∂©e_id
 = 
id
;

452 
	`¢¥ötf
–
quîy
, 
MAXQUERYLEN
,

454 
IPFIX_DB_TEMPLATETABLE
, 
IPFIX_DB_TMPL_IDENT
, 
idít
,

455 
IPFIX_DB_TMPL_TABLENAME
, 
èbÀ«me
, 
IPFIX_DB_TMPL_ID
, 
id
 );

456 i‡–
	`mysql_quîy
–
mysql
, 
quîy
 ) !=0 ) {

457 
	`mlogf
( 0, "[%s] mysql_query(%s) failed: %s\n",

458 
func
, 
quîy
, 
	`mysql_îr‹
(
mysql
) );

459 
	`‰ì
(
idít
);

462 
	`‰ì
(
idít
);

467 
	`‰ì
(
idít
);

468 
row
 = 
	`mysql_„tch_row
(
ªsu…
);

469 i‡–(
row
==
NULL
) ||Ñow[0]==NULL ||Ñow[1]==NULL) {

470 
	`mlogf
–0, "[%s] ups\n", 
func
 );

471 
	`mysql_‰ì_ªsu…
–
ªsu…
 );

474 
	`¢¥ötf
–
èbÀ«me
, 
èbÀ«mñí
, "%s", 
row
[0] );

475 *
ãm∂©e_id
 = (
uöt32_t
Ë
	`©oi
(
row
[1]);

476 
	`mysql_‰ì_ªsu…
–
ªsu…
 );

479 i‡–
¸óã_èbÀ_Êag
 ) {

483 i‡–(
ªsu…
=
	`mysql_li°_èbÀs
–
mysql
, 
èbÀ«me
 )Ë==
NULL
 ) {

484 
	`mlogf
( 1, "[%s] mysql_list_tables() failed: %s\n",

485 
func
, 
	`mysql_îr‹
(
mysql
) );

489 i‡–(
	`mysql_num_rows
–
ªsu…
 )) <1 ) {

490 
	`mysql_‰ì_ªsu…
(
ªsu…
);

491 i‡–
	`ùfix_db_¸óã_èbÀ
–
mysql
, 
èbÀ«me
, 
t
 ) <0 )

495 
	`mysql_‰ì_ªsu…
(
ªsu…
);

496 
	`mlogf
–2, "[%s]ÅabÀ %†found\n", 
func
, 
èbÀ«me
 );

501 
	}
}

511 
	$ùfix_db_gë_cﬁum¬ame
–
ío
, 
ty≥
, *
buf
, 
size_t
 
buÊí
 )

513 #ifde‡
IENAME_COLUMNS


514 
ùfix_fõld_t
 *
ñem
;

516 i‡–(
ñem
=
	`ùfix_gë_·öfo
–
ío
, 
ty≥
 )Ë!=
NULL
 ) {

517 
	`¢¥ötf
–
buf
, 
buÊí
, "%s", 
ñem
->
·
->
«me
 );

521 
î∫o
 = 
EINVAL
;

524 
	`¢¥ötf
–
buf
, 
buÊí
, 
IPFIX_DB_COLUMNNAME_FORMAT
, 
ío
, 
ty≥
 );

526 
	}
}

	@libipfix_110224/lib/ipfix_db.h

11 #i‚de‡
_IPFIX_DB_H


12 
	#_IPFIX_DB_H


	)

14 
	~<time.h
>

15 
	~<sys/time.h
>

16 
	~<mysql/mysql.h
>

17 
	~"ùfix.h
"

19 #ifde‡ 
__˝lu•lus


23 
	#IPFIX_DB_EXPORTERS
 "ùfix_exp‹ãrs"

	)

24 
	#IPFIX_DB_EXP_ID
 "id"

	)

25 
	#IPFIX_DB_EXP_ADDR
 "ùaddr"

	)

26 
	#IPFIX_DB_EXP_ODID
 "ob£rv©i⁄_domaö"

	)

27 
	#IPFIX_DB_EXP_DESCR
 "des¸ùti⁄"

	)

29 
	#IPFIX_DB_MESSAGETABLE
 "ùfix_mesßges"

	)

30 
	#IPFIX_DB_MSGT_ID
 "id"

	)

31 
	#IPFIX_DB_MSGT_EXPID
 "id_exp‹ãrs"

	)

32 
	#IPFIX_DB_MSGT_TIME
 "t°amp"

	)

34 
	#IPFIX_DB_TEMPLATETABLE
 "ùfix_ãm∂©es"

	)

35 
	#IPFIX_DB_TMPL_ID
 "id"

	)

36 
	#IPFIX_DB_TMPL_IDENT
 "ãm∂©e_idít"

	)

37 
	#IPFIX_DB_TMPL_TABLENAME
 "èbÀ_«me"

	)

39 
	#IPFIX_DB_MAPPINGTABLE
 "ùfix_m≠pög"

	)

40 
	#IPFIX_DB_MT_MSGID
 "id_ùfix_mesßges"

	)

41 
	#IPFIX_DB_MT_TMPLID
 "id_ùfix_ãm∂©es"

	)

43 
	#IPFIX_DB_TABLENAME_PREFIX
 "ùfix_"

	)

44 
	#IPFIX_DB_TABLENAME_FORMAT
 "ùfix_d©a_%u"

	)

45 
	#IPFIX_DB_DT_MSGID
 "id_ùfix_mesßges"

	)

46 
	#IPFIX_DB_COLUMNNAME_FORMAT
 "õ%x_%x"

	)

48 
	#MAXTABLENAMELEN
 64

	)

49 
	#MAXBINARYIELEN
 4096

	)

51 
ùfix_db_›í
–
MYSQL
 **
mysqÕ
,

52 *
dbho°
, *
dbu£r
, *
dbpw
, *
db«me
 );

53 
ùfix_db_˛o£
–
MYSQL
 **
mysqÕ
 );

54 
ùfix_db_gë_öt
–
MYSQL
 *
mysqÕ
, *
quîy
, *
i
 );

56 
ùfix_db_gë_èbÀ«me
–
MYSQL
 *
mysql
,

57 *
buf
, 
size_t
 
buÊí
, 
uöt32_t
 *
id
,

58 
ùfix_ãm∂©e_t
 *
t
, 
¸óã_èbÀ_Êag
 );

59 
ùfix_db_gë_cﬁum¬ame
–
ío
, 
ty≥
, *
buf
, 
size_t
 
buÊí
 );

61 #ifde‡ 
__˝lu•lus


	@libipfix_110224/lib/ipfix_def.h

7 #i‚de‡
IPFIX_DEF_H


8 
	#IPFIX_DEF_H


	)

10 
	#IPFIX_CODING_INT
 1

	)

11 
	#IPFIX_CODING_UINT
 2

	)

12 
	#IPFIX_CODING_BYTES
 3

	)

13 
	#IPFIX_CODING_STRING
 4

	)

14 
	#IPFIX_CODING_FLOAT
 5

	)

15 
	#IPFIX_CODING_NTP
 6

	)

16 
	#IPFIX_CODING_IPADDR
 7

	)

18 
	#REV_PEN
 29305

	)

20 (*
	tùfix_ícode_func
Ë(*, *, 
	tsize_t
);

21 (*
	tùfix_decode_func
Ë(*, *, 
	tsize_t
);

22 (*
	tùfix_¢¥öt_func
Ë(*, 
	tsize_t
, *, size_t);

26 
ío
;

27 
·y≥
;

28 
ssize_t
 
Àngth
;

29 
codög
;

30 *
«me
;

31 *
documíèti⁄
;

33 } 
	tùfix_fõld_ty≥_t
;

35 
	sùfix_fõld


37 
ùfix_fõld
 *
√xt
;

38 
ùfix_fõld_ty≥_t
 *
·
;

39 
ùfix_ícode_func
 
ícode
;

40 
ùfix_decode_func
 
decode
;

41 
ùfix_¢¥öt_func
 
¢¥öt
;

43 } 
	tùfix_fõld_t
;

45 
	#IPFIX_FT_OCTETDELTACOUNT
 1

	)

46 
	#IPFIX_FT_PACKETDELTACOUNT
 2

	)

47 
	#IPFIX_FT_FLOWS
 3

	)

48 
	#IPFIX_FT_PROTOCOLIDENTIFIER
 4

	)

49 
	#IPFIX_FT_IPCLASSOFSERVICE
 5

	)

50 
	#IPFIX_FT_TCPCONTROLBITS
 6

	)

51 
	#IPFIX_FT_SOURCETRANSPORTPORT
 7

	)

52 
	#IPFIX_FT_SOURCEIPV4ADDRESS
 8

	)

53 
	#IPFIX_FT_SOURCEIPV4PREFIXLENGTH
 9

	)

54 
	#IPFIX_FT_INGRESSINTERFACE
 10

	)

55 
	#IPFIX_FT_DESTINATIONTRANSPORTPORT
 11

	)

56 
	#IPFIX_FT_DESTINATIONIPV4ADDRESS
 12

	)

57 
	#IPFIX_FT_DESTINATIONIPV4PREFIXLENGTH
 13

	)

58 
	#IPFIX_FT_EGRESSINTERFACE
 14

	)

59 
	#IPFIX_FT_IPNEXTHOPIPV4ADDRESS
 15

	)

60 
	#IPFIX_FT_BGPSOURCEASNUMBER
 16

	)

61 
	#IPFIX_FT_BGPDESTINATIONASNUMBER
 17

	)

62 
	#IPFIX_FT_BGPNEXTHOPIPV4ADDRESS
 18

	)

63 
	#IPFIX_FT_POSTMCASTPACKETDELTACOUNT
 19

	)

64 
	#IPFIX_FT_POSTMCASTOCTETDELTACOUNT
 20

	)

65 
	#IPFIX_FT_FLOWENDSYSUPTIME
 21

	)

66 
	#IPFIX_FT_FLOWSTARTSYSUPTIME
 22

	)

67 
	#IPFIX_FT_POSTOCTETDELTACOUNT
 23

	)

68 
	#IPFIX_FT_POSTPACKETDELTACOUNT
 24

	)

69 
	#IPFIX_FT_MINIMUMIPTOTALLENGTH
 25

	)

70 
	#IPFIX_FT_MAXIMUMIPTOTALLENGTH
 26

	)

71 
	#IPFIX_FT_SOURCEIPV6ADDRESS
 27

	)

72 
	#IPFIX_FT_DESTINATIONIPV6ADDRESS
 28

	)

73 
	#IPFIX_FT_SOURCEIPV6PREFIXLENGTH
 29

	)

74 
	#IPFIX_FT_DESTINATIONIPV6PREFIXLENGTH
 30

	)

75 
	#IPFIX_FT_FLOWLABELIPV6
 31

	)

76 
	#IPFIX_FT_ICMPTYPECODEIPV4
 32

	)

77 
	#IPFIX_FT_IGMPTYPE
 33

	)

78 
	#IPFIX_FT_SAMPLING_INTERVAL
 34

	)

79 
	#IPFIX_FT_SAMPLING_ALGORITHM
 35

	)

80 
	#IPFIX_FT_FLOWACTIVETIMEOUT
 36

	)

81 
	#IPFIX_FT_FLOWIDLETIMEOUT
 37

	)

82 
	#IPFIX_FT_ENGINE_TYPE
 38

	)

83 
	#IPFIX_FT_ENGINE_ID
 39

	)

84 
	#IPFIX_FT_EXPORTEDOCTETTOTALCOUNT
 40

	)

85 
	#IPFIX_FT_EXPORTEDMESSAGETOTALCOUNT
 41

	)

86 
	#IPFIX_FT_EXPORTEDFLOWRECORDTOTALCOUNT
 42

	)

87 
	#IPFIX_FT_SOURCEIPV4PREFIX
 44

	)

88 
	#IPFIX_FT_DESTINATIONIPV4PREFIX
 45

	)

89 
	#IPFIX_FT_MPLSTOPLABELTYPE
 46

	)

90 
	#IPFIX_FT_MPLSTOPLABELIPV4ADDRESS
 47

	)

91 
	#IPFIX_FT_FLOW_SAMPLER_ID
 48

	)

92 
	#IPFIX_FT_FLOW_SAMPLER_MODE
 49

	)

93 
	#IPFIX_FT_FLOW_SAMPLER_RANDOM_INTERVAL
 50

	)

94 
	#IPFIX_FT_MINIMUMTTL
 52

	)

95 
	#IPFIX_FT_MAXIMUMTTL
 53

	)

96 
	#IPFIX_FT_FRAGMENTIDENTIFICATION
 54

	)

97 
	#IPFIX_FT_POSTIPCLASSOFSERVICE
 55

	)

98 
	#IPFIX_FT_SOURCEMACADDRESS
 56

	)

99 
	#IPFIX_FT_POSTDESTINATIONMACADDRESS
 57

	)

100 
	#IPFIX_FT_VLANID
 58

	)

101 
	#IPFIX_FT_POSTVLANID
 59

	)

102 
	#IPFIX_FT_IPVERSION
 60

	)

103 
	#IPFIX_FT_FLOWDIRECTION
 61

	)

104 
	#IPFIX_FT_IPNEXTHOPIPV6ADDRESS
 62

	)

105 
	#IPFIX_FT_BGPNEXTHOPIPV6ADDRESS
 63

	)

106 
	#IPFIX_FT_IPV6EXTENSIONHEADERS
 64

	)

107 
	#IPFIX_FT_MPLSTOPLABELSTACKSECTION
 70

	)

108 
	#IPFIX_FT_MPLSLABELSTACKSECTION2
 71

	)

109 
	#IPFIX_FT_MPLSLABELSTACKSECTION3
 72

	)

110 
	#IPFIX_FT_MPLSLABELSTACKSECTION4
 73

	)

111 
	#IPFIX_FT_MPLSLABELSTACKSECTION5
 74

	)

112 
	#IPFIX_FT_MPLSLABELSTACKSECTION6
 75

	)

113 
	#IPFIX_FT_MPLSLABELSTACKSECTION7
 76

	)

114 
	#IPFIX_FT_MPLSLABELSTACKSECTION8
 77

	)

115 
	#IPFIX_FT_MPLSLABELSTACKSECTION9
 78

	)

116 
	#IPFIX_FT_MPLSLABELSTACKSECTION10
 79

	)

117 
	#IPFIX_FT_DESTINATIONMACADDRESS
 80

	)

118 
	#IPFIX_FT_POSTSOURCEMACADDRESS
 81

	)

119 
	#IPFIX_FT_OCTETTOTALCOUNT
 85

	)

120 
	#IPFIX_FT_PACKETTOTALCOUNT
 86

	)

121 
	#IPFIX_FT_FRAGMENTOFFSET
 88

	)

122 
	#IPFIX_FT_MPLSVPNROUTEDISTINGUISHER
 90

	)

123 
	#IPFIX_FT_BGPNEXTADJACENTASNUMBER
 128

	)

124 
	#IPFIX_FT_BGPPREVADJACENTASNUMBER
 129

	)

125 
	#IPFIX_FT_EXPORTERIPV4ADDRESS
 130

	)

126 
	#IPFIX_FT_EXPORTERIPV6ADDRESS
 131

	)

127 
	#IPFIX_FT_DROPPEDOCTETDELTACOUNT
 132

	)

128 
	#IPFIX_FT_DROPPEDPACKETDELTACOUNT
 133

	)

129 
	#IPFIX_FT_DROPPEDOCTETTOTALCOUNT
 134

	)

130 
	#IPFIX_FT_DROPPEDPACKETTOTALCOUNT
 135

	)

131 
	#IPFIX_FT_FLOWENDREASON
 136

	)

132 
	#IPFIX_FT_COMMONPROPERTIESID
 137

	)

133 
	#IPFIX_FT_OBSERVATIONPOINTID
 138

	)

134 
	#IPFIX_FT_ICMPTYPECODEIPV6
 139

	)

135 
	#IPFIX_FT_MPLSTOPLABELIPV6ADDRESS
 140

	)

136 
	#IPFIX_FT_LINECARDID
 141

	)

137 
	#IPFIX_FT_PORTID
 142

	)

138 
	#IPFIX_FT_METERINGPROCESSID
 143

	)

139 
	#IPFIX_FT_EXPORTINGPROCESSID
 144

	)

140 
	#IPFIX_FT_TEMPLATEID
 145

	)

141 
	#IPFIX_FT_WLANCHANNELID
 146

	)

142 
	#IPFIX_FT_WLANSSID
 147

	)

143 
	#IPFIX_FT_FLOWID
 148

	)

144 
	#IPFIX_FT_OBSERVATIONDOMAINID
 149

	)

145 
	#IPFIX_FT_FLOWSTARTSECONDS
 150

	)

146 
	#IPFIX_FT_FLOWENDSECONDS
 151

	)

147 
	#IPFIX_FT_FLOWSTARTMILLISECONDS
 152

	)

148 
	#IPFIX_FT_FLOWENDMILLISECONDS
 153

	)

149 
	#IPFIX_FT_FLOWSTARTMICROSECONDS
 154

	)

150 
	#IPFIX_FT_FLOWENDMICROSECONDS
 155

	)

151 
	#IPFIX_FT_FLOWSTARTNANOSECONDS
 156

	)

152 
	#IPFIX_FT_FLOWENDNANOSECONDS
 157

	)

153 
	#IPFIX_FT_FLOWSTARTDELTAMICROSECONDS
 158

	)

154 
	#IPFIX_FT_FLOWENDDELTAMICROSECONDS
 159

	)

155 
	#IPFIX_FT_SYSTEMINITTIMEMILLISECONDS
 160

	)

156 
	#IPFIX_FT_FLOWDURATIONMILLISECONDS
 161

	)

157 
	#IPFIX_FT_FLOWDURATIONMICROSECONDS
 162

	)

158 
	#IPFIX_FT_OBSERVEDFLOWTOTALCOUNT
 163

	)

159 
	#IPFIX_FT_IGNOREDPACKETTOTALCOUNT
 164

	)

160 
	#IPFIX_FT_IGNOREDOCTETTOTALCOUNT
 165

	)

161 
	#IPFIX_FT_NOTSENTFLOWTOTALCOUNT
 166

	)

162 
	#IPFIX_FT_NOTSENTPACKETTOTALCOUNT
 167

	)

163 
	#IPFIX_FT_NOTSENTOCTETTOTALCOUNT
 168

	)

164 
	#IPFIX_FT_DESTINATIONIPV6PREFIX
 169

	)

165 
	#IPFIX_FT_SOURCEIPV6PREFIX
 170

	)

166 
	#IPFIX_FT_POSTOCTETTOTALCOUNT
 171

	)

167 
	#IPFIX_FT_POSTPACKETTOTALCOUNT
 172

	)

168 
	#IPFIX_FT_FLOWKEYINDICATOR
 173

	)

169 
	#IPFIX_FT_POSTMCASTPACKETTOTALCOUNT
 174

	)

170 
	#IPFIX_FT_POSTMCASTOCTETTOTALCOUNT
 175

	)

171 
	#IPFIX_FT_ICMPTYPEIPV4
 176

	)

172 
	#IPFIX_FT_ICMPCODEIPV4
 177

	)

173 
	#IPFIX_FT_ICMPTYPEIPV6
 178

	)

174 
	#IPFIX_FT_ICMPCODEIPV6
 179

	)

175 
	#IPFIX_FT_UDPSOURCEPORT
 180

	)

176 
	#IPFIX_FT_UDPDESTINATIONPORT
 181

	)

177 
	#IPFIX_FT_TCPSOURCEPORT
 182

	)

178 
	#IPFIX_FT_TCPDESTINATIONPORT
 183

	)

179 
	#IPFIX_FT_TCPSEQUENCENUMBER
 184

	)

180 
	#IPFIX_FT_TCPACKNOWLEDGEMENTNUMBER
 185

	)

181 
	#IPFIX_FT_TCPWINDOWSIZE
 186

	)

182 
	#IPFIX_FT_TCPURGENTPOINTER
 187

	)

183 
	#IPFIX_FT_TCPHEADERLENGTH
 188

	)

184 
	#IPFIX_FT_IPHEADERLENGTH
 189

	)

185 
	#IPFIX_FT_TOTALLENGTHIPV4
 190

	)

186 
	#IPFIX_FT_PAYLOADLENGTHIPV6
 191

	)

187 
	#IPFIX_FT_IPTTL
 192

	)

188 
	#IPFIX_FT_NEXTHEADERIPV6
 193

	)

189 
	#IPFIX_FT_MPLSPAYLOADLENGTH
 194

	)

190 
	#IPFIX_FT_IPDIFFSERVCODEPOINT
 195

	)

191 
	#IPFIX_FT_IPPRECEDENCE
 196

	)

192 
	#IPFIX_FT_FRAGMENTFLAGS
 197

	)

193 
	#IPFIX_FT_OCTETDELTASUMOFSQUARES
 198

	)

194 
	#IPFIX_FT_OCTETTOTALSUMOFSQUARES
 199

	)

195 
	#IPFIX_FT_MPLSTOPLABELTTL
 200

	)

196 
	#IPFIX_FT_MPLSLABELSTACKLENGTH
 201

	)

197 
	#IPFIX_FT_MPLSLABELSTACKDEPTH
 202

	)

198 
	#IPFIX_FT_MPLSTOPLABELEXP
 203

	)

199 
	#IPFIX_FT_IPPAYLOADLENGTH
 204

	)

200 
	#IPFIX_FT_UDPMESSAGELENGTH
 205

	)

201 
	#IPFIX_FT_ISMULTICAST
 206

	)

202 
	#IPFIX_FT_IPV4IHL
 207

	)

203 
	#IPFIX_FT_IPV4OPTIONS
 208

	)

204 
	#IPFIX_FT_TCPOPTIONS
 209

	)

205 
	#IPFIX_FT_PADDINGOCTETS
 210

	)

206 
	#IPFIX_FT_COLLECTORIPV4ADDRESS
 211

	)

207 
	#IPFIX_FT_COLLECTORIPV6ADDRESS
 212

	)

208 
	#IPFIX_FT_COLLECTORINTERFACE
 213

	)

209 
	#IPFIX_FT_COLLECTORPROTOCOLVERSION
 214

	)

210 
	#IPFIX_FT_COLLECTORTRANSPORTPROTOCOL
 215

	)

211 
	#IPFIX_FT_COLLECTORTRANSPORTPORT
 216

	)

212 
	#IPFIX_FT_EXPORTERTRANSPORTPORT
 217

	)

213 
	#IPFIX_FT_TCPSYNTOTALCOUNT
 218

	)

214 
	#IPFIX_FT_TCPFINTOTALCOUNT
 219

	)

215 
	#IPFIX_FT_TCPRSTTOTALCOUNT
 220

	)

216 
	#IPFIX_FT_TCPPSHTOTALCOUNT
 221

	)

217 
	#IPFIX_FT_TCPACKTOTALCOUNT
 222

	)

218 
	#IPFIX_FT_TCPURGTOTALCOUNT
 223

	)

219 
	#IPFIX_FT_IPTOTALLENGTH
 224

	)

220 
	#IPFIX_FT_POSTMPLSTOPLABELEXP
 237

	)

221 
	#IPFIX_FT_TCPWINDOWSCALE
 238

	)

222 
	#IPFIX_FT_OBSERVATIONPOINTID_PSAMP
 300

	)

223 
	#IPFIX_FT_SELECTIONSEQUENCEID
 301

	)

224 
	#IPFIX_FT_SELECTORID
 302

	)

225 
	#IPFIX_FT_INFORMATIONELEMENTID
 303

	)

226 
	#IPFIX_FT_SELECTORALGORITHM
 304

	)

227 
	#IPFIX_FT_SAMPLINGPACKETINTERVAL
 305

	)

228 
	#IPFIX_FT_SAMPLINGPACKETSPACE
 306

	)

229 
	#IPFIX_FT_SAMPLINGTIMEINTERVAL
 307

	)

230 
	#IPFIX_FT_SAMPLINGTIMESPACE
 308

	)

231 
	#IPFIX_FT_SAMPLINGSIZE
 309

	)

232 
	#IPFIX_FT_SAMPLINGPOPULATION
 310

	)

233 
	#IPFIX_FT_SAMPLINGPROBABILITY
 311

	)

234 
	#IPFIX_FT_DATALINKFRAMESIZE
 312

	)

235 
	#IPFIX_FT_IPHEADERPACKETSECTION
 313

	)

236 
	#IPFIX_FT_IPPAYLOADPACKETSECTION
 314

	)

237 
	#IPFIX_FT_DATALINKFRAMESECTION
 315

	)

238 
	#IPFIX_FT_MPLSLABELSTACKSECTION
 316

	)

239 
	#IPFIX_FT_MPLSPAYLOADPACKETSECTION
 317

	)

240 
	#IPFIX_FT_PACKETSOBSERVED
 318

	)

241 
	#IPFIX_FT_PACKETSSELECTED
 319

	)

242 
	#IPFIX_FT_FIXEDERROR
 320

	)

243 
	#IPFIX_FT_RELATIVEERROR
 321

	)

244 
	#IPFIX_FT_OBSERVATIONTIMESECONDS
 322

	)

245 
	#IPFIX_FT_OBSERVATIONTIMEMILLISECONDS
 323

	)

246 
	#IPFIX_FT_OBSERVATIONTIMEMICROSECONDS
 324

	)

247 
	#IPFIX_FT_OBSERVATIONTIMENANOSECONDS
 325

	)

248 
	#IPFIX_FT_DIGESTHASHVALUE
 326

	)

249 
	#IPFIX_FT_HASHIPPAYLOADOFFSET
 327

	)

250 
	#IPFIX_FT_HASHIPPAYLOADSIZE
 328

	)

251 
	#IPFIX_FT_HASHOUTPUTRANGEMIN
 329

	)

252 
	#IPFIX_FT_HASHOUTPUTRANGEMAX
 330

	)

253 
	#IPFIX_FT_HASHSELECTEDRANGEMIN
 331

	)

254 
	#IPFIX_FT_HASHSELECTEDRANGEMAX
 332

	)

255 
	#IPFIX_FT_HASHDIGESTOUTPUT
 333

	)

256 
	#IPFIX_FT_HASHINITIALISERVALUE
 334

	)

260 
	#IPFIX_CN_OCTETDELTACOUNT
 "õ0_1"

	)

261 
	#IPFIX_CN_PACKETDELTACOUNT
 "õ0_2"

	)

262 
	#IPFIX_CN_FLOWS
 "õ0_3"

	)

263 
	#IPFIX_CN_PROTOCOLIDENTIFIER
 "õ0_4"

	)

264 
	#IPFIX_CN_IPCLASSOFSERVICE
 "õ0_5"

	)

265 
	#IPFIX_CN_TCPCONTROLBITS
 "õ0_6"

	)

266 
	#IPFIX_CN_SOURCETRANSPORTPORT
 "õ0_7"

	)

267 
	#IPFIX_CN_SOURCEIPV4ADDRESS
 "õ0_8"

	)

268 
	#IPFIX_CN_SOURCEIPV4PREFIXLENGTH
 "õ0_9"

	)

269 
	#IPFIX_CN_INGRESSINTERFACE
 "õ0_a"

	)

270 
	#IPFIX_CN_DESTINATIONTRANSPORTPORT
 "õ0_b"

	)

271 
	#IPFIX_CN_DESTINATIONIPV4ADDRESS
 "õ0_c"

	)

272 
	#IPFIX_CN_DESTINATIONIPV4PREFIXLENGTH
 "õ0_d"

	)

273 
	#IPFIX_CN_EGRESSINTERFACE
 "õ0_e"

	)

274 
	#IPFIX_CN_IPNEXTHOPIPV4ADDRESS
 "õ0_f"

	)

275 
	#IPFIX_CN_BGPSOURCEASNUMBER
 "õ0_10"

	)

276 
	#IPFIX_CN_BGPDESTINATIONASNUMBER
 "õ0_11"

	)

277 
	#IPFIX_CN_BGPNEXTHOPIPV4ADDRESS
 "õ0_12"

	)

278 
	#IPFIX_CN_POSTMCASTPACKETDELTACOUNT
 "õ0_13"

	)

279 
	#IPFIX_CN_POSTMCASTOCTETDELTACOUNT
 "õ0_14"

	)

280 
	#IPFIX_CN_FLOWENDSYSUPTIME
 "õ0_15"

	)

281 
	#IPFIX_CN_FLOWSTARTSYSUPTIME
 "õ0_16"

	)

282 
	#IPFIX_CN_POSTOCTETDELTACOUNT
 "õ0_17"

	)

283 
	#IPFIX_CN_POSTPACKETDELTACOUNT
 "õ0_18"

	)

284 
	#IPFIX_CN_MINIMUMIPTOTALLENGTH
 "õ0_19"

	)

285 
	#IPFIX_CN_MAXIMUMIPTOTALLENGTH
 "õ0_1a"

	)

286 
	#IPFIX_CN_SOURCEIPV6ADDRESS
 "õ0_1b"

	)

287 
	#IPFIX_CN_DESTINATIONIPV6ADDRESS
 "õ0_1c"

	)

288 
	#IPFIX_CN_SOURCEIPV6PREFIXLENGTH
 "õ0_1d"

	)

289 
	#IPFIX_CN_DESTINATIONIPV6PREFIXLENGTH
 "õ0_1e"

	)

290 
	#IPFIX_CN_FLOWLABELIPV6
 "õ0_1f"

	)

291 
	#IPFIX_CN_ICMPTYPECODEIPV4
 "õ0_20"

	)

292 
	#IPFIX_CN_IGMPTYPE
 "õ0_21"

	)

293 
	#IPFIX_CN_SAMPLING_INTERVAL
 "õ0_22"

	)

294 
	#IPFIX_CN_SAMPLING_ALGORITHM
 "õ0_23"

	)

295 
	#IPFIX_CN_FLOWACTIVETIMEOUT
 "õ0_24"

	)

296 
	#IPFIX_CN_FLOWIDLETIMEOUT
 "õ0_25"

	)

297 
	#IPFIX_CN_ENGINE_TYPE
 "õ0_26"

	)

298 
	#IPFIX_CN_ENGINE_ID
 "õ0_27"

	)

299 
	#IPFIX_CN_EXPORTEDOCTETTOTALCOUNT
 "õ0_28"

	)

300 
	#IPFIX_CN_EXPORTEDMESSAGETOTALCOUNT
 "õ0_29"

	)

301 
	#IPFIX_CN_EXPORTEDFLOWRECORDTOTALCOUNT
 "õ0_2a"

	)

302 
	#IPFIX_CN_SOURCEIPV4PREFIX
 "õ0_2c"

	)

303 
	#IPFIX_CN_DESTINATIONIPV4PREFIX
 "õ0_2d"

	)

304 
	#IPFIX_CN_MPLSTOPLABELTYPE
 "õ0_2e"

	)

305 
	#IPFIX_CN_MPLSTOPLABELIPV4ADDRESS
 "õ0_2f"

	)

306 
	#IPFIX_CN_FLOW_SAMPLER_ID
 "õ0_30"

	)

307 
	#IPFIX_CN_FLOW_SAMPLER_MODE
 "õ0_31"

	)

308 
	#IPFIX_CN_FLOW_SAMPLER_RANDOM_INTERVAL
 "õ0_32"

	)

309 
	#IPFIX_CN_MINIMUMTTL
 "õ0_34"

	)

310 
	#IPFIX_CN_MAXIMUMTTL
 "õ0_35"

	)

311 
	#IPFIX_CN_FRAGMENTIDENTIFICATION
 "õ0_36"

	)

312 
	#IPFIX_CN_POSTIPCLASSOFSERVICE
 "õ0_37"

	)

313 
	#IPFIX_CN_SOURCEMACADDRESS
 "õ0_38"

	)

314 
	#IPFIX_CN_POSTDESTINATIONMACADDRESS
 "õ0_39"

	)

315 
	#IPFIX_CN_VLANID
 "õ0_3a"

	)

316 
	#IPFIX_CN_POSTVLANID
 "õ0_3b"

	)

317 
	#IPFIX_CN_IPVERSION
 "õ0_3c"

	)

318 
	#IPFIX_CN_FLOWDIRECTION
 "õ0_3d"

	)

319 
	#IPFIX_CN_IPNEXTHOPIPV6ADDRESS
 "õ0_3e"

	)

320 
	#IPFIX_CN_BGPNEXTHOPIPV6ADDRESS
 "õ0_3f"

	)

321 
	#IPFIX_CN_IPV6EXTENSIONHEADERS
 "õ0_40"

	)

322 
	#IPFIX_CN_MPLSTOPLABELSTACKSECTION
 "õ0_46"

	)

323 
	#IPFIX_CN_MPLSLABELSTACKSECTION2
 "õ0_47"

	)

324 
	#IPFIX_CN_MPLSLABELSTACKSECTION3
 "õ0_48"

	)

325 
	#IPFIX_CN_MPLSLABELSTACKSECTION4
 "õ0_49"

	)

326 
	#IPFIX_CN_MPLSLABELSTACKSECTION5
 "õ0_4a"

	)

327 
	#IPFIX_CN_MPLSLABELSTACKSECTION6
 "õ0_4b"

	)

328 
	#IPFIX_CN_MPLSLABELSTACKSECTION7
 "õ0_4c"

	)

329 
	#IPFIX_CN_MPLSLABELSTACKSECTION8
 "õ0_4d"

	)

330 
	#IPFIX_CN_MPLSLABELSTACKSECTION9
 "õ0_4e"

	)

331 
	#IPFIX_CN_MPLSLABELSTACKSECTION10
 "õ0_4f"

	)

332 
	#IPFIX_CN_DESTINATIONMACADDRESS
 "õ0_50"

	)

333 
	#IPFIX_CN_POSTSOURCEMACADDRESS
 "õ0_51"

	)

334 
	#IPFIX_CN_OCTETTOTALCOUNT
 "õ0_55"

	)

335 
	#IPFIX_CN_PACKETTOTALCOUNT
 "õ0_56"

	)

336 
	#IPFIX_CN_FRAGMENTOFFSET
 "õ0_58"

	)

337 
	#IPFIX_CN_MPLSVPNROUTEDISTINGUISHER
 "õ0_5a"

	)

338 
	#IPFIX_CN_BGPNEXTADJACENTASNUMBER
 "õ0_80"

	)

339 
	#IPFIX_CN_BGPPREVADJACENTASNUMBER
 "õ0_81"

	)

340 
	#IPFIX_CN_EXPORTERIPV4ADDRESS
 "õ0_82"

	)

341 
	#IPFIX_CN_EXPORTERIPV6ADDRESS
 "õ0_83"

	)

342 
	#IPFIX_CN_DROPPEDOCTETDELTACOUNT
 "õ0_84"

	)

343 
	#IPFIX_CN_DROPPEDPACKETDELTACOUNT
 "õ0_85"

	)

344 
	#IPFIX_CN_DROPPEDOCTETTOTALCOUNT
 "õ0_86"

	)

345 
	#IPFIX_CN_DROPPEDPACKETTOTALCOUNT
 "õ0_87"

	)

346 
	#IPFIX_CN_FLOWENDREASON
 "õ0_88"

	)

347 
	#IPFIX_CN_COMMONPROPERTIESID
 "õ0_89"

	)

348 
	#IPFIX_CN_OBSERVATIONPOINTID
 "õ0_8a"

	)

349 
	#IPFIX_CN_ICMPTYPECODEIPV6
 "õ0_8b"

	)

350 
	#IPFIX_CN_MPLSTOPLABELIPV6ADDRESS
 "õ0_8c"

	)

351 
	#IPFIX_CN_LINECARDID
 "õ0_8d"

	)

352 
	#IPFIX_CN_PORTID
 "õ0_8e"

	)

353 
	#IPFIX_CN_METERINGPROCESSID
 "õ0_8f"

	)

354 
	#IPFIX_CN_EXPORTINGPROCESSID
 "õ0_90"

	)

355 
	#IPFIX_CN_TEMPLATEID
 "õ0_91"

	)

356 
	#IPFIX_CN_WLANCHANNELID
 "õ0_92"

	)

357 
	#IPFIX_CN_WLANSSID
 "õ0_93"

	)

358 
	#IPFIX_CN_FLOWID
 "õ0_94"

	)

359 
	#IPFIX_CN_OBSERVATIONDOMAINID
 "õ0_95"

	)

360 
	#IPFIX_CN_FLOWSTARTSECONDS
 "õ0_96"

	)

361 
	#IPFIX_CN_FLOWENDSECONDS
 "õ0_97"

	)

362 
	#IPFIX_CN_FLOWSTARTMILLISECONDS
 "õ0_98"

	)

363 
	#IPFIX_CN_FLOWENDMILLISECONDS
 "õ0_99"

	)

364 
	#IPFIX_CN_FLOWSTARTMICROSECONDS
 "õ0_9a"

	)

365 
	#IPFIX_CN_FLOWENDMICROSECONDS
 "õ0_9b"

	)

366 
	#IPFIX_CN_FLOWSTARTNANOSECONDS
 "õ0_9c"

	)

367 
	#IPFIX_CN_FLOWENDNANOSECONDS
 "õ0_9d"

	)

368 
	#IPFIX_CN_FLOWSTARTDELTAMICROSECONDS
 "õ0_9e"

	)

369 
	#IPFIX_CN_FLOWENDDELTAMICROSECONDS
 "õ0_9f"

	)

370 
	#IPFIX_CN_SYSTEMINITTIMEMILLISECONDS
 "õ0_a0"

	)

371 
	#IPFIX_CN_FLOWDURATIONMILLISECONDS
 "õ0_a1"

	)

372 
	#IPFIX_CN_FLOWDURATIONMICROSECONDS
 "õ0_a2"

	)

373 
	#IPFIX_CN_OBSERVEDFLOWTOTALCOUNT
 "õ0_a3"

	)

374 
	#IPFIX_CN_IGNOREDPACKETTOTALCOUNT
 "õ0_a4"

	)

375 
	#IPFIX_CN_IGNOREDOCTETTOTALCOUNT
 "õ0_a5"

	)

376 
	#IPFIX_CN_NOTSENTFLOWTOTALCOUNT
 "õ0_a6"

	)

377 
	#IPFIX_CN_NOTSENTPACKETTOTALCOUNT
 "õ0_a7"

	)

378 
	#IPFIX_CN_NOTSENTOCTETTOTALCOUNT
 "õ0_a8"

	)

379 
	#IPFIX_CN_DESTINATIONIPV6PREFIX
 "õ0_a9"

	)

380 
	#IPFIX_CN_SOURCEIPV6PREFIX
 "õ0_Ø"

	)

381 
	#IPFIX_CN_POSTOCTETTOTALCOUNT
 "õ0_ab"

	)

382 
	#IPFIX_CN_POSTPACKETTOTALCOUNT
 "õ0_ac"

	)

383 
	#IPFIX_CN_FLOWKEYINDICATOR
 "õ0_ad"

	)

384 
	#IPFIX_CN_POSTMCASTPACKETTOTALCOUNT
 "õ0_´"

	)

385 
	#IPFIX_CN_POSTMCASTOCTETTOTALCOUNT
 "õ0_af"

	)

386 
	#IPFIX_CN_ICMPTYPEIPV4
 "õ0_b0"

	)

387 
	#IPFIX_CN_ICMPCODEIPV4
 "õ0_b1"

	)

388 
	#IPFIX_CN_ICMPTYPEIPV6
 "õ0_b2"

	)

389 
	#IPFIX_CN_ICMPCODEIPV6
 "õ0_b3"

	)

390 
	#IPFIX_CN_UDPSOURCEPORT
 "õ0_b4"

	)

391 
	#IPFIX_CN_UDPDESTINATIONPORT
 "õ0_b5"

	)

392 
	#IPFIX_CN_TCPSOURCEPORT
 "õ0_b6"

	)

393 
	#IPFIX_CN_TCPDESTINATIONPORT
 "õ0_b7"

	)

394 
	#IPFIX_CN_TCPSEQUENCENUMBER
 "õ0_b8"

	)

395 
	#IPFIX_CN_TCPACKNOWLEDGEMENTNUMBER
 "õ0_b9"

	)

396 
	#IPFIX_CN_TCPWINDOWSIZE
 "õ0_ba"

	)

397 
	#IPFIX_CN_TCPURGENTPOINTER
 "õ0_bb"

	)

398 
	#IPFIX_CN_TCPHEADERLENGTH
 "õ0_bc"

	)

399 
	#IPFIX_CN_IPHEADERLENGTH
 "õ0_bd"

	)

400 
	#IPFIX_CN_TOTALLENGTHIPV4
 "õ0_be"

	)

401 
	#IPFIX_CN_PAYLOADLENGTHIPV6
 "õ0_bf"

	)

402 
	#IPFIX_CN_IPTTL
 "õ0_c0"

	)

403 
	#IPFIX_CN_NEXTHEADERIPV6
 "õ0_c1"

	)

404 
	#IPFIX_CN_MPLSPAYLOADLENGTH
 "õ0_c2"

	)

405 
	#IPFIX_CN_IPDIFFSERVCODEPOINT
 "õ0_c3"

	)

406 
	#IPFIX_CN_IPPRECEDENCE
 "õ0_c4"

	)

407 
	#IPFIX_CN_FRAGMENTFLAGS
 "õ0_c5"

	)

408 
	#IPFIX_CN_OCTETDELTASUMOFSQUARES
 "õ0_c6"

	)

409 
	#IPFIX_CN_OCTETTOTALSUMOFSQUARES
 "õ0_c7"

	)

410 
	#IPFIX_CN_MPLSTOPLABELTTL
 "õ0_c8"

	)

411 
	#IPFIX_CN_MPLSLABELSTACKLENGTH
 "õ0_c9"

	)

412 
	#IPFIX_CN_MPLSLABELSTACKDEPTH
 "õ0_ˇ"

	)

413 
	#IPFIX_CN_MPLSTOPLABELEXP
 "õ0_cb"

	)

414 
	#IPFIX_CN_IPPAYLOADLENGTH
 "õ0_cc"

	)

415 
	#IPFIX_CN_UDPMESSAGELENGTH
 "õ0_cd"

	)

416 
	#IPFIX_CN_ISMULTICAST
 "õ0_˚"

	)

417 
	#IPFIX_CN_IPV4IHL
 "õ0_cf"

	)

418 
	#IPFIX_CN_IPV4OPTIONS
 "õ0_d0"

	)

419 
	#IPFIX_CN_TCPOPTIONS
 "õ0_d1"

	)

420 
	#IPFIX_CN_PADDINGOCTETS
 "õ0_d2"

	)

421 
	#IPFIX_CN_COLLECTORIPV4ADDRESS
 "õ0_d3"

	)

422 
	#IPFIX_CN_COLLECTORIPV6ADDRESS
 "õ0_d4"

	)

423 
	#IPFIX_CN_COLLECTORINTERFACE
 "õ0_d5"

	)

424 
	#IPFIX_CN_COLLECTORPROTOCOLVERSION
 "õ0_d6"

	)

425 
	#IPFIX_CN_COLLECTORTRANSPORTPROTOCOL
 "õ0_d7"

	)

426 
	#IPFIX_CN_COLLECTORTRANSPORTPORT
 "õ0_d8"

	)

427 
	#IPFIX_CN_EXPORTERTRANSPORTPORT
 "õ0_d9"

	)

428 
	#IPFIX_CN_TCPSYNTOTALCOUNT
 "õ0_da"

	)

429 
	#IPFIX_CN_TCPFINTOTALCOUNT
 "õ0_db"

	)

430 
	#IPFIX_CN_TCPRSTTOTALCOUNT
 "õ0_dc"

	)

431 
	#IPFIX_CN_TCPPSHTOTALCOUNT
 "õ0_dd"

	)

432 
	#IPFIX_CN_TCPACKTOTALCOUNT
 "õ0_de"

	)

433 
	#IPFIX_CN_TCPURGTOTALCOUNT
 "õ0_df"

	)

434 
	#IPFIX_CN_IPTOTALLENGTH
 "õ0_e0"

	)

435 
	#IPFIX_CN_POSTMPLSTOPLABELEXP
 "õ0_ed"

	)

436 
	#IPFIX_CN_TCPWINDOWSCALE
 "õ0_ì"

	)

437 
	#IPFIX_CN_OBSERVATIONPOINTID_PSAMP
 "õ0_12c"

	)

438 
	#IPFIX_CN_SELECTIONSEQUENCEID
 "õ0_12d"

	)

439 
	#IPFIX_CN_SELECTORID
 "õ0_12e"

	)

440 
	#IPFIX_CN_INFORMATIONELEMENTID
 "õ0_12f"

	)

441 
	#IPFIX_CN_SELECTORALGORITHM
 "õ0_130"

	)

442 
	#IPFIX_CN_SAMPLINGPACKETINTERVAL
 "õ0_131"

	)

443 
	#IPFIX_CN_SAMPLINGPACKETSPACE
 "õ0_132"

	)

444 
	#IPFIX_CN_SAMPLINGTIMEINTERVAL
 "õ0_133"

	)

445 
	#IPFIX_CN_SAMPLINGTIMESPACE
 "õ0_134"

	)

446 
	#IPFIX_CN_SAMPLINGSIZE
 "õ0_135"

	)

447 
	#IPFIX_CN_SAMPLINGPOPULATION
 "õ0_136"

	)

448 
	#IPFIX_CN_SAMPLINGPROBABILITY
 "õ0_137"

	)

449 
	#IPFIX_CN_DATALINKFRAMESIZE
 "õ0_138"

	)

450 
	#IPFIX_CN_IPHEADERPACKETSECTION
 "õ0_139"

	)

451 
	#IPFIX_CN_IPPAYLOADPACKETSECTION
 "õ0_13a"

	)

452 
	#IPFIX_CN_DATALINKFRAMESECTION
 "õ0_13b"

	)

453 
	#IPFIX_CN_MPLSLABELSTACKSECTION
 "õ0_13c"

	)

454 
	#IPFIX_CN_MPLSPAYLOADPACKETSECTION
 "õ0_13d"

	)

455 
	#IPFIX_CN_PACKETSOBSERVED
 "õ0_13e"

	)

456 
	#IPFIX_CN_PACKETSSELECTED
 "õ0_13f"

	)

457 
	#IPFIX_CN_FIXEDERROR
 "õ0_140"

	)

458 
	#IPFIX_CN_RELATIVEERROR
 "õ0_141"

	)

459 
	#IPFIX_CN_OBSERVATIONTIMESECONDS
 "õ0_142"

	)

460 
	#IPFIX_CN_OBSERVATIONTIMEMILLISECONDS
 "õ0_143"

	)

461 
	#IPFIX_CN_OBSERVATIONTIMEMICROSECONDS
 "õ0_144"

	)

462 
	#IPFIX_CN_OBSERVATIONTIMENANOSECONDS
 "õ0_145"

	)

463 
	#IPFIX_CN_DIGESTHASHVALUE
 "õ0_146"

	)

464 
	#IPFIX_CN_HASHIPPAYLOADOFFSET
 "õ0_147"

	)

465 
	#IPFIX_CN_HASHIPPAYLOADSIZE
 "õ0_148"

	)

466 
	#IPFIX_CN_HASHOUTPUTRANGEMIN
 "õ0_149"

	)

467 
	#IPFIX_CN_HASHOUTPUTRANGEMAX
 "õ0_14a"

	)

468 
	#IPFIX_CN_HASHSELECTEDRANGEMIN
 "õ0_14b"

	)

469 
	#IPFIX_CN_HASHSELECTEDRANGEMAX
 "õ0_14c"

	)

470 
	#IPFIX_CN_HASHDIGESTOUTPUT
 "õ0_14d"

	)

471 
	#IPFIX_CN_HASHINITIALISERVALUE
 "õ0_14e"

	)

	@libipfix_110224/lib/ipfix_def_fokus.h

7 #i‚de‡
IPFIX_FOKUS_DEF_H


8 
	#IPFIX_FOKUS_DEF_H


	)

10 
	#IPFIX_ENO_FOKUS
 12325

	)

13 
	#IPFIX_FT_REVOCTETDELTACOUNT
 176

	)

14 
	#IPFIX_FT_REVPACKETDELTACOUNT
 177

	)

15 
	#IPFIX_FT_RTTMEAN_USEC
 178

	)

16 
	#IPFIX_FT_RTTMIN_USEC
 179

	)

17 
	#IPFIX_FT_RTTMAX_USEC
 180

	)

18 
	#IPFIX_FT_IDENT
 181

	)

19 
	#IPFIX_FT_LOSTPACKETS
 182

	)

20 
	#IPFIX_FT_OWDVAR_USEC
 183

	)

21 
	#IPFIX_FT_OWDVARMEAN_USEC
 184

	)

22 
	#IPFIX_FT_OWDVARMIN_USEC
 185

	)

23 
	#IPFIX_FT_OWDVARMAX_USEC
 186

	)

24 
	#IPFIX_FT_OWDSD_USEC
 187

	)

25 
	#IPFIX_FT_OWD_USEC
 188

	)

26 
	#IPFIX_FT_OWDMEAN_USEC
 189

	)

27 
	#IPFIX_FT_OWDMIN_USEC
 190

	)

28 
	#IPFIX_FT_OWDMAX_USEC
 191

	)

29 
	#IPFIX_FT_TASKID
 192

	)

30 
	#IPFIX_FT_TSTAMP_SEC
 193

	)

31 
	#IPFIX_FT_TSTAMP_NSEC
 194

	)

32 
	#IPFIX_FT_PKTLENGTH
 195

	)

33 
	#IPFIX_FT_PKTID
 196

	)

34 
	#IPFIX_FT_STARTTIME
 197

	)

35 
	#IPFIX_FT_ENDTIME
 198

	)

36 
	#IPFIX_FT_RTT_USEC
 199

	)

37 
	#IPFIX_FT_FLOWCREATIONTIMEUSEC
 300

	)

38 
	#IPFIX_FT_FLOWENDTIMEUSEC
 301

	)

39 
	#IPFIX_FT_TC_PACKETS
 303

	)

40 
	#IPFIX_FT_TC_BYTES
 304

	)

41 
	#IPFIX_FT_TC_RATE_BPS
 305

	)

42 
	#IPFIX_FT_TC_RATE_PPS
 306

	)

43 
	#IPFIX_FT_TC_QLEN
 307

	)

44 
	#IPFIX_FT_TC_BACKLOG
 308

	)

45 
	#IPFIX_FT_TC_DROPS
 309

	)

46 
	#IPFIX_FT_TC_REQUEUES
 310

	)

47 
	#IPFIX_FT_TC_OVERLIMITS
 311

	)

48 
	#IPFIX_FT_OWDVARMEAN_NSEC
 312

	)

49 
	#IPFIX_FT_OWDVARMIN_NSEC
 313

	)

50 
	#IPFIX_FT_OWDVARMAX_NSEC
 314

	)

51 
	#IPFIX_FT_SOURCEIPV4FANOUT
 315

	)

52 
	#IPFIX_FT_DESTINATIONIPV4FANIN
 316

	)

53 
	#IPFIX_FT_PACKETARRIVALMEAN
 317

	)

54 
	#IPFIX_FT_PACKETARRIVALVAR
 318

	)

55 
	#IPFIX_FT_PR_SESSIONID
 330

	)

56 
	#IPFIX_FT_PR_TRANSACTIONID
 331

	)

57 
	#IPFIX_FT_PR_AES128ENCRYPTEDDATA
 332

	)

58 
	#IPFIX_FT_PR_AES256ENCRYPTEDDATA
 337

	)

59 
	#IPFIX_FT_PR_DECRYPTIONKEY
 333

	)

60 
	#IPFIX_FT_PR_AES128KEYSHARE
 334

	)

61 
	#IPFIX_FT_PR_AES256KEYSHARE
 338

	)

62 
	#IPFIX_FT_PR_KEYSHAREADP
 335

	)

63 
	#IPFIX_FT_PR_KEYSHAREINITVECTOR
 336

	)

64 
	#IPFIX_FT_PT_SYSTEM_CPU_IDLE
 340

	)

65 
	#IPFIX_FT_PT_SYSTEM_MEM_FREE
 341

	)

66 
	#IPFIX_FT_PT_PROCESS_CPU_USER
 342

	)

67 
	#IPFIX_FT_PT_PROCESS_CPU_SYS
 343

	)

68 
	#IPFIX_FT_PT_PROCESS_MEM_VZS
 344

	)

69 
	#IPFIX_FT_PT_PROCESS_MEM_RSS
 345

	)

70 
	#IPFIX_FT_PT_PCAPSTAT_RECV
 346

	)

71 
	#IPFIX_FT_PT_PCAPSTAT_DROP
 347

	)

72 
	#IPFIX_FT_PT_MESSAGE_ID
 348

	)

73 
	#IPFIX_FT_PT_MESSAGE_VALUE
 349

	)

74 
	#IPFIX_FT_PT_MESSAGE
 350

	)

75 
	#IPFIX_FT_PT_INTERFACE_NAME
 351

	)

76 
	#IPFIX_FT_PT_INTERFACE_DESCRIPTION
 352

	)

77 
	#IPFIX_FT_SYNC_QUEUE_FILL_LEVEL
 390

	)

78 
	#IPFIX_FT_SYNC_BOTTLENECK
 391

	)

79 
	#IPFIX_FT_SYNC_FREQ
 392

	)

80 
	#IPFIX_FT_ORsig«lB™dwidth
 402

	)

81 
	#IPFIX_FT_ORsig«lPowî
 403

	)

82 
	#IPFIX_FT_ORsymbﬁR©e
 405

	)

83 
	#IPFIX_FT_ORmoduœti⁄Ordî
 406

	)

84 
	#IPFIX_FT_ORrﬁloffFa˘‹
 407

	)

85 
	#IPFIX_FT_£nsög_vÆue
 421

	)

86 
	#IPFIX_FT_£nsög_thªshﬁd
 422

	)

87 
	#IPFIX_FT_OR_ãrmöÆ_id
 423

	)

88 
	#IPFIX_FT_OR_ãrmöÆ_id_li°
 424

	)

89 
	#IPFIX_FT_In‰a°ru˘uª_√tw‹k_id
 425

	)

90 
	#IPFIX_FT_S≥˘øl_Æloˇti⁄_ve˘‹
 431

	)

91 
	#IPFIX_FT_S≥˘øl_Æloˇti⁄_¥ofûe
 432

	)

92 
	#IPFIX_FT_Cíãr_‰equícy
 433

	)

93 
	#IPFIX_FT_B™dwidth_of_CAP
 434

	)

94 
	#IPFIX_FT_ORmoduœti⁄
 435

	)

99 
	#IPFIX_CN_ORmoduœti⁄
 "ORmoduœti⁄"

	)

100 
	#IPFIX_CN_B™dwidth_of_CAP
 "B™dwidth_of_CAP"

	)

101 
	#IPFIX_CN_Cíãr_‰equícy
 "Cíãr_‰equícy"

	)

102 
	#IPFIX_CN_S≥˘øl_Æloˇti⁄_¥ofûe
 "S≥˘øl_Æloˇti⁄_¥ofûe"

	)

103 
	#IPFIX_CN_S≥˘øl_Æloˇti⁄_ve˘‹
 "S≥˘øl_Æloˇti⁄_ve˘‹"

	)

104 
	#IPFIX_CN_In‰a°ru˘uª_√tw‹k_id
 "In‰a°ru˘uª_√tw‹k_id"

	)

105 
	#IPFIX_CN_OR_ãrmöÆ_id_li°
 "OR_ãrmöÆ_id_li°"

	)

106 
	#IPFIX_CN_OR_ãrmöÆ_id
 "OR_ãrmöÆ_id"

	)

107 
	#IPFIX_CN_£nsög_thªshﬁd
 "£nsög_thªshﬁd"

	)

108 
	#IPFIX_CN_£nsög_vÆue
 "£nsög_vÆue"

	)

109 
	#IPFIX_CN_ORrﬁloffFa˘‹
 "ORrﬁloffFa˘‹"

	)

110 
	#IPFIX_CN_ORmoduœti⁄Ordî
 "ORmoduœti⁄Ordî"

	)

111 
	#IPFIX_CN_ORsymbﬁR©e
 "ORsymbﬁR©e"

	)

112 
	#IPFIX_CN_ORsig«lPowî
 "ORsig«lPowî"

	)

113 
	#IPFIX_CN_ORsig«lB™dwidth
 "ORsig«lB™dwidth"

	)

114 
	#IPFIX_CN_SYNC_FREQ
 "‰eq"

	)

115 
	#IPFIX_CN_SYNC_BOTTLENECK
 "bŸéíeck"

	)

116 
	#IPFIX_CN_SYNC_QUEUE_FILL_LEVEL
 "queueFûlLevñ"

	)

117 
	#IPFIX_CN_PT_INTERFACE_DESCRIPTION
 "öãrÁ˚Des¸ùt⁄"

	)

118 
	#IPFIX_CN_PT_INTERFACE_NAME
 "öãrÁ˚Name"

	)

119 
	#IPFIX_CN_PT_MESSAGE
 "msg"

	)

120 
	#IPFIX_CN_PT_MESSAGE_VALUE
 "msgVÆue"

	)

121 
	#IPFIX_CN_PT_MESSAGE_ID
 "msgId"

	)

122 
	#IPFIX_CN_PT_PCAPSTAT_DROP
 "pˇpDr›"

	)

123 
	#IPFIX_CN_PT_PCAPSTAT_RECV
 "pˇpRecv"

	)

124 
	#IPFIX_CN_PT_PROCESS_MEM_RSS
 "¥ocMemRss"

	)

125 
	#IPFIX_CN_PT_PROCESS_MEM_VZS
 "¥ocMemVzs"

	)

126 
	#IPFIX_CN_PT_PROCESS_CPU_SYS
 "¥ocCpuSys"

	)

127 
	#IPFIX_CN_PT_PROCESS_CPU_USER
 "¥ocCpuU£r"

	)

128 
	#IPFIX_CN_PT_SYSTEM_MEM_FREE
 "sysMemFªe"

	)

129 
	#IPFIX_CN_PT_SYSTEM_CPU_IDLE
 "sysCpuIdÀ"

	)

130 
	#IPFIX_CN_PR_KEYSHAREINITVECTOR
 "¸y±oInôVe˘‹"

	)

131 
	#IPFIX_CN_PR_KEYSHAREADP
 "keySh¨eAdp"

	)

132 
	#IPFIX_CN_PR_AES256KEYSHARE
 "keySh¨e256"

	)

133 
	#IPFIX_CN_PR_AES128KEYSHARE
 "keySh¨e128"

	)

134 
	#IPFIX_CN_PR_DECRYPTIONKEY
 "de¸y±i⁄Key"

	)

135 
	#IPFIX_CN_PR_AES256ENCRYPTEDDATA
 "í¸y±edD©a128"

	)

136 
	#IPFIX_CN_PR_AES128ENCRYPTEDDATA
 "í¸y±edD©a128"

	)

137 
	#IPFIX_CN_PR_TRANSACTIONID
 "å™ß˘i⁄Id"

	)

138 
	#IPFIX_CN_PR_SESSIONID
 "£ssi⁄Id"

	)

139 
	#IPFIX_CN_PACKETARRIVALVAR
 "∑ckëAºivÆV¨"

	)

140 
	#IPFIX_CN_PACKETARRIVALMEAN
 "∑ckëAºivÆMón"

	)

141 
	#IPFIX_CN_DESTINATIONIPV4FANIN
 "de°ö©i⁄IPv4F™In"

	)

142 
	#IPFIX_CN_SOURCEIPV4FANOUT
 "sour˚IPv4F™Out"

	)

143 
	#IPFIX_CN_OWDVARMAX_NSEC
 "owdv¨max_n£c"

	)

144 
	#IPFIX_CN_OWDVARMIN_NSEC
 "owdv¨mö_n£c"

	)

145 
	#IPFIX_CN_OWDVARMEAN_NSEC
 "owdv¨món_n£c"

	)

146 
	#IPFIX_CN_TC_OVERLIMITS
 "tcOvîlimôs"

	)

147 
	#IPFIX_CN_TC_REQUEUES
 "tcRequeues"

	)

148 
	#IPFIX_CN_TC_DROPS
 "tcDr›s"

	)

149 
	#IPFIX_CN_TC_BACKLOG
 "tcbacklog"

	)

150 
	#IPFIX_CN_TC_QLEN
 "tc_qÀn"

	)

151 
	#IPFIX_CN_TC_RATE_PPS
 "tcRøã_µs"

	)

152 
	#IPFIX_CN_TC_RATE_BPS
 "tcR©e_bps"

	)

153 
	#IPFIX_CN_TC_BYTES
 "tcByãs"

	)

154 
	#IPFIX_CN_TC_PACKETS
 "tcPackës"

	)

155 
	#IPFIX_CN_FLOWENDTIMEUSEC
 "ÊowEndTimeU£c"

	)

156 
	#IPFIX_CN_FLOWCREATIONTIMEUSEC
 "ÊowCª©i⁄TimeU£c"

	)

157 
	#IPFIX_CN_RTT_USEC
 "πt_u£c"

	)

158 
	#IPFIX_CN_ENDTIME
 "ídTime"

	)

159 
	#IPFIX_CN_STARTTIME
 "°¨tTime"

	)

160 
	#IPFIX_CN_PKTID
 "pktId"

	)

161 
	#IPFIX_CN_PKTLENGTH
 "pktLígth"

	)

162 
	#IPFIX_CN_TSTAMP_NSEC
 "t°amp_n£c"

	)

163 
	#IPFIX_CN_TSTAMP_SEC
 "t°amp_£c"

	)

164 
	#IPFIX_CN_TASKID
 "èskId"

	)

165 
	#IPFIX_CN_OWDMAX_USEC
 "owdmax_u£c"

	)

166 
	#IPFIX_CN_OWDMIN_USEC
 "owdmö_u£c"

	)

167 
	#IPFIX_CN_OWDMEAN_USEC
 "owdmón_u£c"

	)

168 
	#IPFIX_CN_OWD_USEC
 "owd_u£c"

	)

169 
	#IPFIX_CN_OWDSD_USEC
 "owdsd_u£c"

	)

170 
	#IPFIX_CN_OWDVARMAX_USEC
 "owdv¨max_u£c"

	)

171 
	#IPFIX_CN_OWDVARMIN_USEC
 "owdv¨mö_u£c"

	)

172 
	#IPFIX_CN_OWDVARMEAN_USEC
 "owdv¨món_u£c"

	)

173 
	#IPFIX_CN_OWDVAR_USEC
 "owdv¨_u£c"

	)

174 
	#IPFIX_CN_LOSTPACKETS
 "lo°Packës"

	)

175 
	#IPFIX_CN_IDENT
 "idít"

	)

176 
	#IPFIX_CN_RTTMAX_USEC
 "πtmax_u£c"

	)

177 
	#IPFIX_CN_RTTMIN_USEC
 "πtmö_u£c"

	)

178 
	#IPFIX_CN_RTTMEAN_USEC
 "πtmón_u£c"

	)

179 
	#IPFIX_CN_REVPACKETDELTACOUNT
 "ªvPackëDñèCou¡"

	)

	@libipfix_110224/lib/ipfix_fields.h

10 
ùfix_fõld_ty≥_t
 
	gùfix_fõld_ty≥s
[] = {

11 { 0, 
IPFIX_FT_OCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

13 { 0, 
IPFIX_FT_PACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

15 { 0, 
IPFIX_FT_FLOWS
, 8, 
IPFIX_CODING_UINT
,

17 { 0, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 1, 
IPFIX_CODING_UINT
,

19 { 0, 
IPFIX_FT_IPCLASSOFSERVICE
, 1, 
IPFIX_CODING_UINT
,

21 { 0, 
IPFIX_FT_TCPCONTROLBITS
, 1, 
IPFIX_CODING_UINT
,

23 { 0, 
IPFIX_FT_SOURCETRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

25 { 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

27 { 0, 
IPFIX_FT_SOURCEIPV4PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

29 { 0, 
IPFIX_FT_INGRESSINTERFACE
, 4, 
IPFIX_CODING_UINT
,

31 { 0, 
IPFIX_FT_DESTINATIONTRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

33 { 0, 
IPFIX_FT_DESTINATIONIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

35 { 0, 
IPFIX_FT_DESTINATIONIPV4PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

37 { 0, 
IPFIX_FT_EGRESSINTERFACE
, 4, 
IPFIX_CODING_UINT
,

39 { 0, 
IPFIX_FT_IPNEXTHOPIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

41 { 0, 
IPFIX_FT_BGPSOURCEASNUMBER
, 4, 
IPFIX_CODING_UINT
,

43 { 0, 
IPFIX_FT_BGPDESTINATIONASNUMBER
, 4, 
IPFIX_CODING_UINT
,

45 { 0, 
IPFIX_FT_BGPNEXTHOPIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

47 { 0, 
IPFIX_FT_POSTMCASTPACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

49 { 0, 
IPFIX_FT_POSTMCASTOCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

51 { 0, 
IPFIX_FT_FLOWENDSYSUPTIME
, 4, 
IPFIX_CODING_UINT
,

53 { 0, 
IPFIX_FT_FLOWSTARTSYSUPTIME
, 4, 
IPFIX_CODING_UINT
,

55 { 0, 
IPFIX_FT_POSTOCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

57 { 0, 
IPFIX_FT_POSTPACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

59 { 0, 
IPFIX_FT_MINIMUMIPTOTALLENGTH
, 8, 
IPFIX_CODING_UINT
,

61 { 0, 
IPFIX_FT_MAXIMUMIPTOTALLENGTH
, 8, 
IPFIX_CODING_UINT
,

63 { 0, 
IPFIX_FT_SOURCEIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

65 { 0, 
IPFIX_FT_DESTINATIONIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

67 { 0, 
IPFIX_FT_SOURCEIPV6PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

69 { 0, 
IPFIX_FT_DESTINATIONIPV6PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

71 { 0, 
IPFIX_FT_FLOWLABELIPV6
, 4, 
IPFIX_CODING_UINT
,

73 { 0, 
IPFIX_FT_ICMPTYPECODEIPV4
, 2, 
IPFIX_CODING_UINT
,

75 { 0, 
IPFIX_FT_IGMPTYPE
, 1, 
IPFIX_CODING_UINT
,

77 { 0, 
IPFIX_FT_SAMPLING_INTERVAL
, 4, 
IPFIX_CODING_UINT
,

79 { 0, 
IPFIX_FT_SAMPLING_ALGORITHM
, 1, 
IPFIX_CODING_UINT
,

81 { 0, 
IPFIX_FT_FLOWACTIVETIMEOUT
, 2, 
IPFIX_CODING_UINT
,

83 { 0, 
IPFIX_FT_FLOWIDLETIMEOUT
, 2, 
IPFIX_CODING_UINT
,

85 { 0, 
IPFIX_FT_ENGINE_TYPE
, 1, 
IPFIX_CODING_UINT
,

87 { 0, 
IPFIX_FT_ENGINE_ID
, 1, 
IPFIX_CODING_UINT
,

89 { 0, 
IPFIX_FT_EXPORTEDOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

91 { 0, 
IPFIX_FT_EXPORTEDMESSAGETOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

93 { 0, 
IPFIX_FT_EXPORTEDFLOWRECORDTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

95 { 0, 
IPFIX_FT_SOURCEIPV4PREFIX
, 4, 
IPFIX_CODING_IPADDR
,

97 { 0, 
IPFIX_FT_DESTINATIONIPV4PREFIX
, 4, 
IPFIX_CODING_IPADDR
,

99 { 0, 
IPFIX_FT_MPLSTOPLABELTYPE
, 1, 
IPFIX_CODING_UINT
,

101 { 0, 
IPFIX_FT_MPLSTOPLABELIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

103 { 0, 
IPFIX_FT_FLOW_SAMPLER_ID
, 1, 
IPFIX_CODING_UINT
,

105 { 0, 
IPFIX_FT_FLOW_SAMPLER_MODE
, 1, 
IPFIX_CODING_UINT
,

107 { 0, 
IPFIX_FT_FLOW_SAMPLER_RANDOM_INTERVAL
, 4, 
IPFIX_CODING_UINT
,

109 { 0, 
IPFIX_FT_MINIMUMTTL
, 1, 
IPFIX_CODING_UINT
,

111 { 0, 
IPFIX_FT_MAXIMUMTTL
, 1, 
IPFIX_CODING_UINT
,

113 { 0, 
IPFIX_FT_FRAGMENTIDENTIFICATION
, 4, 
IPFIX_CODING_UINT
,

115 { 0, 
IPFIX_FT_POSTIPCLASSOFSERVICE
, 1, 
IPFIX_CODING_UINT
,

117 { 0, 
IPFIX_FT_SOURCEMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

119 { 0, 
IPFIX_FT_POSTDESTINATIONMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

121 { 0, 
IPFIX_FT_VLANID
, 2, 
IPFIX_CODING_UINT
,

123 { 0, 
IPFIX_FT_POSTVLANID
, 2, 
IPFIX_CODING_UINT
,

125 { 0, 
IPFIX_FT_IPVERSION
, 1, 
IPFIX_CODING_UINT
,

127 { 0, 
IPFIX_FT_FLOWDIRECTION
, 1, 
IPFIX_CODING_UINT
,

129 { 0, 
IPFIX_FT_IPNEXTHOPIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

131 { 0, 
IPFIX_FT_BGPNEXTHOPIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

133 { 0, 
IPFIX_FT_IPV6EXTENSIONHEADERS
, 4, 
IPFIX_CODING_UINT
,

135 { 0, 
IPFIX_FT_MPLSTOPLABELSTACKSECTION
, 65535, 
IPFIX_CODING_BYTES
,

137 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION2
, 65535, 
IPFIX_CODING_BYTES
,

139 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION3
, 65535, 
IPFIX_CODING_BYTES
,

141 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION4
, 65535, 
IPFIX_CODING_BYTES
,

143 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION5
, 65535, 
IPFIX_CODING_BYTES
,

145 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION6
, 65535, 
IPFIX_CODING_BYTES
,

147 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION7
, 65535, 
IPFIX_CODING_BYTES
,

149 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION8
, 65535, 
IPFIX_CODING_BYTES
,

151 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION9
, 65535, 
IPFIX_CODING_BYTES
,

153 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION10
, 65535, 
IPFIX_CODING_BYTES
,

155 { 0, 
IPFIX_FT_DESTINATIONMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

157 { 0, 
IPFIX_FT_POSTSOURCEMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

159 { 0, 
IPFIX_FT_OCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

161 { 0, 
IPFIX_FT_PACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

163 { 0, 
IPFIX_FT_FRAGMENTOFFSET
, 2, 
IPFIX_CODING_UINT
,

165 { 0, 
IPFIX_FT_MPLSVPNROUTEDISTINGUISHER
, 65535, 
IPFIX_CODING_BYTES
,

167 { 0, 
IPFIX_FT_BGPNEXTADJACENTASNUMBER
, 4, 
IPFIX_CODING_UINT
,

169 { 0, 
IPFIX_FT_BGPPREVADJACENTASNUMBER
, 4, 
IPFIX_CODING_UINT
,

171 { 0, 
IPFIX_FT_EXPORTERIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

173 { 0, 
IPFIX_FT_EXPORTERIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

175 { 0, 
IPFIX_FT_DROPPEDOCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

177 { 0, 
IPFIX_FT_DROPPEDPACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

179 { 0, 
IPFIX_FT_DROPPEDOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

181 { 0, 
IPFIX_FT_DROPPEDPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

183 { 0, 
IPFIX_FT_FLOWENDREASON
, 1, 
IPFIX_CODING_UINT
,

185 { 0, 
IPFIX_FT_COMMONPROPERTIESID
, 8, 
IPFIX_CODING_UINT
,

187 { 0, 
IPFIX_FT_OBSERVATIONPOINTID
, 4, 
IPFIX_CODING_UINT
,

189 { 0, 
IPFIX_FT_ICMPTYPECODEIPV6
, 2, 
IPFIX_CODING_UINT
,

191 { 0, 
IPFIX_FT_MPLSTOPLABELIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

193 { 0, 
IPFIX_FT_LINECARDID
, 4, 
IPFIX_CODING_UINT
,

195 { 0, 
IPFIX_FT_PORTID
, 4, 
IPFIX_CODING_UINT
,

197 { 0, 
IPFIX_FT_METERINGPROCESSID
, 4, 
IPFIX_CODING_UINT
,

199 { 0, 
IPFIX_FT_EXPORTINGPROCESSID
, 4, 
IPFIX_CODING_UINT
,

201 { 0, 
IPFIX_FT_TEMPLATEID
, 2, 
IPFIX_CODING_UINT
,

203 { 0, 
IPFIX_FT_WLANCHANNELID
, 1, 
IPFIX_CODING_UINT
,

205 { 0, 
IPFIX_FT_WLANSSID
, 65535, 
IPFIX_CODING_STRING
,

207 { 0, 
IPFIX_FT_FLOWID
, 8, 
IPFIX_CODING_UINT
,

209 { 0, 
IPFIX_FT_OBSERVATIONDOMAINID
, 4, 
IPFIX_CODING_UINT
,

211 { 0, 
IPFIX_FT_FLOWSTARTSECONDS
, 4, 
IPFIX_CODING_UINT
,

213 { 0, 
IPFIX_FT_FLOWENDSECONDS
, 4, 
IPFIX_CODING_UINT
,

215 { 0, 
IPFIX_FT_FLOWSTARTMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

217 { 0, 
IPFIX_FT_FLOWENDMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

219 { 0, 
IPFIX_FT_FLOWSTARTMICROSECONDS
, 8, 
IPFIX_CODING_NTP
,

221 { 0, 
IPFIX_FT_FLOWENDMICROSECONDS
, 8, 
IPFIX_CODING_NTP
,

223 { 0, 
IPFIX_FT_FLOWSTARTNANOSECONDS
, 8, 
IPFIX_CODING_NTP
,

225 { 0, 
IPFIX_FT_FLOWENDNANOSECONDS
, 8, 
IPFIX_CODING_NTP
,

227 { 0, 
IPFIX_FT_FLOWSTARTDELTAMICROSECONDS
, 4, 
IPFIX_CODING_UINT
,

229 { 0, 
IPFIX_FT_FLOWENDDELTAMICROSECONDS
, 4, 
IPFIX_CODING_UINT
,

231 { 0, 
IPFIX_FT_SYSTEMINITTIMEMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

233 { 0, 
IPFIX_FT_FLOWDURATIONMILLISECONDS
, 4, 
IPFIX_CODING_UINT
,

235 { 0, 
IPFIX_FT_FLOWDURATIONMICROSECONDS
, 4, 
IPFIX_CODING_UINT
,

237 { 0, 
IPFIX_FT_OBSERVEDFLOWTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

239 { 0, 
IPFIX_FT_IGNOREDPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

241 { 0, 
IPFIX_FT_IGNOREDOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

243 { 0, 
IPFIX_FT_NOTSENTFLOWTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

245 { 0, 
IPFIX_FT_NOTSENTPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

247 { 0, 
IPFIX_FT_NOTSENTOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

249 { 0, 
IPFIX_FT_DESTINATIONIPV6PREFIX
, 16, 
IPFIX_CODING_IPADDR
,

251 { 0, 
IPFIX_FT_SOURCEIPV6PREFIX
, 16, 
IPFIX_CODING_IPADDR
,

253 { 0, 
IPFIX_FT_POSTOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

255 { 0, 
IPFIX_FT_POSTPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

257 { 0, 
IPFIX_FT_FLOWKEYINDICATOR
, 8, 
IPFIX_CODING_UINT
,

259 { 0, 
IPFIX_FT_POSTMCASTPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

261 { 0, 
IPFIX_FT_POSTMCASTOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

263 { 0, 
IPFIX_FT_ICMPTYPEIPV4
, 1, 
IPFIX_CODING_UINT
,

265 { 0, 
IPFIX_FT_ICMPCODEIPV4
, 1, 
IPFIX_CODING_UINT
,

267 { 0, 
IPFIX_FT_ICMPTYPEIPV6
, 1, 
IPFIX_CODING_UINT
,

269 { 0, 
IPFIX_FT_ICMPCODEIPV6
, 1, 
IPFIX_CODING_UINT
,

271 { 0, 
IPFIX_FT_UDPSOURCEPORT
, 2, 
IPFIX_CODING_UINT
,

273 { 0, 
IPFIX_FT_UDPDESTINATIONPORT
, 2, 
IPFIX_CODING_UINT
,

275 { 0, 
IPFIX_FT_TCPSOURCEPORT
, 2, 
IPFIX_CODING_UINT
,

277 { 0, 
IPFIX_FT_TCPDESTINATIONPORT
, 2, 
IPFIX_CODING_UINT
,

279 { 0, 
IPFIX_FT_TCPSEQUENCENUMBER
, 4, 
IPFIX_CODING_UINT
,

281 { 0, 
IPFIX_FT_TCPACKNOWLEDGEMENTNUMBER
, 4, 
IPFIX_CODING_UINT
,

283 { 0, 
IPFIX_FT_TCPWINDOWSIZE
, 2, 
IPFIX_CODING_UINT
,

285 { 0, 
IPFIX_FT_TCPURGENTPOINTER
, 2, 
IPFIX_CODING_UINT
,

287 { 0, 
IPFIX_FT_TCPHEADERLENGTH
, 1, 
IPFIX_CODING_UINT
,

289 { 0, 
IPFIX_FT_IPHEADERLENGTH
, 1, 
IPFIX_CODING_UINT
,

291 { 0, 
IPFIX_FT_TOTALLENGTHIPV4
, 2, 
IPFIX_CODING_UINT
,

293 { 0, 
IPFIX_FT_PAYLOADLENGTHIPV6
, 2, 
IPFIX_CODING_UINT
,

295 { 0, 
IPFIX_FT_IPTTL
, 1, 
IPFIX_CODING_UINT
,

297 { 0, 
IPFIX_FT_NEXTHEADERIPV6
, 1, 
IPFIX_CODING_UINT
,

299 { 0, 
IPFIX_FT_MPLSPAYLOADLENGTH
, 4, 
IPFIX_CODING_UINT
,

301 { 0, 
IPFIX_FT_IPDIFFSERVCODEPOINT
, 1, 
IPFIX_CODING_UINT
,

303 { 0, 
IPFIX_FT_IPPRECEDENCE
, 1, 
IPFIX_CODING_UINT
,

305 { 0, 
IPFIX_FT_FRAGMENTFLAGS
, 1, 
IPFIX_CODING_UINT
,

307 { 0, 
IPFIX_FT_OCTETDELTASUMOFSQUARES
, 8, 
IPFIX_CODING_UINT
,

309 { 0, 
IPFIX_FT_OCTETTOTALSUMOFSQUARES
, 8, 
IPFIX_CODING_UINT
,

311 { 0, 
IPFIX_FT_MPLSTOPLABELTTL
, 1, 
IPFIX_CODING_UINT
,

313 { 0, 
IPFIX_FT_MPLSLABELSTACKLENGTH
, 4, 
IPFIX_CODING_UINT
,

315 { 0, 
IPFIX_FT_MPLSLABELSTACKDEPTH
, 4, 
IPFIX_CODING_UINT
,

317 { 0, 
IPFIX_FT_MPLSTOPLABELEXP
, 1, 
IPFIX_CODING_UINT
,

319 { 0, 
IPFIX_FT_IPPAYLOADLENGTH
, 4, 
IPFIX_CODING_UINT
,

321 { 0, 
IPFIX_FT_UDPMESSAGELENGTH
, 2, 
IPFIX_CODING_UINT
,

323 { 0, 
IPFIX_FT_ISMULTICAST
, 1, 
IPFIX_CODING_UINT
,

325 { 0, 
IPFIX_FT_IPV4IHL
, 1, 
IPFIX_CODING_UINT
,

327 { 0, 
IPFIX_FT_IPV4OPTIONS
, 4, 
IPFIX_CODING_UINT
,

329 { 0, 
IPFIX_FT_TCPOPTIONS
, 8, 
IPFIX_CODING_UINT
,

331 { 0, 
IPFIX_FT_PADDINGOCTETS
, 65535, 
IPFIX_CODING_BYTES
,

333 { 0, 
IPFIX_FT_COLLECTORIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

335 { 0, 
IPFIX_FT_COLLECTORIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

337 { 0, 
IPFIX_FT_COLLECTORINTERFACE
, 4, 
IPFIX_CODING_UINT
,

339 { 0, 
IPFIX_FT_COLLECTORPROTOCOLVERSION
, 1, 
IPFIX_CODING_UINT
,

341 { 0, 
IPFIX_FT_COLLECTORTRANSPORTPROTOCOL
, 1, 
IPFIX_CODING_UINT
,

343 { 0, 
IPFIX_FT_COLLECTORTRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

345 { 0, 
IPFIX_FT_EXPORTERTRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

347 { 0, 
IPFIX_FT_TCPSYNTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

349 { 0, 
IPFIX_FT_TCPFINTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

351 { 0, 
IPFIX_FT_TCPRSTTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

353 { 0, 
IPFIX_FT_TCPPSHTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

355 { 0, 
IPFIX_FT_TCPACKTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

357 { 0, 
IPFIX_FT_TCPURGTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

359 { 0, 
IPFIX_FT_IPTOTALLENGTH
, 8, 
IPFIX_CODING_UINT
,

361 { 0, 
IPFIX_FT_POSTMPLSTOPLABELEXP
, 1, 
IPFIX_CODING_UINT
,

363 { 0, 
IPFIX_FT_TCPWINDOWSCALE
, 2, 
IPFIX_CODING_UINT
,

365 { 0, 
IPFIX_FT_OBSERVATIONPOINTID_PSAMP
, 8, 
IPFIX_CODING_UINT
,

367 { 0, 
IPFIX_FT_SELECTIONSEQUENCEID
, 8, 
IPFIX_CODING_UINT
,

369 { 0, 
IPFIX_FT_SELECTORID
, 2, 
IPFIX_CODING_UINT
,

371 { 0, 
IPFIX_FT_INFORMATIONELEMENTID
, 2, 
IPFIX_CODING_UINT
,

373 { 0, 
IPFIX_FT_SELECTORALGORITHM
, 2, 
IPFIX_CODING_UINT
,

375 { 0, 
IPFIX_FT_SAMPLINGPACKETINTERVAL
, 4, 
IPFIX_CODING_UINT
,

377 { 0, 
IPFIX_FT_SAMPLINGPACKETSPACE
, 4, 
IPFIX_CODING_UINT
,

379 { 0, 
IPFIX_FT_SAMPLINGTIMEINTERVAL
, 8, 
IPFIX_CODING_NTP
,

381 { 0, 
IPFIX_FT_SAMPLINGTIMESPACE
, 8, 
IPFIX_CODING_NTP
,

383 { 0, 
IPFIX_FT_SAMPLINGSIZE
, 4, 
IPFIX_CODING_UINT
,

385 { 0, 
IPFIX_FT_SAMPLINGPOPULATION
, 4, 
IPFIX_CODING_UINT
,

387 { 0, 
IPFIX_FT_SAMPLINGPROBABILITY
, 8, 
IPFIX_CODING_FLOAT
,

389 { 0, 
IPFIX_FT_DATALINKFRAMESIZE
, 4, 
IPFIX_CODING_UINT
,

391 { 0, 
IPFIX_FT_IPHEADERPACKETSECTION
, 65535, 
IPFIX_CODING_BYTES
,

393 { 0, 
IPFIX_FT_IPPAYLOADPACKETSECTION
, 65535, 
IPFIX_CODING_BYTES
,

395 { 0, 
IPFIX_FT_DATALINKFRAMESECTION
, 65535, 
IPFIX_CODING_BYTES
,

397 { 0, 
IPFIX_FT_MPLSLABELSTACKSECTION
, 65535, 
IPFIX_CODING_BYTES
,

399 { 0, 
IPFIX_FT_MPLSPAYLOADPACKETSECTION
, 65535, 
IPFIX_CODING_BYTES
,

401 { 0, 
IPFIX_FT_PACKETSOBSERVED
, 8, 
IPFIX_CODING_UINT
,

403 { 0, 
IPFIX_FT_PACKETSSELECTED
, 8, 
IPFIX_CODING_UINT
,

405 { 0, 
IPFIX_FT_FIXEDERROR
, 8, 
IPFIX_CODING_FLOAT
,

407 { 0, 
IPFIX_FT_RELATIVEERROR
, 8, 
IPFIX_CODING_FLOAT
,

409 { 0, 
IPFIX_FT_OBSERVATIONTIMESECONDS
, 4, 
IPFIX_CODING_UINT
,

411 { 0, 
IPFIX_FT_OBSERVATIONTIMEMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

413 { 0, 
IPFIX_FT_OBSERVATIONTIMEMICROSECONDS
, 8, 
IPFIX_CODING_NTP
,

415 { 0, 
IPFIX_FT_OBSERVATIONTIMENANOSECONDS
, 8, 
IPFIX_CODING_NTP
,

417 { 0, 
IPFIX_FT_DIGESTHASHVALUE
, 8, 
IPFIX_CODING_UINT
,

419 { 0, 
IPFIX_FT_HASHIPPAYLOADOFFSET
, 8, 
IPFIX_CODING_UINT
,

421 { 0, 
IPFIX_FT_HASHIPPAYLOADSIZE
, 8, 
IPFIX_CODING_UINT
,

423 { 0, 
IPFIX_FT_HASHOUTPUTRANGEMIN
, 8, 
IPFIX_CODING_UINT
,

425 { 0, 
IPFIX_FT_HASHOUTPUTRANGEMAX
, 8, 
IPFIX_CODING_UINT
,

427 { 0, 
IPFIX_FT_HASHSELECTEDRANGEMIN
, 8, 
IPFIX_CODING_UINT
,

429 { 0, 
IPFIX_FT_HASHSELECTEDRANGEMAX
, 8, 
IPFIX_CODING_UINT
,

431 { 0, 
IPFIX_FT_HASHDIGESTOUTPUT
, 1, 
IPFIX_CODING_BYTES
,

433 { 0, 
IPFIX_FT_HASHINITIALISERVALUE
, 8, 
IPFIX_CODING_UINT
,

435 { 0, 0, -1, 0, 
NULL
, NULL, }

	@libipfix_110224/lib/ipfix_fields_fokus.h

11 
ùfix_fõld_ty≥_t
 
	gùfix_·_fokus
[] = {

12 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_REVOCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

14 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_REVPACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

16 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_RTTMEAN_USEC
, 8, 
IPFIX_CODING_UINT
,

18 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_RTTMIN_USEC
, 8, 
IPFIX_CODING_UINT
,

20 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_RTTMAX_USEC
, 8, 
IPFIX_CODING_UINT
,

22 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_IDENT
, 65535, 
IPFIX_CODING_STRING
,

24 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_LOSTPACKETS
, 4, 
IPFIX_CODING_INT
,

26 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDVAR_USEC
, 4, 
IPFIX_CODING_INT
,

28 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDVARMEAN_USEC
, 4, 
IPFIX_CODING_INT
,

30 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDVARMIN_USEC
, 4, 
IPFIX_CODING_INT
,

32 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDVARMAX_USEC
, 4, 
IPFIX_CODING_INT
,

34 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDSD_USEC
, 8, 
IPFIX_CODING_UINT
,

36 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWD_USEC
, 8, 
IPFIX_CODING_UINT
,

38 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDMEAN_USEC
, 8, 
IPFIX_CODING_UINT
,

40 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDMIN_USEC
, 8, 
IPFIX_CODING_UINT
,

42 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDMAX_USEC
, 8, 
IPFIX_CODING_UINT
,

44 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TASKID
, 4, 
IPFIX_CODING_UINT
,

46 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TSTAMP_SEC
, 4, 
IPFIX_CODING_INT
,

48 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TSTAMP_NSEC
, 4, 
IPFIX_CODING_INT
,

50 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PKTLENGTH
, 4, 
IPFIX_CODING_INT
,

52 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PKTID
, 4, 
IPFIX_CODING_UINT
,

54 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_STARTTIME
, 4, 
IPFIX_CODING_INT
,

56 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_ENDTIME
, 4, 
IPFIX_CODING_INT
,

58 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_RTT_USEC
, 8, 
IPFIX_CODING_UINT
,

60 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_FLOWCREATIONTIMEUSEC
, 4, 
IPFIX_CODING_INT
,

62 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_FLOWENDTIMEUSEC
, 4, 
IPFIX_CODING_INT
,

64 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_PACKETS
, 4, 
IPFIX_CODING_UINT
,

66 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_BYTES
, 4, 
IPFIX_CODING_UINT
,

68 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_RATE_BPS
, 4, 
IPFIX_CODING_INT
,

70 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_RATE_PPS
, 4, 
IPFIX_CODING_INT
,

72 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_QLEN
, 4, 
IPFIX_CODING_INT
,

74 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_BACKLOG
, 4, 
IPFIX_CODING_INT
,

76 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_DROPS
, 4, 
IPFIX_CODING_INT
,

78 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_REQUEUES
, 4, 
IPFIX_CODING_INT
,

80 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_TC_OVERLIMITS
, 4, 
IPFIX_CODING_INT
,

82 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDVARMEAN_NSEC
, 4, 
IPFIX_CODING_INT
,

84 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDVARMIN_NSEC
, 4, 
IPFIX_CODING_INT
,

86 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OWDVARMAX_NSEC
, 4, 
IPFIX_CODING_INT
,

88 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_SOURCEIPV4FANOUT
, 4, 
IPFIX_CODING_UINT
,

90 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_DESTINATIONIPV4FANIN
, 4, 
IPFIX_CODING_UINT
,

92 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PACKETARRIVALMEAN
, 8, 
IPFIX_CODING_UINT
,

94 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PACKETARRIVALVAR
, 8, 
IPFIX_CODING_UINT
,

96 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_SESSIONID
, 4, 
IPFIX_CODING_UINT
,

98 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_TRANSACTIONID
, 4, 
IPFIX_CODING_UINT
,

100 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_AES128ENCRYPTEDDATA
, 65535, 
IPFIX_CODING_STRING
,

102 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_AES256ENCRYPTEDDATA
, 65535, 
IPFIX_CODING_STRING
,

104 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_DECRYPTIONKEY
, 65535, 
IPFIX_CODING_STRING
,

106 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_AES128KEYSHARE
, 16, 
IPFIX_CODING_STRING
,

108 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_AES256KEYSHARE
, 36, 
IPFIX_CODING_STRING
,

110 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_KEYSHAREADP
, 32, 
IPFIX_CODING_STRING
,

112 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PR_KEYSHAREINITVECTOR
, 16, 
IPFIX_CODING_STRING
,

114 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_SYSTEM_CPU_IDLE
, 4, 
IPFIX_CODING_FLOAT
,

116 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_SYSTEM_MEM_FREE
, 8, 
IPFIX_CODING_UINT
,

118 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_PROCESS_CPU_USER
, 4, 
IPFIX_CODING_FLOAT
,

120 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_PROCESS_CPU_SYS
, 4, 
IPFIX_CODING_FLOAT
,

122 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_PROCESS_MEM_VZS
, 8, 
IPFIX_CODING_UINT
,

124 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_PROCESS_MEM_RSS
, 8, 
IPFIX_CODING_UINT
,

126 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_PCAPSTAT_RECV
, 4, 
IPFIX_CODING_UINT
,

128 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_PCAPSTAT_DROP
, 4, 
IPFIX_CODING_UINT
,

130 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_MESSAGE_ID
, 4, 
IPFIX_CODING_UINT
,

132 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_MESSAGE_VALUE
, 4, 
IPFIX_CODING_UINT
,

134 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_MESSAGE
, 65535, 
IPFIX_CODING_STRING
,

136 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_INTERFACE_NAME
, 65535, 
IPFIX_CODING_STRING
,

138 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_PT_INTERFACE_DESCRIPTION
, 65535, 
IPFIX_CODING_STRING
,

140 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_SYNC_QUEUE_FILL_LEVEL
, 4, 
IPFIX_CODING_FLOAT
,

142 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_SYNC_BOTTLENECK
, 4, 
IPFIX_CODING_FLOAT
,

144 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_SYNC_FREQ
, 4, 
IPFIX_CODING_FLOAT
,

146 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_ORsig«lB™dwidth
, 4, 
IPFIX_CODING_UINT
,

148 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_ORsig«lPowî
, 2, 
IPFIX_CODING_UINT
,

150 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_ORsymbﬁR©e
, 2, 
IPFIX_CODING_UINT
,

152 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_ORmoduœti⁄Ordî
, 1, 
IPFIX_CODING_UINT
,

154 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_ORrﬁloffFa˘‹
, 2, 
IPFIX_CODING_UINT
,

156 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_£nsög_vÆue
, 2, 
IPFIX_CODING_UINT
,

158 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_£nsög_thªshﬁd
, 2, 
IPFIX_CODING_UINT
,

160 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OR_ãrmöÆ_id
, 1, 
IPFIX_CODING_UINT
,

162 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_OR_ãrmöÆ_id_li°
, 65535, 
IPFIX_CODING_STRING
,

164 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_In‰a°ru˘uª_√tw‹k_id
, 1, 
IPFIX_CODING_UINT
,

166 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_S≥˘øl_Æloˇti⁄_ve˘‹
, 1, 
IPFIX_CODING_UINT
,

168 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_S≥˘øl_Æloˇti⁄_¥ofûe
, 2, 
IPFIX_CODING_UINT
,

170 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_Cíãr_‰equícy
, 2, 
IPFIX_CODING_UINT
,

172 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_B™dwidth_of_CAP
, 2, 
IPFIX_CODING_UINT
,

174 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_ORmoduœti⁄
, 1, 
IPFIX_CODING_UINT
,

176 { 0, 0, -1, 0, 
NULL
, NULL, }

	@libipfix_110224/lib/ipfix_print.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

38 
	~<î∫o.h
>

39 
	~<sig«l.h
>

40 
	~<limôs.h
>

41 
	~<°d¨g.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<¨∑/öë.h
>

47 
	~<sys/time.h
>

48 
	~<time.h
>

49 
	~<f˙é.h
>

51 
	~"libmisc/misc.h
"

52 
	~"ùfix.h
"

53 
	~"ùfix_cﬁ.h
"

57 c⁄° 
	gcvsid
[]="$Id: ipfix_print.c 996 2009-03-19 18:14:44Z csc $";

61 
ùfix_cﬁ_öfo_t
 *
	gg_cﬁöfo
 =
NULL
;

62 
	gtmpbuf
[1000];

64 
	$outf
–
FILE
 *
Â
,

65 
fmt
[], ... ) 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 2, 3)));

69 
	$outf
–
FILE
 *
Â
, 
fmt
[], ... )

71 
va_li°
 
¨gs
;

73 
	`va_°¨t
–
¨gs
, 
fmt
 );

74 (Ë
	`v•rötf
(
tmpbuf
, 
fmt
, 
¨gs
 );

75 
	`va_íd
–
¨gs
 );

77 i‡–
Â
 ) {

78 
	`Ârötf
–
Â
, "%s", 
tmpbuf
 );

81 
	`mlogf
–0, "%s", 
tmpbuf
 );

83 
	}
}

85 
	$ùfix_¥öt_√wsour˚
–
ùfixs_node_t
 *
s
, *
¨g
 )

87 
FILE
 *
Â
 = (FILE*)
¨g
;

89 
	`outf
–
Â
, "#\n#Çew source: %s/%lu\n#\n",

90 
	`ùfix_cﬁ_öput_gë_idít
–
s
->
öput
 ), (
u_l⁄g
)s->
odid
 );

92 
	}
}

94 
	$ùfix_¥öt_√wmsg
–
ùfixs_node_t
 *
s
, 
ùfix_hdr_t
 *
hdr
, *
¨g
 )

96 
timebuf
[51];

97 
FILE
 *
Â
 = (FILE*)
¨g
;

101 
	`outf
–
Â
, "IPFIX-HDR:\¿vîsi⁄=%u,", 
hdr
->
vîsi⁄
 );

102 i‡–
hdr
->
vîsi⁄
 =
IPFIX_VERSION_NF9
 ) {

103 
	`outf
–
Â
, "Ñec‹ds=%u\n", 
hdr
->
u
.
nf9
.
cou¡
 );

104 
	`°r·ime
–
timebuf
, 40, "%Y-%m-%d %T %Z",

105 
	`loˇ…ime
–(c⁄° 
time_t
 *Ë&(
hdr
->
u
.
nf9
.
unixtime
) ));

106 
	`outf
–
Â
, " sysuptime=%.3fs, unixtime=%lu (%s)\n",

107 ()(
hdr
->
u
.
nf9
.
sysu±ime
)/1000.0,

108 (
u_l⁄g
)
hdr
->
u
.
nf9
.
unixtime
, 
timebuf
 );

109 
	`outf
–
Â
, " seqno=%lu,", (
u_l⁄g
)
hdr
->
£qno
 );

110 
	`outf
–
Â
, " sour˚id=%lu\n", (
u_l⁄g
)
hdr
->
sour˚id
 );

113 
	`outf
–
Â
, "Üígth=%u\n", 
hdr
->
u
.
ùfix
.
Àngth
 );

114 
	`°r·ime
–
timebuf
, 40, "%Y-%m-%d %T %Z",

115 
	`loˇ…ime
–(c⁄° 
time_t
 *Ë&(
hdr
->
u
.
ùfix
.
exp‹âime
) ));

116 
	`outf
–
Â
, " unixtime=%lu (%s)\n",

117 (
u_l⁄g
)
hdr
->
u
.
ùfix
.
exp‹âime
, 
timebuf
 );

118 
	`outf
–
Â
, " seqno=%lu,", (
u_l⁄g
)
hdr
->
£qno
 );

119 
	`outf
–
Â
, " odid=%lu\n", (
u_l⁄g
)
hdr
->
sour˚id
 );

123 
	}
}

125 
	$ùfix_¥öt_åec‹d
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
, *
¨g
 )

127 
i
;

128 
FILE
 *
Â
 = (FILE*)
¨g
;

130 
	`outf
–
Â
, "TEMPLATE RECORD:\n" );

131 
	`outf
–
Â
, "Åem∂©êid: %u %s\n", 
t
->
ùfixt
->
tid
,

132 (
t
->
ùfixt
->
nsc›efõlds
)?"(optionÅemplate)":"" );

133 
	`outf
–
Â
, "Çfõlds: %u\n", 
t
->
ùfixt
->
nfõlds
 );

135  
i
=0; i<
t
->
ùfixt
->
nfõlds
; i++ ) {

136 
	`outf
–
Â
, " fõld%02d:%†õ=%u.%u,Üí=%u (%s)\n", 
i
+1,

137 (
i
<
t
->
ùfixt
->
nsc›efõlds
)?" scope":"",

138 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
ío
,

139 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
·y≥
,

140 
t
->
ùfixt
->
fõlds
[
i
].
Êígth
,

141 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
«me
 );

145 
	}
}

147 
	$ùfix_¥öt_dªc‹d
–
ùfixs_node_t
 *
s
,

148 
ùfixt_node_t
 *
t
,

149 
ùfix_d©¨ec‹d_t
 *
d©a
,

150 *
¨g
 )

152 
tmpbuf
[2000];

153 
i
;

154 
FILE
 *
Â
 = (FILE*)
¨g
;

156 i‡–!
t
 || !
s
 || !
d©a
 )

159 
	`outf
–
Â
, "DATA RECORD: \n" );

160 
	`outf
–
Â
, "Åem∂©êid: %u %s\n", 
t
->
ùfixt
->
tid
,

161 (
t
->
ùfixt
->
nsc›efõlds
)?"(optionÑecord)":"" );

162 
	`outf
–
Â
, "Çfõlds: %u\n", 
t
->
ùfixt
->
nfõlds
 );

163  
i
=0; i<
t
->
ùfixt
->
nfõlds
; i++ ) {

164 
	`outf
–
Â
, " %s: ", 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
«me
 );

166 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
	`¢¥öt
–
tmpbuf
, (tmpbuf),

167 
d©a
->
addrs
[
i
], d©a->
Àns
[i] );

168 
	`outf
–
Â
, "%s\n", 
tmpbuf
 );

172 
	}
}

174 
	$¥öt_˛ónup
–*
¨g
 )

177 
	}
}

181 
	$ùfix_cﬁ_°¨t_msglog
–
FILE
 *
Âout
 )

183 i‡–
g_cﬁöfo
 ) {

184 
î∫o
 = 
EAGAIN
;

188 i‡–(
g_cﬁöfo
=
	`ˇŒoc
–1, (
ùfix_cﬁ_öfo_t
))Ë==
NULL
) {

192 
g_cﬁöfo
->
exp‹t_√wsour˚
 = 
ùfix_¥öt_√wsour˚
;

193 
g_cﬁöfo
->
exp‹t_√wmsg
 = 
ùfix_¥öt_√wmsg
;

194 
g_cﬁöfo
->
exp‹t_åec‹d
 = 
ùfix_¥öt_åec‹d
;

195 
g_cﬁöfo
->
exp‹t_dªc‹d
 = 
ùfix_¥öt_dªc‹d
;

196 
g_cﬁöfo
->
exp‹t_˛ónup
 = 
¥öt_˛ónup
;

197 
g_cﬁöfo
->
d©a
 = (*)
Âout
;

199  
	`ùfix_cﬁ_ªgi°î_exp‹t
–
g_cﬁöfo
 );

200 
	}
}

202 
	$ùfix_cﬁ_°›_msglog
()

204 i‡–
g_cﬁöfo
 ) {

205 (Ë
	`ùfix_cﬁ_ˇn˚l_exp‹t
–
g_cﬁöfo
 );

206 
	`‰ì
–
g_cﬁöfo
 );

207 
g_cﬁöfo
 = 
NULL
;

209 
	}
}

	@libipfix_110224/lib/ipfix_reverse_fields.h

10 
ùfix_fõld_ty≥_t
 
	gùfix_ªvî£_fõld_ty≥s
[] = {

11 { 
REV_PEN
, 
IPFIX_FT_OCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

13 { 
REV_PEN
, 
IPFIX_FT_PACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

15 { 
REV_PEN
, 
IPFIX_FT_FLOWS
, 8, 
IPFIX_CODING_UINT
,

17 { 
REV_PEN
, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 1, 
IPFIX_CODING_UINT
,

19 { 
REV_PEN
, 
IPFIX_FT_IPCLASSOFSERVICE
, 1, 
IPFIX_CODING_UINT
,

21 { 
REV_PEN
, 
IPFIX_FT_TCPCONTROLBITS
, 1, 
IPFIX_CODING_UINT
,

23 { 
REV_PEN
, 
IPFIX_FT_SOURCETRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

25 { 
REV_PEN
, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

27 { 
REV_PEN
, 
IPFIX_FT_SOURCEIPV4PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

29 { 
REV_PEN
, 
IPFIX_FT_INGRESSINTERFACE
, 4, 
IPFIX_CODING_UINT
,

31 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONTRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

33 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

35 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONIPV4PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

37 { 
REV_PEN
, 
IPFIX_FT_EGRESSINTERFACE
, 4, 
IPFIX_CODING_UINT
,

39 { 
REV_PEN
, 
IPFIX_FT_IPNEXTHOPIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

41 { 
REV_PEN
, 
IPFIX_FT_BGPSOURCEASNUMBER
, 4, 
IPFIX_CODING_UINT
,

43 { 
REV_PEN
, 
IPFIX_FT_BGPDESTINATIONASNUMBER
, 4, 
IPFIX_CODING_UINT
,

45 { 
REV_PEN
, 
IPFIX_FT_BGPNEXTHOPIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

47 { 
REV_PEN
, 
IPFIX_FT_POSTMCASTPACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

49 { 
REV_PEN
, 
IPFIX_FT_POSTMCASTOCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

51 { 
REV_PEN
, 
IPFIX_FT_FLOWENDSYSUPTIME
, 4, 
IPFIX_CODING_UINT
,

53 { 
REV_PEN
, 
IPFIX_FT_FLOWSTARTSYSUPTIME
, 4, 
IPFIX_CODING_UINT
,

55 { 
REV_PEN
, 
IPFIX_FT_POSTOCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

57 { 
REV_PEN
, 
IPFIX_FT_POSTPACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

59 { 
REV_PEN
, 
IPFIX_FT_MINIMUMIPTOTALLENGTH
, 8, 
IPFIX_CODING_UINT
,

61 { 
REV_PEN
, 
IPFIX_FT_MAXIMUMIPTOTALLENGTH
, 8, 
IPFIX_CODING_UINT
,

63 { 
REV_PEN
, 
IPFIX_FT_SOURCEIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

65 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

67 { 
REV_PEN
, 
IPFIX_FT_SOURCEIPV6PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

69 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONIPV6PREFIXLENGTH
, 1, 
IPFIX_CODING_UINT
,

71 { 
REV_PEN
, 
IPFIX_FT_FLOWLABELIPV6
, 4, 
IPFIX_CODING_UINT
,

73 { 
REV_PEN
, 
IPFIX_FT_ICMPTYPECODEIPV4
, 2, 
IPFIX_CODING_UINT
,

75 { 
REV_PEN
, 
IPFIX_FT_IGMPTYPE
, 1, 
IPFIX_CODING_UINT
,

77 { 
REV_PEN
, 
IPFIX_FT_SAMPLING_INTERVAL
, 4, 
IPFIX_CODING_UINT
,

79 { 
REV_PEN
, 
IPFIX_FT_SAMPLING_ALGORITHM
, 1, 
IPFIX_CODING_UINT
,

81 { 
REV_PEN
, 
IPFIX_FT_FLOWACTIVETIMEOUT
, 2, 
IPFIX_CODING_UINT
,

83 { 
REV_PEN
, 
IPFIX_FT_FLOWIDLETIMEOUT
, 2, 
IPFIX_CODING_UINT
,

85 { 
REV_PEN
, 
IPFIX_FT_ENGINE_TYPE
, 1, 
IPFIX_CODING_UINT
,

87 { 
REV_PEN
, 
IPFIX_FT_ENGINE_ID
, 1, 
IPFIX_CODING_UINT
,

89 { 
REV_PEN
, 
IPFIX_FT_EXPORTEDOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

91 { 
REV_PEN
, 
IPFIX_FT_EXPORTEDMESSAGETOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

93 { 
REV_PEN
, 
IPFIX_FT_EXPORTEDFLOWRECORDTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

95 { 
REV_PEN
, 
IPFIX_FT_SOURCEIPV4PREFIX
, 4, 
IPFIX_CODING_IPADDR
,

97 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONIPV4PREFIX
, 4, 
IPFIX_CODING_IPADDR
,

99 { 
REV_PEN
, 
IPFIX_FT_MPLSTOPLABELTYPE
, 1, 
IPFIX_CODING_UINT
,

101 { 
REV_PEN
, 
IPFIX_FT_MPLSTOPLABELIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

103 { 
REV_PEN
, 
IPFIX_FT_FLOW_SAMPLER_ID
, 1, 
IPFIX_CODING_UINT
,

105 { 
REV_PEN
, 
IPFIX_FT_FLOW_SAMPLER_MODE
, 1, 
IPFIX_CODING_UINT
,

107 { 
REV_PEN
, 
IPFIX_FT_FLOW_SAMPLER_RANDOM_INTERVAL
, 4, 
IPFIX_CODING_UINT
,

109 { 
REV_PEN
, 
IPFIX_FT_MINIMUMTTL
, 1, 
IPFIX_CODING_UINT
,

111 { 
REV_PEN
, 
IPFIX_FT_MAXIMUMTTL
, 1, 
IPFIX_CODING_UINT
,

113 { 
REV_PEN
, 
IPFIX_FT_FRAGMENTIDENTIFICATION
, 4, 
IPFIX_CODING_UINT
,

115 { 
REV_PEN
, 
IPFIX_FT_POSTIPCLASSOFSERVICE
, 1, 
IPFIX_CODING_UINT
,

117 { 
REV_PEN
, 
IPFIX_FT_SOURCEMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

119 { 
REV_PEN
, 
IPFIX_FT_POSTDESTINATIONMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

121 { 
REV_PEN
, 
IPFIX_FT_VLANID
, 2, 
IPFIX_CODING_UINT
,

123 { 
REV_PEN
, 
IPFIX_FT_POSTVLANID
, 2, 
IPFIX_CODING_UINT
,

125 { 
REV_PEN
, 
IPFIX_FT_IPVERSION
, 1, 
IPFIX_CODING_UINT
,

127 { 
REV_PEN
, 
IPFIX_FT_FLOWDIRECTION
, 1, 
IPFIX_CODING_UINT
,

129 { 
REV_PEN
, 
IPFIX_FT_IPNEXTHOPIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

131 { 
REV_PEN
, 
IPFIX_FT_BGPNEXTHOPIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

133 { 
REV_PEN
, 
IPFIX_FT_IPV6EXTENSIONHEADERS
, 4, 
IPFIX_CODING_UINT
,

135 { 
REV_PEN
, 
IPFIX_FT_MPLSTOPLABELSTACKSECTION
, 65535, 
IPFIX_CODING_BYTES
,

137 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION2
, 65535, 
IPFIX_CODING_BYTES
,

139 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION3
, 65535, 
IPFIX_CODING_BYTES
,

141 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION4
, 65535, 
IPFIX_CODING_BYTES
,

143 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION5
, 65535, 
IPFIX_CODING_BYTES
,

145 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION6
, 65535, 
IPFIX_CODING_BYTES
,

147 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION7
, 65535, 
IPFIX_CODING_BYTES
,

149 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION8
, 65535, 
IPFIX_CODING_BYTES
,

151 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION9
, 65535, 
IPFIX_CODING_BYTES
,

153 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION10
, 65535, 
IPFIX_CODING_BYTES
,

155 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

157 { 
REV_PEN
, 
IPFIX_FT_POSTSOURCEMACADDRESS
, 6, 
IPFIX_CODING_BYTES
,

159 { 
REV_PEN
, 
IPFIX_FT_OCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

161 { 
REV_PEN
, 
IPFIX_FT_PACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

163 { 
REV_PEN
, 
IPFIX_FT_FRAGMENTOFFSET
, 2, 
IPFIX_CODING_UINT
,

165 { 
REV_PEN
, 
IPFIX_FT_MPLSVPNROUTEDISTINGUISHER
, 65535, 
IPFIX_CODING_BYTES
,

167 { 
REV_PEN
, 
IPFIX_FT_BGPNEXTADJACENTASNUMBER
, 4, 
IPFIX_CODING_UINT
,

169 { 
REV_PEN
, 
IPFIX_FT_BGPPREVADJACENTASNUMBER
, 4, 
IPFIX_CODING_UINT
,

171 { 
REV_PEN
, 
IPFIX_FT_EXPORTERIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

173 { 
REV_PEN
, 
IPFIX_FT_EXPORTERIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

175 { 
REV_PEN
, 
IPFIX_FT_DROPPEDOCTETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

177 { 
REV_PEN
, 
IPFIX_FT_DROPPEDPACKETDELTACOUNT
, 8, 
IPFIX_CODING_UINT
,

179 { 
REV_PEN
, 
IPFIX_FT_DROPPEDOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

181 { 
REV_PEN
, 
IPFIX_FT_DROPPEDPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

183 { 
REV_PEN
, 
IPFIX_FT_FLOWENDREASON
, 1, 
IPFIX_CODING_UINT
,

185 { 
REV_PEN
, 
IPFIX_FT_COMMONPROPERTIESID
, 8, 
IPFIX_CODING_UINT
,

187 { 
REV_PEN
, 
IPFIX_FT_OBSERVATIONPOINTID
, 4, 
IPFIX_CODING_UINT
,

189 { 
REV_PEN
, 
IPFIX_FT_ICMPTYPECODEIPV6
, 2, 
IPFIX_CODING_UINT
,

191 { 
REV_PEN
, 
IPFIX_FT_MPLSTOPLABELIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

193 { 
REV_PEN
, 
IPFIX_FT_LINECARDID
, 4, 
IPFIX_CODING_UINT
,

195 { 
REV_PEN
, 
IPFIX_FT_PORTID
, 4, 
IPFIX_CODING_UINT
,

197 { 
REV_PEN
, 
IPFIX_FT_METERINGPROCESSID
, 4, 
IPFIX_CODING_UINT
,

199 { 
REV_PEN
, 
IPFIX_FT_EXPORTINGPROCESSID
, 4, 
IPFIX_CODING_UINT
,

201 { 
REV_PEN
, 
IPFIX_FT_TEMPLATEID
, 2, 
IPFIX_CODING_UINT
,

203 { 
REV_PEN
, 
IPFIX_FT_WLANCHANNELID
, 1, 
IPFIX_CODING_UINT
,

205 { 
REV_PEN
, 
IPFIX_FT_WLANSSID
, 65535, 
IPFIX_CODING_STRING
,

207 { 
REV_PEN
, 
IPFIX_FT_FLOWID
, 8, 
IPFIX_CODING_UINT
,

209 { 
REV_PEN
, 
IPFIX_FT_OBSERVATIONDOMAINID
, 4, 
IPFIX_CODING_UINT
,

211 { 
REV_PEN
, 
IPFIX_FT_FLOWSTARTSECONDS
, 4, 
IPFIX_CODING_UINT
,

213 { 
REV_PEN
, 
IPFIX_FT_FLOWENDSECONDS
, 4, 
IPFIX_CODING_UINT
,

215 { 
REV_PEN
, 
IPFIX_FT_FLOWSTARTMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

217 { 
REV_PEN
, 
IPFIX_FT_FLOWENDMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

219 { 
REV_PEN
, 
IPFIX_FT_FLOWSTARTMICROSECONDS
, 8, 
IPFIX_CODING_NTP
,

221 { 
REV_PEN
, 
IPFIX_FT_FLOWENDMICROSECONDS
, 8, 
IPFIX_CODING_NTP
,

223 { 
REV_PEN
, 
IPFIX_FT_FLOWSTARTNANOSECONDS
, 8, 
IPFIX_CODING_NTP
,

225 { 
REV_PEN
, 
IPFIX_FT_FLOWENDNANOSECONDS
, 8, 
IPFIX_CODING_NTP
,

227 { 
REV_PEN
, 
IPFIX_FT_FLOWSTARTDELTAMICROSECONDS
, 4, 
IPFIX_CODING_UINT
,

229 { 
REV_PEN
, 
IPFIX_FT_FLOWENDDELTAMICROSECONDS
, 4, 
IPFIX_CODING_UINT
,

231 { 
REV_PEN
, 
IPFIX_FT_SYSTEMINITTIMEMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

233 { 
REV_PEN
, 
IPFIX_FT_FLOWDURATIONMILLISECONDS
, 4, 
IPFIX_CODING_UINT
,

235 { 
REV_PEN
, 
IPFIX_FT_FLOWDURATIONMICROSECONDS
, 4, 
IPFIX_CODING_UINT
,

237 { 
REV_PEN
, 
IPFIX_FT_OBSERVEDFLOWTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

239 { 
REV_PEN
, 
IPFIX_FT_IGNOREDPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

241 { 
REV_PEN
, 
IPFIX_FT_IGNOREDOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

243 { 
REV_PEN
, 
IPFIX_FT_NOTSENTFLOWTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

245 { 
REV_PEN
, 
IPFIX_FT_NOTSENTPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

247 { 
REV_PEN
, 
IPFIX_FT_NOTSENTOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

249 { 
REV_PEN
, 
IPFIX_FT_DESTINATIONIPV6PREFIX
, 16, 
IPFIX_CODING_IPADDR
,

251 { 
REV_PEN
, 
IPFIX_FT_SOURCEIPV6PREFIX
, 16, 
IPFIX_CODING_IPADDR
,

253 { 
REV_PEN
, 
IPFIX_FT_POSTOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

255 { 
REV_PEN
, 
IPFIX_FT_POSTPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

257 { 
REV_PEN
, 
IPFIX_FT_FLOWKEYINDICATOR
, 8, 
IPFIX_CODING_UINT
,

259 { 
REV_PEN
, 
IPFIX_FT_POSTMCASTPACKETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

261 { 
REV_PEN
, 
IPFIX_FT_POSTMCASTOCTETTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

263 { 
REV_PEN
, 
IPFIX_FT_ICMPTYPEIPV4
, 1, 
IPFIX_CODING_UINT
,

265 { 
REV_PEN
, 
IPFIX_FT_ICMPCODEIPV4
, 1, 
IPFIX_CODING_UINT
,

267 { 
REV_PEN
, 
IPFIX_FT_ICMPTYPEIPV6
, 1, 
IPFIX_CODING_UINT
,

269 { 
REV_PEN
, 
IPFIX_FT_ICMPCODEIPV6
, 1, 
IPFIX_CODING_UINT
,

271 { 
REV_PEN
, 
IPFIX_FT_UDPSOURCEPORT
, 2, 
IPFIX_CODING_UINT
,

273 { 
REV_PEN
, 
IPFIX_FT_UDPDESTINATIONPORT
, 2, 
IPFIX_CODING_UINT
,

275 { 
REV_PEN
, 
IPFIX_FT_TCPSOURCEPORT
, 2, 
IPFIX_CODING_UINT
,

277 { 
REV_PEN
, 
IPFIX_FT_TCPDESTINATIONPORT
, 2, 
IPFIX_CODING_UINT
,

279 { 
REV_PEN
, 
IPFIX_FT_TCPSEQUENCENUMBER
, 4, 
IPFIX_CODING_UINT
,

281 { 
REV_PEN
, 
IPFIX_FT_TCPACKNOWLEDGEMENTNUMBER
, 4, 
IPFIX_CODING_UINT
,

283 { 
REV_PEN
, 
IPFIX_FT_TCPWINDOWSIZE
, 2, 
IPFIX_CODING_UINT
,

285 { 
REV_PEN
, 
IPFIX_FT_TCPURGENTPOINTER
, 2, 
IPFIX_CODING_UINT
,

287 { 
REV_PEN
, 
IPFIX_FT_TCPHEADERLENGTH
, 1, 
IPFIX_CODING_UINT
,

289 { 
REV_PEN
, 
IPFIX_FT_IPHEADERLENGTH
, 1, 
IPFIX_CODING_UINT
,

291 { 
REV_PEN
, 
IPFIX_FT_TOTALLENGTHIPV4
, 2, 
IPFIX_CODING_UINT
,

293 { 
REV_PEN
, 
IPFIX_FT_PAYLOADLENGTHIPV6
, 2, 
IPFIX_CODING_UINT
,

295 { 
REV_PEN
, 
IPFIX_FT_IPTTL
, 1, 
IPFIX_CODING_UINT
,

297 { 
REV_PEN
, 
IPFIX_FT_NEXTHEADERIPV6
, 1, 
IPFIX_CODING_UINT
,

299 { 
REV_PEN
, 
IPFIX_FT_MPLSPAYLOADLENGTH
, 4, 
IPFIX_CODING_UINT
,

301 { 
REV_PEN
, 
IPFIX_FT_IPDIFFSERVCODEPOINT
, 1, 
IPFIX_CODING_UINT
,

303 { 
REV_PEN
, 
IPFIX_FT_IPPRECEDENCE
, 1, 
IPFIX_CODING_UINT
,

305 { 
REV_PEN
, 
IPFIX_FT_FRAGMENTFLAGS
, 1, 
IPFIX_CODING_UINT
,

307 { 
REV_PEN
, 
IPFIX_FT_OCTETDELTASUMOFSQUARES
, 8, 
IPFIX_CODING_UINT
,

309 { 
REV_PEN
, 
IPFIX_FT_OCTETTOTALSUMOFSQUARES
, 8, 
IPFIX_CODING_UINT
,

311 { 
REV_PEN
, 
IPFIX_FT_MPLSTOPLABELTTL
, 1, 
IPFIX_CODING_UINT
,

313 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKLENGTH
, 4, 
IPFIX_CODING_UINT
,

315 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKDEPTH
, 4, 
IPFIX_CODING_UINT
,

317 { 
REV_PEN
, 
IPFIX_FT_MPLSTOPLABELEXP
, 1, 
IPFIX_CODING_UINT
,

319 { 
REV_PEN
, 
IPFIX_FT_IPPAYLOADLENGTH
, 4, 
IPFIX_CODING_UINT
,

321 { 
REV_PEN
, 
IPFIX_FT_UDPMESSAGELENGTH
, 2, 
IPFIX_CODING_UINT
,

323 { 
REV_PEN
, 
IPFIX_FT_ISMULTICAST
, 1, 
IPFIX_CODING_UINT
,

325 { 
REV_PEN
, 
IPFIX_FT_IPV4IHL
, 1, 
IPFIX_CODING_UINT
,

327 { 
REV_PEN
, 
IPFIX_FT_IPV4OPTIONS
, 4, 
IPFIX_CODING_UINT
,

329 { 
REV_PEN
, 
IPFIX_FT_TCPOPTIONS
, 8, 
IPFIX_CODING_UINT
,

331 { 
REV_PEN
, 
IPFIX_FT_PADDINGOCTETS
, 65535, 
IPFIX_CODING_BYTES
,

333 { 
REV_PEN
, 
IPFIX_FT_COLLECTORIPV4ADDRESS
, 4, 
IPFIX_CODING_IPADDR
,

335 { 
REV_PEN
, 
IPFIX_FT_COLLECTORIPV6ADDRESS
, 16, 
IPFIX_CODING_IPADDR
,

337 { 
REV_PEN
, 
IPFIX_FT_COLLECTORINTERFACE
, 4, 
IPFIX_CODING_UINT
,

339 { 
REV_PEN
, 
IPFIX_FT_COLLECTORPROTOCOLVERSION
, 1, 
IPFIX_CODING_UINT
,

341 { 
REV_PEN
, 
IPFIX_FT_COLLECTORTRANSPORTPROTOCOL
, 1, 
IPFIX_CODING_UINT
,

343 { 
REV_PEN
, 
IPFIX_FT_COLLECTORTRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

345 { 
REV_PEN
, 
IPFIX_FT_EXPORTERTRANSPORTPORT
, 2, 
IPFIX_CODING_UINT
,

347 { 
REV_PEN
, 
IPFIX_FT_TCPSYNTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

349 { 
REV_PEN
, 
IPFIX_FT_TCPFINTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

351 { 
REV_PEN
, 
IPFIX_FT_TCPRSTTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

353 { 
REV_PEN
, 
IPFIX_FT_TCPPSHTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

355 { 
REV_PEN
, 
IPFIX_FT_TCPACKTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

357 { 
REV_PEN
, 
IPFIX_FT_TCPURGTOTALCOUNT
, 8, 
IPFIX_CODING_UINT
,

359 { 
REV_PEN
, 
IPFIX_FT_IPTOTALLENGTH
, 8, 
IPFIX_CODING_UINT
,

361 { 
REV_PEN
, 
IPFIX_FT_POSTMPLSTOPLABELEXP
, 1, 
IPFIX_CODING_UINT
,

363 { 
REV_PEN
, 
IPFIX_FT_TCPWINDOWSCALE
, 2, 
IPFIX_CODING_UINT
,

365 { 
REV_PEN
, 
IPFIX_FT_OBSERVATIONPOINTID_PSAMP
, 8, 
IPFIX_CODING_UINT
,

367 { 
REV_PEN
, 
IPFIX_FT_SELECTIONSEQUENCEID
, 8, 
IPFIX_CODING_UINT
,

369 { 
REV_PEN
, 
IPFIX_FT_SELECTORID
, 2, 
IPFIX_CODING_UINT
,

371 { 
REV_PEN
, 
IPFIX_FT_INFORMATIONELEMENTID
, 2, 
IPFIX_CODING_UINT
,

373 { 
REV_PEN
, 
IPFIX_FT_SELECTORALGORITHM
, 2, 
IPFIX_CODING_UINT
,

375 { 
REV_PEN
, 
IPFIX_FT_SAMPLINGPACKETINTERVAL
, 4, 
IPFIX_CODING_UINT
,

377 { 
REV_PEN
, 
IPFIX_FT_SAMPLINGPACKETSPACE
, 4, 
IPFIX_CODING_UINT
,

379 { 
REV_PEN
, 
IPFIX_FT_SAMPLINGTIMEINTERVAL
, 8, 
IPFIX_CODING_NTP
,

381 { 
REV_PEN
, 
IPFIX_FT_SAMPLINGTIMESPACE
, 8, 
IPFIX_CODING_NTP
,

383 { 
REV_PEN
, 
IPFIX_FT_SAMPLINGSIZE
, 4, 
IPFIX_CODING_UINT
,

385 { 
REV_PEN
, 
IPFIX_FT_SAMPLINGPOPULATION
, 4, 
IPFIX_CODING_UINT
,

387 { 
REV_PEN
, 
IPFIX_FT_SAMPLINGPROBABILITY
, 8, 
IPFIX_CODING_FLOAT
,

389 { 
REV_PEN
, 
IPFIX_FT_DATALINKFRAMESIZE
, 4, 
IPFIX_CODING_UINT
,

391 { 
REV_PEN
, 
IPFIX_FT_IPHEADERPACKETSECTION
, 65535, 
IPFIX_CODING_BYTES
,

393 { 
REV_PEN
, 
IPFIX_FT_IPPAYLOADPACKETSECTION
, 65535, 
IPFIX_CODING_BYTES
,

395 { 
REV_PEN
, 
IPFIX_FT_DATALINKFRAMESECTION
, 65535, 
IPFIX_CODING_BYTES
,

397 { 
REV_PEN
, 
IPFIX_FT_MPLSLABELSTACKSECTION
, 65535, 
IPFIX_CODING_BYTES
,

399 { 
REV_PEN
, 
IPFIX_FT_MPLSPAYLOADPACKETSECTION
, 65535, 
IPFIX_CODING_BYTES
,

401 { 
REV_PEN
, 
IPFIX_FT_PACKETSOBSERVED
, 8, 
IPFIX_CODING_UINT
,

403 { 
REV_PEN
, 
IPFIX_FT_PACKETSSELECTED
, 8, 
IPFIX_CODING_UINT
,

405 { 
REV_PEN
, 
IPFIX_FT_FIXEDERROR
, 8, 
IPFIX_CODING_FLOAT
,

407 { 
REV_PEN
, 
IPFIX_FT_RELATIVEERROR
, 8, 
IPFIX_CODING_FLOAT
,

409 { 
REV_PEN
, 
IPFIX_FT_OBSERVATIONTIMESECONDS
, 4, 
IPFIX_CODING_UINT
,

411 { 
REV_PEN
, 
IPFIX_FT_OBSERVATIONTIMEMILLISECONDS
, 8, 
IPFIX_CODING_UINT
,

413 { 
REV_PEN
, 
IPFIX_FT_OBSERVATIONTIMEMICROSECONDS
, 8, 
IPFIX_CODING_NTP
,

415 { 
REV_PEN
, 
IPFIX_FT_OBSERVATIONTIMENANOSECONDS
, 8, 
IPFIX_CODING_NTP
,

417 { 
REV_PEN
, 
IPFIX_FT_DIGESTHASHVALUE
, 8, 
IPFIX_CODING_UINT
,

419 { 
REV_PEN
, 
IPFIX_FT_HASHIPPAYLOADOFFSET
, 8, 
IPFIX_CODING_UINT
,

421 { 
REV_PEN
, 
IPFIX_FT_HASHIPPAYLOADSIZE
, 8, 
IPFIX_CODING_UINT
,

423 { 
REV_PEN
, 
IPFIX_FT_HASHOUTPUTRANGEMIN
, 8, 
IPFIX_CODING_UINT
,

425 { 
REV_PEN
, 
IPFIX_FT_HASHOUTPUTRANGEMAX
, 8, 
IPFIX_CODING_UINT
,

427 { 
REV_PEN
, 
IPFIX_FT_HASHSELECTEDRANGEMIN
, 8, 
IPFIX_CODING_UINT
,

429 { 
REV_PEN
, 
IPFIX_FT_HASHSELECTEDRANGEMAX
, 8, 
IPFIX_CODING_UINT
,

431 { 
REV_PEN
, 
IPFIX_FT_HASHDIGESTOUTPUT
, 1, 
IPFIX_CODING_BYTES
,

433 { 
REV_PEN
, 
IPFIX_FT_HASHINITIALISERVALUE
, 8, 
IPFIX_CODING_UINT
,

435 { 
REV_PEN
, 0, -1, 0, 
NULL
, NULL, }

	@libipfix_110224/lib/ipfix_ssl.c

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<uni°d.h
>

36 
	~<°rög.h
>

37 
	~<î∫o.h
>

38 
	~<limôs.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<sys/sockë.h
>

42 
	~<sys/time.h
>

43 
	~<time.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 #ifde‡
SCTPSUPPORT


47 
	~<√töë/s˘p.h
>

49 
	~<f˙é.h
>

50 
	~<√tdb.h
>

52 
	~"libmisc/misc.h
"

53 
	~"ùfix.h
"

54 
	~"ùfix_cﬁ.h
"

55 
	~"ùfix_s¶.h
"

59 
	#READ16
(
b
Ë((*(b)<<8)|*((b)+1))

	)

60 
	#READ32
(
b
Ë((((((*(b)<<8)|*(b+1))<<8)|(*(b+2)))<<8)|*(b+3))

	)

66 c⁄° 
	gcvsid
[]="$Id: ipfix_ssl.c 96 2009-03-27 19:19:27Z csc $";

70 
	g›ís¶_is_öô
 = 0;

71 
DH
 *
	gdh512
 = 
NULL
;

72 
DH
 *
	gdh1024
 = 
NULL
;

76 
DH
 *
gë_dh512
();

77 
DH
 *
gë_dh1024
();

81 
	$ùfix_s¶_›ts_‰ì
–
ùfix_s¶_›ts_t
 *
›ts
 )

83 i‡–!
›ts
 )

86 i‡(
›ts
->
ˇfûe
Ë
	`‰ì
(opts->cafile);

87 i‡(
›ts
->
ˇdú
Ë
	`‰ì
(opts->cadir);

88 i‡(
›ts
->
keyfûe
Ë
	`‰ì
(opts->keyfile);

89 i‡(
›ts
->
˚πfûe
Ë
	`‰ì
(opts->certfile);

90 
	`‰ì
–
›ts
 );

91 
	}
}

93 
	$ùfix_s¶_›ts_√w
–
ùfix_s¶_›ts_t
 **
s¶_›ts
,

94 
ùfix_s¶_›ts_t
 *
vÆs
 )

96 
ùfix_s¶_›ts_t
 *
›ts
;

98 i‡–(
›ts
=
	`ˇŒoc
–1, (
ùfix_s¶_›ts_t
))Ë==
NULL
 ) {

102 i‡–((
vÆs
->
ˇfûe
Ë&& ((
›ts
->ˇfûe=
	`°rdup
(vÆs->ˇfûe))==
NULL
))

103 || ((
vÆs
->
ˇdú
Ë&& ((
›ts
->ˇdú=
	`°rdup
(vÆs->ˇdú))==
NULL
))

104 || ((
vÆs
->
keyfûe
Ë&& ((
›ts
->keyfûe=
	`°rdup
(vÆs->keyfûe))==
NULL
))

105 || ((
vÆs
->
˚πfûe
)

106 && ((
›ts
->
˚πfûe
=
	`°rdup
(
vÆs
->˚πfûe))==
NULL
)) ) {

107 
	`ùfix_s¶_›ts_‰ì
–
›ts
 );

111 *
s¶_›ts
 = 
›ts
;

113 
	}
}

115 
	$ùfix_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
°‹e
)

117 
d©a
[256];

119 i‡(!
ok
)

121 
X509
 *
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
°‹e
);

122 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
°‹e
);

123 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
°‹e
);

125 
	`mlogf
( 1, "[%s] Error with certificateát depth: %i\n",

126 
__func__
, 
dïth
);

127 
	`X509_NAME_⁄ñöe
–
	`X509_gë_issuî_«me
(
˚π
), 
d©a
, 256);

128 
	`mlogf
–1, " issuî = %s\n", 
d©a
);

129 
	`X509_NAME_⁄ñöe
–
	`X509_gë_subje˘_«me
(
˚π
), 
d©a
, 256);

130 
	`mlogf
–1, " subje˘ = %s\n", 
d©a
);

131 
	`mlogf
–1, "Éº %i:%s\n", 
îr
, 
	`X509_vîify_˚π_îr‹_°rög
(err));

134  
ok
;

135 
	}
}

137 
	$ùfix_s¶_po°_c⁄√˘i⁄_check
(
SSL
 *
s¶
, *
ho°
)

139 
X509
 *
˚π
;

140 
X509_NAME
 *
subj
;

141 
d©a
[256];

142 
extcou¡
;

143 
ok
 = 0;

148 i‡(!(
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
s¶
)Ë|| !
ho°
)

149 
îr_occuªd
;

150 i‡((
extcou¡
 = 
	`X509_gë_ext_cou¡
(
˚π
)) > 0)

152 
i
;

154 
i
 = 0; i < 
extcou¡
; i++)

156 *
ext°r
;

157 
X509_EXTENSION
 *
ext
;

159 
ext
 = 
	`X509_gë_ext
(
˚π
, 
i
);

160 
ext°r
 = (*Ë
	`OBJ_nid2¢
(
	`OBJ_obj2nid
(
	`X509_EXTENSION_gë_obje˘
(
ext
)));

162 i‡(!
	`°rcmp
(
ext°r
, "subjectAltName"))

164 
j
;

165 *
d©a
;

166 
	`STACK_OF
(
CONF_VALUE
Ë*
vÆ
;

167 
CONF_VALUE
 *
nvÆ
;

168 
X509V3_EXT_METHOD
 *
mëh
;

169 *
ext_°r
 = 
NULL
;

171 i‡(!(
mëh
 = 
	`X509V3_EXT_gë
(
ext
)))

173 
d©a
 = 
ext
->
vÆue
->data;

175 #i‡(
OPENSSL_VERSION_NUMBER
 > 0x00907000L)

176 i‡(
mëh
->
ô
)

177 
ext_°r
 = 
	`ASN1_ôem_d2i
(
NULL
, &
d©a
, 
ext
->
vÆue
->
Àngth
,

178 
	`ASN1_ITEM_±r
(
mëh
->
ô
));

180 
ext_°r
 = 
mëh
->
	`d2i
(
NULL
, &
d©a
, 
ext
->
vÆue
->
Àngth
);

182 
ext_°r
 = 
mëh
->
	`d2i
(
NULL
, &
d©a
, 
ext
->
vÆue
->
Àngth
);

184 
vÆ
 = 
mëh
->
	`i2v
(mëh, 
ext_°r
, 
NULL
);

185 
j
 = 0; j < 
	`sk_CONF_VALUE_num
(
vÆ
); j++)

187 
nvÆ
 = 
	`sk_CONF_VALUE_vÆue
(
vÆ
, 
j
);

188 i‡(!
	`°rcmp
(
nvÆ
->
«me
, "DNS"Ë&& !°rcmp“vÆ->
vÆue
, 
ho°
))

190 
ok
 = 1;

195 i‡(
ok
)

200 i‡(!
ok
 && (
subj
 = 
	`X509_gë_subje˘_«me
(
˚π
)) &&

201 
	`X509_NAME_gë_ãxt_by_NID
(
subj
, 
NID_comm⁄Name
, 
d©a
, 256) > 0)

203 
d©a
[255] = 0;

204 i‡(
	`°rˇ£cmp
(
d©a
, 
ho°
) != 0)

205 
îr_occuªd
;

208 
	`X509_‰ì
(
˚π
);

209  
	`SSL_gë_vîify_ªsu…
(
s¶
);

211 
îr_occuªd
:

212 i‡(
˚π
)

213 
	`X509_‰ì
(
˚π
);

214  
X509_V_ERR_APPLICATION_VERIFICATION
;

215 
	}
}

217 
	$ùfix_s¶_öô_c⁄
–
SSL
 *
c⁄
 )

219 
FILE
 *
mlog_Â
;

220 
i
;

221 *
°r
;

222 
vîify_îr‹
;

223 
buf
[100];

225 i‡((
i
=
	`SSL_ac˚±
(
c⁄
)) <= 0) {

226 i‡(
	`BIO_sock_should_ªåy
(
i
)) {

227 
	`mlogf
( 0, "[ipfix_ssl_init] DELAY\n");

231 
	`mlogf
( 0, "[ipfix_ssl_init] ERROR\n");

232 
vîify_îr‹
=
	`SSL_gë_vîify_ªsu…
–
c⁄
 );

233 i‡(
vîify_îr‹
 !
X509_V_OK
) {

234 
	`mlogf
( 0, "[ipfix_ssl_init] verifyÉrror: %s\n",

235 
	`X509_vîify_˚π_îr‹_°rög
(
vîify_îr‹
));

238 
	`ERR_¥öt_îr‹s_Â
–
mlog_Â
 );

243 i‡–
mlog_vÀvñ
 ) {

244 
	`PEM_wrôe_SSL_SESSION
–
mlog_Â
, 
	`SSL_gë_£ssi⁄
(
c⁄
));

246 i‡–
	`SSL_gë_sh¨ed_cùhîs
(
c⁄
, 
buf
,  bufË!
NULL
)

247 
	`mlogf
–3, "[ùfix] Sh¨ed cùhîs:%s\n", 
buf
);

248 
°r
=(*)
	`SSL_CIPHER_gë_«me
–
	`SSL_gë_cuºít_cùhî
(
c⁄
) );

249 
	`mlogf
–3, "[ùfix] CIPHER i†%s\n",(
°r
 !
NULL
)?str:"(NONE)");

250 i‡(
	`SSL_˘æ
(
c⁄
,
SSL_CTRL_GET_FLAGS
,0,
NULL
) &

251 
TLS1_FLAGS_TLS_PADDING_BUG
)

252 
	`mlogf
( 1, "[ipfix] Peer has incorrect TLSv1 blockÖadding\n");

256 
	}
}

258 
DH
 *
	$lﬂd_dh∑øm
–*
dhfûe
 )

260 
DH
 *
ªt
=
NULL
;

261 
BIO
 *
bio
;

263 i‡((
bio
=
	`BIO_√w_fûe
(
dhfûe
,"r")Ë=
NULL
)

264 
îr
;

265 
ªt
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
,
NULL
,NULL,NULL);

267 
îr
:

268 i‡(
bio
 !
NULL
)

269 
	`BIO_‰ì
(
bio
);

271  
ªt
;

272 
	}
}

274 
	$öô_dh∑øms
( )

276 i‡–(
dh512
==
NULL
)

277 && ((
dh512
=
	`lﬂd_dh∑øm
("dh512.≥m")Ë==
NULL
) ) {

278 
dh512
 = 
	`gë_dh512
();

281 i‡–(
dh1024
==
NULL
)

282 && ((
dh1024
=
	`lﬂd_dh∑øm
("dh1024.≥m")Ë==
NULL
) ) {

283 
dh1024
 = 
	`gë_dh1024
();

285 
	}
}

287 
DH
 *
	$ùfix_s¶_tmp_dh_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
, 
keyÀngth
)

289 
DH
 *
ªt
=
NULL
;

291 
keyÀngth
) {

293 
ªt
 = 
dh512
;

298 
ªt
 = 
dh1024
;

301  
ªt
;

302 
	}
}

304 
	$ùfix_s¶_£tup_˘x
–
SSL_CTX
 **
s¶_˘x
,

305 
SSL_METHOD
 *
mëhod
,

306 
ùfix_s¶_›ts_t
 *
s¶_dëaûs
 )

308 
SSL_CTX
 *
˘x
;

309 
buf„r
[
PATH_MAX
];

311 i‡–((
˘x
=
	`SSL_CTX_√w
(
mëhod
)Ë==
NULL
 )

312 || (
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
–
˘x
, 
s¶_dëaûs
->
ˇfûe
,

313 
s¶_dëaûs
->
ˇdú
 ) != 1)) {

314 
	`mlogf
( 0, "[ipfix]ÉrrorÜoading ca fileánd/or directory "

315 "(cwd=%s,fûe=%s): %s\n", 
	`gëcwd
(
buf„r
, (buffer)),

316 
s¶_dëaûs
->
ˇfûe
, 
	`°ªº‹
(
î∫o
) );

317 
îr
;

320 i‡–
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
˘x
) != 1) {

321 
	`mlogf
( 0, "[ipfix]ÉrrorÜoading default CA fileánd/or dir\n");

322 
îr
;

325 i‡–
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
˘x
, 
s¶_dëaûs
->
˚πfûe
) != 1) {

326 
	`mlogf
( 0, "[ipfix]ÉrrorÜoading certificate from file");

327 
îr
;

330 i‡–
	`SSL_CTX_u£_Priv©eKey_fûe
–
˘x
, 
s¶_dëaûs
->
keyfûe
,

331 
SSL_FILETYPE_PEM
 ) != 1) {

332 
	`mlogf
( 0, "[ipfix] ErrorÜoadingÖrivate key from file: %s\n",

333 
s¶_dëaûs
->
keyfûe
 );

334 
îr
;

337 *
s¶_˘x
 = 
˘x
;

340 
îr
:

341 
	`SSL_CTX_‰ì
–
˘x
 );

343 
	}
}

347 
	$ùfix_s¶_£tup_˛õ¡_˘x
–
SSL_CTX
 **
s¶_˘x
,

348 
SSL_METHOD
 *
mëhod
,

349 
ùfix_s¶_›ts_t
 *
s¶_dëaûs
 )

351 
SSL_CTX
 *
˘x
;

353 i‡–
	`ùfix_s¶_£tup_˘x
–&
˘x
, 
mëhod
?mëhod:
	`SSLv23_mëhod
(),

354 
s¶_dëaûs
 ) <0 )

357 
	`SSL_CTX_£t_vîify
–
˘x
, 
SSL_VERIFY_PEER
,

358 
ùfix_s¶_vîify_ˇŒback
);

359 
	`SSL_CTX_£t_vîify_dïth
–
˘x
, 4);

360 
	`SSL_CTX_£t_›ti⁄s
–
˘x
, 
SSL_OP_ALL
|
SSL_OP_NO_SSLv2
);

361 i‡(
	`SSL_CTX_£t_cùhî_li°
–
˘x
, 
CIPHER_LIST
) != 1) {

362 
	`mlogf
( 0, "[ipfix] Error setting cipherÜist (no valid ciphers)");

363 
îr
;

366 *
s¶_˘x
 = 
˘x
;

369 
îr
:

370 
	`SSL_CTX_‰ì
–
˘x
 );

372 
	}
}

376 
	$ùfix_s¶_£tup_£rvî_˘x
–
SSL_CTX
 **
s¶_˘x
,

377 
SSL_METHOD
 *
mëhod
,

378 
ùfix_s¶_›ts_t
 *
s¶_dëaûs
 )

380 
SSL_CTX
 *
˘x
;

382 i‡–
	`ùfix_s¶_£tup_˘x
–&
˘x
, 
mëhod
?mëhod:
	`SSLv23_mëhod
(),

383 
s¶_dëaûs
 ) <0 )

386 
	`SSL_CTX_£t_vîify
–
˘x
, 
SSL_VERIFY_PEER
|
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
,

387 
ùfix_s¶_vîify_ˇŒback
 );

388 
	`SSL_CTX_£t_vîify_dïth
–
˘x
, 4 );

389 
	`SSL_CTX_£t_›ti⁄s
–
˘x
, 
SSL_OP_ALL
 | 
SSL_OP_NO_SSLv2
 |

390 
SSL_OP_SINGLE_DH_USE
);

391 i‡(!
dh512
 || !
dh1024
)

392 
	`öô_dh∑øms
();

393 
	`SSL_CTX_£t_tmp_dh_ˇŒback
–
˘x
, 
ùfix_s¶_tmp_dh_ˇŒback
 );

394 i‡(
	`SSL_CTX_£t_cùhî_li°
–
˘x
, 
CIPHER_LIST
) != 1) {

395 
	`mlogf
( 0, "[ipfix]Érror setting cipherÜist (no valid ciphers)");

396 
îr
;

399 *
s¶_˘x
 = 
˘x
;

402 
îr
:

403 
	`SSL_CTX_‰ì
–
˘x
 );

405 
	}
}

	@libipfix_110224/lib/ipfix_ssl.h

31 #i‚de‡
IPFIX_SSL_H


32 
	#IPFIX_SSL_H


	)

34 
	~<›ís¶/bio.h
>

35 
	~<›ís¶/îr.h
>

36 
	~<›ís¶/ønd.h
>

37 
	~<›ís¶/s¶.h
>

38 
	~<›ís¶/x509v3.h
>

40 
	#CIPHER_LIST
 "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH"

	)

42 
›ís¶_is_öô
;

44 
ùfix_s¶_›ts_‰ì
–
ùfix_s¶_›ts_t
 *
›ts
 );

45 
ùfix_s¶_›ts_√w
–
ùfix_s¶_›ts_t
 **
›ts
,

46 
ùfix_s¶_›ts_t
 *
vÆs
 );

47 
ùfix_s¶_£tup_˛õ¡_˘x
–
SSL_CTX
 **
˘x
,

48 
SSL_METHOD
 *
mëhod
,

49 
ùfix_s¶_›ts_t
 *
vÆs
 );

50 
ùfix_s¶_£tup_£rvî_˘x
–
SSL_CTX
 **
˘x
,

51 
SSL_METHOD
 *
mëhod
,

52 
ùfix_s¶_›ts_t
 *
vÆs
 );

53 
ùfix_s¶_po°_c⁄√˘i⁄_check
–
SSL
 *
s¶
, *
ho°
 );

	@libipfix_110224/libmisc/getopt.c

24 #i‚de‡
_NO_PROTO


25 
	#_NO_PROTO


	)

28 #ifde‡
HAVE_CONFIG_H


29 
	~<c⁄fig.h
>

31 #i‡!
deföed
 
__STDC__
 || !__STDC__

35 c⁄°

	)

40 
	~<°dio.h
>

50 
	#GETOPT_INTERFACE_VERSION
 2

	)

51 #i‡!
deföed
 
_LIBC
 && deföed 
__GLIBC__
 && __GLIBC__ >= 2

52 
	~<gnu-vîsi⁄s.h
>

53 #i‡
_GNU_GETOPT_INTERFACE_VERSION
 =
GETOPT_INTERFACE_VERSION


54 
	#ELIDE_CODE


	)

58 #i‚de‡
ELIDE_CODE


63 #ifdef 
__GNU_LIBRARY__


66 
	~<°dlib.h
>

67 
	~<uni°d.h
>

70 #ifde‡
VMS


71 
	~<unixlib.h
>

72 #i‡
HAVE_STRING_H
 - 0

73 
	~<°rög.h
>

77 #i‚de‡
_


80 #ifde‡
HAVE_LIBINTL_H


81 
	~<liböé.h
>

82 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

84 
	#_
(
msgid
Ë(msgid)

	)

102 
	~"gë›t.h
"

110 *
	g›èrg
;

125 
	g›töd
 = 1;

131 
	g__gë›t_öôülized
;

140 *
	g√xtch¨
;

145 
	g›ãº
 = 1;

151 
	g›t›t
 = '?';

184 
	mREQUIRE_ORDER
, 
	mPERMUTE
, 
	mRETURN_IN_ORDER


185 } 
	g‹dîög
;

188 *
	gposixly_c‹ª˘
;

190 #ifdef 
__GNU_LIBRARY__


195 
	~<°rög.h
>

196 
	#my_ödex
 
°rchr


	)

199 #i‡
HAVE_STRING_H


200 
	~<°rög.h
>

202 
	~<°rögs.h
>

208 #i‚de‡
gëív


209 *
gëív
 ();

213 
	$my_ödex
 (
°r
, 
chr
)

214 c⁄° *
°r
;

215 
chr
;

217 *
°r
)

219 i‡(*
°r
 =
chr
)

220  (*Ë
°r
;

221 
°r
++;

224 
	}
}

228 #ifde‡
__GNUC__


231 #i‡(!
deföed
 
__STDC__
 || !__STDC__Ë&& !deföed 
°æí


234 
°æí
 (const *);

246 
	gfú°_n⁄›t
;

247 
	gœ°_n⁄›t
;

249 #ifde‡
_LIBC


254 *
__gë›t_n⁄›ti⁄_Êags
;

256 
	gn⁄›ti⁄_Êags_max_Àn
;

257 
	gn⁄›ti⁄_Êags_Àn
;

259 
	g‹igöÆ_¨gc
;

260 *c⁄° *
	g‹igöÆ_¨gv
;

266 
__©åibuã__
 ((
unu£d
))

267 
	$°‹e_¨gs_™d_ív
 (
¨gc
, *c⁄° *
¨gv
)

271 
‹igöÆ_¨gc
 = 
¨gc
;

272 
‹igöÆ_¨gv
 = 
¨gv
;

273 
	}
}

274 #ifde‡
ãxt_£t_ñemít


275 
ãxt_£t_ñemít
 (
__libc_suböô
, 
°‹e_¨gs_™d_ív
);

278 
	#SWAP_FLAGS
(
ch1
, 
ch2
) \

279 i‡(
n⁄›ti⁄_Êags_Àn
 > 0) \

281 
__tmp
 = 
__gë›t_n⁄›ti⁄_Êags
[
ch1
]; \

282 
__gë›t_n⁄›ti⁄_Êags
[
ch1
] = __gë›t_n⁄›ti⁄_Êags[
ch2
]; \

283 
__gë›t_n⁄›ti⁄_Êags
[
ch2
] = 
__tmp
; \

284 }

	)

286 
	#SWAP_FLAGS
(
ch1
, 
ch2
)

	)

298 #i‡
deföed
 
__STDC__
 && __STDC__

299 
exch™ge
 (**);

303 
	$exch™ge
 (
¨gv
)

304 **
¨gv
;

306 
bŸtom
 = 
fú°_n⁄›t
;

307 
middÀ
 = 
œ°_n⁄›t
;

308 
t›
 = 
›töd
;

309 *
ãm
;

316 #ifde‡
_LIBC


320 i‡(
n⁄›ti⁄_Êags_Àn
 > 0 && 
t›
 >
n⁄›ti⁄_Êags_max_Àn
)

324 *
√w_°r
 = 
	`mÆloc
 (
t›
 + 1);

325 i‡(
√w_°r
 =
NULL
)

326 
n⁄›ti⁄_Êags_Àn
 = 
n⁄›ti⁄_Êags_max_Àn
 = 0;

329 
	`mem£t
 (
	`__memp˝y
 (
√w_°r
, 
__gë›t_n⁄›ti⁄_Êags
,

330 
n⁄›ti⁄_Êags_max_Àn
),

331 '\0', 
t›
 + 1 - 
n⁄›ti⁄_Êags_max_Àn
);

332 
n⁄›ti⁄_Êags_max_Àn
 = 
t›
 + 1;

333 
__gë›t_n⁄›ti⁄_Êags
 = 
√w_°r
;

338 
t›
 > 
middÀ
 && middÀ > 
bŸtom
)

340 i‡(
t›
 - 
middÀ
 > middÀ - 
bŸtom
)

343 
Àn
 = 
middÀ
 - 
bŸtom
;

344 
i
;

347 
i
 = 0; i < 
Àn
; i++)

349 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

350 
¨gv
[
bŸtom
 + 
i
] =árgv[
t›
 - (
middÀ
 - bottom) + i];

351 
¨gv
[
t›
 - (
middÀ
 - 
bŸtom
Ë+ 
i
] = 
ãm
;

352 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
t›
 - (
middÀ
 - bottom) + i);

355 
t›
 -
Àn
;

360 
Àn
 = 
t›
 - 
middÀ
;

361 
i
;

364 
i
 = 0; i < 
Àn
; i++)

366 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

367 
¨gv
[
bŸtom
 + 
i
] =árgv[
middÀ
 + i];

368 
¨gv
[
middÀ
 + 
i
] = 
ãm
;

369 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
middÀ
 + i);

372 
bŸtom
 +
Àn
;

378 
fú°_n⁄›t
 +(
›töd
 - 
œ°_n⁄›t
);

379 
œ°_n⁄›t
 = 
›töd
;

380 
	}
}

384 #i‡
deföed
 
__STDC__
 && __STDC__

385 c⁄° *
_gë›t_öôülize
 (, *const *, const *);

388 
	$_gë›t_öôülize
 (
¨gc
, 
¨gv
, 
›t°rög
)

389 
¨gc
;

390 *c⁄° *
¨gv
;

391 c⁄° *
›t°rög
;

397 
fú°_n⁄›t
 = 
œ°_n⁄›t
 = 
›töd
;

399 
√xtch¨
 = 
NULL
;

401 
posixly_c‹ª˘
 = 
	`gëív
 ("POSIXLY_CORRECT");

405 i‡(
›t°rög
[0] == '-')

407 
‹dîög
 = 
RETURN_IN_ORDER
;

408 ++
›t°rög
;

410 i‡(
›t°rög
[0] == '+')

412 
‹dîög
 = 
REQUIRE_ORDER
;

413 ++
›t°rög
;

415 i‡(
posixly_c‹ª˘
 !
NULL
)

416 
‹dîög
 = 
REQUIRE_ORDER
;

418 
‹dîög
 = 
PERMUTE
;

420 #ifde‡
_LIBC


421 i‡(
posixly_c‹ª˘
 =
NULL


422 && 
¨gc
 =
‹igöÆ_¨gc
 && 
¨gv
 =
‹igöÆ_¨gv
)

424 i‡(
n⁄›ti⁄_Êags_max_Àn
 == 0)

426 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL


427 || 
__gë›t_n⁄›ti⁄_Êags
[0] == '\0')

428 
n⁄›ti⁄_Êags_max_Àn
 = -1;

431 c⁄° *
‹ig_°r
 = 
__gë›t_n⁄›ti⁄_Êags
;

432 
Àn
 = 
n⁄›ti⁄_Êags_max_Àn
 = 
	`°æí
 (
‹ig_°r
);

433 i‡(
n⁄›ti⁄_Êags_max_Àn
 < 
¨gc
)

434 
n⁄›ti⁄_Êags_max_Àn
 = 
¨gc
;

435 
__gë›t_n⁄›ti⁄_Êags
 =

436 (*Ë
	`mÆloc
 (
n⁄›ti⁄_Êags_max_Àn
);

437 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL
)

438 
n⁄›ti⁄_Êags_max_Àn
 = -1;

440 
	`mem£t
 (
	`__memp˝y
 (
__gë›t_n⁄›ti⁄_Êags
, 
‹ig_°r
, 
Àn
),

441 '\0', 
n⁄›ti⁄_Êags_max_Àn
 - 
Àn
);

444 
n⁄›ti⁄_Êags_Àn
 = 
n⁄›ti⁄_Êags_max_Àn
;

447 
n⁄›ti⁄_Êags_Àn
 = 0;

450  
›t°rög
;

451 
	}
}

510 
	$_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›t°rög
, 
l⁄g›ts
, 
l⁄göd
, 
l⁄g_⁄ly
)

511 
¨gc
;

512 *c⁄° *
¨gv
;

513 c⁄° *
›t°rög
;

514 c⁄° 
›ti⁄
 *
l⁄g›ts
;

515 *
l⁄göd
;

516 
l⁄g_⁄ly
;

518 
›èrg
 = 
NULL
;

520 i‡(
›töd
 =0 || !
__gë›t_öôülized
)

522 i‡(
›töd
 == 0)

523 
›töd
 = 1;

524 
›t°rög
 = 
	`_gë›t_öôülize
 (
¨gc
, 
¨gv
, optstring);

525 
__gë›t_öôülized
 = 1;

532 #ifde‡
_LIBC


533 
	#NONOPTION_P
 (
¨gv
[
›töd
][0] != '-' ||árgv[optind][1] == '\0' \

534 || (
›töd
 < 
n⁄›ti⁄_Êags_Àn
 \

535 && 
__gë›t_n⁄›ti⁄_Êags
[
›töd
] ='1'))

	)

537 
	#NONOPTION_P
 (
¨gv
[
›töd
][0] !'-' ||árgv[›töd][1] ='\0')

	)

540 i‡(
√xtch¨
 =
NULL
 || *nextchar == '\0')

546 i‡(
œ°_n⁄›t
 > 
›töd
)

547 
œ°_n⁄›t
 = 
›töd
;

548 i‡(
fú°_n⁄›t
 > 
›töd
)

549 
fú°_n⁄›t
 = 
›töd
;

551 i‡(
‹dîög
 =
PERMUTE
)

556 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
 &&Üa°_n⁄›à!
›töd
)

557 
	`exch™ge
 ((**Ë
¨gv
);

558 i‡(
œ°_n⁄›t
 !
›töd
)

559 
fú°_n⁄›t
 = 
›töd
;

564 
›töd
 < 
¨gc
 && 
NONOPTION_P
)

565 
›töd
++;

566 
œ°_n⁄›t
 = 
›töd
;

574 i‡(
›töd
 !
¨gc
 && !
	`°rcmp
 (
¨gv
[optind], "--"))

576 
›töd
++;

578 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
 &&Üa°_n⁄›à!
›töd
)

579 
	`exch™ge
 ((**Ë
¨gv
);

580 i‡(
fú°_n⁄›t
 =
œ°_n⁄›t
)

581 
fú°_n⁄›t
 = 
›töd
;

582 
œ°_n⁄›t
 = 
¨gc
;

584 
›töd
 = 
¨gc
;

590 i‡(
›töd
 =
¨gc
)

594 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
)

595 
›töd
 = 
fú°_n⁄›t
;

602 i‡(
NONOPTION_P
)

604 i‡(
‹dîög
 =
REQUIRE_ORDER
)

606 
›èrg
 = 
¨gv
[
›töd
++];

613 
√xtch¨
 = (
¨gv
[
›töd
] + 1

614 + (
l⁄g›ts
 !
NULL
 && 
¨gv
[
›töd
][1] == '-'));

632 i‡(
l⁄g›ts
 !
NULL


633 && (
¨gv
[
›töd
][1] == '-'

634 || (
l⁄g_⁄ly
 && (
¨gv
[
›töd
][2] || !
	`my_ödex
 (
›t°rög
,árgv[optind][1])))))

636 *
«mìnd
;

637 c⁄° 
›ti⁄
 *
p
;

638 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

639 
exa˘
 = 0;

640 
ambig
 = 0;

641 
ödfound
 = -1;

642 
›ti⁄_ödex
;

644 
«mìnd
 = 
√xtch¨
; *nameend && *nameend != '=';Çameend++)

649 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

650 i‡(!
	`°∫cmp
 (
p
->
«me
, 
√xtch¨
, 
«mìnd
 -Çextchar))

652 i‡((Ë(
«mìnd
 - 
√xtch¨
)

653 =(Ë
	`°æí
 (
p
->
«me
))

656 
pfound
 = 
p
;

657 
ödfound
 = 
›ti⁄_ödex
;

658 
exa˘
 = 1;

661 i‡(
pfound
 =
NULL
)

664 
pfound
 = 
p
;

665 
ödfound
 = 
›ti⁄_ödex
;

669 
ambig
 = 1;

672 i‡(
ambig
 && !
exa˘
)

674 i‡(
›ãº
)

675 
	`Ârötf
 (
°dîr
, 
	`_
("%s: option `%s' isámbiguous\n"),

676 
¨gv
[0],árgv[
›töd
]);

677 
√xtch¨
 +
	`°æí
 (nextchar);

678 
›töd
++;

679 
›t›t
 = 0;

683 i‡(
pfound
 !
NULL
)

685 
›ti⁄_ödex
 = 
ödfound
;

686 
›töd
++;

687 i‡(*
«mìnd
)

691 i‡(
pfound
->
has_¨g
)

692 
›èrg
 = 
«mìnd
 + 1;

695 i‡(
›ãº
)

697 i‡(
¨gv
[
›töd
 - 1][1] == '-')

699 
	`Ârötf
 (
°dîr
,

700 
	`_
("%s: option `--%s' doesn'tállowánárgument\n"),

701 
¨gv
[0], 
pfound
->
«me
);

704 
	`Ârötf
 (
°dîr
,

705 
	`_
("%s: option `%c%s' doesn'tállowánárgument\n"),

706 
¨gv
[0],árgv[
›töd
 - 1][0], 
pfound
->
«me
);

709 
√xtch¨
 +
	`°æí
 (nextchar);

711 
›t›t
 = 
pfound
->
vÆ
;

715 i‡(
pfound
->
has_¨g
 == 1)

717 i‡(
›töd
 < 
¨gc
)

718 
›èrg
 = 
¨gv
[
›töd
++];

721 i‡(
›ãº
)

722 
	`Ârötf
 (
°dîr
,

723 
	`_
("%s: option `%s'Ñequiresánárgument\n"),

724 
¨gv
[0],árgv[
›töd
 - 1]);

725 
√xtch¨
 +
	`°æí
 (nextchar);

726 
›t›t
 = 
pfound
->
vÆ
;

727  
›t°rög
[0] == ':' ? ':' : '?';

730 
√xtch¨
 +
	`°æí
 (nextchar);

731 i‡(
l⁄göd
 !
NULL
)

732 *
l⁄göd
 = 
›ti⁄_ödex
;

733 i‡(
pfound
->
Êag
)

735 *(
pfound
->
Êag
Ëpfound->
vÆ
;

738  
pfound
->
vÆ
;

745 i‡(!
l⁄g_⁄ly
 || 
¨gv
[
›töd
][1] == '-'

746 || 
	`my_ödex
 (
›t°rög
, *
√xtch¨
Ë=
NULL
)

748 i‡(
›ãº
)

750 i‡(
¨gv
[
›töd
][1] == '-')

752 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option `--%s'\n"),

753 
¨gv
[0], 
√xtch¨
);

756 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option `%c%s'\n"),

757 
¨gv
[0],árgv[
›töd
][0], 
√xtch¨
);

759 
√xtch¨
 = (*) "";

760 
›töd
++;

761 
›t›t
 = 0;

769 
c
 = *
√xtch¨
++;

770 *
ãmp
 = 
	`my_ödex
 (
›t°rög
, 
c
);

773 i‡(*
√xtch¨
 == '\0')

774 ++
›töd
;

776 i‡(
ãmp
 =
NULL
 || 
c
 == ':')

778 i‡(
›ãº
)

780 i‡(
posixly_c‹ª˘
)

782 
	`Ârötf
 (
°dîr
, 
	`_
("%s: illegal option -- %c\n"),

783 
¨gv
[0], 
c
);

785 
	`Ârötf
 (
°dîr
, 
	`_
("%s: invalid option -- %c\n"),

786 
¨gv
[0], 
c
);

788 
›t›t
 = 
c
;

792 i‡(
ãmp
[0] == 'W' &&Åemp[1] == ';')

794 *
«mìnd
;

795 c⁄° 
›ti⁄
 *
p
;

796 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

797 
exa˘
 = 0;

798 
ambig
 = 0;

799 
ödfound
 = 0;

800 
›ti⁄_ödex
;

803 i‡(*
√xtch¨
 != '\0')

805 
›èrg
 = 
√xtch¨
;

808 
›töd
++;

810 i‡(
›töd
 =
¨gc
)

812 i‡(
›ãº
)

815 
	`Ârötf
 (
°dîr
, 
	`_
("%s: optionÑequiresánárgument -- %c\n"),

816 
¨gv
[0], 
c
);

818 
›t›t
 = 
c
;

819 i‡(
›t°rög
[0] == ':')

820 
c
 = ':';

822 
c
 = '?';

823  
c
;

828 
›èrg
 = 
¨gv
[
›töd
++];

833 
√xtch¨
 = 
«mìnd
 = 
›èrg
; *nameend && *nameend != '=';Çameend++)

838 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

839 i‡(!
	`°∫cmp
 (
p
->
«me
, 
√xtch¨
, 
«mìnd
 -Çextchar))

841 i‡((Ë(
«mìnd
 - 
√xtch¨
Ë=
	`°æí
 (
p
->
«me
))

844 
pfound
 = 
p
;

845 
ödfound
 = 
›ti⁄_ödex
;

846 
exa˘
 = 1;

849 i‡(
pfound
 =
NULL
)

852 
pfound
 = 
p
;

853 
ödfound
 = 
›ti⁄_ödex
;

857 
ambig
 = 1;

859 i‡(
ambig
 && !
exa˘
)

861 i‡(
›ãº
)

862 
	`Ârötf
 (
°dîr
, 
	`_
("%s: option `-W %s' isámbiguous\n"),

863 
¨gv
[0],árgv[
›töd
]);

864 
√xtch¨
 +
	`°æí
 (nextchar);

865 
›töd
++;

868 i‡(
pfound
 !
NULL
)

870 
›ti⁄_ödex
 = 
ödfound
;

871 i‡(*
«mìnd
)

875 i‡(
pfound
->
has_¨g
)

876 
›èrg
 = 
«mìnd
 + 1;

879 i‡(
›ãº
)

880 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: option `-W %s' doesn'tállowánárgument\n"),

882 
¨gv
[0], 
pfound
->
«me
);

884 
√xtch¨
 +
	`°æí
 (nextchar);

888 i‡(
pfound
->
has_¨g
 == 1)

890 i‡(
›töd
 < 
¨gc
)

891 
›èrg
 = 
¨gv
[
›töd
++];

894 i‡(
›ãº
)

895 
	`Ârötf
 (
°dîr
,

896 
	`_
("%s: option `%s'Ñequiresánárgument\n"),

897 
¨gv
[0],árgv[
›töd
 - 1]);

898 
√xtch¨
 +
	`°æí
 (nextchar);

899  
›t°rög
[0] == ':' ? ':' : '?';

902 
√xtch¨
 +
	`°æí
 (nextchar);

903 i‡(
l⁄göd
 !
NULL
)

904 *
l⁄göd
 = 
›ti⁄_ödex
;

905 i‡(
pfound
->
Êag
)

907 *(
pfound
->
Êag
Ëpfound->
vÆ
;

910  
pfound
->
vÆ
;

912 
√xtch¨
 = 
NULL
;

915 i‡(
ãmp
[1] == ':')

917 i‡(
ãmp
[2] == ':')

920 i‡(*
√xtch¨
 != '\0')

922 
›èrg
 = 
√xtch¨
;

923 
›töd
++;

926 
›èrg
 = 
NULL
;

927 
√xtch¨
 = 
NULL
;

932 i‡(*
√xtch¨
 != '\0')

934 
›èrg
 = 
√xtch¨
;

937 
›töd
++;

939 i‡(
›töd
 =
¨gc
)

941 i‡(
›ãº
)

944 
	`Ârötf
 (
°dîr
,

945 
	`_
("%s: optionÑequiresánárgument -- %c\n"),

946 
¨gv
[0], 
c
);

948 
›t›t
 = 
c
;

949 i‡(
›t°rög
[0] == ':')

950 
c
 = ':';

952 
c
 = '?';

957 
›èrg
 = 
¨gv
[
›töd
++];

958 
√xtch¨
 = 
NULL
;

961  
c
;

963 
	}
}

966 
	$gë›t
 (
¨gc
, 
¨gv
, 
›t°rög
)

967 
¨gc
;

968 *c⁄° *
¨gv
;

969 c⁄° *
›t°rög
;

971  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›t°rög
,

972 (c⁄° 
›ti⁄
 *) 0,

975 
	}
}

979 #ifde‡
TEST


985 
	$maö
 (
¨gc
, 
¨gv
)

986 
¨gc
;

987 **
¨gv
;

989 
c
;

990 
digô_›töd
 = 0;

994 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

996 
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "abc:d:0123456789");

997 i‡(
c
 == -1)

1000 
c
)

1012 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

1013 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

1014 
digô_›töd
 = 
this_›ti⁄_›töd
;

1015 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

1019 
	`¥ötf
 ("optioná\n");

1023 
	`¥ötf
 ("option b\n");

1027 
	`¥ötf
 ("›ti⁄ c wôh vÆuê`%s'\n", 
›èrg
);

1034 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

1038 i‡(
›töd
 < 
¨gc
)

1040 
	`¥ötf
 ("non-option ARGV-elements: ");

1041 
›töd
 < 
¨gc
)

1042 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

1043 
	`¥ötf
 ("\n");

1046 
	`exô
 (0);

1047 
	}
}

	@libipfix_110224/libmisc/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

26 #ifdef 
__˝lu•lus


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

61 #i‚de‡
__√ed_gë›t


83 
	s›ti⁄


85 #i‡
deföed
 
__STDC__
 && __STDC__

86 c⁄° *
	g«me
;

88 *
	g«me
;

92 
	ghas_¨g
;

93 *
	gÊag
;

94 
	gvÆ
;

99 
	#no_¨gumít
 0

	)

100 
	#ªquúed_¨gumít
 1

	)

101 
	#›ti⁄Æ_¨gumít
 2

	)

129 #i‡
deföed
 
__STDC__
 && __STDC__

130 #ifde‡
__GNU_LIBRARY__


134 
gë›t
 (
__¨gc
, *c⁄° *
__¨gv
, c⁄° *
__sh‹t›ts
);

136 
gë›t
 ();

139 #i‚de‡
__√ed_gë›t


140 
gë›t_l⁄g
 (
__¨gc
, *c⁄° *
__¨gv
, c⁄° *
__sh‹t›ts
,

141 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
);

142 
gë›t_l⁄g_⁄ly
 (
__¨gc
, *c⁄° *
__¨gv
,

143 c⁄° *
__sh‹t›ts
,

144 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
);

147 
_gë›t_öã∫Æ
 (
__¨gc
, *c⁄° *
__¨gv
,

148 c⁄° *
__sh‹t›ts
,

149 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
,

150 
__l⁄g_⁄ly
);

153 
gë›t
 ();

154 #i‚de‡
__√ed_gë›t


155 
gë›t_l⁄g
 ();

156 
gë›t_l⁄g_⁄ly
 ();

158 
_gë›t_öã∫Æ
 ();

162 #ifdef 
__˝lu•lus


167 #unde‡
__√ed_gë›t


	@libipfix_110224/libmisc/getopt1.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~<c⁄fig.h
>

24 #i‡!
deföed
 
__STDC__
 || !__STDC__

28 c⁄°

	)

33 
	~"gë›t.h
"

35 
	~<°dio.h
>

45 
	#GETOPT_INTERFACE_VERSION
 2

	)

46 #i‡!
deföed
 
_LIBC
 && deföed 
__GLIBC__
 && __GLIBC__ >= 2

47 
	~<gnu-vîsi⁄s.h
>

48 #i‡
_GNU_GETOPT_INTERFACE_VERSION
 =
GETOPT_INTERFACE_VERSION


49 
	#ELIDE_CODE


	)

53 #i‚de‡
ELIDE_CODE


58 #ifde‡
__GNU_LIBRARY__


59 
	~<°dlib.h
>

62 #i‚def 
NULL


63 
	#NULL
 0

	)

67 
	$gë›t_l⁄g
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
)

68 
¨gc
;

69 *c⁄° *
¨gv
;

70 c⁄° *
›ti⁄s
;

71 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
;

72 *
›t_ödex
;

74  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
, 0);

75 
	}
}

83 
	$gë›t_l⁄g_⁄ly
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
)

84 
¨gc
;

85 *c⁄° *
¨gv
;

86 c⁄° *
›ti⁄s
;

87 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
;

88 *
›t_ödex
;

90  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
, 1);

91 
	}
}

96 #ifde‡
TEST


98 
	~<°dio.h
>

101 
	$maö
 (
¨gc
, 
¨gv
)

102 
¨gc
;

103 **
¨gv
;

105 
c
;

106 
digô_›töd
 = 0;

110 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

111 
›ti⁄_ödex
 = 0;

112 
›ti⁄
 
l⁄g_›ti⁄s
[] =

123 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "abc:d:0123456789",

124 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

125 i‡(
c
 == -1)

128 
c
)

131 
	`¥ötf
 ("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

132 i‡(
›èrg
)

133 
	`¥ötf
 (" wôhárg %s", 
›èrg
);

134 
	`¥ötf
 ("\n");

147 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

148 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

149 
digô_›töd
 = 
this_›ti⁄_›töd
;

150 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

154 
	`¥ötf
 ("optioná\n");

158 
	`¥ötf
 ("option b\n");

162 
	`¥ötf
 ("›ti⁄ c wôh vÆuê`%s'\n", 
›èrg
);

166 
	`¥ötf
 ("›ti⁄ d wôh vÆuê`%s'\n", 
›èrg
);

173 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

177 i‡(
›töd
 < 
¨gc
)

179 
	`¥ötf
 ("non-option ARGV-elements: ");

180 
›töd
 < 
¨gc
)

181 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

182 
	`¥ötf
 ("\n");

185 
	`exô
 (0);

186 
	}
}

	@libipfix_110224/libmisc/hashtable.c

3 
	~"hashèbÀ.h
"

4 
	~"hashèbÀ_¥iv©e.h
"

5 
	~<°dlib.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<m©h.h
>

15 c⁄° 
	g¥imes
[] = {

24 c⁄° 
	g¥ime_èbÀ_Àngth
 = (
¥imes
)/(primes[0]);

25 c⁄° 
	gmax_lﬂd_Á˘‹
 = 0.65;

28 
hashèbÀ
 *

29 
¸óã_hashèbÀ
(
mösize
,

30 (*
hashf
) (*),

31 (*
eqf
) (*,*))

33 
hashèbÀ
 *
h
;

34 
pödex
, 
size
 = 
¥imes
[0];

36 i‡(
mösize
 > (1u << 30)Ë 
NULL
;

38 
pödex
=0;Öödex < 
¥ime_èbÀ_Àngth
;Öindex++) {

39 i‡(
¥imes
[
pödex
] > 
mösize
Ë{ 
size
 =Örimes[pindex]; ; }

41 
h
 = (
hashèbÀ
 *)
	`mÆloc
((hashtable));

42 i‡(
NULL
 =
h
)  NULL;

43 
h
->
èbÀ
 = (
íåy
 **)
	`mÆloc
((íåy*Ë* 
size
);

44 i‡(
NULL
 =
h
->
èbÀ
Ë{ 
	`‰ì
(h);  NULL; }

45 
	`mem£t
(
h
->
èbÀ
, 0, 
size
 * (
íåy
 *));

46 
h
->
èbÀÀngth
 = 
size
;

47 
h
->
¥imeödex
 = 
pödex
;

48 
h
->
íåycou¡
 = 0;

49 
h
->
hash‚
 = 
hashf
;

50 
h
->
eq‚
 = 
eqf
;

51 
h
->
lﬂdlimô
 = (Ë
	`˚û
(
size
 * 
max_lﬂd_Á˘‹
);

52  
h
;

53 
	}
}

57 
	$hash
(
hashèbÀ
 *
h
, *
k
)

61 
i
 = 
h
->
	`hash‚
(
k
);

62 
i
 += ~(i << 9);

63 
i
 ^= ((i >> 14) | (i << 18));

64 
i
 += (i << 4);

65 
i
 ^= ((i >> 10) | (i << 22));

66  
i
;

67 
	}
}

71 
	$hashèbÀ_ex∑nd
(
hashèbÀ
 *
h
)

74 
íåy
 **
√wèbÀ
;

75 
íåy
 *
e
;

76 
íåy
 **
pE
;

77 
√wsize
, 
i
, 
ödex
;

79 i‡(
h
->
¥imeödex
 =(
¥ime_èbÀ_Àngth
 - 1))  0;

80 
√wsize
 = 
¥imes
[++(
h
->
¥imeödex
)];

82 
√wèbÀ
 = (
íåy
 **)
	`mÆloc
((íåy*Ë* 
√wsize
);

83 i‡(
NULL
 !
√wèbÀ
)

85 
	`mem£t
(
√wèbÀ
, 0, 
√wsize
 * (
íåy
 *));

88 
i
 = 0; i < 
h
->
èbÀÀngth
; i++) {

89 
NULL
 !(
e
 = 
h
->
èbÀ
[
i
])) {

90 
h
->
èbÀ
[
i
] = 
e
->
√xt
;

91 
ödex
 = 
	`ödexF‹
(
√wsize
,
e
->
h
);

92 
e
->
√xt
 = 
√wèbÀ
[
ödex
];

93 
√wèbÀ
[
ödex
] = 
e
;

96 
	`‰ì
(
h
->
èbÀ
);

97 
h
->
èbÀ
 = 
√wèbÀ
;

102 
√wèbÀ
 = (
íåy
 **)

103 
	`ªÆloc
(
h
->
èbÀ
, 
√wsize
 * (
íåy
 *));

104 i‡(
NULL
 =
√wèbÀ
Ë{ (
h
->
¥imeödex
)--;  0; }

105 
h
->
èbÀ
 = 
√wèbÀ
;

106 
	`mem£t
(
√wèbÀ
[
h
->
èbÀÀngth
], 0, 
√wsize
 - h->tablelength);

107 
i
 = 0; i < 
h
->
èbÀÀngth
; i++) {

108 
pE
 = &(
√wèbÀ
[
i
]), 
e
 = *pE;É !
NULL
;É = *pE) {

109 
ödex
 = 
	`ödexF‹
(
√wsize
,
e
->
h
);

110 i‡(
ödex
 =
i
)

112 
pE
 = &(
e
->
√xt
);

116 *
pE
 = 
e
->
√xt
;

117 
e
->
√xt
 = 
√wèbÀ
[
ödex
];

118 
√wèbÀ
[
ödex
] = 
e
;

123 
h
->
èbÀÀngth
 = 
√wsize
;

124 
h
->
lﬂdlimô
 = (Ë
	`˚û
(
√wsize
 * 
max_lﬂd_Á˘‹
);

126 
	}
}

130 
	$hashèbÀ_cou¡
(
hashèbÀ
 *
h
)

132  
h
->
íåycou¡
;

133 
	}
}

137 
	$hashèbÀ_ö£π
(
hashèbÀ
 *
h
, *
k
, *
v
)

140 
ödex
;

141 
íåy
 *
e
;

142 i‡(++(
h
->
íåycou¡
Ë> h->
lﬂdlimô
)

148 
	`hashèbÀ_ex∑nd
(
h
);

150 
e
 = (
íåy
 *)
	`mÆloc
((entry));

151 i‡(
NULL
 =
e
Ë{ --(
h
->
íåycou¡
);  0; }

152 
e
->
h
 = 
	`hash
(h,
k
);

153 
ödex
 = 
	`ödexF‹
(
h
->
èbÀÀngth
,
e
->h);

154 
e
->
k
 = k;

155 
e
->
v
 = v;

156 
e
->
√xt
 = 
h
->
èbÀ
[
ödex
];

157 
h
->
èbÀ
[
ödex
] = 
e
;

159 
	}
}

163 
	$hashèbÀ_£¨ch
(
hashèbÀ
 *
h
, *
k
)

165 
íåy
 *
e
;

166 
hashvÆue
, 
ödex
;

167 
hashvÆue
 = 
	`hash
(
h
,
k
);

168 
ödex
 = 
	`ödexF‹
(
h
->
èbÀÀngth
,
hashvÆue
);

169 
e
 = 
h
->
èbÀ
[
ödex
];

170 
NULL
 !
e
)

173 i‡((
hashvÆue
 =
e
->
h
Ë&& (h->
	`eq‚
(
k
,É->k))ËÉ->
v
;

174 
e
 =É->
√xt
;

176  
NULL
;

177 
	}
}

181 
	$hashèbÀ_ªmove
(
hashèbÀ
 *
h
, *
k
)

186 
íåy
 *
e
;

187 
íåy
 **
pE
;

188 *
v
;

189 
hashvÆue
, 
ödex
;

191 
hashvÆue
 = 
	`hash
(
h
,
k
);

192 
ödex
 = 
	`ödexF‹
(
h
->
èbÀÀngth
,
	`hash
(h,
k
));

193 
pE
 = &(
h
->
èbÀ
[
ödex
]);

194 
e
 = *
pE
;

195 
NULL
 !
e
)

198 i‡((
hashvÆue
 =
e
->
h
Ë&& (h->
	`eq‚
(
k
,É->k)))

200 *
pE
 = 
e
->
√xt
;

201 
h
->
íåycou¡
--;

202 
v
 = 
e
->v;

203 
	`‰ìkey
(
e
->
k
);

204 
	`‰ì
(
e
);

205  
v
;

207 
pE
 = &(
e
->
√xt
);

208 
e
 =É->
√xt
;

210  
NULL
;

211 
	}
}

216 
	$hashèbÀ_de°roy
(
hashèbÀ
 *
h
, 
‰ì_vÆues
)

218 
i
;

219 
íåy
 *
e
, *
f
;

220 
íåy
 **
èbÀ
 = 
h
->table;

221 i‡(
‰ì_vÆues
)

223 
i
 = 0; i < 
h
->
èbÀÀngth
; i++)

225 
e
 = 
èbÀ
[
i
];

226 
NULL
 !
e
)

227 { 
f
 = 
e
;É =É->
√xt
; 
	`‰ìkey
(f->
k
); 
	`‰ì
(f->
v
); free(f); }

232 
i
 = 0; i < 
h
->
èbÀÀngth
; i++)

234 
e
 = 
èbÀ
[
i
];

235 
NULL
 !
e
)

236 { 
f
 = 
e
;É =É->
√xt
; 
	`‰ìkey
(f->
k
); 
	`‰ì
(f); }

239 
	`‰ì
(
h
->
èbÀ
);

240 
	`‰ì
(
h
);

241 
	}
}

	@libipfix_110224/libmisc/hashtable.h

3 #i‚de‡
__HASHTABLE_CWC22_H__


4 
	#__HASHTABLE_CWC22_H__


	)

6 
	ghashèbÀ
;

74 
hashèbÀ
 *

75 
¸óã_hashèbÀ
(
mösize
,

76 (*
hashfun˘i⁄
) (*),

77 (*
key_eq_‚
) (*,*));

99 
	`hashèbÀ_ö£π
(
hashèbÀ
 *
h
, *
k
, *
v
);

101 
	#DEFINE_HASHTABLE_INSERT
(
‚«me
, 
keyty≥
, 
vÆuëy≥
) \

102 
	`‚«me
 (
hashèbÀ
 *
h
, 
keyty≥
 *
k
, 
vÆuëy≥
 *
v
) \

104  
	`hashèbÀ_ö£π
(
h
,
k
,
v
); \

105 
	}

	)
}

117 
hashèbÀ_£¨ch
(
hashèbÀ
 *
h
, *
k
);

119 
	#DEFINE_HASHTABLE_SEARCH
(
‚«me
, 
keyty≥
, 
vÆuëy≥
) \

120 
vÆuëy≥
 * 
	`‚«me
 (
hashèbÀ
 *
h
, 
keyty≥
 *
k
) \

122  (
vÆuëy≥
 *Ë(
	`hashèbÀ_£¨ch
(
h
,
k
)); \

123 }

	)

135 
hashèbÀ_ªmove
(
hashèbÀ
 *
h
, *
k
);

137 
	#DEFINE_HASHTABLE_REMOVE
(
‚«me
, 
keyty≥
, 
vÆuëy≥
) \

138 
vÆuëy≥
 * 
	`‚«me
 (
hashèbÀ
 *
h
, 
keyty≥
 *
k
) \

140  (
vÆuëy≥
 *Ë(
	`hashèbÀ_ªmove
(
h
,
k
)); \

141 }

	)

152 
hashèbÀ_cou¡
(
hashèbÀ
 *
h
);

164 
hashèbÀ_de°roy
(
hashèbÀ
 *
h
, 
‰ì_vÆues
);

	@libipfix_110224/libmisc/hashtable_private.h

3 #i‚de‡
__HASHTABLE_PRIVATE_CWC22_H__


4 
	#__HASHTABLE_PRIVATE_CWC22_H__


	)

6 
	~"hashèbÀ.h
"

9 
	síåy


11 *
	mk
, *
	mv
;

12 
	mh
;

13 
íåy
 *
	m√xt
;

16 
	shashèbÀ
 {

17 
	mèbÀÀngth
;

18 
íåy
 **
	mèbÀ
;

19 
	míåycou¡
;

20 
	mlﬂdlimô
;

21 
	m¥imeödex
;

22 (*
	mhash‚
Ë(*
	mk
);

23 (*
	meq‚
Ë(*
	mk1
, *
	mk2
);

28 
hash
(
hashèbÀ
 *
h
, *
k
);

32 
ölöe
 

33 
	$ödexF‹
(
èbÀÀngth
, 
hashvÆue
) {

34  (
hashvÆue
 % 
èbÀÀngth
);

35 
	}
};

46 
	#‰ìkey
(
X
Ë
	`‰ì
(X)

	)

	@libipfix_110224/libmisc/mhash.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<uni°d.h
>

39 
	~<˘y≥.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<°rög.h
>

42 
	~<î∫o.h
>

43 
	~<f˙é.h
>

44 
	~<sys/time.h
>

46 
	~"misc.h
"

47 
	~"hashèbÀ.h
"

49 
	$dj2b_hash_‰om_ch¨_‚
–*
°Ω
 ) {

50 * 
°r
 = (*Ë
°Ω
;

51 
hash
 = 5381;

52 
c
;

54 (
c
 = *
°r
++))

55 
hash
 = ((hash << 5Ë+ hashË+ 
c
;

56  
hash
;

57 
	}
}

59 
	$ch¨_equÆ_‚
 ( *
key1
, *
key2
 ) {

60 
l1
, 
l2
;

61 i‡((!
key1
)||(!
key2
))  0;

62 
l1
 = 
	`°æí
(
key1
);

63 
l2
 = 
	`°æí
(
key2
);

64  
l1
!=
l2
?0:
	`°∫cmp
(
key1
, 
key2
, 
	`°æí
(key1))==0;

65 
	}
}

67 
	$öôGlobÆs
() {

68 
ht_globÆs
 = 
	`¸óã_hashèbÀ
(16, 
dj2b_hash_‰om_ch¨_‚
, 
ch¨_equÆ_‚
);

69 
	}
}

71 * 
	$£tGlobÆ
(*
key
, *
vÆue
) {

72 i‡(! 
	`hashèbÀ_ö£π
(
ht_globÆs
, 
key
, 
vÆue
) ) {

75  
vÆue
;

76 
	}
}

78 * 
	$gëGlobÆ
(*
key
) {

79 *
found
;

80 i‡(
NULL
 =(
found
 = 
	`hashèbÀ_£¨ch
(
ht_globÆs
, 
key
) )) {

83  
found
;

84 
	}
}

86 * 
	$ªmoveGlobÆ
(*
key
) {

87 *
found
;

88 i‡(
NULL
 =(
found
 = 
	`hashèbÀ_ªmove
(
ht_globÆs
, 
key
) )) {

91  
found
;

92 
	}
}

94 
	$cou¡GlobÆs
() {

95  
	`hashèbÀ_cou¡
(
ht_globÆs
);

96 
	}
}

98 
	$‰ìGlobÆs
() {

99 
	`hashèbÀ_de°roy
(
ht_globÆs
, 1);

100 
	}
}

	@libipfix_110224/libmisc/misc.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<˘y≥.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

42 
	~<f˙é.h
>

43 
	~<sys/time.h
>

44 
	~<sys/∑øm.h
>

46 
	~"misc.h
"

50 c⁄° 
	gcvsid
[]="$Id: misc.c 1122 2010-02-24 14:32:09Z csc $";

54 #i‡!
deföed
(
HAVE_BASENAME
)

56 *
	$ba£«me
(c⁄° *
∑th
)

58 
b«me
[
MAXPATHLEN
];

59 *
ídp
, *
°¨ç
;

62 i‡(
∑th
 =
NULL
 || *path == '\0') {

63 ()
	`°r˝y
(
b«me
, ".");

64 (
b«me
);

68 
ídp
 = (*)
∑th
 + 
	`°æí
(path) - 1;

69 
ídp
 > 
∑th
 && *endp == '/')

70 
ídp
--;

73 i‡(
ídp
 =
∑th
 && *endp == '/') {

74 ()
	`°r˝y
(
b«me
, "/");

75 (
b«me
);

79 
°¨ç
 = 
ídp
;

80 
°¨ç
 > 
∑th
 && *(startp - 1) != '/')

81 
°¨ç
--;

83 i‡((
size_t
)(
ídp
 - 
°¨ç
 + 2Ë> (
b«me
)) {

84 
î∫o
 = 
ENAMETOOLONG
;

85 (
NULL
);

87 ()
	`°∫˝y
(
b«me
, 
°¨ç
, 
ídp
 - startp + 1);

88 
b«me
[
ídp
 - 
°¨ç
 + 1] = '\0';

89 (
b«me
);

90 
	}
}

92 *
	$dú«me
(c⁄° *
∑th
)

94 
b«me
[
MAXPATHLEN
];

95 *
ídp
;

98 i‡(
∑th
 =
NULL
 || *path == '\0') {

99 ()
	`°r˝y
(
b«me
, ".");

100 (
b«me
);

104 
ídp
 = (*)
∑th
 + 
	`°æí
(path) - 1;

105 
ídp
 > 
∑th
 && *endp == '/')

106 
ídp
--;

109 
ídp
 > 
∑th
 && *endp != '/')

110 
ídp
--;

113 i‡(
ídp
 =
∑th
) {

114 ()
	`°r˝y
(
b«me
, *
ídp
 == '/' ? "/" : ".");

115 (
b«me
);

118 
ídp
--;

119 } 
ídp
 > 
∑th
 && *endp == '/');

122 i‡((
size_t
)(
ídp
 - 
∑th
 + 2Ë> (
b«me
)) {

123 
î∫o
 = 
ENAMETOOLONG
;

124 (
NULL
);

126 ()
	`°∫˝y
(
b«me
, 
∑th
, 
ídp
 -Öath + 1);

127 
b«me
[
ídp
 - 
∑th
 + 1] = '\0';

128 (
b«me
);

129 
	}
}

133 #i‚de‡
HAVE_DAEMON


135 
	$d´m⁄
–
nochdú
, 
no˛o£
 )

137 
fd
;

139 
	`f‹k
()) {

145 
	`_exô
(0);

148 i‡(
	`£tsid
() == -1)

151 i‡(!
nochdú
)

152 ()
	`chdú
("/");

154 i‡(!
no˛o£
 && (
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)) != -1) {

155 ()
	`dup2
(
fd
, 
STDIN_FILENO
);

156 ()
	`dup2
(
fd
, 
STDOUT_FILENO
);

157 ()
	`dup2
(
fd
, 
STDERR_FILENO
);

158 i‡(
fd
 > 2)

159 ()
	`˛o£
(
fd
);

162 
	}
}

177 
	$wrôí
 (
fd
,

178 *
±r
,

179 
nbyãs
)

181 
∆e·
, 
nwrôãn
;

183 
∆e·
 = 
nbyãs
;

184 
∆e·
 > 0)

186 
nwrôãn
 = 
	`wrôe
(
fd
, 
±r
, 
∆e·
);

187 i‡(
nwrôãn
 <= 0)

188 (
nwrôãn
);

190 
∆e·
 -
nwrôãn
;

191 
±r
 +
nwrôãn
;

193 (
nbyãs
 - 
∆e·
);

194 
	}
}

210 #ifde‡
__STDC__


211 
	$ªad_löe
 ( 
fd
, *
±r
, 
maxÀn
)

213 
	$ªad_löe
(
fd
, 
±r
, 
maxÀn
)

214 
fd
;

215 *
±r
;

216 
maxÀn
;

219 
n
, 
rc
;

220 
c
;

222 
n
 = 1;Ç < 
maxÀn
;Ç++)

224 i‡–(
rc
 = 
	`ªad
(
fd
, &
c
, 1)) == 1)

226 *
±r
++ = 
c
;

227 i‡(
c
 == '\n')

230 } i‡(
rc
 == 0)

232 i‡(
n
 == 1)

240 *
±r
 = 0;

242 (
n
);

244 
	}
}

256 
	$ªad£À˘
 ( 
fd
, 
£c
)

258 
fd_£t
 
≥rm
;

259 
fds
, 
ªt
;

260 
timevÆ
 
timeout
;

262 
	`FD_ZERO
 (&
≥rm
);

263 
	`FD_SET
 (
fd
, &
≥rm
);

264 
fds
 = 
fd
 +1;

266 
timeout
.
tv_£c
 = 
£c
;

267 
timeout
.
tv_u£c
 = 1;

269 
ªt
 = 
	`£À˘
 (
fds
, &
≥rm
, 
NULL
, NULL, &
timeout
 );

271  (
	`FD_ISSET
(
fd
, &
≥rm
));

273 
	}
}

282 *
	$mgëtime°r
 ( 
time_t
 
t
 )

284 
time°rög
[31];

286 
	`°r·ime
–
time°rög
, 30, "%Y-%m-%d %T", 
	`loˇ…ime
–&
t
 ));

287  
time°rög
;

288 
	}
}

297 #i‚de‡
HAVE_TIMEGM


299 
	$is_À≠
(
y
)

301 
y
 += 1900;

302  (
y
 % 4) == 0 && ((y % 100) != 0 || (y % 400) == 0);

303 
	}
}

305 
time_t
 
	$timegm
 (
tm
 *tm)

307 c⁄° 
ndays
[2][12] ={

310 
time_t
 
ªs
 = 0;

311 
i
;

313 
i
 = 70; i < 
tm
->
tm_yór
; ++i)

314 
ªs
 +
	`is_À≠
(
i
) ? 366 : 365;

316 
i
 = 0; i < 
tm
->
tm_m⁄
; ++i)

317 
ªs
 +
ndays
[
	`is_À≠
(
tm
->
tm_yór
)][
i
];

318 
ªs
 +
tm
->
tm_mday
 - 1;

319 
ªs
 *= 24;

320 
ªs
 +
tm
->
tm_hour
;

321 
ªs
 *= 60;

322 
ªs
 +
tm
->
tm_mö
;

323 
ªs
 *= 60;

324 
ªs
 +
tm
->
tm_£c
;

325  
ªs
;

326 
	}
}

	@libipfix_110224/libmisc/misc.h

32 #i‚de‡
_MISC_H


33 
	#_MISC_H


	)

35 
	~<time.h
>

36 
	~<sys/time.h
>

38 
	~"c⁄fig.h
"

39 
	~"hashèbÀ.h
"

41 #ifde‡ 
__˝lu•lus


47 
mlog_vÀvñ
;

48 
FILE
 *
mlog_Â
;

50 #i‡!
deföed
(
HAVE_BASENAME
)

51 *
ba£«me
(c⁄° *
fûe
);

52 *
dú«me
 (c⁄° *
fûe
);

54 
	~<libgí.h
>

57 #i‡!
deföed
(
HAVE_DAEMON
)

58 
d´m⁄
–
nochdú
, 
no˛o£
 );

61 #i‡!
deföed
(
HAVE_TIMEGM
)

62 
time_t
 
timegm
–
tm
 *tm );

65 
wrôí
 ( 
fd
, *
±r
, 
nbyãs
);

66 
ªad_löe
 ( 
fd
, *
±r
, 
maxÀn
);

67 
ªad£À˘
 ( 
fd
, 
£c
);

69 
îr‹f
 ( 
fmt
[], ... ) 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 1, 2)));

70 
debugf
 ( 
fmt
[], ... ) 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 1, 2)));

71 
mlogf
 ( 
vîbosôy
,

72 
fmt
[], ... ) 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)));

73 
mlog_›í
 ( *
logfûe
, *
¥efix
 );

74 
mlog_˛o£
 ( );

75 
mlog_£t_vÀvñ
–
vÀvñ
 );

77 *
mgëtime°r
–
time_t
 
t
 );

81 
	#MPOLL_IN
 1

	)

82 
	#MPOLL_OUT
 2

	)

83 
	#MPOLL_EXCEPT
 4

	)

85 *
	tm±imî_t
;

86 (*
	gpˇŒback_f
)(
	tfd
, 
	tmask
, *
	t¨g
);

87 (*
	gtˇŒback_f
)(*
	t¨g
);

89 
mpﬁl_fdadd
 ( 
fd
, 
mask
, 
pˇŒback_f
 
ˇŒback
, *
¨g
 );

90 
mpﬁl_fdrm
 ( 
fd
 );

91 
m±imî_t
 
mpﬁl_timîadd
 ( 
öt32_t
 
£c
, 
tˇŒback_f
 
ˇŒback
, *
¨g
 );

92 
m±imî_t
 
mpﬁl_utimîadd
–
öt32_t
 
u£c
, 
tˇŒback_f
 
ˇŒback
, *
¨g
 );

93 
mpﬁl_timîrm
 ( 
m±imî_t
 
timî
 );

94 
mpﬁl_lo›
 ( 
timeout
 );

95 
mpﬁl_bªak
 ( );

96 
mpﬁl_˛ónup
 ( );

100 
	sm°∫ode


102 
m°∫ode
 *
	g√xt
;

103 *
	g°r
;

104 } 
	tm°∫ode_t
;

106 
m°æi°_‰ì
–
m°∫ode_t
 **
roŸ
 );

111 
hashèbÀ
 *
	ght_globÆs
;

113 
öôGlobÆs
();

114 * 
£tGlobÆ
(*
key
, *
vÆue
);

115 * 
gëGlobÆ
(*
key
);

116 * 
ªmoveGlobÆ
(*
key
);

117 
cou¡GlobÆs
();

118 
‰ìGlobÆs
();

120 #ifde‡ 
__˝lu•lus


	@libipfix_110224/libmisc/mlist.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<°d¨g.h
>

38 
	~<˘y≥.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

42 
	~<f˙é.h
>

43 
	~<sys/time.h
>

45 
	~"misc.h
"

49 
	#x‰ì
(
p
Ë{i‡(’)Ë
	`‰ì
(’));}

	)

57 c⁄° 
	gcvsid
[]="$Id: mlist.c 956 2008-10-14 10:40:12Z hir $";

65 
	$m°æi°_‰ì
–
m°∫ode_t
 **
roŸ
 )

67 
m°∫ode_t
 *
n
;

69 i‡–
roŸ
==
NULL
 )

72 
n
 = *
roŸ
;

74  
n
 ) {

75 
n
 = (*
roŸ
)->
√xt
;

76 
	`x‰ì
–(*
roŸ
)->
°r
 );

77 
	`x‰ì
–(*
roŸ
) );

78 *
roŸ
 = 
n
;

80 
	}
}

	@libipfix_110224/libmisc/mlog.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<°d¨g.h
>

39 
	~<˘y≥.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<°rög.h
>

42 
	~<î∫o.h
>

43 
	~<f˙é.h
>

44 
	~<sys/time.h
>

46 
	~"misc.h
"

54 
	gmlog_vÀvñ
 = 0;

55 
FILE
 *
	gmlog_Â
 = 
NULL
;

57 
	gtmpbuf
[4100];

61 c⁄° 
	gcvsid
[]="$Id: mlog.c 956 2008-10-14 10:40:12Z hir $";

71 
	$debugf
 ( 
fmt
[], ... )

73 #ifde‡
NODEBUG


76 
va_li°
 
¨gs
;

78 
	`va_°¨t
(
¨gs
, 
fmt
);

79 (Ë
	`v¢¥ötf
–
tmpbuf
, —mpbuf), 
fmt
, 
¨gs
 );

80 
	`va_íd
(
¨gs
);

82 
	`Ârötf
 ( 
°dîr
, "DEBUG <" );

83 
	`Ârötf
 ( 
°dîr
, "%s", 
tmpbuf
 );

84 
	`Ârötf
 ( 
°dîr
, ">\n" );

85 
	`fÊush
 ( 
°dîr
 );

87 
	}
}

94 
	$îr‹f
 ( 
fmt
[], ... )

96 
va_li°
 
¨gs
;

98 
	`va_°¨t
(
¨gs
, 
fmt
);

99 (Ë
	`v¢¥ötf
–
tmpbuf
, —mpbuf), 
fmt
, 
¨gs
 );

100 
	`va_íd
(
¨gs
);

102 
	`Ârötf
 ( 
°dîr
, "%s", 
tmpbuf
 );

103 
	}
}

111 
	$mlogf
 ( 
vÀvñ
, 
fmt
[], ... )

113 
va_li°
 
¨gs
;

115 i‡–! 
mlog_Â
 )

116 
mlog_Â
 = 
°dîr
;

117 i‡–
vÀvñ
 > 
mlog_vÀvñ
 )

120 
	`va_°¨t
(
¨gs
, 
fmt
);

121 (Ë
	`v¢¥ötf
–
tmpbuf
, —mpbuf), 
fmt
, 
¨gs
 );

122 
	`va_íd
(
¨gs
);

124 
	`Ârötf
–
mlog_Â
, "%s", 
tmpbuf
 );

125 i‡–
mlog_vÀvñ
 > 1 )

126 
	`fÊush
–
mlog_Â
 );

127 
	}
}

129 
	$mlog_›í
–*
logfûe
, *
¥efix
 )

131 i‡–
logfûe
 && ((
mlog_Â
=
	`f›í
–logfûe, "w+" )Ë==
NULL
))

133 
	`îr‹f
( "[mlog_open] cannot openÜog file <%s>, <%s>!\n",

134 
logfûe
, 
	`°ªº‹
(
î∫o
) );

135 
mlog_Â
 = 
°dîr
;

140 
	}
}

142 
	$mlog_˛o£
( )

144 i‡–
mlog_Â
 && (mlog_Â !
°dîr
) )

145 
	`f˛o£
–
mlog_Â
 );

146 
	}
}

148 
	$mlog_£t_vÀvñ
–
vÀvñ
 )

150 
mlog_vÀvñ
 = 
vÀvñ
;

151 
	}
}

	@libipfix_110224/libmisc/mlog.h

11 #i‚de‡
_MLOG_H


12 
	#_MLOG_H


	)

14 
	~<°d¨g.h
>

16 #ifde‡ 
__˝lu•lus


20 
mlog_vÀvñ
;

22 
îr‹f
 ( 
fmt
[], ... ) 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 1, 2)));

23 
debugf
 ( 
fmt
[], ... ) 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 1, 2)));

24 
mlogf
 ( 
vîbosôy
,

25 
fmt
[], ... ) 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)));

26 
mlog_›í
 ( *
logfûe
, *
¥efix
 );

27 
mlog_˛o£
 ( );

28 
mlog_£t_vÀvñ
–
vÀvñ
 );

30 #ifde‡ 
__˝lu•lus


	@libipfix_110224/libmisc/mpoll.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<uni°d.h
>

39 
	~<˘y≥.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<°rög.h
>

42 
	~<î∫o.h
>

43 
	~<f˙é.h
>

44 
	~<sys/time.h
>

46 
	~"misc.h
"

50 
	#Æloc_t
(
t
Ë(— *Ë
	`mÆloc
(—)))

	)

52 
	#Q_INSERT_HEAD
(
r
,
i
Ë({ (i)->
√xt
 =Ñ; (i)->
¥ev
 = 
NULL
; \

53 i‡(
r
Ë‘)->
¥ev
 = 
i
;Ñ = i; })

	)

54 
	#Q_INSERT_AFTER
(
r
,
i
,
a
Ë({ i‡◊Ë{ (i)->
√xt
 = (a)->next; \

55 (
i
)->
¥ev
 = 
a
; i‡(◊)->
√xt
) (a)->next->prev = i; (a)->next = i; } \

56 { (
i
)->
√xt
 = 
r
; (i)->
¥ev
 = 
NULL
; i‡‘Ë‘)->¥ev = i;Ñ = i; } })

	)

57 
	#Q_INSERT_BEFORE
(
r
,
i
,
b
Ë({ i‡(bË{ (i)->
√xt
 = b; \

58 (
i
)->
¥ev
 = (
b
)->¥ev; i‡((b)->¥evË(b)->¥ev->
√xt
 = i; 
r
 = i; \

59 (
b
)->
¥ev
 = 
i
; } { (i)->
√xt
 = 
r
; (i)->¥ev = 
NULL
; \

60 i‡(
r
Ë‘)->
¥ev
 = 
i
;Ñ = i; } })

	)

61 
	#Q_REMOVE
(
r
,
i
Ë({ i‡((i)->
√xt
Ë(i)->√xt->
¥ev
 = (i)->prev; \

62 i‡((
i
)->
¥ev
Ë(i)->¥ev->
√xt
 = (i)->√xt; 
r
 = (i)->√xt; })

	)

66 
	s_timî


68 
timevÆ
 
	mexpú©i⁄
;

69 (*
	mˇŒback
)(*
	mu£r
);

70 *
	mu£r
;

71 
_timî
 *
	m¥ev
,*
	m√xt
;

72 } 
	tmtimî_t
;

74 
	spﬁl_node


76 
pﬁl_node
 *
	m√xt
;

77 
	mªu£
;

79 
	mfd
;

80 
	mmask
;

81 
pˇŒback_f
 
	mfunc
;

82 *
	m¨g
;

83 } 
	tpﬁl_node_t
;

87 
timevÆ
 
	gg_äow
;

88 
mtimî_t
 *
	gtimîs
 = 
NULL
;

90 
pﬁl_node_t
 
	g°©ic_≤odes
[16];

91 
size_t
 
	gn°©ic_≤odes
=(
°©ic_≤odes
)/(
pﬁl_node_t
);

92 
pﬁl_node_t
 *
	gg_≤ode_‰ìli°
=
NULL
;

93 
pﬁl_node_t
 *
	gg_≤odes
=
NULL
;

94 
	gu£d≤odes
=0;

96 
	gg_fd£tupd©e
 =0;

97 
	gg_bªakÊag
 =0;

101 c⁄° 
	gcvsid
[]="$Id: mpoll.c 956 2008-10-14 10:40:12Z hir $";

105 
mtimî_t
 *
_mtimî_u°¨t
–
öt32_t
 
u£c
,

106 (*
ˇŒback
)(*
u£r
),

107 *
u£r
)

109 
mtimî_t
 *
n
,*
wÆk
,*
œ°
;

111 
n
 = 
	`Æloc_t
(
mtimî_t
);

112 
n
->
expú©i⁄
.
tv_u£c
 = 
g_äow
.tv_u£c+
u£c
;

113 
n
->
expú©i⁄
.
tv_£c
 = 
g_äow
.tv_sec;

114 
n
->
ˇŒback
 = callback;

115 
n
->
u£r
 = user;

116 
n
->
expú©i⁄
.
tv_u£c
 > 1000000) {

117 
n
->
expú©i⁄
.
tv_u£c
 -= 1000000;

118 
n
->
expú©i⁄
.
tv_£c
++;

120 
œ°
 = 
NULL
;

121 
wÆk
 = 
timîs
; wÆk; wÆk = wÆk->
√xt
)

122 i‡(
wÆk
->
expú©i⁄
.
tv_£c
 > 
n
->expiration.tv_sec ||

123 (
wÆk
->
expú©i⁄
.
tv_£c
 =
n
->expiration.tv_sec &&

124 
wÆk
->
expú©i⁄
.
tv_u£c
 > 
n
->expiration.tv_usec)) ;

125 
œ°
 = 
wÆk
;

126 i‡(
wÆk
)

127 
	`Q_INSERT_BEFORE
(
timîs
,
n
,
wÆk
);

129 
	`Q_INSERT_AFTER
(
timîs
,
n
,
œ°
);

130  
n
;

131 
	}
}

133 
mtimî_t
 *
_mtimî_°¨t
–
öt32_t
 
£c
,

134 (*
ˇŒback
)(*
¨g
),

135 *
¨g
 )

137 
mtimî_t
 *
n
, *
wÆk
, *
œ°
;

139 
n
 = 
	`Æloc_t
(
mtimî_t
);

140 
n
->
expú©i⁄
.
tv_u£c
 = 
g_äow
.tv_usec;

141 
n
->
expú©i⁄
.
tv_£c
 = 
g_äow
.tv_£¯+ 
£c
;

142 
n
->
ˇŒback
 = callback;

143 
n
->
u£r
 = 
¨g
;

145 
œ°
 = 
NULL
;

146 
wÆk
 = 
timîs
; wÆk; wÆk = wÆk->
√xt
)

147 i‡(
wÆk
->
expú©i⁄
.
tv_£c
 > 
n
->expiration.tv_sec ||

148 (
wÆk
->
expú©i⁄
.
tv_£c
 =
n
->expiration.tv_sec &&

149 
wÆk
->
expú©i⁄
.
tv_u£c
 > 
n
->expiration.tv_usec)) ;

150 
œ°
 = 
wÆk
;

151 i‡(
wÆk
)

152 
	`Q_INSERT_BEFORE
(
timîs
,
n
,
wÆk
);

154 
	`Q_INSERT_AFTER
(
timîs
,
n
,
œ°
);

155  
n
;

156 
	}
}

158 
	$_mtimî_°›
(
mtimî_t
 *
timî
)

160 
mtimî_t
 *
wÆk
;

162 
wÆk
 = 
timîs
; wÆk; wÆk = wÆk->
√xt
)

163 if–
wÆk
 =
timî
 ) {

164 
	`Q_REMOVE
(
timîs
,
timî
);

165 
	`‰ì
(
timî
);

168 
	}
}

171 
timevÆ
 *
	$_mtimî_gë√xt
()

173 
timevÆ
 
dñè
;

175 i‡(!
timîs
)

176  
NULL
;

178 
dñè
.
tv_£c
 = 
timîs
->
expú©i⁄
.tv_£c-
g_äow
.tv_sec;

179 
dñè
.
tv_u£c
 = 
timîs
->
expú©i⁄
.tv_u£c-
g_äow
.tv_usec;

180 
dñè
.
tv_u£c
 < 0)

182 
dñè
.
tv_u£c
 += 1000000;

183 
dñè
.
tv_£c
--;

185 i‡(
dñè
.
tv_£c
 < 0)

186 
dñè
.
tv_£c
 = dñè.
tv_u£c
 = 0;

188  &
dñè
;

189 
	}
}

191 
	$_mtimî_p›
(
mtimî_t
 *
timî
)

193 
	`Q_REMOVE
(
timîs
,
timî
);

194 
timî
->
	`ˇŒback
—imî->
u£r
);

195 
	`‰ì
(
timî
);

196 
	}
}

198 
	$_mtimî_£âime
( )

200 
	`gëtimeofday
(&
g_äow
,
NULL
);

201 
	}
}

203 
	$_mtimî_expúe
 ()

205 
timîs
 && (timîs->
expú©i⁄
.
tv_£c
 < 
g_äow
.tv_sec ||

206 (
timîs
->
expú©i⁄
.
tv_£c
==
g_äow
.tv_sec

207 && 
timîs
->
expú©i⁄
.
tv_u£c
 < 
g_äow
.tv_usec)))

208 
	`_mtimî_p›
(
timîs
);

209 
	}
}

211 
	$_≤ode_öô
 ( )

213 
pﬁl_node_t
 *
node
 = 
°©ic_≤odes
;

214 
i
;

216  
i
=0; i<()
n°©ic_≤odes
; i++ ) {

217 
node
->
√xt
 = 
g_≤ode_‰ìli°
;

218 
node
->
ªu£
= 1;

219 
g_≤ode_‰ìli°
 = 
node
;

220 
node
++;

222 
	}
}

224 
	$_≤ode_‰ì
 ( 
pﬁl_node_t
 *
node
 )

226 i‡–
node
->
ªu£
 ) {

227 
node
->
√xt
 = 
g_≤ode_‰ìli°
;

228 
g_≤ode_‰ìli°
 = 
node
;

231 
	`‰ì
(
node
);

233 
u£d≤odes
--;

234 
	}
}

241 
	$mpﬁl_fdadd
 ( 
fd
, 
mask
, 
pˇŒback_f
 
ˇŒback
, *
¨g
 )

243 
pﬁl_node_t
 *
node
;

247 i‡–(
g_≤ode_‰ìli°
==
NULL
Ë&& (
u£d≤odes
==0) )

248 
	`_≤ode_öô
();

250 i‡–
g_≤ode_‰ìli°
 ) {

251 
node
 = 
g_≤ode_‰ìli°
;

252 
g_≤ode_‰ìli°
 = g_≤ode_‰ìli°->
√xt
;

257 i‡–(
node
=
	`ˇŒoc
–1, (
pﬁl_node_t
))Ë==
NULL
)

259 
node
->
ªu£
 = 0;

262 
node
->
fd
 = fd;

263 
node
->
mask
 = mask;

264 
node
->
func
 = 
ˇŒback
;

265 
node
->
¨g
 =árg;

267 
node
->
√xt
 = 
g_≤odes
;

268 
g_≤odes
 = 
node
;

269 
u£d≤odes
 ++;

270 
g_fd£tupd©e
 ++;

273 
	}
}

280 
	$mpﬁl_fdrm
 ( 
fd
 )

282 
pﬁl_node_t
 *
l
, *
n
 = 
g_≤odes
;

284 
l
 = 
n
;

285  
n
 ) {

286 i‡–
n
->
fd
 == fd ) {

287 i‡–
n
==
g_≤odes
 ) {

288 
g_≤odes
 = g_≤odes->
√xt
;

291 
l
->
√xt
 = 
n
->next;

293 
	`_≤ode_‰ì
–
n
 );

296 
l
 = 
n
;

297 
n
 =Ç->
√xt
;

299 
g_fd£tupd©e
 ++;

300 
	}
}

307 
m±imî_t
 
	$mpﬁl_timîadd
 ( 
öt32_t
 
£c
, 
tˇŒback_f
 
ˇŒback
, *
¨g
 )

309 
	`_mtimî_£âime
();

310  (
m±imî_t
Ë
	`_mtimî_°¨t
–
£c
, 
ˇŒback
, 
¨g
 );

311 
	}
}

318 
m±imî_t
 
	$mpﬁl_utimîadd
 ( 
öt32_t
 
u£c
, 
tˇŒback_f
 
ˇŒback
, *
¨g
 )

320 
	`_mtimî_£âime
();

321  (
m±imî_t
Ë
	`_mtimî_u°¨t
–
u£c
, 
ˇŒback
, 
¨g
 );

322 
	}
}

329 
	$mpﬁl_timîrm
 ( 
m±imî_t
 
timî
 )

331 
	`_mtimî_°›
–(
mtimî_t
*)
timî
 );

332 
	}
}

335 
	$_cb_°›lo›
–*
¨g
 )

337 *
Êag
 = (*)
¨g
;

339 *
Êag
 = 1;

340 
	}
}

349 
	$mpﬁl_lo›
 ( 
timeout
 )

351 vﬁ©ûê
°›Êag
;

352 
mtimî_t
 *
mt°›
;

353 
fd_£t
 
r£t
, 
w£t
, 
x£t
, 
ƒ£t
, 
nw£t
, 
nx£t
;

354 
fds
, 
mask
, 
ªt
;

356 
pﬁl_node_t
 *
node
;

357 
timevÆ
 *
…
;

359 
g_fd£tupd©e
 = 1;

360 
g_bªakÊag
 = 0;

361 
fds
 = 0;

362 
°›Êag
 = 0;

363 i‡–
timeout
 > 0 ) {

364 
mt°›
 = 
	`_mtimî_°¨t
–
timeout
, 
_cb_°›lo›
, (*)&
°›Êag
 );

366 i‡–
timeout
 == 0 ) {

367 
mt°›
 = 
	`_mtimî_u°¨t
–1, 
_cb_°›lo›
, (*)&
°›Êag
 );

370  !
°›Êag
 && !
g_bªakÊag
 ) {

371 i‡–
g_fd£tupd©e
 ) {

372 
	`FD_ZERO
(&
r£t
);

373 
	`FD_ZERO
(&
w£t
);

374 
	`FD_ZERO
(&
x£t
);

375 
fds
 = 0;

376  
node
=
g_≤odes
;Çode!=
NULL
;ÇodeÚode->
√xt
 ) {

377 i‡–
node
->
fd
 >
fds
 )

378 
fds
 = 
node
->
fd
 +1;

379 i‡–
node
->
mask
 & 
MPOLL_IN
 )

380 
	`FD_SET
–
node
->
fd
, &
r£t
 );

381 i‡–
node
->
mask
 & 
MPOLL_OUT
 )

382 
	`FD_SET
–
node
->
fd
, &
w£t
 );

383 i‡–
node
->
mask
 & 
MPOLL_EXCEPT
 )

384 
	`FD_SET
–
node
->
fd
, &
x£t
 );

386 
g_fd£tupd©e
 = 0;

389 
ƒ£t
 = 
r£t
;

390 
nw£t
 = 
w£t
;

391 
nx£t
 = 
x£t
;

392 
…
=
	`_mtimî_gë√xt
();

393 
ªt
 = 
	`£À˘
–
fds
, &
ƒ£t
, &
nw£t
, &
nx£t
, 
…
 );

394 i‡(
ªt
 < 0) {

395 i‡(
î∫o
==
EINTR
)

398 
	`≥º‹
("select");

404 
	`_mtimî_£âime
();

405 
	`_mtimî_expúe
 ();

409  
node
=
g_≤odes
;Çode!=
NULL
;ÇodeÚode->
√xt
 ) {

410 
mask
 = 0;

411 i‡–
	`FD_ISSET
(
node
->
fd
, &
ƒ£t
) )

412 
mask
 |
MPOLL_IN
;

413 i‡–
	`FD_ISSET
(
node
->
fd
, &
nw£t
) )

414 
mask
 |
MPOLL_OUT
;

415 i‡–
	`FD_ISSET
(
node
->
fd
, &
nx£t
) )

416 
mask
 |
MPOLL_EXCEPT
;

418 i‡–
mask
 ) {

419 i‡–
node
->
func
 ) {

420 
node
->
	`func
–node->
fd
, 
mask
,Çode->
¨g
 );

421 i‡–
g_fd£tupd©e
 )

425 
	`mlogf
( 0, "INTERNAL ERROR:Çode %p fd=%d func=%p/%p %d\n",

426 
node
,Çode->
fd
,Çode->
func
,

427 
node
->
¨g
,Çode->
ªu£
 );

434 
	`_mtimî_£âime
();

435 
	`_mtimî_expúe
 ();

437 i‡–
timeout
 == 0 )

441 
	}
}

447 
	$mpﬁl_bªak
( )

449 
g_bªakÊag
 = 1;

450 
	}
}

455 
	$mpﬁl_˛ónup
( )

457 
pﬁl_node_t
 *
n
;

461  
u£d≤odes
 && 
g_≤odes
 ) {

462 
n
 = 
g_≤odes
;

463 
g_≤odes
 = 
n
->
√xt
;

464 
	`_≤ode_‰ì
–
n
 );

466 
g_≤ode_‰ìli°
=
NULL
;

471  
timîs
 ) {

472 
	`_mtimî_°›
–
timîs
 );

474 
	}
}

	@libipfix_110224/libmisc/mpoll.h

11 #i‚de‡
_MPOLL_H


12 
	#_MPOLL_H


	)

14 
	~<time.h
>

15 
	~<sys/time.h
>

17 #ifde‡ 
__˝lu•lus


21 
	#MPOLL_IN
 1

	)

22 
	#MPOLL_OUT
 2

	)

23 
	#MPOLL_EXCEPT
 4

	)

25 *
	tm±imî_t
;

26 (*
pˇŒback_f
)(
	tfd
, 
	tmask
, *
	t¨g
);

27 (*
tˇŒback_f
)(*
	t¨g
);

29 
mpﬁl_fdadd
 ( 
fd
, 
mask
, 
pˇŒback_f
 
ˇŒback
, *
¨g
 );

30 
mpﬁl_fdrm
 ( 
fd
 );

31 
m±imî_t
 
mpﬁl_timîadd
 ( 
öt32_t
 
u£c
, 
tˇŒback_f
 
ˇŒback
, *
¨g
 );

32 
mpﬁl_timîrm
 ( 
m±imî_t
 
timî
 );

33 
mpﬁl_lo›
 ( 
timeout
 );

34 
mpﬁl_bªak
 ( );

35 
mpﬁl_˛ónup
 ( );

37 #ifde‡ 
__˝lu•lus


	@libipfix_110224/libmisc/testmhash.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<°rög.h
>

7 
	~<î∫o.h
>

8 
	~<f˙é.h
>

9 
	~<sys/time.h
>

11 
	~"misc.h
"

13 
	$maö
() {

14 *
key
 = 
	`mÆloc
 (4),

15 *
vÆue
 = 
	`mÆloc
 (4);

16 *
ªs
;

17 
	`°∫˝y
(
key
, "foo", 4);

18 
	`°∫˝y
(
vÆue
, "bar", 4);

20 
	`¥ötf
("test 1: init\n");

21 
	`öôGlobÆs
();

23 
	`¥ötf
("test 2: count\n");

24 
	`¥ötf
("\t%i\n",
	`cou¡GlobÆs
());

26 
	`¥ötf
("ã° 3: wrôê(%s, %sË...\n", 
key
, 
vÆue
);

27 
ªs
=
	`£tGlobÆ
(
key
, 
vÆue
);

28 
	`¥ötf
("\t...%s\n", 
ªs
);

30 
	`¥ötf
("test 4: count\n");

31 
	`¥ötf
("\t%i\n",
	`cou¡GlobÆs
());

33 
ªs
=0;

34 
	`¥ötf
("test 5:Ñead foo...\n");

35 
ªs
=
	`gëGlobÆ
(
key
);

36 
	`¥ötf
("\t...%s\n", 
ªs
);

38 
ªs
=0;

39 
	`¥ötf
("test 6:Ñead other...\n");

40 
ªs
=
	`gëGlobÆ
("zip");

41 
	`¥ötf
("\t...%s\n", 
ªs
);

43 
ªs
=0;

44 
	`¥ötf
("test 7:Ñemove other...\n");

45 
ªs
=
	`ªmoveGlobÆ
("zip");

46 
	`¥ötf
("\t...%s\n", 
ªs
);

48 
	`¥ötf
("test 8: count\n");

49 
	`¥ötf
("\t%i\n",
	`cou¡GlobÆs
());

51 
ªs
=0;

52 
	`¥ötf
("test 9:Ñemove foo...\n");

53 
ªs
=
	`ªmoveGlobÆ
("foo");

54 
	`¥ötf
("\t...%s\n", 
ªs
);

56 
	`¥ötf
("test 10: count\n");

57 
	`¥ötf
("\t%i\n",
	`cou¡GlobÆs
());

59 
	`¥ötf
("test 11: freeing\n");

60 
	`‰ìGlobÆs
();

63 
	}
}

	@libipfix_110224/probe/ipflow.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

38 
	~<î∫o.h
>

39 
	~<limôs.h
>

40 
	~<time.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<√töë/ö_sy°m.h
>

43 
	~<√töë/ö.h
>

44 
	~<√töë/ù.h
>

45 #ifde‡
INET6


46 
	~<√töë/ù6.h
>

49 
	~<misc.h
>

50 
	~"ùÊow.h
"

54 
	#NODEBUG


	)

56 #i‚de‡
IPPROTO_SCTP


57 
	#IPPROTO_SCTP
 132

	)

62 c⁄° 
	gcvsid
[]="$Id: ipflow.c,v 1.3 2007/02/28 10:39:17Üuz Exp $";

66 
ùÊowöfo_t
 
	gtmpÊows
[100];

67 
ùÊowöfo_t
 *
	gÊowöfo_‰ìli°
=
NULL
;

68 
size_t
 
	g¡mpÊows
 = (
tmpÊows
Ë/ (
ùÊowöfo_t
);

69 
size_t
 
	gu£dÊows
 = 0;

73 
	$_gëÊownode
–
ùÊow_t
 *
Êows
, 
ùÊowöfo_t
 **
föfo
 )

77 i‡–
Êows
->
nÊows
 >Êows->
maxÊows
 ) {

78 *
föfo
 = 
NULL
;

84 i‡–
Êowöfo_‰ìli°
 ) {

85 *
föfo
 = 
Êowöfo_‰ìli°
;

86 
Êowöfo_‰ìli°
 = flowöfo_‰ìli°->
√xt
;

87 
u£dÊows
 ++;

88 
Êows
->
nÊows
++;

94 i‡–((*
föfo
)=
	`ˇŒoc
–1, (
ùÊowöfo_t
))Ë==
NULL
)

97 (*
föfo
)->
ªu£
 = 0;

98 
u£dÊows
 ++;

99 
Êows
->
nÊows
++;

101 
	}
}

103 
	$_‰ì_Êownode
–
ùÊowöfo_t
 *
node
 )

105 i‡–
node
->
ªu£
 ) {

106 
node
->
√xt
 = 
Êowöfo_‰ìli°
;

107 
Êowöfo_‰ìli°
 = 
node
;

110 
	`‰ì
(
node
);

112 
u£dÊows
--;

113 
	}
}

115 
	$Êow_dr›
–
ùÊow_t
 *
Êows
, 
ùÊowöfo_t
 *
Êownode
 )

117 
ùÊowöfo_t
 *
r
 = 
NULL
;

118 
ùÊowöfo_t
 *
œ°
, *
node
;

120 #ifde‡
DEBUG


121 i‡–
mlog_vÀvñ
>3 ) {

122 
	`mlogf
–4, "[ùÊow] FLOW_DROP START: %p\n", 
Êownode
 );

123 
	`ùÊow_li°Êows
–
°dîr
, 
Êows
 );

128 i‡–
Êows
->Êow†=
Êownode
 ) {

129 
Êows
->Êow†
Êownode
->
√xt
;

130 i‡–
Êows
->flows )

131 
Êows
->Êows->
¥ev
 = 
NULL
;

134 i‡–
Êownode
->
¥ev
 )

135 
Êownode
->
¥ev
->
√xt
 = flownode->next;

136 i‡–
Êownode
->
√xt
 )

137 
Êownode
->
√xt
->
¥ev
 = flownode->prev;

141 
node
 = 
Êows
->
hashèb
[
Êownode
->
hash
];

142 i‡–
node
 =
Êownode
 ) {

143 
Êows
->
hashèb
[
Êownode
->
hash
] = flownode->
√xthash
;

144 
Êows
->
nhashes
 --;

147  
œ°
=
node
;Çode!=
NULL
;ÇodeÚode->
√xthash
 ) {

148 i‡–
node
 =
Êownode
 )

150 
œ°
 = 
node
;

153 i‡–
node
 ) {

154 
œ°
->
√xthash
 = 
node
->nexthash;

155 
Êows
->
nhashes
 --;

158 
	`mlogf
( 0, "[ipflow] INTERNAL ERROR: "

160 
Êownode
->
hash
 );

161 
	`exô
(1);

165 i‡–
Êows
->
biÊows
 && 
Êownode
->
rÊow
 ) {

166 
r
 = 
Êownode
->
rÊow
;

167 
r
->
rÊow
 = 
NULL
;

170 
	`_‰ì_Êownode
–
Êownode
 );

171 
Êows
->
nÊows
--;

173 i‡–
Êows
->
biÊows
 && 
r
 ) {

175 
	`Êow_dr›
–
Êows
, 
r
 );

178 #ifde‡
DEBUG


179 i‡–
mlog_vÀvñ
>3 ) {

180 
	`mlogf
–4, "[ùÊow] FLOW_DROP END: %p\n", 
Êownode
 );

181 
	`ùÊow_li°Êows
–
°dîr
, 
Êows
 );

185 
	}
}

191 
	$Êow_öô
–
ùÊow_t
 **
Êows
, 
maxÊows
, 
biÊows
, 
timeout
 )

193 
ùÊow_t
 *
f
;

194 
nÊowbôs
 = 18;

195 
nÊows
 = (1<<
nÊowbôs
), 
i
;

197 i‡–(
Êowöfo_‰ìli°
==
NULL
Ë&& (
u£dÊows
==0) ) {

200 
ùÊowöfo_t
 *
node
 = 
tmpÊows
;

202  
i
=0; i<()
¡mpÊows
; i++ ) {

203 
node
->
√xt
 = 
Êowöfo_‰ìli°
;

204 
node
->
ªu£
= 1;

205 
Êowöfo_‰ìli°
 = 
node
;

206 
node
++;

210 i‡–(
f
=
	`ˇŒoc
–1, (
ùÊow_t
Ë)Ë==
NULL
 )

213 
f
->
√xtÊowid
 = 0;

214 
f
->
‰ags
 = 
NULL
;

215 
f
->
maxÊows
 = maxflows?maxflows:5000;

216 
f
->
timeout
 =Åimeout;

217 
f
->
biÊows
 = biflows?1:0;

218 *
Êows
 = 
f
;

222 
f
->
hashsize
 = 
nÊows
;

223 i‡–(
f
->
hashèb
=
	`ˇŒoc
–f->
hashsize
, (
ùÊowöfo_t
*))Ë==
NULL
)

224 
îr
;

228 
îr
:

229 
	`‰ì
–
f
 );

231 
	}
}

238 
	$Êow_˛o£
–
ùÊow_t
 *
f
 )

240 
ùÊowöfo_t
 *
l
, *
n
 = 
f
->
Êows
;

242 i‡–!
f
 )

245  
n
 ) {

246 
l
 = 
n
;

247 
n
 =Ç->
√xt
;

248 
	`_‰ì_Êownode
–
l
 );

250 
	`‰ì
–
f
->
hashèb
 );

251 
	`‰ì
–
f
 );

252 
	}
}

258 
	$Êow_ˇlchash
–
ùÊow_t
 *
Êows
, 
ùÊow_ñems_t
 *
ñems
, 
uöt32_t
 *
hash
 )

260 
uöt32_t
 
id
=0, 
i
;

262 i‡–
ñems
->
vîsi⁄
 == 6 ) {

263  
id
=0, 
i
=0; i<16; i+=2 ) {

264 
id
 +((
ñems
->
ßddr
[
i
] *256) +Élems->saddr[i+1]);

265 
id
 +((
ñems
->
daddr
[
i
+1] *256) +Élems->daddr[i]);

269  
i
=0; i<4; i+=2 ) {

270 
id
 +((
ñems
->
ßddr
[
i
] *256) +Élems->saddr[i+1]);

271 
id
 +((
ñems
->
daddr
[
i
+1] *256) +Élems->daddr[i]);

275 
id
 +(
ñems
->
•‹t
 +ÉÀms->
dp‹t
 +ÉÀms->
¥Ÿocﬁ
 +ÉÀms->
tos
);

277 *
hash
 = 
id
 % 
Êows
->
hashsize
;

279 
	}
}

291 
	$Êow_upd©e
–
ùÊow_t
 *
Êows
, 
ùÊow_ñems_t
 *
ñems
,

292 
timevÆ
 *
tv
, 
size_t
 
nbyãs
,

293 
ùÊowöfo_t
 **
Êowöfo
 )

295 
uöt32_t
 
hash
=0, 
√wÊow_f
=0;

296 
ùÊowöfo_t
 *
föfo
=
NULL
;

298 i‡–
ñems
->
‰ag_off
 ) {

301 
ù‰ag_öfo_t
 *
n
 = 
Êows
->
‰ags
;

303  
n
 ) {

304 i‡–(
n
->
ùid
==
ñems
->ipid)

305 && (
	`memcmp
(
n
->
thisÊow
->
ßddr
, 
ñems
->saddr, 4) ==0 ) ) {

308 
n
->
byãs_gŸ
 +
ñems
->
∂_Àn
;

310 i‡–!(
ñems
->
‰ag_off
 & 0x2000) ) {

311 
n
->
byãs_exp
 = ((
ñems
->
‰ag_off
&0xDFFF)*8Ë+ÉÀms->
∂_Àn
;

312 
n
->
m‹e_f
 = 0;

315 i‡–(! 
n
->
m‹e_f
Ë&& (n->
byãs_exp
=Ú->
byãs_gŸ
) ) {

320 i‡–
n
->
¥ev
 ) {

321 
n
->
¥ev
->
√xt
 =Ç->next;

322 i‡–
n
->
√xt
 ) {

323 
n
->
√xt
->
¥ev
 =Ç->prev;

327 
Êows
->
‰ags
 = 
n
->
√xt
;

328 i‡–
n
->
√xt
 ) {

329 
n
->
√xt
->
¥ev
 = 
NULL
;

333 
n
->
ùid
 = 0;

334 
n
->
√xt
 = 
NULL
;

335 
n
->
¥ev
 = 
NULL
;

340 
föfo
 = 
n
->
thisÊow
;

341 
upd©eÊow
;

343 
n
 =Ç->
√xt
;

352 i‡–
föfo
==
NULL
 ) {

353 
ùÊowöfo_t
 *
node
;

355 (Ë
	`Êow_ˇlchash
–
Êows
, 
ñems
, &
hash
 );

357  
node
 = 
Êows
->
hashèb
[
hash
];

358 
node
!=
NULL
;ÇodeÚode->
√xthash
 ) {

359 i‡–(
node
->
ñems
.
•‹t
==elems->sport)

360 && (
node
->
ñems
.
dp‹t
==elems->dport)

361 && (
node
->
ñems
.
¥Ÿocﬁ
==elems->protocol)

362 && (
node
->
ñems
.
tos
==elems->tos)

363 && (
	`memcmp
–
node
->
ñems
.
ßddr
,Élems->saddr,

364 (
ñems
->
vîsi⁄
==6)?16:4 ) ==0 )

365 && (
	`memcmp
–
node
->
ñems
.
daddr
,Élems->daddr,

366 (
ñems
->
vîsi⁄
==6)?16:4 ) ==0 ) ) {

367 
föfo
 = 
node
;

372 i‡–
föfo
 =
NULL
 ) {

373 i‡–
	`_gëÊownode
–
Êows
, &
föfo
 ) <0 )

375 i‡–
föfo
 =
NULL
 )

376 
outofÊows
;

377 
föfo
->
hash
 = hash;

378 
föfo
->
√xthash
 = 
Êows
->
hashèb
[
hash
];

379 
Êows
->
hashèb
[
hash
] = 
föfo
;

380 
Êows
->
nhashes
++;

381 
√wÊow_f
++;

385 i‡–
√wÊow_f
 ) {

386 
föfo
->
t°¨t
 = *
tv
;

387 
föfo
->
∑ckës
 = 0;

388 
föfo
->
byãs
 = 0;

389 
föfo
->
exp‹ãd
 = 0;

390 
föfo
->
ù‰ag
.
ùid
 = 0;

392 
Êows
->
√xtÊowid
++;

393 i‡–
Êows
->
√xtÊowid
<1 ) {

395 
Êows
->
√xtÊowid
=1;

397 
föfo
->
Êowid
 = 
Êows
->
√xtÊowid
;

399 
	`mem˝y
–
föfo
->
ßddr
, 
ñems
->ßddr, (ñems->
vîsi⁄
==6)?16:4 );

400 
	`mem˝y
–
föfo
->
daddr
, 
ñems
->daddr, (ñems->
vîsi⁄
==6)?16:4 );

401 
föfo
->
ñems
.
ßddr
 = finfo->saddr;

402 
föfo
->
ñems
.
daddr
 = finfo->daddr;

403 
föfo
->
ñems
.
vîsi⁄
 =Élems->version;

404 
föfo
->
ñems
.
tos
 =Élems->tos;

405 
föfo
->
ñems
.
¥Ÿocﬁ
 =Élems->protocol;

406 
föfo
->
ñems
.
•‹t
 =Élems->sport;

407 
föfo
->
ñems
.
dp‹t
 =Élems->dport;

410 
föfo
->
√xt
 = 
Êows
->flows;

411 i‡–
föfo
->
√xt
 )

412 
föfo
->
√xt
->
¥ev
 = finfo;

413 
föfo
->
¥ev
 = 
NULL
;

414 
Êows
->Êow†
föfo
;

416 i‡–
Êows
->
biÊows
 ) {

417 
ùÊow_ñems_t
 
ªÀms
;

418 
ùÊowöfo_t
 *
node
;

421 
	`mem˝y
–&
ªÀms
, 
ñems
, (relems) );

422 
ªÀms
.
•‹t
 =Ññems.
dp‹t
;

423 
ªÀms
.
dp‹t
 = 
ñems
->
•‹t
;

424 
ªÀms
.
ßddr
 =Ññems.
daddr
;

425 
ªÀms
.
daddr
 = 
ñems
->
ßddr
;

427 
föfo
->
rÊow
 = 
NULL
;

428 
föfo
->
iÊow
 = 1;

429 (Ë
	`Êow_ˇlchash
–
Êows
, &
ªÀms
, &
hash
 );

431  
node
 = 
Êows
->
hashèb
[
hash
];

432 
node
!=
NULL
;ÇodeÚode->
√xthash
 ) {

433 i‡–(
node
->
ñems
.
•‹t
==
ªÀms
.sport)

434 && (
node
->
ñems
.
dp‹t
==
ªÀms
.dport)

435 && (
node
->
ñems
.
¥Ÿocﬁ
==
ªÀms
.protocol)

436 && (
node
->
ñems
.
tos
==
ªÀms
.tos)

437 && (
	`memcmp
–
node
->
ñems
.
ßddr
, 
ªÀms
.saddr,

438 (
ªÀms
.
vîsi⁄
==6)?16:4 ) ==0 )

439 && (
	`memcmp
–
node
->
ñems
.
daddr
, 
ªÀms
.daddr,

440 (
ªÀms
.
vîsi⁄
==6)?16:4 ) ==0 ) ) {

441 
node
->
rÊow
 = 
föfo
;

442 
föfo
->
rÊow
 = 
node
;

443 
föfo
->
iÊow
 = 0;

448 i‡–
mlog_vÀvñ
>2 )

449 
	`mlogf
( 4, "[ipflow]Çew flow%p,Çflows=%d, hash=%u\n",

450 
föfo
, 
Êows
->
nÊows
, 
hash
 );

453 i‡–(
ñems
->
‰ag_off
 & 0x3FFF) == 0x2000 ) {

459 
föfo
->
ù‰ag
.
byãs_gŸ
 = 
ñems
->
∂_Àn
;

460 
föfo
->
ù‰ag
.
byãs_exp
 = 0;

461 
föfo
->
ù‰ag
.
m‹e_f
 = 1;

462 
föfo
->
ù‰ag
.
thisÊow
 = finfo;

464 i‡–
föfo
->
ù‰ag
.
ùid
 ) {

465 
	`mlogf
( 4, "[ipflow] info: defragÖdu %dáborted,Ödu %d started.\n",

466 
föfo
->
ù‰ag
.
ùid
, 
ñems
->ipid );

469 i‡–
Êows
->
‰ags
 ) {

470 i‡–
Êows
->
‰ags
 =(&(
föfo
->
ù‰ag
)) ) {

471 
	`mlogf
( 2, "[ipflow] WARNING: fragÇodeálreadyÉxists\n" );

474 
föfo
->
ù‰ag
.
¥ev
 = 
NULL
;

475 
föfo
->
ù‰ag
.
√xt
 = 
Êows
->
‰ags
;

476 
Êows
->
‰ags
->
¥ev
 = &(
föfo
->
ù‰ag
);

477 
Êows
->
‰ags
 = &(
föfo
->
ù‰ag
);

481 
föfo
->
ù‰ag
.
¥ev
 = 
NULL
;

482 
föfo
->
ù‰ag
.
√xt
 = 
NULL
;

483 
Êows
->
‰ags
 = &(
föfo
->
ù‰ag
);

487 
föfo
->
ù‰ag
.
ùid
 = 
ñems
->ipid;

490 
upd©eÊow
:

493 
föfo
->
éa°
 = *
tv
;

494 
föfo
->
∑ckës
 ++;

495 
föfo
->
byãs
 +
nbyãs
;

497 i‡–
Êowöfo
 ) {

498 *
Êowöfo
 = 
föfo
;

503 
outofÊows
:

504 
	`mlogf
( 4, "[ipflow] out of flows:Çflows=%d,Çhashes=%d\n",

505 
Êows
->
nÊows
, flows->
nhashes
 );

506 *
Êowöfo
 = 
NULL
;

508 
	}
}

510 
	$ùÊow_li°Êows
–
FILE
 *
Â
, 
ùÊow_t
 *
Êows
 )

512 
ùÊowöfo_t
 *
node
 = 
Êows
->flows;

513 
i
=0;

514 
t°r
[31], 
t°r2
[31];

516  
node
 ) {

517 
	`°r·ime
–
t°r2
, 30, "%T",

518 
	`loˇ…ime
–(c⁄° 
time_t
*)&
node
->
éa°
.
tv_£c
 ));

519 
	`°r·ime
–
t°r
, 30, "%T",

520 
	`loˇ…ime
–(c⁄° 
time_t
*)&
node
->
t°¨t
.
tv_£c
 ));

522 
	`Ârötf
–
Â
, "flow%d/%p: %d %s/%sÖort=%d/%d %u\n",

523 
i
, 
node
,Çode->
∑ckës
, 
t°r
, 
t°r2
,

524 
node
->
ñems
.
•‹t
,Çode->ñems.
dp‹t
,

525 *(
uöt32_t
*)(*)
node
->
ßddr
 );

527 
node
 =Çode->
√xt
;

528 
i
++;

531 
	}
}

540 
	$ùÊow_gë_ñems
–
ùÊow_ñems_t
 *
ñems
,

541 
uöt8_t
 *
∑ckë
,

542 
size_t
 
ˇ∂í
 )

544 
uöt8_t
 *
µ
 = 
∑ckë
;

546 
ñems
->
vîsi⁄
 = (
µ
[0]&0xf0) >> 4;

547 i‡–(
ñems
->
vîsi⁄
 =
IPVERSION
Ë&& (
ˇ∂í
 >= 20) )

549 
hdæí
 = ((
µ
[0]&0x0f)*4);

550 
ñems
->
tos
 = 
µ
[1];

551 
ñems
->
¥Ÿocﬁ
 = 
µ
[9];

552 
ñems
->
ßddr
 = 
µ
+12;

553 
ñems
->
daddr
 = 
µ
+16;

554 
ñems
->
‰ag_off
 = ((
µ
[6]&0xBF)<<8)|pp[7];

555 i‡–
ñems
->
‰ag_off
 ) {

556 
ñems
->
ùid
 = (
µ
[4]<<8)|pp[5];

557 
ñems
->
∂_Àn
 = ((
µ
[2]<<8)|µ[3]Ë- 
hdæí
;

559 i‡–(
ñems
->
¥Ÿocﬁ
==
IPPROTO_TCP
)

560 || (
ñems
->
¥Ÿocﬁ
==
IPPROTO_SCTP
)

561 || (
ñems
->
¥Ÿocﬁ
==
IPPROTO_UDP
) )

563 
uöt8_t
 *
hp
 = 
µ
 + 
hdæí
;

565 i‡–
ñems
->
‰ag_off
 & 0x1FFF ) {

567 
ñems
->
•‹t
 =ÉÀms->
dp‹t
 = 0;

569 
ñems
->
•‹t
 = (
hp
[0]*256) + hp[1];

570 
ñems
->
dp‹t
 = (
hp
[2]*256) + hp[3];

575 
ñems
->
•‹t
 =ÉÀms->
dp‹t
 = 0;

580 i‡–
ˇ∂í
 >= 40 )

582 
uöt16_t
 
hdæí
, 
pkéí
, 
¥Ÿ
;

583 
uöt8_t
 *
∂ﬂd
, *
p
;

585 #ifde‡
INET6


586 
hdæí
 = (
ù6_hdr
);

588 
hdæí
 = 40;

590 
pkéí
 = 
ˇ∂í
;

591 
¥Ÿ
 = 
µ
[6];

593 
ñems
->
ßddr
 = 
µ
 + 8;

594 
ñems
->
daddr
 = 
µ
 + 24;

595 
ñems
->
tos
 = ((
µ
[0]&0x0F)<<4) + (pp[1]&0xF0);

596 
ñems
->
‰ag_off
 = 0;

598 ; 
hdæí
<
pkéí
;)

600 i‡–(
¥Ÿ
==
IPPROTO_TCP
Ë|| (¥Ÿ==
IPPROTO_SCTP
)

601 || (
¥Ÿ
==
IPPROTO_UDP
) )

604 i‡–(
¥Ÿ
==
IPPROTO_HOPOPTS
)

605 || (
¥Ÿ
==
IPPROTO_DSTOPTS
)

606 || (
¥Ÿ
==
IPPROTO_FRAGMENT
)

607 || (
¥Ÿ
==
IPPROTO_ROUTING
) )

609 
p
 = 
µ
 + 
hdæí
;

610 
¥Ÿ
 = 
p
[0];

611 
hdæí
 +(8 + (
p
[1] * 8));

618 i‡–(
¥Ÿ
==
IPPROTO_TCP
Ë|| (¥Ÿ==
IPPROTO_UDP
)

619 || (
¥Ÿ
==
IPPROTO_SCTP
) ) {

620 
∂ﬂd
 = 
µ
 + 
hdæí
;

621 
ñems
->
•‹t
 = (
∂ﬂd
[0]*256) +Öload[1];

622 
ñems
->
dp‹t
 = (
∂ﬂd
[2]*256) +Öload[3];

625 
ñems
->
•‹t
 =ÉÀms->
dp‹t
 = 0;

627 
ñems
->
¥Ÿocﬁ
 = 
¥Ÿ
;

632 
	}
}

	@libipfix_110224/probe/ipflow.h

34 #i‚de‡
IMP_IPFLOW_H


35 
	#IMP_IPFLOW_H


	)

37 
	#IPFLOW_NP1ADDR1CHUNKS
 8

	)

38 
	#IPFLOW_NP1ADDR2CHUNKS
 8

	)

39 
	#IPFLOW_NP1PORTCHUNKS
 2

	)

40 
	#IPFLOW_NP2ADDRCHUNKS
 2

	)

41 
	#IPFLOW_NP2PORTCHUNKS
 2

	)

42 
	#IPFLOW_NP3CHUNKS
 2

	)

44 
	sùÊow_ñems


46 
	mvîsi⁄
;

47 
uöt8_t
 
	mtos
;

48 
uöt8_t
 
	m¥Ÿocﬁ
;

49 
uöt8_t
 *
	mßddr
;

50 
uöt8_t
 *
	mdaddr
;

51 
uöt16_t
 
	m•‹t
;

52 
uöt16_t
 
	mdp‹t
;

54 
uöt16_t
 
	m‰ag_off
;

55 
uöt16_t
 
	m∂_Àn
;

56 
uöt16_t
 
	mùid
;

57 
uöt32_t
 
	mhash
;

58 } 
	tùÊow_ñems_t
;

60 
	sù‰ag_öfo


62 
ù‰ag_öfo
 *
	m¥ev
;

63 
ù‰ag_öfo
 *
	m√xt
;

65 
ùÊowöfo
 *
	mthisÊow
;

66 
uöt16_t
 
	mùid
;

67 
uöt16_t
 
	mbyãs_exp
;

68 
uöt16_t
 
	mbyãs_gŸ
;

69 
uöt16_t
 
	mm‹e_f
;

70 } 
	tù‰ag_öfo_t
;

72 
	sùÊowöfo


74 
ùÊowöfo
 *
	m¥ev
;

75 
ùÊowöfo
 *
	m√xt
;

76 
ùÊowöfo
 *
	m√xthash
;

77 
	mªu£
;

79 
timevÆ
 
	mt°¨t
;

80 
timevÆ
 
	méa°
;

81 
	mbyãs
;

82 
	m∑ckës
;

83 
	mÊowid
;

84 
ù‰ag_öfo_t
 
	mù‰ag
;

85 
uöt32_t
 
	mhash
;

86 
ùÊowöfo
 *
	mrÊow
;

87 
	miÊow
;

89 
	mexp‹ãd
;

90 *
	mu£r
;

92 
ùÊow_ñems_t
 
	mñems
;

93 
uöt8_t
 
	mßddr
[16];

94 
uöt8_t
 
	mdaddr
[16];

95 #i‡
deföed
(
MACADDREXPORT
)

96 
uöt8_t
 
	msmac
[6];

97 
uöt8_t
 
	mdmac
[6];

99 } 
	tùÊowöfo_t
;

101 
	sùÊow


103 
ùÊowöfo_t
 *
	mÊows
;

104 
ù‰ag_öfo_t
 *
	m‰ags
;

106 
ùÊowöfo_t
 **
	mhashèb
;

107 
	mhashsize
;

108 
	mnhashes
;

109 
	mnÊows
;

111 
	mmaxÊows
;

112 
	mtimeout
;

113 
	mbiÊows
;

114 
	m√xtÊowid
;

116 } 
	tùÊow_t
;

120 
Êow_öô
 ( 
ùÊow_t
 **
Êows
, 
maxÊows
, 
biÊows
, 
timeout
 );

121 
Êow_upd©e
–
ùÊow_t
 *
Êows
, 
ùÊow_ñems_t
 *
ñems
, 
timevÆ
 *
tv
,

122 
size_t
 
nbyãs
, 
ùÊowöfo_t
 **
Êowöfo
 );

123 
Êow_˛o£
 ( 
ùÊow_t
 *
Êows
 );

125 
Êow_dr›
 ( 
ùÊow_t
 *
Êows
, 
ùÊowöfo_t
 *
node
 );

126 
ùÊow_li°Êows
–
FILE
 *
Â
, 
ùÊow_t
 *
Êows
 );

127 
ùÊow_gë_ñems
–
ùÊow_ñems_t
 *
ñems
, 
uöt8_t
 *
∑ckë
, 
size_t
 
ˇ∂í
 );

	@libipfix_110224/probe/probe.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<f˙é.h
>

39 
	~<°rög.h
>

40 
	~<î∫o.h
>

41 
	~<libgí.h
>

42 
	~<sig«l.h
>

43 
	~<sys/waô.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/sockë.h
>

46 
	~<limôs.h
>

47 
	~<√töë/ö.h
>

48 
	~<¨∑/öë.h
>

49 
	~<√töë/ö_sy°m.h
>

50 
	~<√töë/ö.h
>

51 
	~<√töë/ù.h
>

52 #ifde‡
INET6


53 
	~<√töë/ù6.h
>

55 
	~<√tdb.h
>

56 
	~<gë›t.h
>

57 
	~<pˇp.h
>

59 
	~<../c⁄fig.h
>

60 
	~<misc.h
>

61 
	~<ùfix.h
>

62 
	~<ùfix_def_fokus.h
>

63 
	~<ùfix_fõlds_fokus.h
>

64 
	~"ùÊow.h
"

68 
	#ETHER_HDRLEN
 14

	)

69 
	#ETHERTYPE_IP
 0x0800

	)

70 
	#ETHERTYPE_8021Q
 0x8100

	)

71 
	#ETHERTYPE_IPV6
 0x86dd

	)

73 #i‚de‡
DLT_RAW


74 
	#DLT_RAW
 
DLT_NULL
;

	)

77 
	#PROBE_IDSTR
 "ùfix_¥obe"

	)

78 
	#PROBE_VERSIONSTR
 "v0.3"

	)

80 
	#CAFILE
 "roŸ˚π.≥m"

	)

81 
	#CADIR
 
NULL


	)

82 
	#KEYFILE
 "˛õ¡.≥m"

	)

83 
	#CERTFILE
 "˛õ¡.≥m"

	)

87 
	e¥obe_Êags


89 
	mPROBE_PROMISC
=1, 
	mPROBE_OFFLINE
=2, 
	mPROBE_DAEMON
=4

90 } 
	t¥obe_Êags_t
;

92 
	s¥obe_O±i⁄s
 {

93 
	m¥og«me
[30];

94 
	möãrÁ˚
[
PATH_MAX
+1];

95 *
	mfûãr
;

96 *
	mcﬁÀ˘‹
;

97 
	mp‹t
;

98 
	m¥Ÿocﬁ
;

99 
	ms¶
;

100 *
	mˇfûe
;

101 *
	mˇdú
;

102 *
	mkeyfûe
;

103 *
	m˚πfûe
;

104 *
	mlogfûe
;

105 
¥obe_Êags_t
 
	mÊags
;

106 
	mvÀvñ
;

107 
uöt32_t
 
	modid
;

108 
	mùÊow_timeout
;

109 
	mùÊow_max
;

110 
	mùÊow_li„time
;

111 
	mbiÊows
;

112 
	mexp‹t_timeout
;

115 
	s¥obe_°ru˘
 {

116 
ùfix_t
 *
	mùfix
;

117 
ùfix_ãm∂©e_t
 *
	mãm∂
;

118 
ùfix_ãm∂©e_t
 *
	mãm∂6
;

120 
ùÊow_t
 *
	mùÊows
;

121 
time_t
 
	m√xt_exp‹t
;

122 
öt64_t
 
	m≈kts
;

123 
öt64_t
 
	mnbyãs
;

125 *
	mdevi˚
;

126 
pˇp_t
 *
	mpˇp
;

127 
bpf_¥ogøm
 
	mÂrg
;

128 
	mfd
;

129 
	m˙t
;

130 
	md…y≥
;

131 
	moff£t
;

132 } 
	t¥obe_t
;

136 
¥obe_O±i⁄s
 
	gg_∑r
;

137 
¥obe_°ru˘
 
	gg_¥obe
;

139 
m±imî_t
 
	gexp‹t_tid
;

141 
bpf_u_öt32
 
	g√tmask
 =0;

142 
bpf_u_öt32
 
	gloˇ ë
 =0;

143 
bpf_u_öt32
 
	gg_¢≠Àn
 =100;

144 
	gîrbuf
[
PCAP_ERRBUF_SIZE
];

146 c⁄° 
	gcvsid
[]="$Id:Örobe.c,v 1.6 2007/02/28 10:19:45Üuz Exp $";

148 
exp‹t_fõlds_t
 
	gùÊow4_fõlds
[] = {

149 { 0, 
IPFIX_FT_FLOWSTARTMILLISECONDS
, 8 },

150 { 0, 
IPFIX_FT_FLOWENDMILLISECONDS
, 8 },

151 { 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 },

152 { 0, 
IPFIX_FT_DESTINATIONIPV4ADDRESS
, 4 },

153 { 0, 
IPFIX_FT_SOURCETRANSPORTPORT
, 2 },

154 { 0, 
IPFIX_FT_DESTINATIONTRANSPORTPORT
, 2 },

155 { 0, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 1 },

156 { 0, 
IPFIX_FT_IPCLASSOFSERVICE
, 1 },

157 { 0, 
IPFIX_FT_PACKETDELTACOUNT
, 4 },

158 { 0, 
IPFIX_FT_OCTETDELTACOUNT
, 4 } };

160 
exp‹t_fõlds_t
 
	gùÊow6_fõlds
[] = {

161 { 0, 
IPFIX_FT_FLOWSTARTMILLISECONDS
, 8 },

162 { 0, 
IPFIX_FT_FLOWENDMILLISECONDS
, 8 },

163 { 0, 
IPFIX_FT_SOURCEIPV6ADDRESS
, 16 },

164 { 0, 
IPFIX_FT_DESTINATIONIPV6ADDRESS
, 16 },

165 { 0, 
IPFIX_FT_SOURCETRANSPORTPORT
, 2 },

166 { 0, 
IPFIX_FT_DESTINATIONTRANSPORTPORT
, 2 },

167 { 0, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 1 },

168 { 0, 
IPFIX_FT_IPCLASSOFSERVICE
, 1 },

169 { 0, 
IPFIX_FT_PACKETDELTACOUNT
, 4 },

170 { 0, 
IPFIX_FT_OCTETDELTACOUNT
, 4 } };

172 
exp‹t_fõlds_t
 
	gùbiÊow4_fõlds
[] = {

173 { 0, 
IPFIX_FT_FLOWSTARTMILLISECONDS
, 8 },

174 { 0, 
IPFIX_FT_FLOWENDMILLISECONDS
, 8 },

175 { 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 },

176 { 0, 
IPFIX_FT_DESTINATIONIPV4ADDRESS
, 4 },

177 { 0, 
IPFIX_FT_SOURCETRANSPORTPORT
, 2 },

178 { 0, 
IPFIX_FT_DESTINATIONTRANSPORTPORT
, 2 },

179 { 0, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 1 },

180 { 0, 
IPFIX_FT_PACKETDELTACOUNT
, 4 },

181 { 0, 
IPFIX_FT_OCTETDELTACOUNT
, 4 },

182 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_REVPACKETDELTACOUNT
, 4 },

183 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_REVOCTETDELTACOUNT
, 4 } };

185 
exp‹t_fõlds_t
 
	gùbiÊow6_fõlds
[] = {

186 { 0, 
IPFIX_FT_FLOWSTARTMILLISECONDS
, 8 },

187 { 0, 
IPFIX_FT_FLOWENDMILLISECONDS
, 8 },

188 { 0, 
IPFIX_FT_SOURCEIPV6ADDRESS
, 16 },

189 { 0, 
IPFIX_FT_DESTINATIONIPV6ADDRESS
, 16 },

190 { 0, 
IPFIX_FT_SOURCETRANSPORTPORT
, 2 },

191 { 0, 
IPFIX_FT_DESTINATIONTRANSPORTPORT
, 2 },

192 { 0, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 1 },

193 { 0, 
IPFIX_FT_PACKETDELTACOUNT
, 4 },

194 { 0, 
IPFIX_FT_OCTETDELTACOUNT
, 4 },

195 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_REVPACKETDELTACOUNT
, 4 },

196 { 
IPFIX_ENO_FOKUS
, 
IPFIX_FT_REVOCTETDELTACOUNT
, 4 } };

198 
	gùÊow4_nfõlds
 = (
ùÊow4_fõlds
)/(
exp‹t_fõlds_t
);

199 
	gùÊow6_nfõlds
 = (
ùÊow6_fõlds
)/(
exp‹t_fõlds_t
);

200 
	gùbiÊow4_nfõlds
 = (
ùbiÊow4_fõlds
)/(
exp‹t_fõlds_t
);

201 
	gùbiÊow6_nfõlds
 = (
ùbiÊow6_fõlds
)/(
exp‹t_fõlds_t
);

205 
ußge
 ( *
èsk«me
);

206 
exô_func
 ( 
signo
 );

210 
	$ußge
 (*
èsk«me
)

212 c⁄° 
hñ±ext
[]=

225 #ifde‡
SCTPSUPPORT


232 #ifde‡
SSLSUPPORT


245 
	`Ârötf
 ( 
°dîr
, "\nIPFIXÖrobe %s (%s)\n\nusage: %s %s",

246 
PROBE_VERSIONSTR
, 
__DATE__
, 
èsk«me
, 
hñ±ext
 );

248 
	`exô
(1);

249 
	}
}

255 
	$exp‹t_biÊows
–
¥obe_t
 *
¥obe
, 
time_t
 
now
, 
Êag
 )

257 
ùÊow_t
 *
Êows
 = 
¥obe
->
ùÊows
;

258 
ùÊowöfo_t
 *
n
, *
node
, *
r
;

259 
a
=0, 
d
=0, 
e
=0;

260 
idÀ£c
, 
duøti⁄
;

261 
uöt64_t
 
m£c_°¨t
, 
m£c_íd
, 
ªnd
;

262 
uöt64_t
 
dummy
 = 0;

264 
node
 = 
Êows
?Êows->Êows:
NULL
;

265  
node
 ) {

266 i‡–! 
node
->
iÊow
 ) {

267 
node
 =Çode->
√xt
;

271 
a
++;

272 
m£c_°¨t
 = ((
uöt64_t
)
node
->
t°¨t
.
tv_£c
*1000)

273 +((
uöt64_t
)
node
->
t°¨t
.
tv_u£c
/1000);

274 
m£c_íd
 = ((
uöt64_t
)
node
->
éa°
.
tv_£c
*1000)

275 +((
uöt64_t
)
node
->
éa°
.
tv_u£c
/1000);

276 i‡–
node
->
rÊow
 ) {

277 
ªnd
 = ((
uöt64_t
)
node
->
rÊow
->
éa°
.
tv_£c
*1000)

278 +((
uöt64_t
)
node
->
rÊow
->
éa°
.
tv_u£c
/1000);

279 i‡–
ªnd
 > 
m£c_íd
 )

280 
m£c_íd
 = 
ªnd
;

281 
r
 = 
node
->
rÊow
;

284 
r
 = 
NULL
;

286 
idÀ£c
 = 
now
 - (
m£c_íd
/1000);

287 
duøti⁄
 = (
m£c_íd
 - 
m£c_°¨t
)/1000;

291 i‡–
Êag


292 || (
g_∑r
.
ùÊow_timeout
 && (
idÀ£c
 > g_par.ipflow_timeout))

293 || (
g_∑r
.
ùÊow_li„time


294 && (
duøti⁄
 > 
g_∑r
.
ùÊow_li„time
)) ) {

295 i‡–
mlog_vÀvñ
>2 ) {

296 i‡–
g_∑r
.
ùÊow_timeout


297 && (
idÀ£c
 > 
g_∑r
.
ùÊow_timeout
) ) {

298 
	`mlogf
( 3, "[%s] %ds idleÅimeoutÉxpired! "

300 
g_∑r
.
¥og«me
, g_∑r.
ùÊow_timeout
,

301 
node
->
Êowid
,Çode->
t°¨t
.
tv_£c
,

302 
duøti⁄
, 
idÀ£c
 );

304 i‡–
g_∑r
.
ùÊow_li„time


305 && (
duøti⁄
 > 
g_∑r
.
ùÊow_li„time
) ) {

306 
	`mlogf
( 3, "[%s] %ds flowÜifetimeÉxpired! "

308 
g_∑r
.
¥og«me
, g_∑r.
ùÊow_li„time
,

309 
node
->
Êowid
,Çode->
t°¨t
.
tv_£c
,

310 
duøti⁄
, 
idÀ£c
 );

317 (Ë
	`ùfix_exp‹t
–
¥obe
->
ùfix
,

318 (
node
->
ñems
.
vîsi⁄
==6)?

319 
¥obe
->
ãm∂6
:¥obe->
ãm∂
,

320 &
m£c_°¨t
, &
m£c_íd
,

321 
node
->
ßddr
,Çode->
daddr
,

322 &
node
->
ñems
.
•‹t
,

323 &
node
->
ñems
.
dp‹t
,

324 &
node
->
ñems
.
¥Ÿocﬁ
,

325 &
node
->
∑ckës
, &node->
byãs
,

326 (
r
!=
NULL
)?&r->
∑ckës
:(*)&
dummy
,

327 (
r
!=
NULL
)?&r->
byãs
:(*)&
dummy
 );

329 
n
 = 
node
->
√xt
;

330 (Ë
	`Êow_dr›
–
Êows
, 
node
 );

331 
node
 = 
n
;

332 
e
++;

333 
d
++;

337 i‡–(
g_∑r
.
ùÊow_timeout
<1Ë&& (
node
->
∑ckës
) ) {

341 
m£c_íd
 = 0;

342 (Ë
	`ùfix_exp‹t
–
¥obe
->
ùfix
,

343 (
node
->
ñems
.
vîsi⁄
==6)?

344 
¥obe
->
ãm∂6
:¥obe->
ãm∂
,

345 &
m£c_°¨t
, &
m£c_íd
,

346 
node
->
ßddr
,Çode->
daddr
,

347 &
node
->
ñems
.
•‹t
,

348 &
node
->
ñems
.
dp‹t
,

349 &
node
->
ñems
.
¥Ÿocﬁ
,

350 &
node
->
ñems
.
tos
,

351 &
node
->
∑ckës
, &node->
byãs
 );

353 
node
->
∑ckës
 =0;

354 
node
->
byãs
 =0;

355 
e
++;

358 
node
 =Çode->
√xt
;

361 i‡–
	`ùfix_exp‹t_Êush
–
¥obe
->
ùfix
 ) <0 ) {

362 
	`mlogf
( 3, "[%s] ipfix_export() failed: %s\n",

363 
__func__
, 
	`°ªº‹
(
î∫o
) );

365 
	`mlogf
( 2, "[%s] %dáctive flows, %dÉxported, %d dropped.\n",

366 
g_∑r
.
¥og«me
, 
a
, 
e
, 
d
 );

369 
¥obe
->
≈kts
 = 0;

370 
¥obe
->
nbyãs
 = 0;

372 
	}
}

377 
	$exp‹t_ùÊows
–
¥obe_t
 *
¥obe
, 
time_t
 
now
, 
Êag
 )

379 
ùÊow_t
 *
Êows
 = 
¥obe
->
ùÊows
;

380 
ùÊowöfo_t
 *
n
, *
node
;

381 
a
=0, 
d
=0, 
e
=0;

382 
uöt64_t
 
m£c_°¨t
;

383 
uöt64_t
 
m£c_íd
;

385 i‡–
Êows
->
biÊows
 )

386  
	`exp‹t_biÊows
–
¥obe
, 
now
, 
Êag
 );

388 
node
 = 
Êows
?Êows->Êows:
NULL
;

389  
node
 ) {

390 
m£c_°¨t
 = ((
uöt64_t
)
node
->
t°¨t
.
tv_£c
*1000)

391 +((
uöt64_t
)
node
->
t°¨t
.
tv_u£c
/1000);

392 
m£c_íd
 = ((
uöt64_t
)
node
->
éa°
.
tv_£c
*1000)

393 +((
uöt64_t
)
node
->
éa°
.
tv_u£c
/1000);

394 
a
++;

398 i‡–
Êag


399 || (
g_∑r
.
ùÊow_timeout


400 && ((
now
 - 
node
->
éa°
.
tv_£c
Ë> 
g_∑r
.
ùÊow_timeout
))

401 || (
g_∑r
.
ùÊow_li„time


402 && ((
node
->
éa°
.
tv_£c
-node->
t°¨t
.tv_sec)

403 > 
g_∑r
.
ùÊow_li„time
)) ) {

404 i‡–
mlog_vÀvñ
>2 ) {

405 i‡–
g_∑r
.
ùÊow_timeout


406 && ((
now
 - 
node
->
éa°
.
tv_£c
Ë> 
g_∑r
.
ùÊow_timeout
) ) {

407 
	`mlogf
( 3, "[%s] %ds idleÅimeoutÉxpired! "

409 
g_∑r
.
¥og«me
, g_∑r.
ùÊow_timeout
,

410 
node
->
Êowid
,Çode->
t°¨t
.
tv_£c
,

411 
node
->
éa°
.
tv_£c
-node->
t°¨t
.tv_sec,

412 
now
 - 
node
->
éa°
.
tv_£c
 );

414 i‡–
g_∑r
.
ùÊow_li„time


415 && ((
node
->
éa°
.
tv_£c
-node->
t°¨t
.tv_sec)

416 > 
g_∑r
.
ùÊow_li„time
) ) {

417 
	`mlogf
( 3, "[%s] %ds flowÜifetimeÉxpired! "

419 
g_∑r
.
¥og«me
, g_∑r.
ùÊow_li„time
,

420 
node
->
Êowid
,Çode->
t°¨t
.
tv_£c
,

421 
node
->
éa°
.
tv_£c
-node->
t°¨t
.tv_sec,

422 
now
 - 
node
->
éa°
.
tv_£c
 );

429 (Ë
	`ùfix_exp‹t
–
¥obe
->
ùfix
,

430 (
node
->
ñems
.
vîsi⁄
==6)?

431 
¥obe
->
ãm∂6
:¥obe->
ãm∂
,

432 &
m£c_°¨t
, &
m£c_íd
,

433 
node
->
ßddr
,Çode->
daddr
,

434 &
node
->
ñems
.
•‹t
,

435 &
node
->
ñems
.
dp‹t
,

436 &
node
->
ñems
.
¥Ÿocﬁ
,

437 &
node
->
ñems
.
tos
,

438 &
node
->
∑ckës
, &node->
byãs
 );

440 
n
 = 
node
->
√xt
;

441 (Ë
	`Êow_dr›
–
Êows
, 
node
 );

442 
node
 = 
n
;

443 
e
++;

444 
d
++;

448 i‡–(
g_∑r
.
ùÊow_timeout
<1Ë&& (
node
->
∑ckës
) ) {

452 
m£c_íd
 = 0;

453 (Ë
	`ùfix_exp‹t
–
¥obe
->
ùfix
,

454 (
node
->
ñems
.
vîsi⁄
==6)?

455 
¥obe
->
ãm∂6
:¥obe->
ãm∂
,

456 &
m£c_°¨t
, &
m£c_íd
,

457 
node
->
ßddr
,Çode->
daddr
,

458 &
node
->
ñems
.
•‹t
,

459 &
node
->
ñems
.
dp‹t
,

460 &
node
->
ñems
.
¥Ÿocﬁ
,

461 &
node
->
ñems
.
tos
,

462 &
node
->
∑ckës
, &node->
byãs
 );

464 
node
->
∑ckës
 =0;

465 
node
->
byãs
 =0;

466 
e
++;

469 
node
 =Çode->
√xt
;

472 i‡–
	`ùfix_exp‹t_Êush
–
¥obe
->
ùfix
 ) <0 ) {

473 
	`mlogf
( 3, "[%s] ipfix_export() failed: %s\n",

474 
__func__
, 
	`°ªº‹
(
î∫o
) );

476 
	`mlogf
( 2, "[%s] %dáctive flows, %dÉxported, %d dropped.\n",

477 
g_∑r
.
¥og«me
, 
a
, 
e
, 
d
 );

480 
¥obe
->
≈kts
 = 0;

481 
¥obe
->
nbyãs
 = 0;

483 
	}
}

489 
	$cb_exp‹t
–*
¨g
 )

491 
¥obe_t
 *
¥obe
 = (¥obe_t*)
¨g
;

493 (Ë
	`exp‹t_ùÊows
–
¥obe
, 
	`time
(
NULL
), 0 );

495 
exp‹t_tid
 = 
	`mpﬁl_timîadd
–
g_∑r
.
exp‹t_timeout
,

496 
cb_exp‹t
, 
¥obe
 );

497 
	}
}

502 
	$cb_∑ckë
–
u_ch¨
 *
¨gs
,

503 c⁄° 
pˇp_pkthdr
 *
hódî
,

504 c⁄° 
u_ch¨
 *
∑ckë
 )

506 
Àn
, 
tos
, 
ëhîty≥
, 
off£t
;

507 
uöt32_t
 
Êowid
, 
ˇ∂í
;

508 
uöt8_t
 *
µ
;

509 
ùÊow_ñems_t
 
ñems
;

510 
¥obe_t
 *
d©a
 = (¥obe_t*)
¨gs
;

511 
ùÊowöfo_t
 *
föfo
=
NULL
;

513 i‡(
mlog_vÀvñ
>4) {

514 
	`mlogf
( 4, "[%s] cb_packet() called. caplen=%d/%d offset=%d\n",

515 
d©a
->
devi˚
, 
hódî
->
ˇ∂í
, hódî->
Àn
, d©a->
off£t
 );

518 
Àn
 = 
hódî
->len;

519 i‡–
hódî
->
ˇ∂í
 > 
g_¢≠Àn
 )

520 
ˇ∂í
 = 
g_¢≠Àn
;

522 
ˇ∂í
 = 
hódî
->caplen;

526  
d©a
->
d…y≥
 ) {

527 
DLT_EN10MB
:

528 i‡–
ˇ∂í
 < 
ETHER_HDRLEN
 )

530 
	`mem˝y
–&
ëhîty≥
, 
∑ckë
+12, 2 );

531 
ëhîty≥
 = 
	`¡ohs
(ethertype);

532 
off£t
 = 
ETHER_HDRLEN
;

533 
ˇ∂í
 -
ETHER_HDRLEN
;

534 
µ
 = (
uöt8_t
*)
∑ckë
 + 
off£t
;

535  ;
ˇ∂í
>0; ) {

536  
ëhîty≥
 ) {

537 
ETHERTYPE_8021Q
:

538 
µ
 += 4;

539 
ˇ∂í
 -= 4;

540 
off£t
 += 4;

541 
	`mem˝y
–&
ëhîty≥
, 
µ
-2, 2 );

542 
ëhîty≥
 = 
	`¡ohs
(ethertype);

544 
ETHERTYPE_IPV6
:

545 
ETHERTYPE_IP
:

555 
µ
 = (
uöt8_t
*)
∑ckë
 + 
d©a
->
off£t
;

556 
off£t
 = 
d©a
->offset;

557 
ˇ∂í
 -
off£t
;

564  (
µ
[0]&0xf0) >> 4 ) {

565 
IPVERSION
:

566 
tos
 = 
µ
[1];

568 #ifde‡
INET6


570 
tos
 = ((
µ
[0]&0x0F)<<4) + (pp[1]&0xF0);

577 
	`ùÊow_gë_ñems
–&
ñems
, 
µ
, 
ˇ∂í
 );

578 i‡–
	`Êow_upd©e
–
d©a
->
ùÊows
, &
ñems
,

579 (
timevÆ
*)&(
hódî
->
ts
), 
Àn
,

580 &
föfo
 ) <0 ) {

583 
	`mlogf
( 0, "[cb_packet] flow_update failed!\n" );

585 
Êowid
 = 
föfo
?finfo->flowid:0;

587 i‡–
föfo
 && (
mlog_vÀvñ
 > 4) ) {

588 
	`mlogf
( 4, "[%s] flowid=%d (start=%ld, duration=%ld)\n",

589 
d©a
->
devi˚
, 
Êowid
, 
föfo
->
t°¨t
.
tv_£c
,

590 
föfo
->
éa°
.
tv_£c
-föfo->
t°¨t
.tv_sec );

595 
d©a
->
≈kts
++;

596 
d©a
->
nbyãs
 +(
hódî
->
Àn
 - 
off£t
);

598 i‡–(
g_∑r
.
Êags
 & 
PROBE_OFFLINE
)

599 && (
g_∑r
.
exp‹t_timeout
>0) ) {

600 i‡–
d©a
->
√xt_exp‹t
 == 0 ) {

601 
d©a
->
√xt_exp‹t
 = 
hódî
->
ts
.
tv_£c
 + 
g_∑r
.
exp‹t_timeout
;

604 i‡–
hódî
->
ts
.
tv_£c
 >
d©a
->
√xt_exp‹t
 ) {

605 (Ë
	`exp‹t_ùÊows
–
d©a
, 
hódî
->
ts
.
tv_£c
, 0 );

606 i‡–
g_∑r
.
exp‹t_timeout
 ) {

607  
d©a
->
√xt_exp‹t
 <
hódî
->
ts
.
tv_£c
 )

608 
d©a
->
√xt_exp‹t
 +
g_∑r
.
exp‹t_timeout
;

610 
	`¶ìp
( 1 );

614 
	}
}

619 
	$cb_di•©ch
–
fd
, 
mask
, *
d©a
 )

621 
¥obe_t
 *
p
 = (¥obe_t*)
d©a
;

623  
	`pˇp_di•©ch
–
p
->
pˇp
,Ö->
˙t
, 
cb_∑ckë
, 
d©a
 ) ) {

625 
	`mlogf
( 0, "[%s]Öcap_dispatch: %s\n",

626 
p
->
devi˚
, 
	`pˇp_gëîr
’->
pˇp
));

629 i‡–
g_∑r
.
Êags
 & 
PROBE_OFFLINE
 ) {

630 
	`mlogf
( 1, "[%s]Énd of file detected, break ...\n",

631 
p
->
devi˚
 );

632 
	`mpﬁl_bªak
();

640 
	}
}

644 
	$öput_öô
–
¥obe_t
 *
¥obe
, 
Êags
 )

646 *
devi˚
 = 
g_∑r
.
öãrÁ˚
;

647 
d…y≥
;

649 i‡–
Êags
 & 
PROBE_OFFLINE
 ) {

651 i‡–(
¥obe
->
pˇp
=
	`pˇp_›í_ofÊöe
–
devi˚
, 
îrbuf
 )Ë==
NULL
) {

652 
	`îr‹f
–"[%s]Öˇp_›í_ofÊöe(): %s\n", 
devi˚
, 
îrbuf
 );

655 
¥obe
->
˙t
 = 1;

659 
¥omisc
 = (
Êags
&
PROBE_PROMISC
)?1:0;

660 *
p
 = 
¥obe
->
devi˚
;

662 i‡–*
devi˚
 == '\0' ) {

663 i‡((
devi˚
=
	`pˇp_lookupdev
–
îrbuf
 )Ë==
NULL
) {

664 
	`îr‹f
–"pˇp_lookupdev(ËÁûed: %s\n", 
îrbuf
 );

669 i‡–(
¥obe
->
pˇp
=
	`pˇp_›í_live
–
devi˚
, 
g_¢≠Àn
, 
¥omisc
,

670 100 , 
îrbuf
 )Ë==
NULL
 ) {

672 
	`îr‹f
–"pˇp_›í_live(%s): %s\n", 
p
, 
îrbuf
 );

675 
¥obe
->
˙t
 = 1000;

678  
d…y≥
 = 
	`pˇp_d©Æök
(
¥obe
->
pˇp
) ) {

679 
DLT_EN10MB
:

680 
¥obe
->
d…y≥
 = dltype;

681 
¥obe
->
off£t
 = 14;

683 
DLT_ATM_RFC1483
:

684 
¥obe
->
d…y≥
 = dltype;

685 
¥obe
->
off£t
 = 8;

688 
¥obe
->
d…y≥
 = 
DLT_RAW
;

689 
¥obe
->
off£t
 = 0;

692 if–
g_∑r
.
fûãr
 !
NULL
 ) {

693 if–(
	`pˇp_compûe
–
¥obe
->
pˇp
, &¥obe->
Ârg
, 
g_∑r
.
fûãr
, 1, 0 ) <0)

694 || (
	`pˇp_£tfûãr
–
¥obe
->
pˇp
, &¥obe->
Ârg
 ) <0) ) {

695 
	`mlogf
( 0, "[%s] unableÅo set filter: '%s'\n",

696 
g_∑r
.
¥og«me
, g_∑r.
fûãr
 );

698 
	`mlogf
( 1, "[%s] set filterÅo '%s'\n",

699 
g_∑r
.
¥og«me
, g_∑r.
fûãr
 );

703 
	`mlogf
–1, "[%s] devi˚: %s, d…y≥=%d, %s\n", 
g_∑r
.
¥og«me
,

704 (
Êags
&
PROBE_OFFLINE
)?
	`ba£«me
(
devi˚
):devi˚, 
¥obe
->
d…y≥
,

705 (
Êags
&
PROBE_OFFLINE
)?"offline"

706 :(
Êags
&
PROBE_PROMISC
)?"promisc.":"noÖromisc." );

708 i‡–
Êags
 & 
PROBE_OFFLINE
 ) {

709 
¥obe
->
fd
 = 
	`fûío
–
	`pˇp_fûe
–¥obe->
pˇp
 ) );

710 
¥obe
->
devi˚
 = 
	`°rdup
–
	`ba£«me
( device ) );

713 
¥obe
->
fd
 = 
	`pˇp_fûío
–¥obe->
pˇp
 );

714 
¥obe
->
devi˚
 = 
	`°rdup
( device );

717 i‡–
¥obe
->
fd
 >= 0) {

718 i‡–
	`mpﬁl_fdadd
–
¥obe
->
fd
, 
MPOLL_IN
,

719 
cb_di•©ch
, (*)
¥obe
 ) <0 ) {

720 
	`mlogf
–0, "[%s] %s\n", 
g_∑r
.
¥og«me
, 
	`°ªº‹
(
î∫o
) );

723 
	`mlogf
–2, "[%s]ádd fd %dÅÿpﬁ»lo›\n", 
g_∑r
.
¥og«me
, 
¥obe
->
fd
 );

726 i‡–
	`Êow_öô
–&(
¥obe
->
ùÊows
),

727 
g_∑r
.
ùÊow_max
,

728 
g_∑r
.
biÊows
,

729 
g_∑r
.
ùÊow_timeout
 ) <0 ) {

730 
	`mlogf
( 0, "[%s] ipflow initialisation failed: %s",

731 
g_∑r
.
¥og«me
, 
	`°ªº‹
(
î∫o
) );

736 
	}
}

740 
	$exp‹t_öô
–
¥obe_t
 *
¥obe
 )

742 
ùfix_t
 *
ifh
 =
NULL
;

743 
ùfix_ãm∂©e_t
 *
t4
, *
t6
;

744 *
p
, *
ho°
;

745 
p‹t
;

747 i‡–(
	`ùfix_öô
() <0)

748 || (
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_·_fokus
 ) <0 ) ) {

749 
	`mlogf
–0, "[%s] c™nŸ inô ipfix moduÀ\n", 
__func__
 );

753 i‡–
	`ùfix_›í
–&
ifh
, 
g_∑r
.
odid
, 
IPFIX_VERSION
 ) <0 ) {

754 
	`mlogf
( 0, "[%s] ipfix_open() failed: %s\n",

755 
__func__
, 
	`°ªº‹
(
î∫o
) );

756 
	`ùfix_˛ónup
();

760  
ho°
=
g_∑r
.
cﬁÀ˘‹
, 
p‹t
=g_par.port;; ) {

763 i‡–((
p
=
	`°ºchr
–
ho°
, ':' )Ë!=
NULL
)

764 && (
p
==
	`°rchr
–
ho°
, ':' )Ë&& ((
p‹t
=
	`©oi
(p+1))>0) ) {

765 *
p
 = '\0';

768 i‡–!
p‹t
 )

769 
p‹t
 = 
IPFIX_PORTNO
;

771 #ifde‡
SSLSUPPORT


772 i‡–
g_∑r
.
s¶
 ) {

773 
ùfix_s¶_›ts_t
 
›ts
;

775 
›ts
.
ˇfûe
 = 
g_∑r
.cafile;

776 
›ts
.
ˇdú
 = 
g_∑r
.cadir;

777 
›ts
.
keyfûe
 = 
g_∑r
.keyfile;

778 
›ts
.
˚πfûe

g_∑r
.certfile;

780 i‡–
	`ùfix_add_cﬁÀ˘‹_s¶
–
ifh
, 
ho°
, 
p‹t
,

781 
g_∑r
.
¥Ÿocﬁ
, &
›ts
 ) <0 ) {

782 
	`mlogf
( 0, "[%s] ipfix_add_collector_ssl() failed: %s\n",

783 
__func__
, 
	`°ªº‹
(
î∫o
) );

784 
îr
;

789 i‡–
	`ùfix_add_cﬁÀ˘‹
–
ifh
, 
ho°
, 
p‹t
, 
g_∑r
.
¥Ÿocﬁ
 ) <0 ) {

790 
	`mlogf
( 0, "[%s] ipfix_add_collector() failed: %s\n",

791 
__func__
, 
	`°ªº‹
(
î∫o
) );

792 
îr
;

797 i‡–
g_∑r
.
biÊows
 ) {

798 i‡–
	`ùfix_make_ãm∂©e
–
ifh
, &
t4
,

799 
ùbiÊow4_fõlds
,

800 
ùbiÊow4_nfõlds
 ) <0) {

801 
îr
;

804 i‡–
	`ùfix_make_ãm∂©e
–
ifh
, &
t6
,

805 
ùbiÊow6_fõlds
,

806 
ùbiÊow6_nfõlds
 ) <0) {

807 
	`ùfix_dñëe_ãm∂©e
–
ifh
, 
t4
 );

808 
îr
;

812 i‡–
	`ùfix_make_ãm∂©e
–
ifh
, &
t4
,

813 
ùÊow4_fõlds
,

814 
ùÊow4_nfõlds
 ) <0) {

815 
îr
;

818 i‡–
	`ùfix_make_ãm∂©e
–
ifh
, &
t6
,

819 
ùÊow6_fõlds
,

820 
ùÊow6_nfõlds
 ) <0) {

821 
	`ùfix_dñëe_ãm∂©e
–
ifh
, 
t4
 );

822 
îr
;

826 
¥obe
->
ùfix
 = 
ifh
;

827 
¥obe
->
ãm∂
 = 
t4
;

828 
¥obe
->
ãm∂6
 = 
t6
;

831 
îr
:

832 
	`ùfix_˛o£
–
ifh
 );

833 
	`ùfix_˛ónup
();

835 
	}
}

843 
	$¥og_öô
 ( )

847 i‡–(
g_∑r
.
Êags
&
PROBE_DAEMON
Ë&& (
	`d´m⁄
 ( 0, 0 ) < 0) ) {

848 
	`îr‹f
 ( "[%s] faûedÅÿru¿a†d´m⁄!\n\n", 
g_∑r
.
¥og«me
 );

852 i‡–
	`chdú
 ( "/tmp" ) <0 )

853 
	`mlogf
( 0, "[%s] ERROR cannot change working dir: %s\n",

854 
g_∑r
.
¥og«me
, 
	`°ªº‹
(
î∫o
) );

859 
	`mlog_£t_vÀvñ
–
g_∑r
.
vÀvñ
 );

860 i‡–
g_∑r
.
logfûe
 )

861 (Ë
	`mlog_›í
–
g_∑r
.
logfûe
, 
NULL
 );

863 
	`mlogf
–1, "\nIPFIXÖrobê(%s)\n\n", 
__DATE__
 );

866 
	`sig«l
–
SIGKILL
, 
exô_func
 );

867 
	`sig«l
–
SIGTERM
, 
exô_func
 );

868 
	`sig«l
–
SIGINT
, 
exô_func
 );

871 i‡–
	`exp‹t_öô
–&
g_¥obe
 ) <0 ) {

877 i‡–
	`öput_öô
–&
g_¥obe
, 
g_∑r
.
Êags
 ) <0 ) {

882 
	}
}

886 
	$exô_func
 ( 
signo
 )

888 i‡–
signo
 )

889 
	`mlogf
–0, "\n[%s] GŸ signÿ%d. Bye.\n\n", 
g_∑r
.
¥og«me
, 
signo
 );

893 ()
	`exp‹t_ùÊows
–&
g_¥obe
, 
	`time
(
NULL
), 1 );

897 
	`mlogf
–1, "[%s] cÀ™ up.\n", 
g_∑r
.
¥og«me
 );

898 
	`mpﬁl_fdrm
–
g_¥obe
.
fd
 );

899 i‡–
g_∑r
.
fûãr
 ) {

900 
	`‰ì
–
g_∑r
.
fûãr
 );

901 #ifde‡
HAVE_PCAP_FREECODE


902 
	`pˇp_‰ìcode
–&(
g_¥obe
.
Ârg
) );

905 
	`pˇp_˛o£
–
g_¥obe
.
pˇp
 );

907 
	`ùfix_dñëe_ãm∂©e
–
g_¥obe
.
ùfix
, g_¥obe.
ãm∂
 );

908 
	`ùfix_dñëe_ãm∂©e
–
g_¥obe
.
ùfix
, g_¥obe.
ãm∂6
 );

909 
	`ùfix_˛o£
–
g_¥obe
.
ùfix
 );

910 
	`ùfix_˛ónup
();

912 i‡–
g_¥obe
.
devi˚
 )

913 
	`‰ì
–
g_¥obe
.
devi˚
 );

915 i‡–
exp‹t_tid
 )

916 
	`mpﬁl_timîrm
–
exp‹t_tid
 );

918 
	`Êow_˛o£
–
g_¥obe
.
ùÊows
 );

919 
	`mlog_˛o£
();

920 
	`exô
(0);

921 
	}
}

925 
	$¥obe_lo›
 ( 
¥obe_t
 *
¥obe
 )

927 i‡–
g_∑r
.
Êags
 & 
PROBE_OFFLINE
 ) {

928 
exp‹t_tid
 = 
NULL
;

929 
¥obe
->
√xt_exp‹t
 = 0;

932 
¥obe
->
√xt_exp‹t
 = 0;

933 
exp‹t_tid
 = 
	`mpﬁl_timîadd
–
g_∑r
.
exp‹t_timeout
,

934 
cb_exp‹t
, 
¥obe
 );

939  
	`mpﬁl_lo›
( -1 );

940 
	}
}

944 
	$maö
 (
¨gc
, *
¨gv
[])

946 
¨g
;

947 
l›tidx
;

948 
›töd
;

950 
›t
[] = "hvdpl:i:r:c:f:stu";

951 
›ti⁄
 
l›t
[] = {

970 
g_∑r
.
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

971 
g_∑r
.
logfûe
 = 
NULL
;

972 
g_∑r
.
öãrÁ˚
[0] = '\0';

973 
g_∑r
.
fûãr
 = 
NULL
;

974 
g_∑r
.
cﬁÀ˘‹
 = "localhost";

975 
g_∑r
.
p‹t
 = 0;

976 
g_∑r
.
Êags
 = 
PROBE_PROMISC
;

977 
g_∑r
.
vÀvñ
 = 0;

978 
g_∑r
.
odid
 = 1;

979 
g_∑r
.
ùÊow_timeout
 = 30;

980 
g_∑r
.
ùÊow_max
 = 25000;

981 
g_∑r
.
ùÊow_li„time
 = 300;

982 
g_∑r
.
biÊows
 = 0;

983 
g_∑r
.
exp‹t_timeout
 = 10;

984 
g_∑r
.
s¶
 = 0;

985 
g_∑r
.
ˇfûe
 = 
CAFILE
;

986 
g_∑r
.
ˇdú
 = 
CADIR
;

987 
g_∑r
.
keyfûe
 = 
KEYFILE
;

988 
g_∑r
.
˚πfûe
 = 
CERTFILE
;

990 
	`¢¥ötf
–
g_∑r
.
¥og«me
, (g_∑r.¥og«me), "%s", 
	`ba£«me
(
¨gv
[0]) );

994 (
¨g
=
	`gë›t_l⁄g
(
¨gc
,
¨gv
,
›t
,
l›t
,&
l›tidx
)) >=0) {

995 
¨g
) {

997 
l›tidx
) {

1000 
	`mlogf
( 0, "%s (%s, %s)\n",

1001 
PROBE_IDSTR
, 
PROBE_VERSIONSTR
, 
__DATE__
 );

1002 
	`exô
(0);

1006 
	`ssˇnf
–
›èrg
, "%u", &
g_∑r
.
ùÊow_timeout
 );

1010 
	`ssˇnf
–
›èrg
, "%u", &
g_∑r
.
ùÊow_li„time
 );

1014 
	`ssˇnf
–
›èrg
, "%u", &
g_∑r
.
exp‹t_timeout
 );

1018 
	`ssˇnf
–
›èrg
, "%u", &
g_∑r
.
odid
 );

1021 
g_∑r
.
s¶
 = 1;

1024 
g_∑r
.
keyfûe
 = 
›èrg
;

1027 
g_∑r
.
˚πfûe
 = 
›èrg
;

1030 
g_∑r
.
ˇfûe
 = 
›èrg
;

1033 
g_∑r
.
ˇdú
 = 
›èrg
;

1036 
g_∑r
.
biÊows
 = 1;

1039 
	`ssˇnf
–
›èrg
, "%d", &
g_∑r
.
ùÊow_max
 );

1042 
	`ußge
(
g_∑r
.
¥og«me
);

1047 
g_∑r
.
cﬁÀ˘‹
 = 
›èrg
;

1050 
g_∑r
.
Êags
 |
PROBE_DAEMON
;

1053 i‡((*
›èrg
=='\'') || (*optarg=='"')) {

1054 
g_∑r
.
fûãr
 = 
	`°rdup
–
›èrg
+1 );

1055 
g_∑r
.
fûãr
[
	`°æí
(
›èrg
)-1] = '\0';

1058 
g_∑r
.
fûãr
 = 
	`°rdup
–
›èrg
 );

1062 i‡–*(
g_∑r
.
öãrÁ˚
) ) {

1063 
	`Ârötf
–
°dîr
, "warning:Öarameter '-i %s' ignored.\n",

1064 
›èrg
 );

1067 
	`¢¥ötf
–
g_∑r
.
öãrÁ˚
, 
PATH_MAX
, "%s", 
›èrg
 );

1070 
g_∑r
.
Êags
 &~
PROBE_PROMISC
;

1073 i‡–*(
g_∑r
.
öãrÁ˚
) ) {

1074 
	`Ârötf
–
°dîr
, "warning:Öarameter '-r %s' ignored.\n",

1075 
›èrg
 );

1078 
g_∑r
.
Êags
 |
PROBE_OFFLINE
;

1079 i‡–
	`°rcmp
–
›èrg
, "-" ) ==0 ) {

1080 
	`°r˝y
–
g_∑r
.
öãrÁ˚
, 
›èrg
 );

1082 i‡–
	`ªÆ∑th
–
›èrg
, 
g_∑r
.
öãrÁ˚
 ) ==
NULL
) {

1083 
	`Ârötf
–
°dîr
, "cannotáccess file '%s': %s\n",

1084 
›èrg
, 
	`°ªº‹
(
î∫o
) );

1085 
	`exô
(1);

1089 
g_∑r
.
logfûe
 = 
›èrg
;

1092 
	`ußge
(
g_∑r
.
¥og«me
);

1095 
g_∑r
.
¥Ÿocﬁ
 = 
IPFIX_PROTO_SCTP
;

1098 
g_∑r
.
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

1101 
g_∑r
.
¥Ÿocﬁ
 = 
IPFIX_PROTO_UDP
;

1104 
g_∑r
.
vÀvñ
 ++;

1107 
	`ußge
(
¨gv
[0]);

1111 i‡(
›töd
 < 
¨gc
) {

1112 
	`îr‹f
 ( "NoádditionalÖarametersÇeeded!\n");

1113 
	`exô
(1);

1116 i‡–
g_∑r
.
p‹t
==0 ) {

1117 
g_∑r
.
p‹t
 = g_∑r.
s¶
?
IPFIX_TLS_PORTNO
:
IPFIX_PORTNO
;

1121 i‡–
	`¥og_öô
() <0 ) {

1122 
	`exô
(1);

1125 
	`mlogf
–2, "[%s]Örogøm inôülized.\n", 
g_∑r
.
¥og«me
 );

1128 i‡–
	`¥obe_lo›
–&
g_¥obe
 ) < 0 ) {

1129 
	`exô_func
( 0 );

1133 
	`exô_func
 ( 0 );

1137 
	}
}

	@libipfix_110224/test/exporter.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<öây≥s.h
>

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<î∫o.h
>

13 
	~<limôs.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<f˙é.h
>

17 
	~<misc.h
>

18 
	~<ùfix.h
>

19 
	~<ùfix_def_fokus.h
>

20 
	~<ùfix_fõlds_fokus.h
>

22 
	#NEXPORTER
 1

	)

24 
	#MODE_VENDOR
 1

	)

25 
	#MODE_VARLEN
 2

	)

26 
	#MODE_OPTION
 4

	)

28 
	$do_gë_ãm∂©e
–
ùfix_t
 *
ùfix
, 
ùfix_ãm∂©e_t
 **
ãm∂©e
, 
mode
, *
nfõlds
 )

30 
ùfix_ãm∂©e_t
 *
t
;

31 
n
 = 3;

33 i‡–
mode
 & 
MODE_VENDOR
 ) {

34 
n
 += 2;

37 i‡–
mode
 & 
MODE_VARLEN
 ) {

38 
n
 += 1;

41 i‡–
	`ùfix_√w_d©a_ãm∂©e
–
ùfix
, &
t
, 
n
 ) <0 ) {

42 
	`Ârötf
–
°dîr
, "ipfix_get_template() failed: %s\n",

43 
	`°ªº‹
(
î∫o
) );

47 i‡–
	`ùfix_add_fõld
–
ùfix
, 
t
, 0,

48 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 ) {

49 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

50 
	`°ªº‹
(
î∫o
) );

51 
íd
;

54 i‡–
mode
 & 
MODE_VENDOR
 ) {

55 i‡((
	`ùfix_add_fõld
–
ùfix
, 
t
, 
IPFIX_ENO_FOKUS
,

56 
IPFIX_FT_PKTID
, 4 ) <0 )

57 || (
	`ùfix_add_fõld
–
ùfix
, 
t
, 
IPFIX_ENO_FOKUS
,

58 
IPFIX_FT_TASKID
, 4 ) <0 ) ) {

59 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

60 
	`°ªº‹
(
î∫o
) );

61 
íd
;

65 i‡–
mode
 & 
MODE_VARLEN
 ) {

66 i‡(
	`ùfix_add_fõld
–
ùfix
, 
t
, 
IPFIX_ENO_FOKUS
,

67 
IPFIX_FT_IDENT
, 
IPFIX_FT_VARLEN
 ) <0 ) {

68 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

69 
	`°ªº‹
(
î∫o
) );

70 
íd
;

74 i‡–(
	`ùfix_add_fõld
–
ùfix
, 
t
,

75 0, 
IPFIX_FT_OCTETDELTACOUNT
, 8 ) <0 )

76 || (
	`ùfix_add_fõld
–
ùfix
, 
t
,

77 0, 
IPFIX_FT_PACKETDELTACOUNT
, 8 ) <0 ) ) {

78 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

79 
	`°ªº‹
(
î∫o
) );

80 
íd
;

83 *
ãm∂©e
 = 
t
;

84 *
nfõlds
 = 
n
;

87 
íd
:

88 
	`ùfix_dñëe_ãm∂©e
–
ùfix
, 
t
 );

90 
	}
}

92 
	$do_gë_›ti⁄_ãm∂©e
–
ùfix_t
 *
ùfix
, 
ùfix_ãm∂©e_t
 **
ãm∂©e
, 
mode
 )

94 
ùfix_ãm∂©e_t
 *
t
;

95 
nfõlds
 = 2;

97 i‡–
	`ùfix_√w_›ti⁄_ãm∂©e
–
ùfix
, &
t
, 
nfõlds
 ) <0 ) {

98 
	`Ârötf
–
°dîr
, "ipfix_get_template() failed: %s\n",

99 
	`°ªº‹
(
î∫o
) );

103 i‡–
	`ùfix_add_sc›e_fõld
–
ùfix
, 
t
, 0,

104 
IPFIX_FT_FLOWID
, 4 ) <0 ) {

105 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

106 
	`°ªº‹
(
î∫o
) );

107 
íd
;

110 i‡–
	`ùfix_add_fõld
–
ùfix
, 
t
, 0,

111 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 ) {

112 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

113 
	`°ªº‹
(
î∫o
) );

114 
íd
;

117 *
ãm∂©e
 = 
t
;

120 
íd
:

121 
	`ùfix_dñëe_ãm∂©e
–
ùfix
, 
t
 );

123 
	}
}

125 
	$maö
 ( 
¨gc
, **
¨gv
 )

127 *
›t°r
="stuvhc:p:m:";

128 
›t
;

129 
cho°
[256];

130 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

131 
ªt
 = 1, 
i
, 
j
, 
ix
, 
mode
=0;

132 
nfõlds
 = 0;

133 
uöt64_t
 
byãs
 = 1234000;

134 
uöt64_t
 
pkts
 = 1234;

135 
uöt32_t
 
èskid
 = 1234567;

136 
uöt32_t
 
Êowid
 = 54321;

137 
buf
[31] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,

140 
ùfix_t
 *
ùfixh
[3] = { 
NULL
, NULL, NULL };

141 
ùfix_ãm∂©e_t
 *
ãm∂
[3] = { 
NULL
, NULL, NULL };

142 
ùfix_ãm∂©e_t
 *
Ÿem∂
[3] = { 
NULL
, NULL, NULL };

143 
sour˚id
[3] = { 12345, 23456, 34567 };

144 *
fõlds
[10];

145 
uöt16_t
 
Àngths
[10];

146 
p‹t
[] = { 4739, 6767, 6768 };

147 
√xp‹ãr
 = 
NEXPORTER
;

148 
smsidít
[20] = { 'a', 'b', 'c', 'd', '\0', };

149 
vÀvñ
 = 0;

152 
	`°r˝y
(
cho°
, "localhost");

156  ( 
›t
 = 
	`gë›t
–
¨gc
, 
¨gv
, 
›t°r
 ) ) !
EOF
 )

158  
›t
 )

161 
mode
 = 
	`©oi
(
›èrg
);

164 
¥Ÿocﬁ
 = 
IPFIX_PROTO_SCTP
;

167 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

170 
¥Ÿocﬁ
 = 
IPFIX_PROTO_UDP
;

173 
vÀvñ
++;

176 i‡((
p‹t
[0]=
	`©oi
(
›èrg
)) <0) {

177 
	`Ârötf
–
°dîr
, "Invalid -párgument!\n" );

178 
	`exô
(1);

182 
	`°r˝y
(
cho°
, 
›èrg
);

186 
	`Ârötf
–
°dîr
,

191 
¨gv
[0] );

192 
	`exô
(1);

196 
	`mlog_£t_vÀvñ
–
vÀvñ
 );

200 (Ë
	`ùfix_öô
();

204 
	`¥ötf
–"[%s]ádd foku†öf‹m©i⁄ÉÀmíts.\n", 
¨gv
[0] );

205 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_·_fokus
 ) <0 ) {

206 
	`Ârötf
–
°dîr
, "ipfix_add_vendor_ie() failed: %s\n",

207 
	`°ªº‹
(
î∫o
) );

208 
	`exô
(1);

210 
	`¥ötf
( "done.\n" );

213  
i
=0; i<
√xp‹ãr
; i++ ) {

216 
	`¥ötf
–"[%i] o≥¿ùfixÉxp‹ãr.\n", 
i
 );

217 i‡–
	`ùfix_›í
–&(
ùfixh
[
i
]), 
sour˚id
[i], 
IPFIX_VERSION
 ) <0 ) {

218 
	`Ârötf
–
°dîr
, "ùfix_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

219 
	`exô
(1);

221 
	`¥ötf
( "done.\n" );

225 
	`¥ötf
–"[%d]ádd ipfix cﬁÀ˘‹.\n", 
i
 );

226 i‡–
	`ùfix_add_cﬁÀ˘‹
–
ùfixh
[
i
], 
cho°
, 
p‹t
[i], 
¥Ÿocﬁ
 ) <0 ) {

227 
	`Ârötf
–
°dîr
, "ipfix_add_collector(%s,%d) failed: %s\n",

228 
cho°
, 
p‹t
[
i
], 
	`°ªº‹
(
î∫o
));

229 
	`exô
(1);

231 
	`¥ötf
( "done.\n" );

235 
	`¥ötf
–"[%d] cª©êãm∂©e.\n", 
i
 );

236 i‡–
	`do_gë_ãm∂©e
–
ùfixh
[
i
], &(
ãm∂
[i]), 
mode
, &
nfõlds
 ) <0 ) {

237 
íd
;

239 
	`¥ötf
( "done.\n" );

241 i‡–
mode
 & 
MODE_OPTION
 ) {

244 
	`¥ötf
–"[%d] cª©ê›ti⁄Åem∂©e.\n", 
i
 );

245 i‡–
	`do_gë_›ti⁄_ãm∂©e
–
ùfixh
[
i
], &(
Ÿem∂
[i]), 
mode
 ) <0 ) {

246 
íd
;

248 
	`¥ötf
( "done.\n" );

251 
	`¶ìp
(2);

255  
j
=0; j<3; j++ ) {

256  
i
=0; i<
√xp‹ãr
; i++ ) {

257 
ix
 = 0;

258 
fõlds
[
ix
] = 
buf
;

259 
Àngths
[
ix
++] = 4;

260 i‡–
mode
 & 
MODE_VENDOR
 ) {

261 
fõlds
[
ix
] = &
Êowid
;

262 
Àngths
[
ix
++] = 4;

263 
fõlds
[
ix
] = &
èskid
;

264 
Àngths
[
ix
++] = 4;

266 i‡–
mode
 & 
MODE_VARLEN
 ) {

267 
fõlds
[
ix
] = 
smsidít
;

268 
Àngths
[
ix
++] = 5;

270 
fõlds
[
ix
] = &
byãs
;

271 
Àngths
[
ix
++] = 8;

272 
fõlds
[
ix
] = &
pkts
;

273 
Àngths
[
ix
++] = 8;

275 i‡–
mode
 & 
MODE_OPTION
 ) {

276 
	`¥ötf
–"[%i]Éxp‹à›ti⁄ d©a.\n", 
i
 );

277 i‡–
	`ùfix_exp‹t
–
ùfixh
[
i
], 
Ÿem∂
[i],

278 &
Êowid
, 
buf
 ) <0 ) {

279 
	`Ârötf
–
°dîr
, "ipfix_export() failed: %s\n",

280 
	`°ªº‹
(
î∫o
) );

281 
íd
;

285 
	`¥ötf
–"[%i]Éxp‹àsomêd©a.\n", 
i
 );

286 i‡–(
	`ùfix_exp‹t_¨øy
–
ùfixh
[
i
], 
ãm∂
[i], 
nfõlds
,

287 
fõlds
, 
Àngths
 ) <0 )

288 || (
	`ùfix_exp‹t_Êush
–
ùfixh
[
i
] ) <0 )) {

289 
	`Ârötf
–
°dîr
, "ipfix_export_array() failed: %s\n",

290 
	`°ªº‹
(
î∫o
) );

291 
íd
;

294 
	`¥ötf
( "done.\n" );

295 
byãs
++;

296 
	`¶ìp
(1);

299 
	`¥ötf
( "dataÉxported.\n" );

302 
íd
:

303  
i
=
√xp‹ãr
-1; i>=0; i-- ) {

304 
	`ùfix_dñëe_ãm∂©e
–
ùfixh
[
i
], 
ãm∂
[i] );

305 
	`ùfix_dñëe_ãm∂©e
–
ùfixh
[
i
], 
Ÿem∂
[i] );

306 
	`ùfix_˛o£
–
ùfixh
[
i
] );

309 
	`ùfix_˛ónup
();

310 
	`exô
(
ªt
);

311 
	}
}

	@libipfix_110224/test/exporter_sb.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<öây≥s.h
>

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<î∫o.h
>

13 
	~<limôs.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<f˙é.h
>

17 
	~<misc.h
>

18 
	~<ùfix.h
>

19 
	~<ùfix_def_fokus.h
>

20 
	~<ùfix_fõlds_fokus.h
>

22 
	#NEXPORTER
 1

	)

24 
	#MODE_VENDOR
 1

	)

25 
	#MODE_VARLEN
 2

	)

26 
	#MODE_OPTION
 4

	)

27 
	#MODE_REDUCED
 8

	)

28 
	#MODE_MULTI
 16

	)

30 
	gg_cou¡size
 = 8;

32 
	$do_gë_ãm∂©e
–
ùfix_t
 *
ùfix
, 
ùfix_ãm∂©e_t
 **
ãm∂©e
, 
mode
, *
nfõlds
 )

34 
ùfix_ãm∂©e_t
 *
t
;

35 
n
 = 3;

37 i‡–
mode
 & 
MODE_VENDOR
 ) {

38 
n
 += 2;

41 i‡–
mode
 & 
MODE_VARLEN
 ) {

42 
n
 += 1;

45 i‡–
	`ùfix_√w_d©a_ãm∂©e
–
ùfix
, &
t
, 
n
 ) <0 ) {

46 
	`Ârötf
–
°dîr
, "ipfix_get_template() failed: %s\n",

47 
	`°ªº‹
(
î∫o
) );

51 i‡–
	`ùfix_add_fõld
–
ùfix
, 
t
, 0,

52 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 ) {

53 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

54 
	`°ªº‹
(
î∫o
) );

55 
íd
;

58 i‡–
mode
 & 
MODE_VENDOR
 ) {

59 i‡((
	`ùfix_add_fõld
–
ùfix
, 
t
, 
IPFIX_ENO_FOKUS
,

60 
IPFIX_FT_PKTID
, 4 ) <0 )

61 || (
	`ùfix_add_fõld
–
ùfix
, 
t
, 
IPFIX_ENO_FOKUS
,

62 
IPFIX_FT_TASKID
, 4 ) <0 ) ) {

63 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

64 
	`°ªº‹
(
î∫o
) );

65 
íd
;

69 i‡–
mode
 & 
MODE_VARLEN
 ) {

70 i‡(
	`ùfix_add_fõld
–
ùfix
, 
t
, 
IPFIX_ENO_FOKUS
,

71 
IPFIX_FT_IDENT
, 
IPFIX_FT_VARLEN
 ) <0 ) {

72 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

73 
	`°ªº‹
(
î∫o
) );

74 
íd
;

78 i‡–
mode
 & 
MODE_MULTI
 ) {

79 i‡–(
	`ùfix_add_fõld
–
ùfix
, 
t
,

80 0, 
IPFIX_FT_OCTETTOTALCOUNT
, 
g_cou¡size
 ) <0 )

81 || (
	`ùfix_add_fõld
–
ùfix
, 
t
,

82 0, 
IPFIX_FT_OCTETTOTALCOUNT
, 
g_cou¡size
 ) <0 ) ) {

83 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

84 
	`°ªº‹
(
î∫o
) );

85 
íd
;

89 i‡–(
	`ùfix_add_fõld
–
ùfix
, 
t
,

90 0, 
IPFIX_FT_OCTETTOTALCOUNT
, 
g_cou¡size
 ) <0 )

91 || (
	`ùfix_add_fõld
–
ùfix
, 
t
,

92 0, 
IPFIX_FT_PACKETTOTALCOUNT
, 
g_cou¡size
 ) <0 ) ) {

93 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

94 
	`°ªº‹
(
î∫o
) );

95 
íd
;

99 *
ãm∂©e
 = 
t
;

100 *
nfõlds
 = 
n
;

103 
íd
:

104 
	`ùfix_dñëe_ãm∂©e
–
ùfix
, 
t
 );

106 
	}
}

108 
	$do_gë_›ti⁄_ãm∂©e
–
ùfix_t
 *
ùfix
, 
ùfix_ãm∂©e_t
 **
ãm∂©e
, 
mode
 )

110 
ùfix_ãm∂©e_t
 *
t
;

111 
nfõlds
 = 2;

113 i‡–
	`ùfix_√w_›ti⁄_ãm∂©e
–
ùfix
, &
t
, 
nfõlds
 ) <0 ) {

114 
	`Ârötf
–
°dîr
, "ipfix_get_template() failed: %s\n",

115 
	`°ªº‹
(
î∫o
) );

119 i‡–
	`ùfix_add_sc›e_fõld
–
ùfix
, 
t
, 0,

120 
IPFIX_FT_FLOWID
, 4 ) <0 ) {

121 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

122 
	`°ªº‹
(
î∫o
) );

123 
íd
;

126 i‡–
	`ùfix_add_fõld
–
ùfix
, 
t
, 0,

127 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 ) {

128 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed: %s\n",

129 
	`°ªº‹
(
î∫o
) );

130 
íd
;

133 *
ãm∂©e
 = 
t
;

136 
íd
:

137 
	`ùfix_dñëe_ãm∂©e
–
ùfix
, 
t
 );

139 
	}
}

141 
	$maö
 ( 
¨gc
, **
¨gv
 )

143 *
›t°r
="stuvhc:p:m:";

144 
›t
;

145 
cho°
[256];

146 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

147 
ªt
 = 1, 
i
, 
j
, 
ix
, 
mode
=0;

148 
nfõlds
 = 0;

149 
uöt32_t
 
byãs
 = 1234000;

150 
uöt32_t
 
pkts
 = 1234;

151 
uöt64_t
 
byãs64
;

152 
uöt64_t
 
pkts64
;

153 
uöt32_t
 
èskid
 = 1234567;

154 
uöt32_t
 
Êowid
 = 54321;

155 
buf
[31] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,

158 
ùfix_t
 *
ùfixh
[3] = { 
NULL
, NULL, NULL };

159 
ùfix_ãm∂©e_t
 *
ãm∂
[3] = { 
NULL
, NULL, NULL };

160 
ùfix_ãm∂©e_t
 *
Ÿem∂
[3] = { 
NULL
, NULL, NULL };

161 
sour˚id
[3] = { 12345, 23456, 34567 };

162 *
fõlds
[10];

163 
uöt16_t
 
Àngths
[10];

164 
p‹t
[] = { 4739, 6767, 6768 };

165 
√xp‹ãr
 = 
NEXPORTER
;

166 
smsidít
[20] = { 'a', 'b', 'c', 'd', '\0', };

167 
vÀvñ
 = 0;

170 
	`°r˝y
(
cho°
, "localhost");

174  ( 
›t
 = 
	`gë›t
–
¨gc
, 
¨gv
, 
›t°r
 ) ) !
EOF
 )

176  
›t
 )

179 
mode
 = 
	`©oi
(
›èrg
);

182 
¥Ÿocﬁ
 = 
IPFIX_PROTO_SCTP
;

185 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

188 
¥Ÿocﬁ
 = 
IPFIX_PROTO_UDP
;

191 
vÀvñ
++;

194 i‡((
p‹t
[0]=
	`©oi
(
›èrg
)) <0) {

195 
	`Ârötf
–
°dîr
, "Invalid -párgument!\n" );

196 
	`exô
(1);

200 
	`°r˝y
(
cho°
, 
›èrg
);

204 
	`Ârötf
–
°dîr
,

211 
¨gv
[0] );

212 
	`exô
(1);

216 
	`mlog_£t_vÀvñ
–
vÀvñ
 );

220 (Ë
	`ùfix_öô
();

224 
	`¥ötf
–"[%s]ádd foku†öf‹m©i⁄ÉÀmíts.\n", 
¨gv
[0] );

225 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_·_fokus
 ) <0 ) {

226 
	`Ârötf
–
°dîr
, "ipfix_add_vendor_ie() failed: %s\n",

227 
	`°ªº‹
(
î∫o
) );

228 
	`exô
(1);

230 
	`¥ötf
( "done.\n" );

232 i‡–
mode
 & 
MODE_REDUCED
 ) {

233 
g_cou¡size
 = 4;

236  
i
=0; i<
√xp‹ãr
; i++ ) {

239 
	`¥ötf
–"[%i] o≥¿ùfixÉxp‹ãr.\n", 
i
 );

240 i‡–
	`ùfix_›í
–&(
ùfixh
[
i
]), 
sour˚id
[i], 
IPFIX_VERSION
 ) <0 ) {

241 
	`Ârötf
–
°dîr
, "ùfix_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

242 
	`exô
(1);

244 
	`¥ötf
( "done.\n" );

248 
	`¥ötf
–"[%d]ádd ipfix cﬁÀ˘‹.\n", 
i
 );

249 i‡–
	`ùfix_add_cﬁÀ˘‹
–
ùfixh
[
i
], 
cho°
, 
p‹t
[i], 
¥Ÿocﬁ
 ) <0 ) {

250 
	`Ârötf
–
°dîr
, "ipfix_add_collector(%s,%d) failed: %s\n",

251 
cho°
, 
p‹t
[
i
], 
	`°ªº‹
(
î∫o
));

252 
	`exô
(1);

254 
	`¥ötf
( "done.\n" );

258 
	`¥ötf
–"[%d] cª©êãm∂©e.\n", 
i
 );

259 i‡–
	`do_gë_ãm∂©e
–
ùfixh
[
i
], &(
ãm∂
[i]), 
mode
, &
nfõlds
 ) <0 ) {

260 
íd
;

262 
	`¥ötf
( "done.\n" );

264 i‡–
mode
 & 
MODE_OPTION
 ) {

267 
	`¥ötf
–"[%d] cª©ê›ti⁄Åem∂©e.\n", 
i
 );

268 i‡–
	`do_gë_›ti⁄_ãm∂©e
–
ùfixh
[
i
], &(
Ÿem∂
[i]), 
mode
 ) <0 ) {

269 
íd
;

271 
	`¥ötf
( "done.\n" );

274 
	`¶ìp
(2);

278  
j
=0; j<100; j++ ) {

279  
i
=0; i<
√xp‹ãr
; i++ ) {

280 
ix
 = 0;

281 
fõlds
[
ix
] = 
buf
;

282 
Àngths
[
ix
++] = 4;

283 i‡–
mode
 & 
MODE_VENDOR
 ) {

284 
fõlds
[
ix
] = &
Êowid
;

285 
Àngths
[
ix
++] = 4;

286 
fõlds
[
ix
] = &
èskid
;

287 
Àngths
[
ix
++] = 4;

289 i‡–
mode
 & 
MODE_VARLEN
 ) {

290 
fõlds
[
ix
] = 
smsidít
;

291 
Àngths
[
ix
++] = 5;

293 i‡–
mode
 & 
MODE_REDUCED
 ) {

294 
fõlds
[
ix
] = &
byãs
;

295 
Àngths
[
ix
++] = 
g_cou¡size
;

296 
fõlds
[
ix
] = &
pkts
;

297 
Àngths
[
ix
++] = 
g_cou¡size
;

300 
pkts64
 = 
pkts
;

301 
fõlds
[
ix
] = &
byãs64
;

302 
Àngths
[
ix
++] = 
g_cou¡size
;

303 
byãs64
 = 
byãs
;

304 
fõlds
[
ix
] = &
pkts64
;

305 
Àngths
[
ix
++] = 
g_cou¡size
;

308 i‡–
mode
 & 
MODE_OPTION
 ) {

309 
	`¥ötf
–"[%i]Éxp‹à›ti⁄ d©a.\n", 
i
 );

310 i‡–
	`ùfix_exp‹t
–
ùfixh
[
i
], 
Ÿem∂
[i],

311 &
Êowid
, 
buf
 ) <0 ) {

312 
	`Ârötf
–
°dîr
, "ipfix_export() failed: %s\n",

313 
	`°ªº‹
(
î∫o
) );

314 
íd
;

318 
	`¥ötf
–"[%i]Éxp‹àsomêd©a.\n", 
i
 );

319 i‡–(
	`ùfix_exp‹t_¨øy
–
ùfixh
[
i
], 
ãm∂
[i], 
nfõlds
,

320 
fõlds
, 
Àngths
 ) <0 )

321 || (
	`ùfix_exp‹t_Êush
–
ùfixh
[
i
] ) <0 )) {

322 
	`Ârötf
–
°dîr
, "ipfix_export_array() failed: %s\n",

323 
	`°ªº‹
(
î∫o
) );

324 
íd
;

327 
	`¥ötf
( "done.\n" );

328 
byãs
++;

329 
pkts
++;

330 
	`¶ìp
(1);

333 
	`¥ötf
( "dataÉxported.\n" );

336 
íd
:

337  
i
=
√xp‹ãr
-1; i>=0; i-- ) {

338 
	`ùfix_dñëe_ãm∂©e
–
ùfixh
[
i
], 
ãm∂
[i] );

339 
	`ùfix_dñëe_ãm∂©e
–
ùfixh
[
i
], 
Ÿem∂
[i] );

340 
	`ùfix_˛o£
–
ùfixh
[
i
] );

343 
	`ùfix_˛ónup
();

344 
	`exô
(
ªt
);

345 
	}
}

	@libipfix_110224/test/ipfixtee.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<öây≥s.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<uni°d.h
>

36 
	~<°rög.h
>

37 
	~<î∫o.h
>

38 
	~<sys/sockë.h
>

39 
	~<sig«l.h
>

40 
	~<libgí.h
>

41 
	~<limôs.h
>

42 
	~<°d¨g.h
>

43 
	~<¨∑/öë.h
>

44 
	~<time.h
>

46 
	~<ùfix.h
>

47 
	~<misc.h
>

48 
	~"ùfix_cﬁ.h
"

49 
	~"ùfix_def_fokus.h
"

50 
	~"ùfix_fõlds_fokus.h
"

52 
	~<libhashish.h
>

54 #i‚de‡
IPFIX_FOKUS_DEF_H


55 
	#IPFIX_ENO_FOKUS
 12325

	)

56 
	#IPFIX_FT_SOURCEIPV4FANOUT
 315

	)

57 
	#IPFIX_FT_DESTINATIONIPV4FANIN
 316

	)

63 
	g¥og«me
[30];

64 
	gvîbo£_Àvñ
 = 0;

65 *
	gt˝_s
=
NULL
, 
	g¡˝_s
=0;

67 
ùfix_cﬁ_öfo_t
* 
	gg_cﬁöfo
 = 
NULL
;

68 
hi_h™dÀ_t
* 
	gödegªe
;

69 
hi_h™dÀ_t
* 
	goutdegªe
;

70 
hi_h™dÀ_t
* 
	gÊows
;

71 
hi_h™dÀ_t
* 
	gãm∂©es
;

74 
uöt32_t
 
	m§cIp
;

75 
uöt32_t
 
	md°Ip
;

76 } 
	tÊow_t
;

78 
ùfix_t
 *
	gùfixh
;

79 
	gsour˚id
 = 680335508;

80 
	gdegøde
 = 0;

81 *
	gcho°
 = 
NULL
;

82 *
	gd©adú
 = 
NULL
;

86 
	$ußge
–*
èsk«me
)

88 c⁄° 
hñ±xt
[] =

105 
	`Ârötf
–
°dîr
, "\nipfixÇode fanin/fanoutÖrocessor\n" );

106 
	`Ârötf
(
°dîr
,"\nußge: %†%s\n", 
èsk«me
, 
hñ±xt
);

108 
	}
}

110 
	$exô_func
 ( 
signo
 )

112 i‡–
vîbo£_Àvñ
 && 
signo
 )

113 
	`Ârötf
–
°dîr
, "\n[%s] gŸ signÿ%d, bye.\n\n", 
¥og«me
, 
signo
 );

115 i‡–
t˝_s
 ) {

116 
i
;

118  
i
=0; i<
¡˝_s
; i++ )

119 
	`˛o£
–
t˝_s
[
i
] );

122 
	`ùfix_cﬁ_˛ónup
();

123 
	`ùfix_˛ónup
();

125 i‡(
d©adú
)

126 
	`‰ì
 (
d©adú
);

127 i‡(
cho°
)

128 
	`‰ì
 (
cho°
);

130 
	`exô
( 1 );

131 
	}
}

136 
exp‹t_√wsour˚_cb
–
ùfixs_node_t
 *
s
, *
¨g
 );

137 
exp‹t_√wmsg_cb
–
ùfixs_node_t
 *
s
, 
ùfix_hdr_t
 *
hdr
, *
¨g
 );

138 
exp‹t_åec‹d_cb
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
, *
¨g
 );

139 
exp‹t_dªc‹d_cb
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
,

140 
ùfix_d©¨ec‹d_t
 *
d©a
, *
¨g
 );

141 
exp‹t_˛ónup_cb
–*
¨g
 );

145 
	$maö
 (
¨gc
, *
¨gv
[])

147 
›t
;

148 
›t°r
[] = "hp:c:P:r:stuvlf:";

149 
p‹t
;

150 
˝‹t
 = 4740;

151 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

152 
do_log
 = 0;

156 
p‹t
 = 4739;

157 
d©adú
 = 
NULL
;

158 
	`¢¥ötf
–
¥og«me
, ’rog«me), "%s", 
	`ba£«me
–
¨gv
[0]) );

162 
cis£t
 = 0;

163  ( 
›t
 = 
	`gë›t
–
¨gc
, 
¨gv
, 
›t°r
 ) ) !
EOF
 ) {

165  
›t
 )

168 i‡((
sour˚id
=
	`©oi
(
›èrg
)) <0) {

169 
	`Ârötf
–
°dîr
, "Invalid -oárgument!\n" );

170 
	`exô
(1);

175 i‡((
p‹t
=
	`©oi
(
›èrg
)) <0) {

176 
	`Ârötf
–
°dîr
, "Invalid -párgument!\n" );

177 
	`exô
(1);

182 
vîbo£_Àvñ
 ++;

186 
do_log
 = 1;

190 i‡((
˝‹t
=
	`©oi
(
›èrg
)) <0) {

191 
	`Ârötf
–
°dîr
, "Invalid -Párgument!\n" );

192 
	`exô
(1);

197 i‡((
degøde
=
	`©oi
(
›èrg
)) <0) {

198 
	`Ârötf
–
°dîr
, "Invalid -rárgument!\n" );

199 
	`exô
(1);

204 i‡(
cho°
)

205 
	`‰ì
(
cho°
);

206 
cho°
 = 
	`°rdup
(
›èrg
);

207 
cis£t
 = 1;

211 i‡(
d©adú
)

212 
	`‰ì
(
d©adú
);

213 
d©adú
 = 
	`°rdup
(
›èrg
);

217 
¥Ÿocﬁ
 = 
IPFIX_PROTO_SCTP
;

221 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

225 
¥Ÿocﬁ
 = 
IPFIX_PROTO_UDP
;

230 
	`ußge
(
¥og«me
);

231 
	`exô
(1);

235 i‡(!
cho°
 && !
d©adú
 && !
do_log
) {

236 
	`Ârötf
–
°dîr
, "You must specifyÉitherán IPFIXÅarget collector host orá datadir orÉnableÜogÅo stdout. Type option '-h' for help.\n");

237 
	`exô
(1);

241 
	`hi_öô_uöt32_t
(&
ödegªe
, 1000);

242 
	`hi_öô_uöt32_t
(&
outdegªe
, 1000);

243 
	`hi_öô_uöt32_t
(&
Êows
, 1000);

244 
	`hi_öô_°r
 (&
ãm∂©es
, 100);

248 
	`mlog_£t_vÀvñ
–
vîbo£_Àvñ
 );

252 i‡–
	`ùfix_öô
() <0 ) {

253 
	`Ârötf
–
°dîr
, "ùfix_öô(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

254 
	`exô
(1);

256 i‡–
	`ùfix_add_víd‹_öf‹m©i⁄_ñemíts
–
ùfix_·_fokus
 ) <0 ) {

257 
	`Ârötf
–
°dîr
, "ùfix_add_õ(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

258 
	`exô
(1);

263 i‡–
	`ùfix_›í
–&
ùfixh
, 
sour˚id
, 
IPFIX_VERSION
 ) <0 ) {

264 
	`Ârötf
–
°dîr
, "ùfix_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

265 
	`exô
(1);

270 
	`sig«l
–
SIGKILL
, 
exô_func
 );

271 
	`sig«l
–
SIGTERM
, 
exô_func
 );

272 
	`sig«l
–
SIGINT
, 
exô_func
 );

280 i‡(
do_log
) {

281 (Ë
	`ùfix_cﬁ_°¨t_msglog
–
°dout
 );

287 i‡(
d©adú
) {

288 (Ë
	`ùfix_cﬁ_öô_fûìxp‹t
–
d©adú
 );

291 i‡(
cho°
) {

292 i‡–
	`ùfix_add_cﬁÀ˘‹
–
ùfixh
, 
cho°
, 
˝‹t
, 
¥Ÿocﬁ
 ) <0 ) {

293 
	`Ârötf
–
°dîr
, "ipfix_add_collector(%s,%d) failed: %s\n",

294 
cho°
, 
˝‹t
, 
	`°ªº‹
(
î∫o
));

295 
	`exô
(1);

300 i‡–(
g_cﬁöfo
=
	`ˇŒoc
–1, (
ùfix_cﬁ_öfo_t
))Ë==
NULL
) {

301 
	`Ârötf
–
°dîr
, "a calloc failed while initializing callback methods.\n" );

305 
g_cﬁöfo
->
exp‹t_√wsour˚
 = 
exp‹t_√wsour˚_cb
;

306 
g_cﬁöfo
->
exp‹t_√wmsg
 = 
exp‹t_√wmsg_cb
;

307 
g_cﬁöfo
->
exp‹t_åec‹d
 = 
exp‹t_åec‹d_cb
;

308 
g_cﬁöfo
->
exp‹t_dªc‹d
 = 
exp‹t_dªc‹d_cb
;

309 
g_cﬁöfo
->
exp‹t_˛ónup
 = 
exp‹t_˛ónup_cb
;

310 
g_cﬁöfo
->
d©a
 = 
NULL
;

312 i‡–
	`ùfix_cﬁ_ªgi°î_exp‹t
–
g_cﬁöfo
 ) <0 ) {

313 
	`Ârötf
–
°dîr
, "ùfix_cﬁ_ªgi°î_exp‹t(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

314 
	`exô
(1);

320 i‡–
	`ùfix_cﬁ_li°í
–&
¡˝_s
, &
t˝_s
, 
IPFIX_PROTO_TCP
,

321 
p‹t
, 
AF_INET
, 10 ) <0 ) {

322 
	`Ârötf
–
°dîr
, "[%s] ipfix_listen(tcp) failed.\n",

323 
¥og«me
 );

329 (Ë
	`mpﬁl_lo›
( -1 );

331 
	`exô
(1);

332 
	}
}

336 
	$¥öt_ù
 ( 
uöt32_t
 
ùaddr
 ) {

337 
j
;

338 
j
=0;j<3;j++) {

339 
	`Ârötf
 (
°dout
, "%hhu.", *(
uöt8_t
*)(((*)&
ùaddr
)+
j
));

341 
	`Ârötf
 (
°dout
, "%hhu", *(
uöt8_t
*)(((*)&
ùaddr
)+
j
));

342 
	}
}

344 
	$exp‹t_√wsour˚_cb
–
ùfixs_node_t
 *
s
, *
¨g
 ) {

345 
	`Ârötf
 (
°dout
, "New sour˚ dëe˘ed: %i\n", 
s
->
odid
);

347 
	}
}

349 
	$exp‹t_√wmsg_cb
–
ùfixs_node_t
 *
s
, 
ùfix_hdr_t
 *
hdr
, *
¨g
 ) {

352 
	}
}

354 
	$exp‹t_åec‹d_cb
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
, *
¨g
 ) {

356 
	}
}

358 
	$ªexp‹t
 (
ùfixt_node_t
 *
t
, 
ùfix_d©¨ec‹d_t
 *
d
) {

359 
ùfix_ãm∂©e_t
* 
ouâem∂©e
;

361 i‡(
	`hi_gë_°r
(
ãm∂©es
, 
t
->
idít
, (**)&
ouâem∂©e
 )) {

362 i‡–
	`ùfix_√w_d©a_ãm∂©e
–
ùfixh
, &
ouâem∂©e
, 
t
->
ùfixt
->
nfõlds
 ) <0 ) {

363 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed inÑeexport: %s\n",

364 
	`°ªº‹
(
î∫o
) );

365 
	`exô
(1);

367 
i
;

368 
	`Ârötf
–
°dout
, "ªexp‹tögÅem∂©ê%†a†id %i.\n", 
t
->
idít
, 
ouâem∂©e
->
tid
 );

369 
i
=0; i < 
t
->
ùfixt
->
nfõlds
; i++) {

370 i‡(
	`ùfix_add_fõld
–
ùfixh
, 
ouâem∂©e
,

371 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
ío
,Å->ùfixt->fõlds[i].ñem->·->
·y≥
,Å->ùfixt->fõlds[i].
Êígth
 )

373 
	`Ârötf
–
°dîr
, "ipfix_add_field() failed inÑeexport: %s -Éno = %i,Åype = %i,Üength = %i\n",

374 
	`°ªº‹
(
î∫o
), 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
·
->
ío
,Å->ùfixt->fõlds[i].ñem->·->
·y≥
,Å->ùfixt->fõlds[i].
Êígth
);

375 
	`exô
(1);

379 
	`hi_ö£π_°r
(
ãm∂©es
, 
t
->
idít
, 
ouâem∂©e
);

382 i‡(
vîbo£_Àvñ
>1) {

383 
i
;

384 
tmps
[256];

385 
	`Ârötf
–
°dout
, "d©®ªc‹d,Åid = %i.\n", 
ouâem∂©e
->
tid
);

386 
i
=0; i < 
ouâem∂©e
->
nfõlds
; i++) {

387 
t
->
ùfixt
->
fõlds
[
i
].
ñem
->
	`¢¥öt
(
tmps
, 255, 
d
->
addrs
[i], d->
Àns
[i]);

388 
	`Ârötf
–
°dout
, "%i: %s\n", 
i
, 
tmps
);

392 
	`ùfix_exp‹t_¨øy
(
ùfixh
, 
ouâem∂©e
, ouâem∂©e->
nfõlds
, 
d
->
addrs
, d->
Àns
);

395 
	`ùfix_exp‹t_Êush
(
ùfixh
);

398 
	}
}

400 
	$exp‹t_dªc‹d_cb
–
ùfixs_node_t
 *
s
, 
ùfixt_node_t
 *
t
,

401 
ùfix_d©¨ec‹d_t
 *
d
, *
¨g
 ) {

403 
	`ªexp‹t
(
t
, 
d
);

406 
	}
}

408 
	$exp‹t_˛ónup_cb
–*
¨g
 ) {

409 
	`Ârötf
 (
°dout
, "CleanupÅime. Yay.\n");

410 
hi_ôî©‹_t
* 
˛n
;

411 
uöt32_t
* 
key
;

412 
uöt32_t
* 
no›
;

413 
ùfix_ãm∂©e_t
* 
ãm∂©e
;

415 
	`Ârötf
 (
°dout
, "Rìxp‹ãdÅem∂©êèbÀ had %òñemíts.\n", 
ãm∂©es
->
no_obje˘s
);

416 i‡(!
	`hi_ôî©‹_¸óã
(
ãm∂©es
, &
˛n
)) {

417 
	`hi_ôî©‹_gë√xt
(
˛n
, (**)&
key
, (**)&
ãm∂©e
, 
no›
)) {

418 
	`ùfix_dñëe_ãm∂©e
–
ùfixh
, 
ãm∂©e
 );

421 
	`hi_föi
(
ãm∂©es
);

423 
	`ùfix_˛o£
–
ùfixh
 );

424 
	`ùfix_˛ónup
();

425 
	}
}

	@src/ac_app_handlers.c

10 
	~<°dio.h
>

11 
	~<time.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~"../ö˛ude/ac_d©aba£.h
"

15 
	~"../ö˛ude/ac_≠p_defs.h
"

16 
	~"../ö˛ude/ac_≠p_≠i.h
"

18 
acAµH™dÀrs_t
 
	g≠pPrŸoH™dÀrs
[] =

20 { 
AC_APP_ARP_INDEX
, 
AC_APP_ARP_ID
, 
acAµAΩPktH™dÀr
},

21 { 
AC_APP_ICMP_INDEX
, 
AC_APP_ICMP_ID
, 
NULL
},

25 { 
AC_MAX_APP_INDEX
, 0x000, 
NULL
}

29 
exp‹t_≥î_node_¨p_d©a
(
acPìrNode_t
 *);

38 
acRëu∫_t


39 
	$acAµAΩPktH™dÀr
 (
acPìrNode_t
 *
≥îNode
, 
acAµP¨£r_t
 *
∑r£r_d©a
)

42 
acAµP¨£r_t
 *
≠p
 = 
∑r£r_d©a
;

43 
acAµAΩPrŸInfo_t
 *
¨pInfo
 = &
≥îNode
->
d©a
.
¨p
;

44 
time_t
 
time
;

45 
uöt32_t
 
dñè
;

47 i‡(!
≥îNode
 || !
∑r£r_d©a
) {

48 
	`¥ötf
 ("peer info is NULL %p orÖarser_data %p is NULL\n",

49 
≥îNode
, 
∑r£r_d©a
);

50  
AC_FAILURE
;

54 
	`mem˝y
(&
≥îNode
->
key
, &
≠p
->key, (peerNode->key));

57 i‡(
≠p
->
dúe˘i⁄
 == 0) {

58 
¨pInfo
->
rxPktByãC¡
 +
≠p
->
pktSz
;

59 
¨pInfo
->
rxPktC¡
++;

61 
dñè
 = 
time
 - 
¨pInfo
->
œ°PktRcvdTime
;

62 i‡((
dñè
 < 
¨pInfo
->
möRxDñè
) || !(arpInfo->minRxDelta)) {

63 
¨pInfo
->
möRxDñè
 = 
dñè
;

64 } i‡(
dñè
 > 
¨pInfo
->
möRxDñè
) {

65 
¨pInfo
->
maxRxDñè
 = 
dñè
;

67 
dñè
 = 
time
 - 
¨pInfo
->
œ°PktRcvdTime
;

68 
¨pInfo
->
œ°PktRcvdTime
 = 
time
;

70 
¨pInfo
->
txPktByãC¡
 +
≠p
->
pktSz
;

71 
¨pInfo
->
txPktC¡
++;

76 
	`¥ötf
 ("Upd©ed ARPÅabÀ wôháµId:%d,Ö‹tId:%∞\n", 
≠p
->
key
.
≠pId
,áµ->key.
p‹tId
);

77  
AC_SUCCESS
;

78 
	}
}

88 
acP‹tAµTbl_t
 
acP‹tAµDb
[
AC_MAX_PORTS
][
AC_MAX_APPS
];

89 
acAµTbl_t
 
acAµDb
[
AC_MAX_APPS
];

90 
acP‹tTbl_t
 
acP‹tDb
[
AC_MAX_PORTS
];

93 
	$acP‹tAndAµInfoUpd©e
(
acPìrTblKey_t
 *
pktInfoKey
, 
uöt32_t
 
≠pIndex
,

94 
acAµP¨£r_t
 *
∑r£d_d©a
)

96 
acP‹tTbl_t
 *
p‹tE¡ry
 = 
NULL
;

97 
acAµTbl_t
 *
≠pE¡ry
 = 
NULL
;

98 
acP‹tAµTbl_t
 *
p‹tAµE¡ry
 = 
NULL
;

101 i‡(!
pktInfoKey
 || !
∑r£d_d©a
) {

102 
	`¥ötf
("%s: I≈uài†nuŒ\n", 
__func__
);

106 i‡((
≠pIndex
 >
AC_MAX_APP_INDEX
) ||

107 (
pktInfoKey
->
p‹tId
 >
AC_MAX_PORTS
) ) {

108 
	`¥ötf
("%s: InvÆidáµIndex:%d,Ö‹tId:%d\n", 
__func__
, 
≠pIndex
, 
pktInfoKey
->
p‹tId
);

113 
p‹tE¡ry
 = &
acP‹tDb
[
pktInfoKey
->
p‹tId
];

114 
≠pE¡ry
 = &
acAµDb
[
≠pIndex
];

115 
p‹tAµE¡ry
 = &
acP‹tAµDb
[
pktInfoKey
->
p‹tId
][
≠pIndex
];

116 i‡(
∑r£d_d©a
->
dúe˘i⁄
 == 0) {

117 
p‹tE¡ry
->
rxPktC¡
++;

118 
≠pE¡ry
->
rxPktC¡
++;

119 
p‹tAµE¡ry
->
rxPktC¡
++;

121 
p‹tE¡ry
->
txPktC¡
++;

122 
≠pE¡ry
->
txPktC¡
++;

123 
p‹tAµE¡ry
->
txPktC¡
++;

127 
	}
}

129 
uöt32_t
 
	$acAµIdToIndex
(
uöt32_t
 
≠pId
)

131 
uöt32_t
 
ödex
 = 0;

133 
≠pId
) {

134 
AC_APP_ARP_ID
:

135 
ödex
 = 
AC_APP_ARP_INDEX
;

138 
ödex
 = 
AC_MAX_APP_INDEX
;

141  
ödex
;

142 
	}
}

153 
acRëu∫_t


154 
	$acAµPktH™dÀr
(
acPìrTblKey_t
 *
pktInfoKey
, 
acAµP¨£r_t
 *
d©a
)

156 *
≥îNode
 = 
NULL
;

157 
uöt32_t
 
ödex
 = 0;

159 
	`¥ötf
("%s: index:%d,áµId:0x%x func:%p\n", 
__func__
,

160 
ödex
, 
pktInfoKey
->
≠pId
, 
≠pPrŸoH™dÀrs
[ödex].
func
);

162 
ödex
 = 
	`acAµIdToIndex
(
pktInfoKey
->
≠pId
);

164 
	`¥ötf
("%s: index:%d,áµId:0x%x func:%p\n", 
__func__
,

165 
ödex
, 
pktInfoKey
->
≠pId
, 
≠pPrŸoH™dÀrs
[ödex].
func
);

167 i‡–(
ödex
 < 
AC_MAX_APP_INDEX
Ë&& (
≠pPrŸoH™dÀrs
[ödex].
func
) ) {

169 
	`acP‹tAndAµInfoUpd©e
(
pktInfoKey
, 
ödex
, 
d©a
);

174 
≥îNode
 = 
	`acPìrTblE¡ryFöd
(
pktInfoKey
);

175 i‡(
≥îNode
 =
NULL
) {

176 
≥îNode
 = 
	`acPìrTblE¡ryCª©e
(
pktInfoKey
);

177 
	`exp‹t_≥î_node_¨p_d©a
(
≥îNode
);

180 i‡(
≥îNode
) {

181 
≠pPrŸoH™dÀrs
[
ödex
].
	`func
(
≥îNode
, 
d©a
);

185  
AC_SUCCESS
;

186 
	}
}

	@src/ac_database.c

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

12 
	~"../ö˛ude/ac_ty≥s.h
"

13 
	~"../ö˛ude/ac_d©aba£.h
"

14 
	~"../ö˛ude/ac_≠p_defs.h
"

15 
	~"../ö˛ude/ac_≠p_≠i.h
"

21 
acP‹tTbl_t
 
	gacP‹tDb
[
AC_MAX_PORTS
];

27 
acAµTbl_t
 
	gacAµDb
[
AC_MAX_APPS
];

33 
acP‹tAµTbl_t
 
	gacP‹tAµDb
[
AC_MAX_PORTS
][
AC_MAX_APPS
];

42 
acPìrTbl_t
 
	gacPìrDb
[
AC_MAX_PEER_ENTRIES
];

45 
acP‹tAµTblE¡ryAdd
(
acPìrTblKey_t
 *
key
, 
acPìrNode_t
 *
íåy
);

52 
uöt32_t


53 
	$acHashIndexCÆcuœã
(
uch¨8_t
 
key
[], uch¨8_à
keyLí
)

55 
uöt32_t
 
hashIndex
 = 0;

56 
uöt32_t
 
keysum
 = 0;

57 
uöt32_t
 
i
 = 0;

60 
i
 = 0; i < 
keyLí
; i++) {

61 
keysum
 ^
key
[
i
] ;

63 i‡(++
i
 < 
keyLí
) {

64 
keysum
 ^(
key
[
i
] << 8 & 0xff00);

69 
hashIndex
 = 
keysum
 / 
AC_MAX_PEER_TBL_HASH
;

70 
	`¥ötf
("hashsum = %d, hasIndex:%d\n", 
keysum
, 
hashIndex
);

72  (
hashIndex
);

73 
	}
}

80 
ölöe
 *

81 
	$acPìrTblE¡ryIn£π
(
acPìrTblKey_t
 *
key
, 
acPìrNode_t
 *
íåy
)

83 
uöt32_t
 
hashIndex
 = 0;

85 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
*)
key
, (
acPìrTblKey_t
));

87 i‡(
acPìrDb
[
hashIndex
].
hódp
 =
NULL
) {

88 
acPìrDb
[
hashIndex
].
hódp
 =ácPìrDb[hashIndex].
èûp
 = 
íåy
;

89 
	`¥ötf
("ö£πedÅhêíåyÅÿ≥îTb»hód: %p\n", 
íåy
);

91 
íåy
->
¥evp
 = 
acPìrDb
[
hashIndex
].
èûp
;;

92 
íåy
->
√xç
 = 
NULL
;

93 
acPìrDb
[
hashIndex
].
èûp
 = 
íåy
;

94 
	`¥ötf
("insertedÅheÉntryÅoÖeerTblÅail\n");

97  
íåy
;

98 
	}
}

104 
ölöe
 
acRëu∫_t


105 
	$acPìrTblE¡ryDñëe
(
acPìrTblKey_t
 *
key
)

107 
acPìrNode_t
 *
íåy
 = 
NULL
;

108 
uöt32_t
 
hashIndex
 = 0;

109 
uch¨8_t
 
found
 = 0;

111 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
*)
key
, (
acPìrTblKey_t
));

113 
íåy
 = 
acPìrDb
[
hashIndex
].
hódp
;

114 ;
íåy
 !
NULL
;É¡ry =É¡ry->
√xç
) {

115 i‡(
	`memcmp
(&
íåy
->
key
, key, (
acPìrTblKey_t
)) == 0) {

116 
found
 = 1;

121 i‡(
found
) {

122 i‡(
acPìrDb
[
hashIndex
].
hódp
 =
íåy
) {

124 
acPìrDb
[
hashIndex
].
hódp
 =ácPìrDb[hashIndex].hódp->
√xç
;

126 
íåy
->
¥evp
 =É¡ry->
√xç
;

129 
	`‰ì
(
íåy
);

132 
	`¥ötf
 ("%s: dñëedÅhêíåy %†\n", 
__func__
, 
found
 ? "true":"false");

134  
found
 ? 
AC_SUCCESS
 : 
AC_NOT_FOUND
;

135 
	}
}

142 
	$acPìrTblE¡ryFöd
 (
acPìrTblKey_t
 *
key
)

144 
acPìrNode_t
 *
íåy
 = 
NULL
;

145 
uöt32_t
 
hashIndex
 = 0;

147 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
*)
key
, (
acPìrTblKey_t
));

149 
íåy
 = 
acPìrDb
[
hashIndex
].
hódp
;

150 
	`¥ötf
 ("%s:ÖìrTb»hódÉ¡ry %∞© hashInbdex:%d\n", 
__func__
, 
íåy
, 
hashIndex
);

152 ;
íåy
 !
NULL
;É¡ry =É¡ry->
√xç
) {

153 i‡(
	`memcmp
(&
íåy
->
key
, key, (
acPìrTblKey_t
)) == 0) {

157 
	`¥ötf
 ("%s:ÇŸáàíåy index %d \n", 
__func__
, 
ödex
);

158 
	`¥ötf
 ("port:%d, %d, vlaidId:%d, %d,áppId:%d, %d\n",

159 
key
->
p‹tId
, 
íåy
->key.portId,

160 
key
->
vœnId
, 
íåy
->key.vlanId,

161 
key
->
≠pId
, 
íåy
->key.appId);

164 
	`¥ötf
 ("%s: foundÉ¡ry i†%∞\n", 
__func__
, 
íåy
);

165  
íåy
;

166 
	}
}

176 
	$acPìrTblE¡ryCª©e
(
acPìrTblKey_t
 *
key
)

178 
acPìrNode_t
 *
íåy
 = 
NULL
;

179 
uöt32_t
 
hashIndex
 = 0;

181 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
*)
key
, (
acPìrTblKey_t
));

183 
	`¥ötf
 ("\ncreateánÉntry \n");

184 
íåy
 = (
acPìrNode_t
 *Ë
	`mÆloc
((acPeerNode_t));

185 i‡(
íåy
) {

186 
	`mem£t
(
íåy
, 0, (
acPìrNode_t
));

187 
	`mem˝y
(&
íåy
->
key
, key, (
acPìrTblKey_t
));

188 
	`acPìrTblE¡ryIn£π
(
key
, 
íåy
);

189 
	`acP‹tAµTblE¡ryAdd
(
key
, 
íåy
);

190 
	`¥ötf
 ("createdáÉntry with key withÖortId:%d, vlanId:%d,áppId:%d,Éntry : %p\n",

191 
íåy
->
key
.
p‹tId
,É¡ry->key.
vœnId
,É¡ry->key.
≠pId
,Éntry);

194  
íåy
;

195 
	}
}

205 
ölöe
 *

206 
	$acPìrTblE¡ryFödAndCª©e
(
acPìrTblKey_t
 *
key
)

208 
acPìrNode_t
 *
íåy
 = 
NULL
;

210 
íåy
 = 
	`acPìrTblE¡ryFöd
(
key
);

211 i‡(
íåy
) {

212  
íåy
;

215 
íåy
 = 
	`acPìrTblE¡ryCª©e
(
key
);

216 i‡(
íåy
) {

217 
	`acP‹tAµTblE¡ryAdd
(
key
, 
íåy
);

220  
íåy
;

221 
	}
}

234 
	$acP‹tAµTblE¡ryAdd
(
acPìrTblKey_t
 *
key
, 
acPìrNode_t
 *
íåy
)

236 
uöt32_t
 
ödex
 = 0;

237 
acP‹tAµTbl_t
 *
p‹tAµE¡ry
 = 
NULL
;

239 
ödex
 = 
	`acAµIdToIndex
(
key
->
≠pId
);

240 
p‹tAµE¡ry
 = &
acP‹tAµDb
[
key
->
p‹tId
][
ödex
];

242 i‡(
p‹tAµE¡ry
->
hódp
 =
NULL
) {

243 
p‹tAµE¡ry
->
hódp
 = 
íåy
;

244 
p‹tAµE¡ry
->
èûp
 = 
íåy
;

246 
p‹tAµE¡ry
->
èûp
 = 
íåy
;

247 
p‹tAµE¡ry
->
èûp
->
√xç
 = 
NULL
;

251 
	}
}

255 
	$maö
 ()

257 
acPìrNode_t
 *
íåy
 = 
NULL
;

258 
uöt32_t
 
hashIndex
 = 0;

260 
acPìrTblKey_t
 
key2
 = {2,11,222,0,{0,}};

261 
acPìrTblKey_t
 
key3
 = {3,11,333,0,{0,}};

262 
acPìrTblKey_t
 
key11
 = {1,11,111,0,{0,}};

263 
acPìrTblKey_t
 
key22
 = {2,11,222,0,{0,}};

264 
acPìrTblKey_t
 
key222
 = {2,11,222,3,{0,}};

265 
uöt32_t
 
keyLí
 = (
acPìrTblKey_t
);

268 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
 *Ë&
key1
, 
keyLí
);

269 
	`¥ötf
 ("hash index 1%d\n", 
hashIndex
);

270 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
 *)&
key2
, 
keyLí
);

271 
	`¥ötf
 ("hash index 2%d\n", 
hashIndex
);

272 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
 *)&
key3
, 
keyLí
);

273 
	`¥ötf
 ("hash index 3%d\n", 
hashIndex
);

274 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
 *)&
key11
, 
keyLí
);

275 
	`¥ötf
 ("hash index 1%d\n", 
hashIndex
);

276 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
 *)&
key22
, 
keyLí
);

277 
	`¥ötf
 ("hash index 2%d\n", 
hashIndex
);

278 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
 *)&
key222
, 
keyLí
);

279 
	`¥ötf
 ("hash index 2%d\n", 
hashIndex
);

280 
hashIndex
 = 
	`acHashIndexCÆcuœã
((
uch¨8_t
 *)&
key222
, 
keyLí
);

281 
	`¥ötf
 ("hash index%d\n", 
hashIndex
);

284 
íåy
 = 
	`acPìrTblE¡ryFödAndCª©e
(&
key1
);

285 
íåy
 = 
	`acPìrTblE¡ryFöd
(&
key1
);

287 
	`¥ötf
 ("íåyÖ‹tId:%d\n", 
íåy
->
key
.
p‹tId
);

288 
	`¥ötf
 ("íåyáµId:%d\n", 
íåy
->
key
.
p‹tId
);

289 
	`¥ötf
 ("íåy vœnId:%d\n", 
íåy
->
key
.
vœnId
);

291 
	`acPìrTblE¡ryDñëe
(&
key1
);

292 
íåy
 = 
	`acPìrTblE¡ryFöd
(&
key1
);

293 
	`¥ötf
 ("A·î Dñëêíåy :%p\n", 
íåy
);

297 
acPìrTblKey_t
 
key1
 = {0,0x0806,1,{0,},{0,}};

298 
acAµP¨£r_t
 
∑r£r_d©a
 = {{0, 0x0806, 1,{0,}, {0,}}, 0,22};

299 
	`¥ötf
 ("UpdateánÉntryátÖort:%d,áppId:0x%x,ÖktSz:%d\n",

300 
∑r£r_d©a
.
key
.
p‹tId
,Ö¨£r_d©a.key.
≠pId
,Ö¨£r_d©a.
pktSz
);

302 
	`acAµPktH™dÀr
(&
key1
, &
∑r£r_d©a
);

303 
íåy
 = 
	`acPìrTblE¡ryFöd
(&
key1
);

304 
	`¥ötf
 ("\¿födÉ¡ry : %p\n", 
íåy
);

306 
	`acPìrTblE¡ryDñëe
(&
key1
);

307 
íåy
 = 
	`acPìrTblE¡ryFöd
(&
key1
);

308 
	`¥ötf
 ("A·î Dñëêíåy :%p\n", 
íåy
);

313 
	}
}

	@src/acop.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<pˇp.h
>

12 
	~<î∫o.h
>

13 
	~<sys/sockë.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<√töë/if_ëhî.h
>

17 
	~"../ö˛ude/ac_d©aba£.h
"

19 
acRëu∫_t


20 
acAµPktH™dÀr
(
acPìrTblKey_t
 *
pktInfoKey
, 
acAµP¨£r_t
 *
d©a
);

21 
	gdev
[20];

22 
ac›p_ùfix_öô
(, **);

24 
	$maö
(
¨gc
, **
¨gv
)

26 
i
;

27 
îrbuf
[
PCAP_ERRBUF_SIZE
];

28 
pˇp_t
* 
des¸
;

29 c⁄° 
u_ch¨
 *
∑ckë
;

30 
pˇp_pkthdr
 
hdr
;

31 
ëhî_hódî
 *
ïå
;

32 
acAµP¨£r_t
 
pP¨£r
;

34 
u_ch¨
 *
±r
;

38 
	`¥ötf
("TŸÆ d©®árg¯%d\n", 
¨gc
);

39 
	`ac›p_ùfix_öô
(
¨gc
, 
¨gv
);

41 
dev
 = 
¨gv
[1];

42 i‡(
dev
 =
NULL
)

44 
	`¥ötf
("%s\n",
îrbuf
);

45 
	`exô
(1);

48 
	`¥ötf
("DEV: %s\n",
dev
);

50 
des¸
 = 
	`pˇp_›í_live
(
dev
,
BUFSIZ
,0,-1,
îrbuf
);

52 i‡(
des¸
 =
NULL
)

54 
	`¥ötf
("pˇp_›í_live(): %s\n",
îrbuf
);

55 
	`exô
(1);

66 
∑ckë
 = 
	`pˇp_√xt
(
des¸
,&
hdr
);

68 if(
∑ckë
 =
NULL
)

70 
	`¥ötf
("Didn't grabÖacket\n");

71 
	`exô
(1);

81 
	`¥ötf
("GøbbedÖackë o‡Àngth %d\n",
hdr
.
Àn
);

82 
	`¥ötf
("Recõvedáà..... %s\n",
	`˘ime
((c⁄° 
time_t
*)&
hdr
.
ts
.
tv_£c
));

83 
	`¥ötf
("Ethî√àaddªs†Àngth i†%d\n",
ETHER_HDR_LEN
);

86 
ïå
 = (
ëhî_hódî
 *Ë
∑ckë
;

87 
	`mem£t
(&
pP¨£r
, 0, (pParser));

89 i‡(
	`¡ohs
 (
ïå
->
ëhî_ty≥
Ë=
ETHERTYPE_IP
)

91 
	`¥ötf
("EthernetÅype hex:%x dec:%d isán IPÖacket\n",

92 
	`¡ohs
(
ïå
->
ëhî_ty≥
),

93 
	`¡ohs
(
ïå
->
ëhî_ty≥
));

94 
pP¨£r
.
key
.
p‹tId
 = 0x00;

95 
pP¨£r
.
key
.
≠pId
 = 
	`¡ohs
(
ïå
->
ëhî_ty≥
);

96 
pP¨£r
.
pktSz
 = 
hdr
.
Àn
;

97 i‡(
	`acAµPktH™dÀr
(&
pP¨£r
.
key
, &pParser)){

98 
	`¥ötf
("DB insert failed\n");

101 }i‡(
	`¡ohs
 (
ïå
->
ëhî_ty≥
Ë=
ETHERTYPE_ARP
){

102 
	`¥ötf
("EthernetÅype hex:%x dec:%d isán ARPÖacket\n",

103 
	`¡ohs
(
ïå
->
ëhî_ty≥
),

104 
	`¡ohs
(
ïå
->
ëhî_ty≥
));

105 
pP¨£r
.
key
.
p‹tId
 = 0x00;

106 
pP¨£r
.
key
.
≠pId
 = 
	`¡ohs
(
ïå
->
ëhî_ty≥
);

107 
pP¨£r
.
pktSz
 = 
hdr
.
Àn
;

108 i‡(
	`acAµPktH™dÀr
(&
pP¨£r
.
key
, &pParser)){

109 
	`¥ötf
("DB insert failed\n");

114 
±r
 = 
ïå
->
ëhî_dho°
;

115 
i
 = 
ETHER_ADDR_LEN
;

116 
	`¥ötf
(" Destination Address: ");

118 
	`¥ötf
("%s%x",(
i
 =
ETHER_ADDR_LEN
Ë? " " : ":",*
±r
++);

119 }--
i
>0);

120 
	`¥ötf
("\n");

122 
±r
 = 
ïå
->
ëhî_sho°
;

123 
i
 = 
ETHER_ADDR_LEN
;

124 
	`¥ötf
(" Source Address: ");

126 
	`¥ötf
("%s%x",(
i
 =
ETHER_ADDR_LEN
Ë? " " : ":",*
±r
++);

127 }--
i
>0);

128 
	`¥ötf
("\n");

131 
	}
}

	@src/acop_data_exporter.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

12 
	~<ùfix.h
>

13 
	~<mlog.h
>

14 
	~<ac_d©aba£.h
>

15 
	gac›p_ùfix_öûized
 = 0;

16 
ùfix_t
 *
	gaIpFixHdr
 = 
NULL
;

17 
ùfix_ãm∂©e_t
 *
	gaIpFixAΩD©aExp
 = 
NULL
;

18 
ùfix_ãm∂©e_t
 *
	gaIpFixAÃmExp
 = 
NULL
;

19 
dev
[20];

21 
ac›p_¨p_d©a_ãm∂©e
();

22 
ac›p_¨p_Ærm_ãm∂©e
();

24 
	$ac›p_ùfix_öô
–
¨gc
, **
¨gv
 )

26 *
›t°r
="hc:d:p:vstu";

27 
›t
;

28 
cho°
[256];

29 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

30 
sour˚id
 = 12345;

31 
p‹t
 = 
IPFIX_PORTNO
;

32 
vîbo£_Àvñ
 = 0;

35 
	`°r˝y
(
cho°
, "localhost");

39  ( 
›t
 = 
	`gë›t
–
¨gc
, 
¨gv
, 
›t°r
 ) ) !
EOF
 )

41  
›t
 )

44 i‡((
p‹t
=
	`©oi
(
›èrg
)) <0) {

45 
	`Ârötf
–
°dîr
, "Invalid -párgument!\n" );

46 
	`exô
(1);

51 
	`°r˝y
(
cho°
, 
›èrg
);

55 
¥Ÿocﬁ
 = 
IPFIX_PROTO_SCTP
;

59 
¥Ÿocﬁ
 = 
IPFIX_PROTO_TCP
;

63 
¥Ÿocﬁ
 = 
IPFIX_PROTO_UDP
;

67 
vîbo£_Àvñ
 ++;

70 
	`¥ötf
("%†\n", 
›èrg
);

71 
	`°∫˝y
(
dev
, 
›èrg
,10);

75 
	`Ârötf
–
°dîr
,

85 
¨gv
[0], 
IPFIX_PORTNO
 );

86 
	`exô
(1);

92 
	`mlog_£t_vÀvñ
–
vîbo£_Àvñ
 );

96 i‡(
	`ùfix_öô
() <0) {

97 
	`Ârötf
–
°dîr
, "ˇ¬Ÿ inô ipfix moduÀ: %s\n", 
	`°ªº‹
(
î∫o
) );

98 
	`exô
(1);

103 i‡–
	`ùfix_›í
–&
aIpFixHdr
, 
sour˚id
, 
IPFIX_VERSION
 ) <0 ) {

104 
	`Ârötf
–
°dîr
, "ùfix_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
) );

105 
	`exô
(1);

110 i‡(
	`ùfix_add_cﬁÀ˘‹
–
aIpFixHdr
, 
cho°
, 
p‹t
, 
¥Ÿocﬁ
 ) <0 ) {

111 
	`Ârötf
–
°dîr
, "ipfix_add_collector(%s,%d) failed: %s\n",

112 
cho°
, 
p‹t
, 
	`°ªº‹
(
î∫o
));

113 
	`exô
(1);

119 
	`ac›p_¨p_d©a_ãm∂©e
();

120 
	`ac›p_¨p_Ærm_ãm∂©e
();

122 
ac›p_ùfix_öûized
 = 1;

125 
	}
}

127 
	$ac›p_ùfix_unöô
()

129 i‡(
ac›p_ùfix_öûized
) {

130 
	`ùfix_dñëe_ãm∂©e
(
aIpFixHdr
, 
aIpFixAΩD©aExp
);

131 
	`ùfix_dñëe_ãm∂©e
(
aIpFixHdr
, 
aIpFixAÃmExp
);

132 
	`ùfix_˛o£
–
aIpFixHdr
 );

133 
	`ùfix_˛ónup
();

137 
	}
}

141 
	$ac›p_¨p_d©a_ãm∂©e
()

146 i‡–
	`ùfix_√w_d©a_ãm∂©e
(
aIpFixHdr
, &
aIpFixAΩD©aExp
, 6 ) <0 ) {

147 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

148 
	`°ªº‹
(
î∫o
) );

149 
	`exô
(1);

153 i‡–(
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAΩD©aExp
,

154 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 )

155 || (
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAΩD©aExp
,

156 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 ) ) {

157 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

158 
	`°ªº‹
(
î∫o
) );

159 
	`exô
(1);

163 i‡–(
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAΩD©aExp
,

164 0, 
IPFIX_FT_VLANID
, 2 ) <0 )

165 || (
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAΩD©aExp
,

166 0, 
IPFIX_FT_FLOWDIRECTION
, 2 ) <0 ) ) {

167 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

168 
	`°ªº‹
(
î∫o
) );

169 
	`exô
(1);

173 i‡–(
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAΩD©aExp
,

174 0, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 2 ) <0 )

175 || (
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAΩD©aExp
,

176 0, 
IPFIX_FT_PORTID
, 2 ) <0 ) ) {

177 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

178 
	`°ªº‹
(
î∫o
) );

179 
	`exô
(1);

184 
	}
}

188 
	$ac›p_¨p_Ærm_ãm∂©e
()

193 i‡–
	`ùfix_√w_d©a_ãm∂©e
(
aIpFixHdr
, &
aIpFixAÃmExp
, 6 ) <0 ) {

194 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

195 
	`°ªº‹
(
î∫o
) );

196 
	`exô
(1);

200 i‡–(
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAÃmExp
,

201 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 )

202 || (
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAÃmExp
,

203 0, 
IPFIX_FT_SOURCEIPV4ADDRESS
, 4 ) <0 ) ) {

204 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

205 
	`°ªº‹
(
î∫o
) );

206 
	`exô
(1);

210 i‡–(
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAÃmExp
,

211 0, 
IPFIX_FT_VLANID
, 2 ) <0 )

212 || (
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAÃmExp
,

213 0, 
IPFIX_FT_PROTOCOLIDENTIFIER
, 2 ) <0 ) ) {

214 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

215 
	`°ªº‹
(
î∫o
) );

216 
	`exô
(1);

220 i‡–(
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAÃmExp
,

221 0, 
IPFIX_FT_PORTID
, 2 ) <0 ) ) {

222 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

223 
	`°ªº‹
(
î∫o
) );

224 
	`exô
(1);

229 i‡–(
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAÃmExp
,

230 0, 
IPFIX_FT_INBOUND_RATE
, 2 ) <0 )

231 || (
	`ùfix_add_fõld
–
aIpFixHdr
, 
aIpFixAÃmExp
,

232 0, 
IPFIX_FT_OUTBOUND_RATE
, 2 ) <0 ) ) {

233 
	`Ârötf
–
°dîr
, "ipfix_new_template() failed: %s\n",

234 
	`°ªº‹
(
î∫o
) );

235 
	`exô
(1);

240 
	}
}

242 
	$exp‹t_≥î_node_¨p_d©a
(
acPìrNode_t
 *
≥î_node
)

244 
	s¨p_d©a_exp‹t_s
 {

245 
uöt32_t
 
§cIp
;

246 
uöt32_t
 
d°Ip
;

247 
uöt16_t
 
vœnId
;

248 
uöt16_t
 
dúe˘i⁄
;

249 
uöt16_t
 
¥Ÿocﬁ
;

250 
uöt16_t
 
p‹tId
;

251 }
	`__©åibuã__
((
∑cked
))
¨pD©a
;

255 
¨pD©a
.
§cIp
 = (
uöt32_t
)
≥î_node
->
key
.§cIp.
addr
.
v4addr
;

256 
¨pD©a
.
d°Ip
 = (
uöt32_t
)
≥î_node
->
key
.
≥îIp
.
addr
.
v4addr
;

257 
¨pD©a
.
vœnId
 = (
uöt16_t
)
≥î_node
->
key
.vlanId;

258 
¨pD©a
.
dúe˘i⁄
 = 0;

259 
¨pD©a
.
¥Ÿocﬁ
 = 806;

260 
¨pD©a
.
p‹tId
 = 
≥î_node
->
key
.portId;

264 
	`¥ötf
( "\n\r ExportingÖeerÇodeárp data ... " );

265 
	`fÊush
–
°dout
) ;

268 i‡–
	`ùfix_exp‹t
(
aIpFixHdr
, 
aIpFixAΩD©aExp
,

269 
≥î_node
->
key
.
§cIp
.
addr
.
v4addr
,

270 
≥î_node
->
key
.
≥îIp
.
addr
.
v4addr
,

271 
≥î_node
->
key
.
vœnId
, 0x00,

275 
	`Ârötf
–
°dîr
, "ipfix_export() failed: %s\n",

276 
	`°ªº‹
(
î∫o
) );

277 
	`exô
(1);

280 i‡–
	`ùfix_exp‹t_Êush
–
aIpFixHdr
 ) <0 ) {

281 
	`Ârötf
–
°dîr
, "ipfix_export_flush() failed: %s\n",

282 
	`°ªº‹
(
î∫o
) );

283 
	`exô
(1);

286 
	`¥ötf
( "ARP dataÉxported.\n" );

289 
	}
}

	@src/test_cap1.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<pˇp.h
>

12 
	~<î∫o.h
>

13 
	~<sys/sockë.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<√töë/if_ëhî.h
>

17 
	~"../ö˛ude/ac_d©aba£.h
"

19 
acRëu∫_t


20 
acAµPktH™dÀr
(
acPìrTblKey_t
 *
pktInfoKey
, 
acAµP¨£r_t
 *
d©a
);

22 
	$maö
(
¨gc
, **
¨gv
)

24 
i
;

25 *
dev
;

26 
îrbuf
[
PCAP_ERRBUF_SIZE
];

27 
pˇp_t
* 
des¸
;

28 c⁄° 
u_ch¨
 *
∑ckë
;

29 
pˇp_pkthdr
 
hdr
;

30 
ëhî_hódî
 *
ïå
;

31 
acAµP¨£r_t
 
pP¨£r
;

33 
u_ch¨
 *
±r
;

37 
	`¥ötf
("TŸÆ d©®árg¯%d\n", 
¨gc
);

38 i‡(
¨gc
 < 2){

39 
	`¥ötf
("You mustÉnter input interface \n");

43 
dev
 = 
¨gv
[1];

44 i‡(
dev
 =
NULL
)

46 
	`¥ötf
("%s\n",
îrbuf
);

47 
	`exô
(1);

50 
	`¥ötf
("DEV: %s\n",
dev
);

68 
des¸
 = 
	`pˇp_›í_live
(
dev
,
BUFSIZ
,0,-1,
îrbuf
);

70 if(
des¸
 =
NULL
)

72 
	`¥ötf
("pˇp_›í_live(): %s\n",
îrbuf
);

73 
	`exô
(1);

84 
∑ckë
 = 
	`pˇp_√xt
(
des¸
,&
hdr
);

86 if(
∑ckë
 =
NULL
)

88 
	`¥ötf
("Didn't grabÖacket\n");

89 
	`exô
(1);

99 
	`¥ötf
("GøbbedÖackë o‡Àngth %d\n",
hdr
.
Àn
);

100 
	`¥ötf
("Recõvedáà..... %s\n",
	`˘ime
((c⁄° 
time_t
*)&
hdr
.
ts
.
tv_£c
));

101 
	`¥ötf
("Ethî√àaddªs†Àngth i†%d\n",
ETHER_HDR_LEN
);

104 
ïå
 = (
ëhî_hódî
 *Ë
∑ckë
;

107 i‡(
	`¡ohs
 (
ïå
->
ëhî_ty≥
Ë=
ETHERTYPE_IP
)

109 
	`¥ötf
("EthernetÅype hex:%x dec:%d isán IPÖacket\n",

110 
	`¡ohs
(
ïå
->
ëhî_ty≥
),

111 
	`¡ohs
(
ïå
->
ëhî_ty≥
));

112 
pP¨£r
.
key
.
p‹tId
 = 0x00;

113 
pP¨£r
.
key
.
≠pId
 = 
	`¡ohs
(
ïå
->
ëhî_ty≥
);

114 
pP¨£r
.
pktSz
 = 
hdr
.
Àn
;

115 i‡(
	`acAµPktH™dÀr
(&
pP¨£r
.
key
, &pParser)){

116 
	`¥ötf
("DB insert failed\n");

119 }i‡(
	`¡ohs
 (
ïå
->
ëhî_ty≥
Ë=
ETHERTYPE_ARP
){

120 
	`¥ötf
("EthernetÅype hex:%x dec:%d isán ARPÖacket\n",

121 
	`¡ohs
(
ïå
->
ëhî_ty≥
),

122 
	`¡ohs
(
ïå
->
ëhî_ty≥
));

123 
pP¨£r
.
key
.
p‹tId
 = 0x00;

124 
pP¨£r
.
key
.
≠pId
 = 
	`¡ohs
(
ïå
->
ëhî_ty≥
);

125 
pP¨£r
.
pktSz
 = 
hdr
.
Àn
;

126 i‡(
	`acAµPktH™dÀr
(&
pP¨£r
.
key
, &pParser)){

127 
	`¥ötf
("DB insert failed\n");

132 
±r
 = 
ïå
->
ëhî_dho°
;

133 
i
 = 
ETHER_ADDR_LEN
;

134 
	`¥ötf
(" Destination Address: ");

136 
	`¥ötf
("%s%x",(
i
 =
ETHER_ADDR_LEN
Ë? " " : ":",*
±r
++);

137 }--
i
>0);

138 
	`¥ötf
("\n");

140 
±r
 = 
ïå
->
ëhî_sho°
;

141 
i
 = 
ETHER_ADDR_LEN
;

142 
	`¥ötf
(" Source Address: ");

144 
	`¥ötf
("%s%x",(
i
 =
ETHER_ADDR_LEN
Ë? " " : ":",*
±r
++);

145 }--
i
>0);

146 
	`¥ötf
("\n");

149 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_EACCESS
 0x200

	)

122 
f˙é
 (
__fd
, 
__cmd
, ...);

130 #i‚de‡
__USE_FILE_OFFSET64


131 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

133 #ifde‡
__REDIRECT


134 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

135 
	`__n⁄nuŒ
 ((1));

137 
	#›í
 
›í64


	)

140 #ifde‡
__USE_LARGEFILE64


141 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

144 #ifde‡
__USE_ATFILE


154 #i‚de‡
__USE_FILE_OFFSET64


155 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

156 
	`__n⁄nuŒ
 ((2));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

160 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

162 
	#›í©
 
›í©64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

167 
	`__n⁄nuŒ
 ((2));

176 #i‚de‡
__USE_FILE_OFFSET64


177 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

179 #ifde‡
__REDIRECT


180 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

181 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

183 
	#¸ót
 
¸ót64


	)

186 #ifde‡
__USE_LARGEFILE64


187 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

190 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

191 && !
deföed
 
__USE_POSIX
))

200 
	#F_ULOCK
 0

	)

201 
	#F_LOCK
 1

	)

202 
	#F_TLOCK
 2

	)

203 
	#F_TEST
 3

	)

205 #i‚de‡
__USE_FILE_OFFSET64


206 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

211 
	#lockf
 
lockf64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

219 #ifde‡
__USE_XOPEN2K


222 #i‚de‡
__USE_FILE_OFFSET64


223 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

224 
__advi£
Ë
__THROW
;

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

228 
__off64_t
 
__Àn
, 
__advi£
),

229 
posix_Ádvi£64
);

231 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

236 
__advi£
Ë
__THROW
;

244 #i‚de‡
__USE_FILE_OFFSET64


245 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

249 
__off64_t
 
__Àn
),

250 
posix_ÁŒoˇã64
);

252 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

262 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

263 && 
deföed
 
__va_¨g_∑ck_Àn


264 
	~<bôs/f˙é2.h
>

267 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gnu-versions.h

20 #i‚de‡
_GNU_VERSIONS_H


21 
	#_GNU_VERSIONS_H
 1

	)

47 
	#_GNU_OBSTACK_INTERFACE_VERSION
 1

	)

48 
	#_GNU_REGEX_INTERFACE_VERSION
 1

	)

49 
	#_GNU_GLOB_INTERFACE_VERSION
 1

	)

50 
	#_GNU_GETOPT_INTERFACE_VERSION
 2

	)

	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libgen.h

19 #i‚de‡
_LIBGEN_H


20 
	#_LIBGEN_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


27 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

35 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

36 
	#ba£«me
 
__xpg_ba£«me


	)

38 
__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 || deföed 
__LDBL_COMPAT
)

102 #ifde‡
__LDBL_COMPAT


104 #ifde‡
__USE_ISOC99


105 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

106 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

107 #ifde‡
__REDIRECT_NTH


108 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

109 
__∆dbl_√xâow¨df
)

110 
	`__©åibuã__
 ((
__c⁄°__
));

111 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

112 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

114 (
__x
, 
__y
),

115 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #unde‡
__MATHDECL_1


123 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

124 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

125 
¨gs
, 
Æüs
)

	)

126 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

127 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

130 #i‚de‡
_Ml⁄g_doubÀ_


131 
	#_Ml⁄g_doubÀ_
 

	)

133 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

134 #ifde‡
__STDC__


135 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

137 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

139 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

140 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

141 
	~<bôs/m©hˇŒs.h
>

142 #unde‡
_MdoubÀ_


143 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


144 #unde‡
_MdoubÀ_END_NAMESPACE


145 #unde‡
__MATH_PRECNAME


150 #unde‡
__MATHDECL_1


151 #unde‡
__MATHDECL


152 #unde‡
__MATHCALL


155 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


157 
signgam
;

162 #ifde‡
__USE_ISOC99


200 
FP_NAN
,

201 
	#FP_NAN
 
FP_NAN


	)

202 
FP_INFINITE
,

203 
	#FP_INFINITE
 
FP_INFINITE


	)

204 
FP_ZERO
,

205 
	#FP_ZERO
 
FP_ZERO


	)

206 
FP_SUBNORMAL
,

207 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

208 
FP_NORMAL


209 
	#FP_NORMAL
 
FP_NORMAL


	)

213 #ifde‡
__NO_LONG_DOUBLE_MATH


214 
	#Â˛assify
(
x
) \

215 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

217 
	#Â˛assify
(
x
) \

218 ( (
x
) ==  () \

219 ? 
	`__Â˛assifyf
 (
x
) \

220 :  (
x
) ==  () \

221 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

225 #ifde‡
__NO_LONG_DOUBLE_MATH


226 
	#signbô
(
x
) \

227 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

229 
	#signbô
(
x
) \

230 ( (
x
) ==  () \

231 ? 
	`__signbôf
 (
x
) \

232 :  (
x
) ==  () \

233 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

237 #ifde‡
__NO_LONG_DOUBLE_MATH


238 
	#isföôe
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

241 
	#isföôe
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__föôef
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

249 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

253 #ifde‡
__NO_LONG_DOUBLE_MATH


254 
	#i¢™
(
x
) \

255 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

257 
	#i¢™
(
x
) \

258 ( (
x
) ==  () \

259 ? 
	`__i¢™f
 (
x
) \

260 :  (
x
) ==  () \

261 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

265 #ifde‡
__NO_LONG_DOUBLE_MATH


266 
	#isöf
(
x
) \

267 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

269 
	#isöf
(
x
) \

270 ( (
x
) ==  () \

271 ? 
	`__isöff
 (
x
) \

272 :  (
x
) ==  () \

273 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

277 
	#MATH_ERRNO
 1

	)

278 
	#MATH_ERREXCEPT
 2

	)

283 #i‚de‡
__FAST_MATH__


284 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

289 #ifdef 
__USE_MISC


293 
_IEEE_
 = -1,

294 
_SVID_
,

295 
_XOPEN_
,

296 
_POSIX_
,

297 
_ISOC_


298 } 
	t_LIB_VERSION_TYPE
;

303 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

307 #ifde‡
__USE_SVID


313 #ifde‡
__˝lu•lus


314 
__ex˚±i⁄


316 
ex˚±i⁄


319 
ty≥
;

320 *
«me
;

321 
¨g1
;

322 
¨g2
;

323 
ªtvÆ
;

324 
	}
};

326 #ifde‡
__˝lu•lus


327 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

329 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

332 
	#X_TLOSS
 1.41484755040568800000e+16

	)

335 
	#DOMAIN
 1

	)

336 
	#SING
 2

	)

337 
	#OVERFLOW
 3

	)

338 
	#UNDERFLOW
 4

	)

339 
	#TLOSS
 5

	)

340 
	#PLOSS
 6

	)

343 
	#HUGE
 3.40282347e+38F

	)

347 #ifde‡
__USE_XOPEN


349 
	#MAXFLOAT
 3.40282347e+38F

	)

356 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


357 
	#M_E
 2.7182818284590452354

	)

358 
	#M_LOG2E
 1.4426950408889634074

	)

359 
	#M_LOG10E
 0.43429448190325182765

	)

360 
	#M_LN2
 0.69314718055994530942

	)

361 
	#M_LN10
 2.30258509299404568402

	)

362 
	#M_PI
 3.14159265358979323846

	)

363 
	#M_PI_2
 1.57079632679489661923

	)

364 
	#M_PI_4
 0.78539816339744830962

	)

365 
	#M_1_PI
 0.31830988618379067154

	)

366 
	#M_2_PI
 0.63661977236758134308

	)

367 
	#M_2_SQRTPI
 1.12837916709551257390

	)

368 
	#M_SQRT2
 1.41421356237309504880

	)

369 
	#M_SQRT1_2
 0.70710678118654752440

	)

375 #ifde‡
__USE_GNU


376 
	#M_El
 2.7182818284590452353602874713526625L

	)

377 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

378 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

379 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

380 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

381 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

382 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

383 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

384 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

385 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

386 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

387 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

388 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

395 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


396 
	#__NO_MATH_INLINES
 1

	)

399 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

406 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

407 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

408 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

409 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

410 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

411 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

415 #ifde‡
__USE_EXTERN_INLINES


416 
	~<bôs/m©hölöe.h
>

419 #ifde‡
__USE_ISOC99


423 #i‚de‡
isgª©î


424 
	#isgª©î
(
x
, 
y
) \

425 (
__exãnsi⁄__
 \

426 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

427 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

431 #i‚de‡
isgª©îequÆ


432 
	#isgª©îequÆ
(
x
, 
y
) \

433 (
__exãnsi⁄__
 \

434 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

435 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

439 #i‚de‡
i¶ess


440 
	#i¶ess
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

447 #i‚de‡
i¶es£quÆ


448 
	#i¶es£quÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

455 #i‚de‡
i¶essgª©î


456 
	#i¶essgª©î
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

463 #i‚de‡
isun‹dîed


464 
	#isun‹dîed
(
u
, 
v
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

467 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

472 
	g__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/if_ether.h

19 #i‚de‡
__NETINET_IF_ETHER_H


21 
	#__NETINET_IF_ETHER_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 #ifde‡
__USE_BSD


61 
	~<√t/ëhî√t.h
>

62 
	~<√t/if_¨p.h
>

64 
__BEGIN_DECLS


72 
	sëhî_¨p
 {

73 
¨phdr
 
	mó_hdr
;

74 
u_öt8_t
 
	m¨p_sha
[
ETH_ALEN
];

75 
u_öt8_t
 
	m¨p_•a
[4];

76 
u_öt8_t
 
	m¨p_tha
[
ETH_ALEN
];

77 
u_öt8_t
 
	m¨p_ça
[4];

79 
	#¨p_hrd
 
ó_hdr
.
¨_hrd


	)

80 
	#¨p_¥o
 
ó_hdr
.
¨_¥o


	)

81 
	#¨p_h 
 
ó_hdr
.
¨_h 


	)

82 
	#¨p_∂n
 
ó_hdr
.
¨_∂n


	)

83 
	#¨p_›
 
ó_hdr
.
¨_›


	)

90 
	#ETHER_MAP_IP_MULTICAST
(
ùaddr
, 
íaddr
) \

94 (
íaddr
)[0] = 0x01; \

95 (
íaddr
)[1] = 0x00; \

96 (
íaddr
)[2] = 0x5e; \

97 (
íaddr
)[3] = ((
u_öt8_t
 *)
ùaddr
)[1] & 0x7f; \

98 (
íaddr
)[4] = ((
u_öt8_t
 *)
ùaddr
)[2]; \

99 (
íaddr
)[5] = ((
u_öt8_t
 *)
ùaddr
)[3]; \

100 }

	)

102 
	g__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


32 
uöt32_t
 
	tö_addr_t
;

33 
	sö_addr


35 
ö_addr_t
 
	ms_addr
;

39 
	~<bôs/ö.h
>

44 
	mIPPROTO_IP
 = 0,

45 
	#IPPROTO_IP
 
IPPROTO_IP


	)

46 
	mIPPROTO_ICMP
 = 1,

47 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

48 
	mIPPROTO_IGMP
 = 2,

49 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

50 
	mIPPROTO_IPIP
 = 4,

51 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

52 
	mIPPROTO_TCP
 = 6,

53 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

54 
	mIPPROTO_EGP
 = 8,

55 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

56 
	mIPPROTO_PUP
 = 12,

57 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

58 
	mIPPROTO_UDP
 = 17,

59 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

60 
	mIPPROTO_IDP
 = 22,

61 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

62 
	mIPPROTO_TP
 = 29,

63 
	#IPPROTO_TP
 
IPPROTO_TP


	)

64 
	mIPPROTO_DCCP
 = 33,

65 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

66 
	mIPPROTO_IPV6
 = 41,

67 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

68 
	mIPPROTO_RSVP
 = 46,

69 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

70 
	mIPPROTO_GRE
 = 47,

71 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

72 
	mIPPROTO_ESP
 = 50,

73 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

74 
	mIPPROTO_AH
 = 51,

75 
	#IPPROTO_AH
 
IPPROTO_AH


	)

76 
	mIPPROTO_MTP
 = 92,

77 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

78 
	mIPPROTO_BEETPH
 = 94,

79 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135,

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

411 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

412 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

413 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

414 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

416 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

417 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

418 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

419 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

420 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

422 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

424 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

425 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

426 =
	`ht⁄l
 (0x„800000))

	)

428 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

429 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

430 =
	`ht⁄l
 (0x„c00000))

	)

432 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

437 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

438 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

439 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

440 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

441 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

443 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

444 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

445 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

446 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

447 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

449 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


451 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

454 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

455 
__THROW
;

459 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

460 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

461 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

463 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

464 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

465 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

467 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

468 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

469 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

471 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

472 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

473 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

475 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

476 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

477 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

480 #ifde‡
__USE_GNU


482 
	sö6_pktöfo


484 
ö6_addr
 
ùi6_addr
;

485 
ùi6_ifödex
;

489 
	sù6_mtuöfo


491 
sockaddr_ö6
 
ù6m_addr
;

492 
uöt32_t
 
ù6m_mtu
;

497 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

500 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

501 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

502 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

503 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

504 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

505 
__mu…x
, 
__∂usy
)

506 
__THROW
 
__©åibuã_dïªˇãd__
;

507 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

508 
uöt8_t
 **
__çåp
)

509 
__THROW
 
__©åibuã_dïªˇãd__
;

510 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

511 
uöt8_t
 **
__çåp
, 
__ty≥
)

512 
__THROW
 
__©åibuã_dïªˇãd__
;

516 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

517 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

518 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

519 **
__d©abuÂ
Ë
__THROW
;

520 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

521 
__THROW
;

522 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

523 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

525 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

526 **
__d©abuÂ
Ë
__THROW
;

527 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

528 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

529 **
__d©abuÂ
Ë
__THROW
;

530 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

531 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

535 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

536 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

537 
__£gmíts
Ë
__THROW
;

538 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

539 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

540 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

541 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

542 
__THROW
;

548 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

549 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

550 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

551 
__THROW
;

554 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

555 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

556 
uöt32_t
 
__num§c
,

557 
__c⁄°
 
ö_addr
 *
__¶i°
)

558 
__THROW
;

562 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

563 
__c⁄°
 
sockaddr
 *
__group
,

564 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

565 
uöt32_t
 *
__num§c
,

566 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

569 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

570 
__c⁄°
 
sockaddr
 *
__group
,

571 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

572 
uöt32_t
 
__num§c
,

573 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

576 
__END_DECLS


	@/usr/include/netinet/in_systm.h

20 #i‚de‡
_NETINET_IN_SYSTM_H


21 
	#_NETINET_IN_SYSTM_H
 1

	)

23 
	~<sys/cdefs.h
>

24 
	~<sys/ty≥s.h
>

26 
__BEGIN_DECLS


35 
u_öt16_t
 
	tn_sh‹t
;

36 
u_öt32_t
 
	tn_l⁄g
;

37 
u_öt32_t
 
	tn_time
;

39 
	g__END_DECLS


	@/usr/include/netinet/ip.h

20 #i‚de‡
__NETINET_IP_H


21 
	#__NETINET_IP_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

28 
__BEGIN_DECLS


30 
	stime°amp


32 
u_öt8_t
 
	mÀn
;

33 
u_öt8_t
 
	m±r
;

34 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


35 
	mÊags
:4;

36 
	movîÊow
:4;

37 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


38 
	movîÊow
:4;

39 
	mÊags
:4;

43 
u_öt32_t
 
	md©a
[9];

46 
	sùhdr


48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	mihl
:4;

50 
	mvîsi⁄
:4;

51 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


52 
	mvîsi⁄
:4;

53 
	mihl
:4;

57 
u_öt8_t
 
	mtos
;

58 
u_öt16_t
 
	mtŸ_Àn
;

59 
u_öt16_t
 
	mid
;

60 
u_öt16_t
 
	m‰ag_off
;

61 
u_öt8_t
 
	mâl
;

62 
u_öt8_t
 
	m¥Ÿocﬁ
;

63 
u_öt16_t
 
	mcheck
;

64 
u_öt32_t
 
	mßddr
;

65 
u_öt32_t
 
	mdaddr
;

69 #ifde‡
__USE_BSD


109 
	sù


111 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


112 
	mù_hl
:4;

113 
	mù_v
:4;

115 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


116 
	mù_v
:4;

117 
	mù_hl
:4;

119 
u_öt8_t
 
	mù_tos
;

120 
u_sh‹t
 
	mù_Àn
;

121 
u_sh‹t
 
	mù_id
;

122 
u_sh‹t
 
	mù_off
;

123 
	#IP_RF
 0x8000

	)

124 
	#IP_DF
 0x4000

	)

125 
	#IP_MF
 0x2000

	)

126 
	#IP_OFFMASK
 0x1ff‡

	)

127 
u_öt8_t
 
	mù_âl
;

128 
u_öt8_t
 
	mù_p
;

129 
u_sh‹t
 
	mù_sum
;

130 
ö_addr
 
	mù_§c
, 
	mù_d°
;

136 
	sù_time°amp


138 
u_öt8_t
 
	mùt_code
;

139 
u_öt8_t
 
	mùt_Àn
;

140 
u_öt8_t
 
	mùt_±r
;

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	mùt_Êg
:4;

143 
	mùt_oÊw
:4;

145 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


146 
	mùt_oÊw
:4;

147 
	mùt_Êg
:4;

149 
u_öt32_t
 
	md©a
[9];

153 
	#IPVERSION
 4

	)

154 
	#IP_MAXPACKET
 65535

	)

162 
	#IPTOS_ECN_MASK
 0x03

	)

163 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

164 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

165 
	#IPTOS_ECN_ECT1
 0x01

	)

166 
	#IPTOS_ECN_ECT0
 0x02

	)

167 
	#IPTOS_ECN_CE
 0x03

	)

175 
	#IPTOS_DSCP_MASK
 0xfc

	)

176 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

177 
	#IPTOS_DSCP_AF11
 0x28

	)

178 
	#IPTOS_DSCP_AF12
 0x30

	)

179 
	#IPTOS_DSCP_AF13
 0x38

	)

180 
	#IPTOS_DSCP_AF21
 0x48

	)

181 
	#IPTOS_DSCP_AF22
 0x50

	)

182 
	#IPTOS_DSCP_AF23
 0x58

	)

183 
	#IPTOS_DSCP_AF31
 0x68

	)

184 
	#IPTOS_DSCP_AF32
 0x70

	)

185 
	#IPTOS_DSCP_AF33
 0x78

	)

186 
	#IPTOS_DSCP_AF41
 0x88

	)

187 
	#IPTOS_DSCP_AF42
 0x90

	)

188 
	#IPTOS_DSCP_AF43
 0x98

	)

189 
	#IPTOS_DSCP_EF
 0xb8

	)

196 
	#IPTOS_CLASS_MASK
 0xe0

	)

197 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

198 
	#IPTOS_CLASS_CS0
 0x00

	)

199 
	#IPTOS_CLASS_CS1
 0x20

	)

200 
	#IPTOS_CLASS_CS2
 0x40

	)

201 
	#IPTOS_CLASS_CS3
 0x60

	)

202 
	#IPTOS_CLASS_CS4
 0x80

	)

203 
	#IPTOS_CLASS_CS5
 0xa0

	)

204 
	#IPTOS_CLASS_CS6
 0xc0

	)

205 
	#IPTOS_CLASS_CS7
 0xe0

	)

207 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

213 
	#IPTOS_TOS_MASK
 0x1E

	)

214 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

215 
	#IPTOS_LOWDELAY
 0x10

	)

216 
	#IPTOS_THROUGHPUT
 0x08

	)

217 
	#IPTOS_RELIABILITY
 0x04

	)

218 
	#IPTOS_LOWCOST
 0x02

	)

219 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

224 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

225 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

226 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

227 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

228 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

229 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

230 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

231 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

232 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

233 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

238 
	#IPOPT_COPY
 0x80

	)

239 
	#IPOPT_CLASS_MASK
 0x60

	)

240 
	#IPOPT_NUMBER_MASK
 0x1f

	)

242 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

243 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

244 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

246 
	#IPOPT_CONTROL
 0x00

	)

247 
	#IPOPT_RESERVED1
 0x20

	)

248 
	#IPOPT_DEBMEAS
 0x40

	)

249 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

250 
	#IPOPT_RESERVED2
 0x60

	)

252 
	#IPOPT_EOL
 0

	)

253 
	#IPOPT_END
 
IPOPT_EOL


	)

254 
	#IPOPT_NOP
 1

	)

255 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

257 
	#IPOPT_RR
 7

	)

258 
	#IPOPT_TS
 68

	)

259 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

260 
	#IPOPT_SECURITY
 130

	)

261 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

262 
	#IPOPT_LSRR
 131

	)

263 
	#IPOPT_SATID
 136

	)

264 
	#IPOPT_SID
 
IPOPT_SATID


	)

265 
	#IPOPT_SSRR
 137

	)

266 
	#IPOPT_RA
 148

	)

271 
	#IPOPT_OPTVAL
 0

	)

272 
	#IPOPT_OLEN
 1

	)

273 
	#IPOPT_OFFSET
 2

	)

274 
	#IPOPT_MINOFF
 4

	)

276 
	#MAX_IPOPTLEN
 40

	)

279 
	#IPOPT_TS_TSONLY
 0

	)

280 
	#IPOPT_TS_TSANDADDR
 1

	)

281 
	#IPOPT_TS_PRESPEC
 3

	)

284 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

285 
	#IPOPT_SECUR_CONFID
 0xf135

	)

286 
	#IPOPT_SECUR_EFTO
 0x789a

	)

287 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

288 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

289 
	#IPOPT_SECUR_SECRET
 0xd788

	)

290 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

295 
	#MAXTTL
 255

	)

296 
	#IPDEFTTL
 64

	)

297 
	#IPFRAGTTL
 60

	)

298 
	#IPTTLDEC
 1

	)

300 
	#IP_MSS
 576

	)

302 
	g__END_DECLS


	@/usr/include/netinet/ip6.h

19 #i‚de‡
_NETINET_IP6_H


20 
	#_NETINET_IP6_H
 1

	)

22 
	~<öây≥s.h
>

23 
	~<√töë/ö.h
>

25 
	sù6_hdr


29 
	sù6_hdr˘l


31 
uöt32_t
 
	mù6_un1_Êow
;

33 
uöt16_t
 
	mù6_un1_∂í
;

34 
uöt8_t
 
	mù6_un1_nxt
;

35 
uöt8_t
 
	mù6_un1_hlim
;

36 } 
	mù6_un1
;

37 
uöt8_t
 
	mù6_un2_vfc
;

38 } 
	mù6_˘lun
;

39 
ö6_addr
 
	mù6_§c
;

40 
ö6_addr
 
	mù6_d°
;

43 
	#ù6_vfc
 
ù6_˘lun
.
ù6_un2_vfc


	)

44 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

45 
	#ù6_∂í
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_∂í


	)

46 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

47 
	#ù6_hlim
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

48 
	#ù6_h›s
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

51 
	sù6_ext


53 
uöt8_t
 
	mù6e_nxt
;

54 
uöt8_t
 
	mù6e_Àn
;

58 
	sù6_hbh


60 
uöt8_t
 
	mù6h_nxt
;

61 
uöt8_t
 
	mù6h_Àn
;

66 
	sù6_de°


68 
uöt8_t
 
	mù6d_nxt
;

69 
uöt8_t
 
	mù6d_Àn
;

74 
	sù6_πhdr


76 
uöt8_t
 
	mù6r_nxt
;

77 
uöt8_t
 
	mù6r_Àn
;

78 
uöt8_t
 
	mù6r_ty≥
;

79 
uöt8_t
 
	mù6r_£gÀ·
;

84 
	sù6_πhdr0


86 
uöt8_t
 
	mù6r0_nxt
;

87 
uöt8_t
 
	mù6r0_Àn
;

88 
uöt8_t
 
	mù6r0_ty≥
;

89 
uöt8_t
 
	mù6r0_£gÀ·
;

90 
uöt8_t
 
	mù6r0_ª£rved
;

91 
uöt8_t
 
	mù6r0_¶m≠
[3];

93 
ö6_addr
 
	mù6r0_addr
[0];

97 
	sù6_‰ag


99 
uöt8_t
 
	mù6f_nxt
;

100 
uöt8_t
 
	mù6f_ª£rved
;

101 
uöt16_t
 
	mù6f_ofÊg
;

102 
uöt32_t
 
	mù6f_idít
;

105 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


106 
	#IP6F_OFF_MASK
 0xfff8

	)

107 
	#IP6F_RESERVED_MASK
 0x0006

	)

108 
	#IP6F_MORE_FRAG
 0x0001

	)

110 
	#IP6F_OFF_MASK
 0xf8f‡

	)

111 
	#IP6F_RESERVED_MASK
 0x0600

	)

112 
	#IP6F_MORE_FRAG
 0x0100

	)

116 
	sù6_›t


118 
uöt8_t
 
	mù6o_ty≥
;

119 
uöt8_t
 
	mù6o_Àn
;

126 
	#IP6OPT_TYPE
(
o
Ë((oË& 0xc0)

	)

127 
	#IP6OPT_TYPE_SKIP
 0x00

	)

128 
	#IP6OPT_TYPE_DISCARD
 0x40

	)

129 
	#IP6OPT_TYPE_FORCEICMP
 0x80

	)

130 
	#IP6OPT_TYPE_ICMP
 0xc0

	)

131 
	#IP6OPT_TYPE_MUTABLE
 0x20

	)

134 
	#IP6OPT_PAD1
 0

	)

135 
	#IP6OPT_PADN
 1

	)

137 
	#IP6OPT_JUMBO
 0xc2

	)

138 
	#IP6OPT_NSAP_ADDR
 0xc3

	)

139 
	#IP6OPT_TUNNEL_LIMIT
 0x04

	)

140 
	#IP6OPT_ROUTER_ALERT
 0x05

	)

143 
	sù6_›t_jumbo


145 
uöt8_t
 
	mù6oj_ty≥
;

146 
uöt8_t
 
	mù6oj_Àn
;

147 
uöt8_t
 
	mù6oj_jumbo_Àn
[4];

149 
	#IP6OPT_JUMBO_LEN
 6

	)

152 
	sù6_›t_nßp


154 
uöt8_t
 
	mù6⁄_ty≥
;

155 
uöt8_t
 
	mù6⁄_Àn
;

156 
uöt8_t
 
	mù6⁄_§c_nßp_Àn
;

157 
uöt8_t
 
	mù6⁄_d°_nßp_Àn
;

163 
	sù6_›t_tu¬ñ


165 
uöt8_t
 
	mù6Ÿ_ty≥
;

166 
uöt8_t
 
	mù6Ÿ_Àn
;

167 
uöt8_t
 
	mù6Ÿ_íˇp_limô
;

171 
	sù6_›t_rouãr


173 
uöt8_t
 
	mù6‹_ty≥
;

174 
uöt8_t
 
	mù6‹_Àn
;

175 
uöt8_t
 
	mù6‹_vÆue
[2];

179 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


180 
	#IP6_ALERT_MLD
 0x0000

	)

181 
	#IP6_ALERT_RSVP
 0x0001

	)

182 
	#IP6_ALERT_AN
 0x0002

	)

184 
	#IP6_ALERT_MLD
 0x0000

	)

185 
	#IP6_ALERT_RSVP
 0x0100

	)

186 
	#IP6_ALERT_AN
 0x0200

	)

	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

118 
	#BIO_NOCLOSE
 0x00

	)

119 
	#BIO_CLOSE
 0x01

	)

123 
	#BIO_CTRL_RESET
 1

	)

124 
	#BIO_CTRL_EOF
 2

	)

125 
	#BIO_CTRL_INFO
 3

	)

126 
	#BIO_CTRL_SET
 4

	)

127 
	#BIO_CTRL_GET
 5

	)

128 
	#BIO_CTRL_PUSH
 6

	)

129 
	#BIO_CTRL_POP
 7

	)

130 
	#BIO_CTRL_GET_CLOSE
 8

	)

131 
	#BIO_CTRL_SET_CLOSE
 9

	)

132 
	#BIO_CTRL_PENDING
 10

	)

133 
	#BIO_CTRL_FLUSH
 11

	)

134 
	#BIO_CTRL_DUP
 12

	)

135 
	#BIO_CTRL_WPENDING
 13

	)

137 
	#BIO_CTRL_SET_CALLBACK
 14

	)

138 
	#BIO_CTRL_GET_CALLBACK
 15

	)

140 
	#BIO_CTRL_SET_FILENAME
 30

	)

143 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

144 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

147 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

148 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

149 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

150 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

152 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

153 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

156 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

159 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

160 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

161 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

162 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

167 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

178 #i‚de‡
OPENSSL_NO_SCTP


180 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

181 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

182 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

183 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

184 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

185 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

186 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

187 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

188 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

189 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

194 
	#BIO_FP_READ
 0x02

	)

195 
	#BIO_FP_WRITE
 0x04

	)

196 
	#BIO_FP_APPEND
 0x08

	)

197 
	#BIO_FP_TEXT
 0x10

	)

199 
	#BIO_FLAGS_READ
 0x01

	)

200 
	#BIO_FLAGS_WRITE
 0x02

	)

201 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

202 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

203 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

204 #i‚def 
BIO_FLAGS_UPLINK


207 
	#BIO_FLAGS_UPLINK
 0

	)

211 
	#BIO_GHBN_CTRL_HITS
 1

	)

212 
	#BIO_GHBN_CTRL_MISSES
 2

	)

213 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

214 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

215 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

224 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

229 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

231 
bio_°
 
	tBIO
;

233 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

234 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

235 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

237 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

238 
	#BIO_£t_ªåy_•ecül
(
b
) \

239 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

240 
	#BIO_£t_ªåy_ªad
(
b
) \

241 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

242 
	#BIO_£t_ªåy_wrôe
(
b
) \

243 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

246 
	#BIO_˛ór_ªåy_Êags
(
b
) \

247 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

248 
	#BIO_gë_ªåy_Êags
(
b
) \

249 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

252 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

253 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

254 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

255 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

256 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

264 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

266 
	#BIO_RR_CONNECT
 0x02

	)

268 
	#BIO_RR_ACCEPT
 0x03

	)

271 
	#BIO_CB_FREE
 0x01

	)

272 
	#BIO_CB_READ
 0x02

	)

273 
	#BIO_CB_WRITE
 0x03

	)

274 
	#BIO_CB_PUTS
 0x04

	)

275 
	#BIO_CB_GETS
 0x05

	)

276 
	#BIO_CB_CTRL
 0x06

	)

280 
	#BIO_CB_RETURN
 0x80

	)

281 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

282 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

283 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

285 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

286 
BIO_£t_ˇŒback
(
BIO
 *
b
,

287 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

288 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

289 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

291 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

292 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

294 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

296 
	sbio_mëhod_°


298 
ty≥
;

299 c⁄° *
«me
;

300 (*
bwrôe
)(
BIO
 *, const *, );

301 (*
bªad
)(
BIO
 *, *, );

302 (*
bputs
)(
BIO
 *, const *);

303 (*
bgës
)(
BIO
 *, *, );

304 (*
˘æ
)(
BIO
 *, , , *);

305 (*
¸óã
)(
BIO
 *);

306 (*
de°roy
)(
BIO
 *);

307 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

308 } 
	tBIO_METHOD
;

310 
	sbio_°


312 
BIO_METHOD
 *
mëhod
;

314 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

315 *
cb_¨g
;

317 
öô
;

318 
shutdown
;

319 
Êags
;

320 
ªåy_ªas⁄
;

321 
num
;

322 *
±r
;

323 
bio_°
 *
√xt_bio
;

324 
bio_°
 *
¥ev_bio
;

325 
ª„ªn˚s
;

326 
num_ªad
;

327 
num_wrôe
;

329 
CRYPTO_EX_DATA
 
ex_d©a
;

332 
DECLARE_STACK_OF
(
BIO
)

334 
	sbio_f_buf„r_˘x_°ru˘


346 
ibuf_size
;

347 
obuf_size
;

349 *
ibuf
;

350 
ibuf_Àn
;

351 
ibuf_off
;

353 *
obuf
;

354 
obuf_Àn
;

355 
obuf_off
;

356 } 
	tBIO_F_BUFFER_CTX
;

359 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

361 #i‚de‡
OPENSSL_NO_SCTP


363 
	sbio_dgøm_s˘p_¢döfo


365 
uöt16_t
 
¢d_sid
;

366 
uöt16_t
 
¢d_Êags
;

367 
uöt32_t
 
¢d_µid
;

368 
uöt32_t
 
¢d_c⁄ãxt
;

371 
	sbio_dgøm_s˘p_rcvöfo


373 
uöt16_t
 
rcv_sid
;

374 
uöt16_t
 
rcv_s¢
;

375 
uöt16_t
 
rcv_Êags
;

376 
uöt32_t
 
rcv_µid
;

377 
uöt32_t
 
rcv_t¢
;

378 
uöt32_t
 
rcv_cumt¢
;

379 
uöt32_t
 
rcv_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_¥öfo


384 
uöt16_t
 
¥_pﬁicy
;

385 
uöt32_t
 
¥_vÆue
;

390 
	#BIO_CONN_S_BEFORE
 1

	)

391 
	#BIO_CONN_S_GET_IP
 2

	)

392 
	#BIO_CONN_S_GET_PORT
 3

	)

393 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

394 
	#BIO_CONN_S_CONNECT
 5

	)

395 
	#BIO_CONN_S_OK
 6

	)

396 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

397 
	#BIO_CONN_S_NBIO
 8

	)

400 
	#BIO_C_SET_CONNECT
 100

	)

401 
	#BIO_C_DO_STATE_MACHINE
 101

	)

402 
	#BIO_C_SET_NBIO
 102

	)

403 
	#BIO_C_SET_PROXY_PARAM
 103

	)

404 
	#BIO_C_SET_FD
 104

	)

405 
	#BIO_C_GET_FD
 105

	)

406 
	#BIO_C_SET_FILE_PTR
 106

	)

407 
	#BIO_C_GET_FILE_PTR
 107

	)

408 
	#BIO_C_SET_FILENAME
 108

	)

409 
	#BIO_C_SET_SSL
 109

	)

410 
	#BIO_C_GET_SSL
 110

	)

411 
	#BIO_C_SET_MD
 111

	)

412 
	#BIO_C_GET_MD
 112

	)

413 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

414 
	#BIO_C_SET_BUF_MEM
 114

	)

415 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

416 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

417 
	#BIO_C_SET_BUFF_SIZE
 117

	)

418 
	#BIO_C_SET_ACCEPT
 118

	)

419 
	#BIO_C_SSL_MODE
 119

	)

420 
	#BIO_C_GET_MD_CTX
 120

	)

421 
	#BIO_C_GET_PROXY_PARAM
 121

	)

422 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

423 
	#BIO_C_GET_CONNECT
 123

	)

424 
	#BIO_C_GET_ACCEPT
 124

	)

425 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

426 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

427 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

428 
	#BIO_C_FILE_SEEK
 128

	)

429 
	#BIO_C_GET_CIPHER_CTX
 129

	)

430 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

431 
	#BIO_C_SET_BIND_MODE
 131

	)

432 
	#BIO_C_GET_BIND_MODE
 132

	)

433 
	#BIO_C_FILE_TELL
 133

	)

434 
	#BIO_C_GET_SOCKS
 134

	)

435 
	#BIO_C_SET_SOCKS
 135

	)

437 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

438 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

439 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

440 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

441 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

442 
	#BIO_C_GET_READ_REQUEST
 141

	)

443 
	#BIO_C_SHUTDOWN_WR
 142

	)

444 
	#BIO_C_NREAD0
 143

	)

445 
	#BIO_C_NREAD
 144

	)

446 
	#BIO_C_NWRITE0
 145

	)

447 
	#BIO_C_NWRITE
 146

	)

448 
	#BIO_C_RESET_READ_REQUEST
 147

	)

449 
	#BIO_C_SET_MD_CTX
 148

	)

451 
	#BIO_C_SET_PREFIX
 149

	)

452 
	#BIO_C_GET_PREFIX
 150

	)

453 
	#BIO_C_SET_SUFFIX
 151

	)

454 
	#BIO_C_GET_SUFFIX
 152

	)

456 
	#BIO_C_SET_EX_ARG
 153

	)

457 
	#BIO_C_GET_EX_ARG
 154

	)

459 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

460 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

463 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

464 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

465 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

466 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

467 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

468 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

469 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

470 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

473 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

476 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

477 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

479 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

480 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

482 
	#BIO_BIND_NORMAL
 0

	)

483 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

484 
	#BIO_BIND_REUSEADDR
 2

	)

485 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

486 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

488 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

489 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

490 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

493 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

494 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

496 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

498 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

499 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

500 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

502 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

503 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

504 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

505 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

507 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

508 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

510 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

511 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

513 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

514 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

518 #ifde‡
CONST_STRICT


522 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

524 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

525 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

527 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

528 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

529 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

530 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

531 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

532 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

538 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

539 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

540 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

541 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

542 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

543 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

544 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

545 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

546 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

551 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

552 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

553 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

554 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

555 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

558 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

559 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

560 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

561 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

562 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

565 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

567 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

568 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

569 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

570 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

571 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

572 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

574 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

575 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

576 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

577 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

578 
cbp
)

	)

579 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

582 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

585 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

586 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

587 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

588 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

589 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

591 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

592 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

593 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

594 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

595 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

598 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

599 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

600 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

601 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

602 
	#BIO_dgøm_ªcv_timedout
(
b
) \

603 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

604 
	#BIO_dgøm_£nd_timedout
(
b
) \

605 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

606 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

607 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

608 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

609 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

614 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

615 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

616 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

617 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

618 
BIO_numbî_ªad
(
BIO
 *
bio
);

619 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

622 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

623 
a¢1_ps_func
 *
¥efix_‰ì
);

624 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

625 
a¢1_ps_func
 **
µªfix_‰ì
);

626 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

627 
a¢1_ps_func
 *
suffix_‰ì
);

628 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

629 
a¢1_ps_func
 **
psuffix_‰ì
);

631 #i‚de‡
OPENSSL_NO_FP_API


632 
BIO_METHOD
 *
BIO_s_fûe
();

633 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

634 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

635 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

637 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

638 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

639 
BIO_‰ì
(
BIO
 *
a
);

640 
BIO_v‰ì
(
BIO
 *
a
);

641 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

642 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

643 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

644 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

645 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

646 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

647 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

648 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

649 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

650 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

651 
BIO
 * 
BIO_p›
(BIO *
b
);

652 
BIO_‰ì_Æl
(
BIO
 *
a
);

653 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

654 
BIO
 * 
BIO_√xt
(BIO *
b
);

655 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

656 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

657 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

659 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

660 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

661 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

662 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

664 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

665 
¨gl
,
ªt
);

667 
BIO_METHOD
 *
BIO_s_mem
();

668 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

669 
BIO_METHOD
 *
BIO_s_sockë
();

670 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

671 
BIO_METHOD
 *
BIO_s_ac˚±
();

672 
BIO_METHOD
 *
BIO_s_fd
();

673 #i‚de‡
OPENSSL_SYS_OS2


674 
BIO_METHOD
 *
BIO_s_log
();

676 
BIO_METHOD
 *
BIO_s_bio
();

677 
BIO_METHOD
 *
BIO_s_nuŒ
();

678 
BIO_METHOD
 *
BIO_f_nuŒ
();

679 
BIO_METHOD
 *
BIO_f_buf„r
();

680 #ifde‡
OPENSSL_SYS_VMS


681 
BIO_METHOD
 *
BIO_f_löebuf„r
();

683 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

684 #i‚de‡
OPENSSL_NO_DGRAM


685 
BIO_METHOD
 *
BIO_s_d©agøm
();

686 #i‚de‡
OPENSSL_NO_SCTP


687 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

693 
BIO_sock_should_ªåy
(
i
);

694 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

695 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

697 
BIO_fd_should_ªåy
(
i
);

698 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

699 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

700 *
u
, c⁄° *
s
, 
Àn
);

701 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

702 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

703 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

704 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

705 #i‚de‡
OPENSSL_NO_FP_API


706 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

707 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

709 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

718 
BIO_sock_îr‹
(
sock
);

719 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

720 
BIO_sockë_nbio
(
fd
,
mode
);

721 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

722 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

723 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

724 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

725 
BIO_sock_öô
();

726 
BIO_sock_˛ónup
();

727 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

729 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

730 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

731 #i‚de‡
OPENSSL_NO_SCTP


732 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

733 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

734 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

735 (*
h™dÀ_nŸifiˇti⁄s
)(
BIO
 *
bio
, *
c⁄ãxt
, *
buf
),

736 *
c⁄ãxt
);

737 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

738 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

740 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

741 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

742 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

744 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

745 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

751 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

755 #ifde‡
__GNUC__


756 
	#__bio_h__©å__
 
__©åibuã__


	)

758 
	#__bio_h__©å__
(
x
)

	)

760 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

761 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

762 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

763 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

764 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

765 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

766 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

767 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

768 #unde‡
__bio_h__©å__


774 
ERR_lﬂd_BIO_°rögs
();

779 
	#BIO_F_ACPT_STATE
 100

	)

780 
	#BIO_F_BIO_ACCEPT
 101

	)

781 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

782 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

783 
	#BIO_F_BIO_CTRL
 103

	)

784 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

785 
	#BIO_F_BIO_GETS
 104

	)

786 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

787 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

788 
	#BIO_F_BIO_GET_PORT
 107

	)

789 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

790 
	#BIO_F_BIO_NEW
 108

	)

791 
	#BIO_F_BIO_NEW_FILE
 109

	)

792 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

793 
	#BIO_F_BIO_NREAD
 123

	)

794 
	#BIO_F_BIO_NREAD0
 124

	)

795 
	#BIO_F_BIO_NWRITE
 125

	)

796 
	#BIO_F_BIO_NWRITE0
 122

	)

797 
	#BIO_F_BIO_PUTS
 110

	)

798 
	#BIO_F_BIO_READ
 111

	)

799 
	#BIO_F_BIO_SOCK_INIT
 112

	)

800 
	#BIO_F_BIO_WRITE
 113

	)

801 
	#BIO_F_BUFFER_CTRL
 114

	)

802 
	#BIO_F_CONN_CTRL
 127

	)

803 
	#BIO_F_CONN_STATE
 115

	)

804 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

805 
	#BIO_F_FILE_CTRL
 116

	)

806 
	#BIO_F_FILE_READ
 130

	)

807 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

808 
	#BIO_F_MEM_READ
 128

	)

809 
	#BIO_F_MEM_WRITE
 117

	)

810 
	#BIO_F_SSL_NEW
 118

	)

811 
	#BIO_F_WSASTARTUP
 119

	)

814 
	#BIO_R_ACCEPT_ERROR
 100

	)

815 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

816 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

817 
	#BIO_R_BROKEN_PIPE
 124

	)

818 
	#BIO_R_CONNECT_ERROR
 103

	)

819 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

820 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

821 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

822 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

823 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

824 
	#BIO_R_INVALID_ARGUMENT
 125

	)

825 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

826 
	#BIO_R_IN_USE
 123

	)

827 
	#BIO_R_KEEPALIVE
 109

	)

828 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

829 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

830 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

831 
	#BIO_R_NO_PORT_DEFINED
 113

	)

832 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

833 
	#BIO_R_NO_SUCH_FILE
 128

	)

834 
	#BIO_R_NULL_PARAMETER
 115

	)

835 
	#BIO_R_TAG_MISMATCH
 116

	)

836 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

837 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

838 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

839 
	#BIO_R_UNINITIALIZED
 120

	)

840 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

841 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

842 
	#BIO_R_WSASTARTUP
 122

	)

844 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifdef 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°


150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
,
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

240 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

241 (((()
f
)&0xfffL)*0x1000)| \

242 (((()
r
)&0xfffL)))

	)

243 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

244 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

245 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

246 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

264 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

265 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

266 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

267 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

268 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

269 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

270 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

271 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

272 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

273 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

274 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

275 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

276 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

277 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

278 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

279 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

280 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

281 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

282 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

283 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

284 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

285 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

286 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

287 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

288 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

289 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

290 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

291 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

292 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

294 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

295 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

296 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

297 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

298 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

299 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

302 
	#ERR_R_FATAL
 64

	)

303 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

304 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

305 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

306 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

307 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°


315 
îr‹
;

316 c⁄° *
°rög
;

317 } 
	tERR_STRING_DATA
;

319 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

320 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

322 
ERR_gë_îr‹
();

323 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

324 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

325 c⁄° **
d©a
, *
Êags
);

326 
ERR_≥ek_îr‹
();

327 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

328 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

329 c⁄° **
d©a
,*
Êags
);

330 
ERR_≥ek_œ°_îr‹
();

331 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

332 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

333 c⁄° **
d©a
,*
Êags
);

334 
ERR_˛ór_îr‹
();

335 *
ERR_îr‹_°rög
(
e
,*
buf
);

336 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

337 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

338 c⁄° *
ERR_func_îr‹_°rög
(
e
);

339 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

340 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

341 *
u
);

342 #i‚de‡
OPENSSL_NO_FP_API


343 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

345 #i‚de‡
OPENSSL_NO_BIO


346 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

348 
ERR_add_îr‹_d©a
(
num
, ...);

349 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

350 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

351 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

352 
ERR_lﬂd_ERR_°rögs
();

353 
ERR_lﬂd_¸y±o_°rögs
();

354 
ERR_‰ì_°rögs
();

356 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

357 #i‚de‡
OPENSSL_NO_DEPRECATED


358 
ERR_ªmove_°©e
(
pid
);

360 
ERR_STATE
 *
ERR_gë_°©e
();

362 #i‚de‡
OPENSSL_NO_LHASH


363 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

364 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

365 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

368 
ERR_gë_√xt_îr‹_libøry
();

370 
ERR_£t_m¨k
();

371 
ERR_p›_to_m¨k
();

377 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

380 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

382 #ifdef 
__˝lu•lus


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sønd_mëh_°


83 (*
£ed
)(c⁄° *
buf
, 
num
);

84 (*
byãs
)(*
buf
, 
num
);

85 (*
˛ónup
)();

86 (*
add
)(c⁄° *
buf
, 
num
, 
íå›y
);

87 (*
p£ud‹™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifde‡
BN_DEBUG


92 
ønd_¥edi˘abÀ
;

95 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

96 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

97 #i‚de‡
OPENSSL_NO_ENGINE


98 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

100 
RAND_METHOD
 *
RAND_SSLóy
();

101 
RAND_˛ónup
();

102 
RAND_byãs
(*
buf
,
num
);

103 
RAND_p£udo_byãs
(*
buf
,
num
);

104 
RAND_£ed
(c⁄° *
buf
,
num
);

105 
RAND_add
(c⁄° *
buf
,
num
,
íå›y
);

106 
RAND_lﬂd_fûe
(c⁄° *
fûe
,
max_byãs
);

107 
RAND_wrôe_fûe
(c⁄° *
fûe
);

108 c⁄° *
RAND_fûe_«me
(*
fûe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

111 
RAND_egd
(c⁄° *
∑th
);

112 
RAND_egd_byãs
(c⁄° *
∑th
,
byãs
);

113 
RAND_pﬁl
();

115 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

117 
RAND_s¸ìn
();

118 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

122 #ifde‡
OPENSSL_FIPS


123 
RAND_£t_fùs_drbg_ty≥
(
ty≥
, 
Êags
);

124 
RAND_öô_fùs
();

127 
¥iv©e_RAND_lock
(
lock
);

133 
ERR_lﬂd_RAND_°rögs
();

138 
	#RAND_F_ENG_RAND_GET_RAND_METHOD
 108

	)

139 
	#RAND_F_FIPS_RAND
 103

	)

140 
	#RAND_F_FIPS_RAND_BYTES
 102

	)

141 
	#RAND_F_FIPS_RAND_SET_DT
 106

	)

142 
	#RAND_F_FIPS_X931_SET_DT
 106

	)

143 
	#RAND_F_FIPS_SET_DT
 104

	)

144 
	#RAND_F_FIPS_SET_PRNG_SEED
 107

	)

145 
	#RAND_F_FIPS_SET_TEST_MODE
 105

	)

146 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

147 
	#RAND_F_RAND_INIT_FIPS
 109

	)

148 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

151 
	#RAND_R_ERROR_INITIALISING_DRBG
 112

	)

152 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 113

	)

153 
	#RAND_R_NON_FIPS_METHOD
 105

	)

154 
	#RAND_R_NOT_IN_TEST_MODE
 106

	)

155 
	#RAND_R_NO_FIPS_RANDOM_METHOD_SET
 111

	)

156 
	#RAND_R_NO_KEY_SET
 107

	)

157 
	#RAND_R_PRNG_ASKING_FOR_TOO_MUCH
 101

	)

158 
	#RAND_R_PRNG_ERROR
 108

	)

159 
	#RAND_R_PRNG_KEYED
 109

	)

160 
	#RAND_R_PRNG_NOT_REKEYED
 102

	)

161 
	#RAND_R_PRNG_NOT_RESEEDED
 103

	)

162 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

163 
	#RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY
 110

	)

164 
	#RAND_R_PRNG_STUCK
 104

	)

166 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


177 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

180 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

181 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

183 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

185 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

186 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

188 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

193 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

194 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

195 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

196 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

197 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

198 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

199 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

200 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

202 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

203 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

204 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

205 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

206 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

207 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

209 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

210 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

211 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

214 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

215 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

217 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

218 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

220 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

221 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

222 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

227 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

228 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

229 
	#SSL_TXT_LOW
 "LOW"

	)

230 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

231 
	#SSL_TXT_HIGH
 "HIGH"

	)

232 
	#SSL_TXT_FIPS
 "FIPS"

	)

234 
	#SSL_TXT_kFZA
 "kFZA"

	)

235 
	#SSL_TXT_aFZA
 "aFZA"

	)

236 
	#SSL_TXT_eFZA
 "eFZA"

	)

237 
	#SSL_TXT_FZA
 "FZA"

	)

239 
	#SSL_TXT_aNULL
 "aNULL"

	)

240 
	#SSL_TXT_eNULL
 "eNULL"

	)

241 
	#SSL_TXT_NULL
 "NULL"

	)

243 
	#SSL_TXT_kRSA
 "kRSA"

	)

244 
	#SSL_TXT_kDHr
 "kDHr"

	)

245 
	#SSL_TXT_kDHd
 "kDHd"

	)

246 
	#SSL_TXT_kDH
 "kDH"

	)

247 
	#SSL_TXT_kEDH
 "kEDH"

	)

248 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

249 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

250 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

251 
	#SSL_TXT_kECDH
 "kECDH"

	)

252 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

253 
	#SSL_TXT_kPSK
 "kPSK"

	)

254 
	#SSL_TXT_kGOST
 "kGOST"

	)

255 
	#SSL_TXT_kSRP
 "kSRP"

	)

257 
	#SSL_TXT_aRSA
 "aRSA"

	)

258 
	#SSL_TXT_aDSS
 "aDSS"

	)

259 
	#SSL_TXT_aDH
 "aDH"

	)

260 
	#SSL_TXT_aECDH
 "aECDH"

	)

261 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

262 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

263 
	#SSL_TXT_aPSK
 "aPSK"

	)

264 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

265 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

266 
	#SSL_TXT_aGOST
 "aGOST"

	)

268 
	#SSL_TXT_DSS
 "DSS"

	)

269 
	#SSL_TXT_DH
 "DH"

	)

270 
	#SSL_TXT_EDH
 "EDH"

	)

271 
	#SSL_TXT_ADH
 "ADH"

	)

272 
	#SSL_TXT_RSA
 "RSA"

	)

273 
	#SSL_TXT_ECDH
 "ECDH"

	)

274 
	#SSL_TXT_EECDH
 "EECDH"

	)

275 
	#SSL_TXT_AECDH
 "AECDH"

	)

276 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

277 
	#SSL_TXT_KRB5
 "KRB5"

	)

278 
	#SSL_TXT_PSK
 "PSK"

	)

279 
	#SSL_TXT_SRP
 "SRP"

	)

281 
	#SSL_TXT_DES
 "DES"

	)

282 
	#SSL_TXT_3DES
 "3DES"

	)

283 
	#SSL_TXT_RC4
 "RC4"

	)

284 
	#SSL_TXT_RC2
 "RC2"

	)

285 
	#SSL_TXT_IDEA
 "IDEA"

	)

286 
	#SSL_TXT_SEED
 "SEED"

	)

287 
	#SSL_TXT_AES128
 "AES128"

	)

288 
	#SSL_TXT_AES256
 "AES256"

	)

289 
	#SSL_TXT_AES
 "AES"

	)

290 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

291 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

292 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

293 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

295 
	#SSL_TXT_MD5
 "MD5"

	)

296 
	#SSL_TXT_SHA1
 "SHA1"

	)

297 
	#SSL_TXT_SHA
 "SHA"

	)

298 
	#SSL_TXT_GOST94
 "GOST94"

	)

299 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

300 
	#SSL_TXT_SHA256
 "SHA256"

	)

301 
	#SSL_TXT_SHA384
 "SHA384"

	)

303 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

304 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

305 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

306 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

307 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

309 
	#SSL_TXT_EXP
 "EXP"

	)

310 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

312 
	#SSL_TXT_ALL
 "ALL"

	)

328 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

329 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

334 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!aNULL:!eNULL:!SSLv2:!EXPORT:!RC2:!DES"

	)

343 
	#SSL_SENT_SHUTDOWN
 1

	)

344 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

346 #ifde‡
__˝lu•lus


350 #ifde‡ 
__˝lu•lus


354 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

355 
	#OPENSSL_NO_SSL2


	)

358 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

359 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

364 
s¶_°
 *
	ts¶_¸ock_°
;

365 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

366 
s¶_mëhod_°
 
	tSSL_METHOD
;

367 
s¶_cùhî_°
 
	tSSL_CIPHER
;

368 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

370 
DECLARE_STACK_OF
(
SSL_CIPHER
)

373 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°


375 c⁄° *
«me
;

376 
id
;

377 } 
	tSRTP_PROTECTION_PROFILE
;

379 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

381 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
, 
	tÀn
, *
	t¨g
);

382 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
, 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
, SSL_CIPHER **
	tcùhî
, *
	t¨g
);

385 #i‚de‡
OPENSSL_NO_SSL_INTERN


388 
	ss¶_cùhî_°


390 
vÆid
;

391 c⁄° *
«me
;

392 
id
;

395 
Æg‹ôhm_mkey
;

396 
Æg‹ôhm_auth
;

397 
Æg‹ôhm_íc
;

398 
Æg‹ôhm_mac
;

399 
Æg‹ôhm_s¶
;

401 
Ægo_°ªngth
;

402 
Æg‹ôhm2
;

403 
°ªngth_bôs
;

404 
Æg_bôs
;

409 
	ss¶_mëhod_°


411 
vîsi⁄
;

412 (*
s¶_√w
)(
SSL
 *
s
);

413 (*
s¶_˛ór
)(
SSL
 *
s
);

414 (*
s¶_‰ì
)(
SSL
 *
s
);

415 (*
s¶_ac˚±
)(
SSL
 *
s
);

416 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

417 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

418 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

419 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

420 (*
s¶_shutdown
)(
SSL
 *
s
);

421 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

422 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

423 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

424 
max
, *
ok
);

425 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

426 
≥ek
);

427 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

428 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

429 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

430 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

431 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

432 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

433 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

434 (*
num_cùhîs
)();

435 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

436 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

437 (*
gë_timeout
)();

438 
s¶3_íc_mëhod
 *
s¶3_íc
;

439 (*
s¶_vîsi⁄
)();

440 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

441 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

469 
	ss¶_£ssi⁄_°


471 
s¶_vîsi⁄
;

475 
key_¨g_Àngth
;

476 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

477 
ma°î_key_Àngth
;

478 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

480 
£ssi⁄_id_Àngth
;

481 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

485 
sid_˘x_Àngth
;

486 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

488 #i‚de‡
OPENSSL_NO_KRB5


489 
krb5_˛õ¡_¥öc_Àn
;

490 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

492 #i‚de‡
OPENSSL_NO_PSK


493 *
psk_idítôy_höt
;

494 *
psk_idítôy
;

499 
nŸ_ªsumabÀ
;

502 
£ss_˚π_°
 *
£ss_˚π
;

508 
X509
 *
≥î
;

511 
vîify_ªsu…
;

513 
ª„ªn˚s
;

514 
timeout
;

515 
time
;

517 
com¥ess_mëh
;

519 c⁄° 
SSL_CIPHER
 *
cùhî
;

520 
cùhî_id
;

524 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

526 
CRYPTO_EX_DATA
 
ex_d©a
;

530 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

531 #i‚de‡
OPENSSL_NO_TLSEXT


532 *
é£xt_ho°«me
;

533 #i‚de‡
OPENSSL_NO_EC


534 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

535 *
é£xt_e˝oötf‹m©li°
;

536 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

537 *
é£xt_ñlùticcurvñi°
;

540 *
é£xt_tick
;

541 
size_t
 
é£xt_tickÀn
;

542 
é£xt_tick_li„time_höt
;

548 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

549 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

551 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

552 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

553 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

554 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

555 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

556 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

557 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

558 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

565 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

569 
	#SSL_OP_ALL
 0x80000BF7L

	)

572 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

574 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

576 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

578 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

581 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

583 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

585 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

587 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

589 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

591 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

594 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

599 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

601 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

602 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

603 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

604 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

605 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

612 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

613 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

615 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

616 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

621 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

625 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

630 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

633 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

635 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

639 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

643 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080L

	)

648 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

649 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

650 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

651 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

652 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

653 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

654 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

655 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

656 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

657 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

658 
	#SSL_gë_›ti⁄s
(
s¶
) \

659 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

661 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

662 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

663 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

664 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

665 
	#SSL_CTX_gë_mode
(
˘x
) \

666 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

667 
	#SSL_˛ór_mode
(
s¶
,
›
) \

668 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

669 
	#SSL_£t_mode
(
s¶
,
›
) \

670 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

671 
	#SSL_gë_mode
(
s¶
) \

672 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

673 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

674 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

676 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

677 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

679 #i‚de‡
OPENSSL_NO_HEARTBEATS


680 
	#SSL_hóπbót
(
s¶
) \

681 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

684 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

685 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

686 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

687 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

690 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

691 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

693 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

696 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

711 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

712 *
	tid_Àn
);

714 
s¶_comp_°
 
	tSSL_COMP
;

716 #i‚de‡
OPENSSL_NO_SSL_INTERN


718 
	ss¶_comp_°


720 
id
;

721 c⁄° *
«me
;

722 #i‚de‡
OPENSSL_NO_COMP


723 
COMP_METHOD
 *
mëhod
;

725 *
mëhod
;

729 
DECLARE_STACK_OF
(
SSL_COMP
)

730 
DECLARE_LHASH_OF
(
SSL_SESSION
);

732 
	ss¶_˘x_°


734 c⁄° 
SSL_METHOD
 *
mëhod
;

736 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

738 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

740 
x509_°‹e_°
 *
˚π_°‹e
;

741 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

744 
£ssi⁄_ˇche_size
;

745 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

746 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

753 
£ssi⁄_ˇche_mode
;

758 
£ssi⁄_timeout
;

768 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

769 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

770 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

771 *
d©a
,
Àn
,*
c›y
);

775 
£ss_c⁄√˘
;

776 
£ss_c⁄√˘_ª√gŸüã
;

777 
£ss_c⁄√˘_good
;

778 
£ss_ac˚±
;

779 
£ss_ac˚±_ª√gŸüã
;

780 
£ss_ac˚±_good
;

781 
£ss_miss
;

782 
£ss_timeout
;

783 
£ss_ˇche_fuŒ
;

784 
£ss_hô
;

785 
£ss_cb_hô
;

791 } 
°©s
;

793 
ª„ªn˚s
;

796 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

797 *
≠p_vîify_¨g
;

802 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

805 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

808 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

811 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

812 *
cookõ_Àn
);

815 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

816 
cookõ_Àn
);

818 
CRYPTO_EX_DATA
 
ex_d©a
;

820 c⁄° 
EVP_MD
 *
rß_md5
;

821 c⁄° 
EVP_MD
 *
md5
;

822 c⁄° 
EVP_MD
 *
sha1
;

824 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

825 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

830 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

833 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

838 
›ti⁄s
;

839 
mode
;

840 
max_˚π_li°
;

842 
˚π_°
 *
˚π
;

843 
ªad_ahód
;

846 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

847 *
msg_ˇŒback_¨g
;

849 
vîify_mode
;

850 
sid_˘x_Àngth
;

851 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

852 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

855 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

857 
X509_VERIFY_PARAM
 *
∑øm
;

860 
puΩo£
;

861 
åu°
;

864 
quõt_shutdown
;

870 
max_£nd_‰agmít
;

872 #i‚de‡
OPENSSL_ENGINE


875 
ENGINE
 *
˛õ¡_˚π_ígöe
;

878 #i‚de‡
OPENSSL_NO_TLSEXT


880 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

881 *
é£xt_£rvî«me_¨g
;

883 
é£xt_tick_key_«me
[16];

884 
é£xt_tick_hmac_key
[16];

885 
é£xt_tick_´s_key
[16];

887 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

888 *
«me
, *
iv
,

889 
EVP_CIPHER_CTX
 *
e˘x
,

890 
HMAC_CTX
 *
h˘x
, 
íc
);

894 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

895 *
é£xt_°©us_¨g
;

898 (*
é£xt_›aque_¥f_öput_ˇŒback
)(
SSL
 *, *
≥îöput
, 
size_t
 
Àn
, *
¨g
);

899 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

902 #i‚de‡
OPENSSL_NO_PSK


903 *
psk_idítôy_höt
;

904 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

905 
max_idítôy_Àn
, *
psk
,

906 
max_psk_Àn
);

907 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

908 *
psk
, 
max_psk_Àn
);

911 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


912 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

913 
‰ìli°_max_Àn
;

914 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

915 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

918 #i‚de‡
OPENSSL_NO_TLSEXT


920 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


926 (*
√xt_¥Ÿos_advîti£d_cb
)(
SSL
 *
s
, c⁄° **
buf
,

927 *
Àn
, *
¨g
);

928 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

931 (*
√xt_¥Ÿo_£À˘_cb
)(
SSL
 *
s
, **
out
,

932 *
ouéí
,

933 c⁄° *
ö
,

934 
öÀn
,

935 *
¨g
);

936 *
√xt_¥Ÿo_£À˘_cb_¨g
;

939 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

945 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

946 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

947 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

948 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

949 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

951 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

952 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

953 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

954 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

956 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

957 
	#SSL_CTX_£ss_numbî
(
˘x
) \

958 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

959 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

960 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

961 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

962 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

963 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

964 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

965 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

966 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

967 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

968 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

969 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

970 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

971 
	#SSL_CTX_£ss_hôs
(
˘x
) \

972 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

973 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

974 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

975 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

976 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

977 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

978 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

979 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

980 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

982 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

983 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

984 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

985 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

986 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

987 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

988 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

989 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

990 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

991 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

992 #i‚de‡
OPENSSL_NO_ENGINE


993 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

995 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

996 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

997 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


998 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

999 (*
cb
Ë(
SSL
 *
s¶
,

1000 c⁄° **
out
,

1001 *
ouéí
,

1002 *
¨g
),

1003 *
¨g
);

1004 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1005 (*
cb
Ë(
SSL
 *
s¶
,

1006 **
out
,

1007 *
ouéí
,

1008 c⁄° *
ö
,

1009 
öÀn
,

1010 *
¨g
),

1011 *
¨g
);

1013 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1014 c⁄° *
ö
, 
öÀn
,

1015 c⁄° *
˛õ¡
, 
˛õ¡_Àn
);

1016 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
,

1017 c⁄° **
d©a
, *
Àn
);

1019 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1020 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1021 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1024 #i‚de‡
OPENSSL_NO_PSK


1027 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1028 
	#PSK_MAX_PSK_LEN
 256

	)

1029 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1030 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1031 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1032 
max_psk_Àn
));

1033 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1034 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1035 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1036 
max_psk_Àn
));

1037 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1038 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1039 *
psk
, 
max_psk_Àn
));

1040 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1041 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1042 *
psk
, 
max_psk_Àn
));

1043 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1044 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1045 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1046 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1049 
	#SSL_NOTHING
 1

	)

1050 
	#SSL_WRITING
 2

	)

1051 
	#SSL_READING
 3

	)

1052 
	#SSL_X509_LOOKUP
 4

	)

1055 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1056 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1057 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1058 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1060 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1061 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1063 #i‚de‡
OPENSSL_NO_SSL_INTERN


1065 
	ss¶_°


1070 
vîsi⁄
;

1071 
ty≥
;

1073 c⁄° 
SSL_METHOD
 *
mëhod
;

1079 #i‚de‡
OPENSSL_NO_BIO


1080 
BIO
 *
rbio
;

1081 
BIO
 *
wbio
;

1082 
BIO
 *
bbio
;

1085 *
rbio
;

1086 *
wbio
;

1087 *
bbio
;

1093 
rw°©e
;

1096 
ö_h™dshake
;

1097 (*
h™dshake_func
)(
SSL
 *);

1107 
£rvî
;

1109 
√w_£ssi⁄
;

1113 
quõt_shutdown
;

1114 
shutdown
;

1116 
°©e
;

1117 
r°©e
;

1119 
BUF_MEM
 *
öô_buf
;

1120 *
öô_msg
;

1121 
öô_num
;

1122 
öô_off
;

1125 *
∑ckë
;

1126 
∑ckë_Àngth
;

1128 
s¶2_°©e_°
 *
s2
;

1129 
s¶3_°©e_°
 *
s3
;

1130 
dés1_°©e_°
 *
d1
;

1132 
ªad_ahód
;

1136 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1137 *
msg_ˇŒback_¨g
;

1139 
hô
;

1141 
X509_VERIFY_PARAM
 *
∑øm
;

1144 
puΩo£
;

1145 
åu°
;

1149 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1150 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1154 
mac_Êags
;

1155 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1156 
EVP_MD_CTX
 *
ªad_hash
;

1157 #i‚de‡
OPENSSL_NO_COMP


1158 
COMP_CTX
 *
ex∑nd
;

1160 *
ex∑nd
;

1163 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1164 
EVP_MD_CTX
 *
wrôe_hash
;

1165 #i‚de‡
OPENSSL_NO_COMP


1166 
COMP_CTX
 *
com¥ess
;

1168 *
com¥ess
;

1175 
˚π_°
 *
˚π
;

1179 
sid_˘x_Àngth
;

1180 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1183 
SSL_SESSION
 *
£ssi⁄
;

1186 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1189 
vîify_mode
;

1191 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1193 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1195 
îr‹
;

1196 
îr‹_code
;

1198 #i‚de‡
OPENSSL_NO_KRB5


1199 
KSSL_CTX
 *
ks¶_˘x
;

1202 #i‚de‡
OPENSSL_NO_PSK


1203 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

1204 
max_idítôy_Àn
, *
psk
,

1205 
max_psk_Àn
);

1206 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1207 *
psk
, 
max_psk_Àn
);

1210 
SSL_CTX
 *
˘x
;

1213 
debug
;

1216 
vîify_ªsu…
;

1217 
CRYPTO_EX_DATA
 
ex_d©a
;

1220 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1222 
ª„ªn˚s
;

1223 
›ti⁄s
;

1224 
mode
;

1225 
max_˚π_li°
;

1226 
fú°_∑ckë
;

1227 
˛õ¡_vîsi⁄
;

1229 
max_£nd_‰agmít
;

1230 #i‚de‡
OPENSSL_NO_TLSEXT


1232 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1233 *
d©a
, 
Àn
,

1234 *
¨g
);

1235 *
é£xt_debug_¨g
;

1236 *
é£xt_ho°«me
;

1237 
£rvî«me_d⁄e
;

1244 
é£xt_°©us_ty≥
;

1246 
é£xt_°©us_ex≥˘ed
;

1248 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1249 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1251 *
é£xt_oc•_ª•
;

1252 
é£xt_oc•_ª•Àn
;

1255 
é£xt_tickë_ex≥˘ed
;

1256 #i‚de‡
OPENSSL_NO_EC


1257 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1258 *
é£xt_e˝oötf‹m©li°
;

1259 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1260 *
é£xt_ñlùticcurvñi°
;

1264 *
é£xt_›aque_¥f_öput
;

1265 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1268 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1271 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1272 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1275 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1276 *
és_£ssi⁄_£¸ë_cb_¨g
;

1278 
SSL_CTX
 * 
öôül_˘x
;

1280 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1288 *
√xt_¥Ÿo_√gŸüãd
;

1289 
√xt_¥Ÿo_√gŸüãd_Àn
;

1292 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1294 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1295 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1297 
é£xt_hóπbót
;

1302 
é£xt_hb_≥ndög
;

1303 
é£xt_hb_£q
;

1305 
	#£ssi⁄_˘x
 
˘x


	)

1308 
ª√gŸüã
;

1316 #ifde‡
__˝lu•lus


1320 
	~<›ís¶/s¶2.h
>

1321 
	~<›ís¶/s¶3.h
>

1322 
	~<›ís¶/és1.h
>

1323 
	~<›ís¶/dés1.h
>

1324 
	~<›ís¶/s¶23.h
>

1325 
	~<›ís¶/§ç.h
>

1327 #ifde‡ 
__˝lu•lus


1332 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1333 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1334 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1335 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1336 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1337 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1346 
	#SSL_ST_CONNECT
 0x1000

	)

1347 
	#SSL_ST_ACCEPT
 0x2000

	)

1348 
	#SSL_ST_MASK
 0x0FFF

	)

1349 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1350 
	#SSL_ST_BEFORE
 0x4000

	)

1351 
	#SSL_ST_OK
 0x03

	)

1352 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1354 
	#SSL_CB_LOOP
 0x01

	)

1355 
	#SSL_CB_EXIT
 0x02

	)

1356 
	#SSL_CB_READ
 0x04

	)

1357 
	#SSL_CB_WRITE
 0x08

	)

1358 
	#SSL_CB_ALERT
 0x4000

	)

1359 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1360 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1361 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1362 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1363 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1364 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1365 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1366 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1369 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1370 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1371 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1372 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1373 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1374 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1378 
	#SSL_ST_READ_HEADER
 0xF0

	)

1379 
	#SSL_ST_READ_BODY
 0xF1

	)

1380 
	#SSL_ST_READ_DONE
 0xF2

	)

1386 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1387 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1391 
	#SSL_VERIFY_NONE
 0x00

	)

1392 
	#SSL_VERIFY_PEER
 0x01

	)

1393 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1394 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1396 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1397 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1401 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1402 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1403 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1404 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1405 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1408 
	#SSL_gë_cùhî
(
s
) \

1409 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1410 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1411 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1412 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1413 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1414 
	#SSL_gë_cùhî_«me
(
s
) \

1415 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1416 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1417 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1418 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1419 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1421 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1422 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1424 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1426 
	#SSL_AD_REASON_OFFSET
 1000

	)

1429 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1430 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1431 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1432 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1433 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1434 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1435 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1436 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1437 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1438 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1439 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1440 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1441 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1442 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1443 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1444 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1445 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1446 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1447 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1448 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1449 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1450 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1451 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1452 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1453 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1454 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1455 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1456 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1457 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1458 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1459 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1461 
	#SSL_ERROR_NONE
 0

	)

1462 
	#SSL_ERROR_SSL
 1

	)

1463 
	#SSL_ERROR_WANT_READ
 2

	)

1464 
	#SSL_ERROR_WANT_WRITE
 3

	)

1465 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1466 
	#SSL_ERROR_SYSCALL
 5

	)

1467 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1468 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1469 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1471 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1472 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1473 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1474 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1475 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1476 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1477 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1479 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1480 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1481 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1482 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1483 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1484 
	#SSL_CTRL_GET_FLAGS
 13

	)

1485 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1487 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1488 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1491 
	#SSL_CTRL_SET_MTU
 17

	)

1493 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1494 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1495 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1496 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1497 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1498 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1499 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1500 
	#SSL_CTRL_SESS_HIT
 27

	)

1501 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1502 
	#SSL_CTRL_SESS_MISSES
 29

	)

1503 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1504 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1505 
	#SSL_CTRL_OPTIONS
 32

	)

1506 
	#SSL_CTRL_MODE
 33

	)

1508 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1509 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1510 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1511 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1512 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1513 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1515 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1516 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1518 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1521 #i‚de‡
OPENSSL_NO_TLSEXT


1522 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1523 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1524 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1525 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1526 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1527 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1528 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1529 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1530 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1531 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1532 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1533 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1534 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1535 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1536 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1537 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1538 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1539 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1540 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1542 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1544 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1545 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1546 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1548 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1549 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1550 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1551 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1552 #i‚de‡
OPENSSL_NO_HEARTBEATS


1553 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1554 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1555 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1559 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1560 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1561 
	#DTLS_CTRL_LISTEN
 75

	)

1563 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1564 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1565 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1567 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1568 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1570 
	#SSL_CTRL_GET_SERVER_TMP_KEY
 109

	)

1572 
	#SSL_CTRL_CHECK_PROTO_VERSION
 119

	)

1574 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1575 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1576 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1577 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1578 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1579 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1581 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1582 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1583 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1584 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1585 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1586 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1587 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1588 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1590 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1591 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1592 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1593 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1594 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1595 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1596 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1597 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1599 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1600 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1601 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1602 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1603 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1604 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1605 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1606 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1608 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1609 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1610 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1611 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1612 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1613 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1615 
	#SSL_gë_£rvî_tmp_key
(
s
, 
pk
) \

1616 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SERVER_TMP_KEY
,0,
pk
)

	)

1618 #i‚de‡
OPENSSL_NO_BIO


1619 
BIO_METHOD
 *
BIO_f_s¶
();

1620 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1621 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1622 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1623 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1624 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1628 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1629 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1630 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1631 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1632 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1633 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1634 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1635 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1636 
SSL_˛ór
(
SSL
 *
s
);

1638 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1640 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1641 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1642 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1643 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1644 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1646 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1647 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1648 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1649 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1650 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1651 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1652 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1653 #i‚de‡
OPENSSL_NO_SOCK


1654 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1655 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1656 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1658 #i‚de‡
OPENSSL_NO_BIO


1659 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1660 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1661 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1663 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1664 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1665 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1666 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1667 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1668 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1669 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1670 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1671 #i‚de‡
OPENSSL_NO_RSA


1672 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1674 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1675 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1676 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1677 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1678 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1680 #i‚de‡
OPENSSL_NO_STDIO


1681 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1682 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1683 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1684 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1685 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1686 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1687 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1688 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1689 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1690 c⁄° *
fûe
);

1691 #i‚de‡
OPENSSL_SYS_VMS


1692 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1693 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1694 c⁄° *
dú
);

1700 
SSL_lﬂd_îr‹_°rögs
();

1701 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1702 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1703 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1704 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1705 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1706 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1707 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1708 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1709 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1710 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1711 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,c⁄° *
sid_˘x
,

1712 
sid_˘x_Àn
);

1714 
SSL_SESSION
 *
SSL_SESSION_√w
();

1715 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1716 *
Àn
);

1717 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1718 #i‚de‡
OPENSSL_NO_FP_API


1719 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1721 #i‚de‡
OPENSSL_NO_BIO


1722 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1724 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1725 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1726 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1727 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1728 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1729 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1730 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1731 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1732 
id_Àn
);

1733 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1734 
Àngth
);

1736 #ifde‡
HEADER_X509_H


1737 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1740 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1742 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1743 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1744 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1745 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1746 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1747 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1748 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1749 #i‚de‡
OPENSSL_NO_RSA


1750 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1752 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1753 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1754 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1755 c⁄° *
d
, 
Àn
);

1756 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1757 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1759 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1760 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1762 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1763 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1765 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1766 
sid_˘x_Àn
);

1768 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1769 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1770 
sid_˘x_Àn
);

1772 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1773 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1774 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1775 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1777 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1778 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1781 
SSL_‰ì
(
SSL
 *
s¶
);

1782 
SSL_ac˚±
(
SSL
 *
s¶
);

1783 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1784 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1785 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1786 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1787 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1788 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1789 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1790 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1792 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1793 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1796 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1798 #i‚de‡
OPENSSL_NO_SSL2


1799 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

1800 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1801 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1804 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1805 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1806 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1808 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

1809 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1810 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1812 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

1813 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1814 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1816 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

1817 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

1818 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

1820 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

1821 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

1822 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

1825 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

1826 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1827 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1829 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1831 
SSL_do_h™dshake
(
SSL
 *
s
);

1832 
SSL_ª√gŸüã
(
SSL
 *
s
);

1833 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1834 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1835 
SSL_shutdown
(
SSL
 *
s
);

1837 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1838 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1839 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1840 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1841 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1842 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1844 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1845 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1846 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1847 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1848 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1849 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1851 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1852 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1854 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1856 
SSL_libøry_öô
();

1858 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1859 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1861 
SSL
 *
SSL_dup
(SSL *
s¶
);

1863 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1864  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1866 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1867 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1868 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1869 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1870 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1871 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1872 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1873 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1874 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1875 c⁄° *
CA∑th
);

1876 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1877 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1878 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1879 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1880 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1881 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1882 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1883 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1884 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1885 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

1887 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1888 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1890 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1891 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1892 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1893 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1895 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1896 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1897 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1898 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1900 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1901 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1902 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1903 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1905 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1907 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1908 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1909 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1910 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1911 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1912 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1913 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1914 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1916 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1917 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1918 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1919 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1920 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1921 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1922 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1923 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1924 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1925 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1926 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1927 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1928 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1929 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1931 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

1932 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1933 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

1934 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1937 #i‚de‡
OPENSSL_NO_RSA


1938 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

1939 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1940 
keyÀngth
));

1942 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

1943 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1944 
keyÀngth
));

1946 #i‚de‡
OPENSSL_NO_DH


1947 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

1948 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

1949 
keyÀngth
));

1950 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

1951 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

1952 
keyÀngth
));

1954 #i‚de‡
OPENSSL_NO_ECDH


1955 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

1956 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

1957 
keyÀngth
));

1958 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

1959 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

1960 
keyÀngth
));

1963 #i‚de‡
OPENSSL_NO_COMP


1964 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

1965 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

1966 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

1967 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

1968 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

1970 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

1971 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

1972 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

1973 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

1974 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

1978 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

1980 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

1981 *
¨g
);

1984 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
, 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
, *
¨g
);

1986 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

1987 
SSL_ˇche_hô
(
SSL
 *
s
);

1993 
ERR_lﬂd_SSL_°rögs
();

1998 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

1999 
	#SSL_F_CLIENT_FINISHED
 167

	)

2000 
	#SSL_F_CLIENT_HELLO
 101

	)

2001 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2002 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2003 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2004 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2005 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2006 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2007 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2008 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 316

	)

2009 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2010 
	#SSL_F_DTLS1_CONNECT
 249

	)

2011 
	#SSL_F_DTLS1_ENC
 250

	)

2012 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2013 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2014 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2015 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2016 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2017 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2018 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2019 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2020 
	#SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS
 424

	)

2021 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2022 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2023 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2024 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2025 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2026 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2027 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2028 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2029 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2030 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2031 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2032 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2033 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2034 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2035 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2036 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2037 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2038 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2039 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2040 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2041 
	#SSL_F_READ_N
 112

	)

2042 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2043 
	#SSL_F_SERVER_FINISH
 239

	)

2044 
	#SSL_F_SERVER_HELLO
 114

	)

2045 
	#SSL_F_SERVER_VERIFY
 240

	)

2046 
	#SSL_F_SSL23_ACCEPT
 115

	)

2047 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2048 
	#SSL_F_SSL23_CONNECT
 117

	)

2049 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2050 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2051 
	#SSL_F_SSL23_PEEK
 237

	)

2052 
	#SSL_F_SSL23_READ
 120

	)

2053 
	#SSL_F_SSL23_WRITE
 121

	)

2054 
	#SSL_F_SSL2_ACCEPT
 122

	)

2055 
	#SSL_F_SSL2_CONNECT
 123

	)

2056 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2057 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2058 
	#SSL_F_SSL2_PEEK
 234

	)

2059 
	#SSL_F_SSL2_READ
 125

	)

2060 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2061 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2062 
	#SSL_F_SSL2_WRITE
 127

	)

2063 
	#SSL_F_SSL3_ACCEPT
 128

	)

2064 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2065 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2066 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2067 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2068 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2069 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2070 
	#SSL_F_SSL3_CONNECT
 132

	)

2071 
	#SSL_F_SSL3_CTRL
 213

	)

2072 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2073 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2074 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2075 
	#SSL_F_SSL3_ENC
 134

	)

2076 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2077 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2078 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2079 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2080 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2081 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2082 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2083 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2084 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2085 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2086 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2087 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2088 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2089 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2090 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2091 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2092 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2093 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2094 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2095 
	#SSL_F_SSL3_PEEK
 235

	)

2096 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2097 
	#SSL_F_SSL3_READ_N
 149

	)

2098 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2099 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2100 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2101 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2102 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2103 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2104 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2105 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2106 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2107 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2108 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2109 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2110 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2111 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2112 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2113 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2114 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2115 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2116 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2117 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2118 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2119 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2120 
	#SSL_F_SSL_CERT_DUP
 221

	)

2121 
	#SSL_F_SSL_CERT_INST
 222

	)

2122 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2123 
	#SSL_F_SSL_CERT_NEW
 162

	)

2124 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2125 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2126 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2127 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2128 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2129 
	#SSL_F_SSL_CLEAR
 164

	)

2130 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2131 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2132 
	#SSL_F_SSL_CTRL
 232

	)

2133 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2134 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2135 
	#SSL_F_SSL_CTX_NEW
 169

	)

2136 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2137 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2138 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2139 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2140 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2141 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2142 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2143 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2144 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2145 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2146 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2147 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2148 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2149 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2150 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2151 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2152 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2153 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2154 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2155 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2156 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2157 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

2158 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2159 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2160 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2161 
	#SSL_F_SSL_NEW
 186

	)

2162 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2163 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2164 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2165 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2166 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2167 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2168 
	#SSL_F_SSL_PEEK
 270

	)

2169 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2170 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2171 
	#SSL_F_SSL_READ
 223

	)

2172 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2173 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2174 
	#SSL_F_SSL_SESSION_DUP
 348

	)

2175 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2176 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2177 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2178 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2179 
	#SSL_F_SSL_SET_CERT
 191

	)

2180 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2181 
	#SSL_F_SSL_SET_FD
 192

	)

2182 
	#SSL_F_SSL_SET_PKEY
 193

	)

2183 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2184 
	#SSL_F_SSL_SET_RFD
 194

	)

2185 
	#SSL_F_SSL_SET_SESSION
 195

	)

2186 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2187 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2188 
	#SSL_F_SSL_SET_TRUST
 228

	)

2189 
	#SSL_F_SSL_SET_WFD
 196

	)

2190 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2191 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2192 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2193 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2194 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2195 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2196 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2197 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2198 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2199 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2200 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2201 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2202 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2203 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2204 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2205 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2206 
	#SSL_F_SSL_WRITE
 208

	)

2207 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2208 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2209 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2210 
	#SSL_F_TLS1_ENC
 210

	)

2211 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2212 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2213 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2214 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2215 
	#SSL_F_TLS1_PRF
 284

	)

2216 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2217 
	#SSL_F_WRITE_PENDING
 212

	)

2220 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2221 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2222 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2223 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2224 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2225 
	#SSL_R_BAD_CHECKSUM
 104

	)

2226 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2227 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2228 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2229 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2230 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2231 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2232 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2233 
	#SSL_R_BAD_ECC_CERT
 304

	)

2234 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2235 
	#SSL_R_BAD_ECPOINT
 306

	)

2236 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2237 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2238 
	#SSL_R_BAD_LENGTH
 271

	)

2239 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2240 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2241 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2242 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2243 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2244 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2245 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2246 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2247 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2248 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2249 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2250 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2251 
	#SSL_R_BAD_SIGNATURE
 123

	)

2252 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2253 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2254 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2255 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2256 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2257 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2258 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2259 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2260 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2261 
	#SSL_R_BAD_STATE
 126

	)

2262 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2263 
	#SSL_R_BIO_NOT_SET
 128

	)

2264 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2265 
	#SSL_R_BN_LIB
 130

	)

2266 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2267 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2268 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2269 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2270 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2271 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2272 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2273 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2274 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2275 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2276 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2277 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2278 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2279 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2280 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2281 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2282 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2283 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2284 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2285 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2286 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2287 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2288 
	#SSL_R_DH_KEY_TOO_SMALL
 372

	)

2289 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2290 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2291 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2292 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2293 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2294 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2295 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2296 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2297 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2298 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2299 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2300 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2301 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2302 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2303 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2304 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2305 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2306 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2307 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2308 
	#SSL_R_HTTP_REQUEST
 156

	)

2309 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2310 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

2311 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2312 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2313 
	#SSL_R_INVALID_COMMAND
 280

	)

2314 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2315 
	#SSL_R_INVALID_PURPOSE
 278

	)

2316 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2317 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2318 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2319 
	#SSL_R_INVALID_TRUST
 279

	)

2320 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2321 
	#SSL_R_KRB5
 285

	)

2322 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2323 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2324 
	#SSL_R_KRB5_C_INIT
 288

	)

2325 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2326 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2327 
	#SSL_R_KRB5_S_INIT
 291

	)

2328 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2329 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2330 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2331 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2332 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2333 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2334 
	#SSL_R_LIBRARY_BUG
 274

	)

2335 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2336 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2337 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2338 
	#SSL_R_MISSING_DH_KEY
 163

	)

2339 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2340 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2341 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2342 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2343 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2344 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2345 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2346 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2347 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2348 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2349 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2350 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2351 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2352 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2353 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2354 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2355 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2356 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2357 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2358 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2359 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2360 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2361 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2362 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2363 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2364 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2365 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2366 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2367 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2368 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2369 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2370 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2371 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2372 
	#SSL_R_NO_PUBLICKEY
 192

	)

2373 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2374 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2375 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2376 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

2377 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2378 
	#SSL_R_NULL_SSL_CTX
 195

	)

2379 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2380 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2381 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2382 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2383 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

2384 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2385 
	#SSL_R_PARSE_TLSEXT
 227

	)

2386 
	#SSL_R_PATH_TOO_LONG
 270

	)

2387 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2388 
	#SSL_R_PEER_ERROR
 200

	)

2389 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2390 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2391 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2392 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2393 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2394 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2395 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2396 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2397 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2398 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2399 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2400 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2401 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2402 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2403 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2404 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2405 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2406 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2407 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2408 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2409 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2410 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2411 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2412 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

2413 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2414 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2415 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2416 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2417 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2418 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2419 
	#SSL_R_SHORT_READ
 219

	)

2420 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

2421 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2422 
	#SSL_R_SRP_A_CALC
 361

	)

2423 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

2424 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

2425 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

2426 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2427 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2428 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

2429 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2430 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2431 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2432 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2433 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2434 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2435 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2436 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2437 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2438 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2439 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2440 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2441 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2442 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2443 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2444 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2445 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2446 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2447 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2448 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2449 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2450 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2451 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2452 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2453 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2454 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2455 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2456 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2457 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

2458 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2459 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2460 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2461 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2462 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2463 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2464 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2465 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2466 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2467 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2468 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2469 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2470 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2471 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

2472 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

2473 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

2474 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2475 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2476 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2477 
	#SSL_R_TOO_MANY_WARN_ALERTS
 409

	)

2478 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2479 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2480 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2481 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2482 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2483 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2484 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2485 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2486 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2487 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2488 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2489 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2490 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2491 
	#SSL_R_UNINITIALIZED
 276

	)

2492 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2493 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2494 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2495 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2496 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

2497 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2498 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2499 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2500 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2501 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2502 
	#SSL_R_UNKNOWN_STATE
 255

	)

2503 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2504 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2505 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2506 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

2507 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2508 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2509 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2510 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2511 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

2512 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2513 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2514 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2515 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2516 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2517 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2518 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

2519 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2520 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2521 
	#SSL_R_X509_LIB
 268

	)

2522 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2524 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

58 #i‚de‡
HEADER_X509V3_H


59 
	#HEADER_X509V3_H


	)

61 
	~<›ís¶/bio.h
>

62 
	~<›ís¶/x509.h
>

63 
	~<›ís¶/c⁄f.h
>

65 #ifde‡
__˝lu•lus


70 
v3_ext_mëhod
;

71 
v3_ext_˘x
;

75 * (*
	tX509V3_EXT_NEW
)();

76 (*
X509V3_EXT_FREE
)(*);

77 * (*
	tX509V3_EXT_D2I
)(*, const ** , );

78 (*
X509V3_EXT_I2D
)(*, **);

79 
STACK_OF
(
	tCONF_VALUE
) *

80 (*
	tX509V3_EXT_I2V
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

81 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

82 * (*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

83 
	tv3_ext_˘x
 *
	t˘x
,

84 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

85 * (*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
);

86 * (*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

87 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

88 (*
X509V3_EXT_I2R
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

89 
	tBIO
 *
	tout
, 
	tödít
);

90 * (*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

91 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

95 
	sv3_ext_mëhod
 {

96 
ext_nid
;

97 
ext_Êags
;

99 
ASN1_ITEM_EXP
 *
ô
;

101 
X509V3_EXT_NEW
 
ext_√w
;

102 
X509V3_EXT_FREE
 
ext_‰ì
;

103 
X509V3_EXT_D2I
 
d2i
;

104 
X509V3_EXT_I2D
 
i2d
;

107 
X509V3_EXT_I2S
 
i2s
;

108 
X509V3_EXT_S2I
 
s2i
;

111 
X509V3_EXT_I2V
 
i2v
;

112 
X509V3_EXT_V2I
 
v2i
;

115 
X509V3_EXT_I2R
 
i2r
;

116 
X509V3_EXT_R2I
 
r2i
;

118 *
u§_d©a
;

121 
	sX509V3_CONF_METHOD_°
 {

122 * (*
gë_°rög
)(*
db
, *
£˘i⁄
, *
vÆue
);

123 
STACK_OF
(
CONF_VALUE
Ë* (*
gë_£˘i⁄
)(*
db
, *
£˘i⁄
);

124 (*
‰ì_°rög
)(*
db
, * 
°rög
);

125 (*
‰ì_£˘i⁄
)(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

126 } 
	tX509V3_CONF_METHOD
;

129 
	sv3_ext_˘x
 {

130 
	#CTX_TEST
 0x1

	)

131 
Êags
;

132 
X509
 *
issuî_˚π
;

133 
X509
 *
subje˘_˚π
;

134 
X509_REQ
 *
subje˘_ªq
;

135 
X509_CRL
 *
¸l
;

136 
X509V3_CONF_METHOD
 *
db_mëh
;

137 *
db
;

141 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

143 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

146 
	#X509V3_EXT_DYNAMIC
 0x1

	)

147 
	#X509V3_EXT_CTX_DEP
 0x2

	)

148 
	#X509V3_EXT_MULTILINE
 0x4

	)

150 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

152 
	sBASIC_CONSTRAINTS_°
 {

153 
ˇ
;

154 
ASN1_INTEGER
 *
∑thÀn
;

155 } 
	tBASIC_CONSTRAINTS
;

158 
	sPKEY_USAGE_PERIOD_°
 {

159 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

160 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

161 } 
	tPKEY_USAGE_PERIOD
;

163 
	sŸhîName_°
 {

164 
ASN1_OBJECT
 *
ty≥_id
;

165 
ASN1_TYPE
 *
vÆue
;

166 } 
	tOTHERNAME
;

168 
	sEDIP¨tyName_°
 {

169 
ASN1_STRING
 *
«meAssig√r
;

170 
ASN1_STRING
 *
∑πyName
;

171 } 
	tEDIPARTYNAME
;

173 
	sGENERAL_NAME_°
 {

175 
	#GEN_OTHERNAME
 0

	)

176 
	#GEN_EMAIL
 1

	)

177 
	#GEN_DNS
 2

	)

178 
	#GEN_X400
 3

	)

179 
	#GEN_DIRNAME
 4

	)

180 
	#GEN_EDIPARTY
 5

	)

181 
	#GEN_URI
 6

	)

182 
	#GEN_IPADD
 7

	)

183 
	#GEN_RID
 8

	)

185 
ty≥
;

187 *
±r
;

188 
OTHERNAME
 *
ŸhîName
;

189 
ASN1_IA5STRING
 *
rfc822Name
;

190 
ASN1_IA5STRING
 *
dNSName
;

191 
ASN1_TYPE
 *
x400Addªss
;

192 
X509_NAME
 *
dúe˘‹yName
;

193 
EDIPARTYNAME
 *
ediP¨tyName
;

194 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

195 
ASN1_OCTET_STRING
 *
iPAddªss
;

196 
ASN1_OBJECT
 *
ªgi°îedID
;

199 
ASN1_OCTET_STRING
 *
ù
;

200 
X509_NAME
 *
dún
;

201 
ASN1_IA5STRING
 *
ü5
;

202 
ASN1_OBJECT
 *
rid
;

203 
ASN1_TYPE
 *
Ÿhî
;

204 } 
d
;

205 } 
	tGENERAL_NAME
;

207 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

209 
	sACCESS_DESCRIPTION_°
 {

210 
ASN1_OBJECT
 *
mëhod
;

211 
GENERAL_NAME
 *
loˇti⁄
;

212 } 
	tACCESS_DESCRIPTION
;

214 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

216 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

218 
DECLARE_STACK_OF
(
GENERAL_NAME
)

219 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

221 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

222 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

224 
	sDIST_POINT_NAME_°
 {

225 
ty≥
;

227 
GENERAL_NAMES
 *
fuŒ«me
;

228 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

229 } 
«me
;

231 
X509_NAME
 *
d≤ame
;

232 } 
	tDIST_POINT_NAME
;

234 
	#CRLDP_ALL_REASONS
 0x807f

	)

236 
	#CRL_REASON_NONE
 -1

	)

237 
	#CRL_REASON_UNSPECIFIED
 0

	)

238 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

239 
	#CRL_REASON_CA_COMPROMISE
 2

	)

240 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

241 
	#CRL_REASON_SUPERSEDED
 4

	)

242 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

243 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

244 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

245 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

246 
	#CRL_REASON_AA_COMPROMISE
 10

	)

248 
	sDIST_POINT_°
 {

249 
DIST_POINT_NAME
 *
di°poöt
;

250 
ASN1_BIT_STRING
 *
ªas⁄s
;

251 
GENERAL_NAMES
 *
CRLissuî
;

252 
dp_ªas⁄s
;

255 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

257 
DECLARE_STACK_OF
(
DIST_POINT
)

258 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

260 
	sAUTHORITY_KEYID_°
 {

261 
ASN1_OCTET_STRING
 *
keyid
;

262 
GENERAL_NAMES
 *
issuî
;

263 
ASN1_INTEGER
 *
£rül
;

268 
	sSXNET_ID_°
 {

269 
ASN1_INTEGER
 *
z⁄e
;

270 
ASN1_OCTET_STRING
 *
u£r
;

271 } 
	tSXNETID
;

273 
DECLARE_STACK_OF
(
SXNETID
)

274 
DECLARE_ASN1_SET_OF
(
SXNETID
)

276 
	sSXNET_°
 {

277 
ASN1_INTEGER
 *
vîsi⁄
;

278 
STACK_OF
(
SXNETID
Ë*
ids
;

279 } 
	tSXNET
;

281 
	sNOTICEREF_°
 {

282 
ASN1_STRING
 *
‹g™iz©i⁄
;

283 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

284 } 
	tNOTICEREF
;

286 
	sUSERNOTICE_°
 {

287 
NOTICEREF
 *
nŸi˚ªf
;

288 
ASN1_STRING
 *
ex±ext
;

289 } 
	tUSERNOTICE
;

291 
	sPOLICYQUALINFO_°
 {

292 
ASN1_OBJECT
 *
pquÆid
;

294 
ASN1_IA5STRING
 *
˝suri
;

295 
USERNOTICE
 *
u£∫Ÿi˚
;

296 
ASN1_TYPE
 *
Ÿhî
;

297 } 
d
;

298 } 
	tPOLICYQUALINFO
;

300 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

301 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

303 
	sPOLICYINFO_°
 {

304 
ASN1_OBJECT
 *
pﬁicyid
;

305 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

306 } 
	tPOLICYINFO
;

308 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

310 
DECLARE_STACK_OF
(
POLICYINFO
)

311 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

313 
	sPOLICY_MAPPING_°
 {

314 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

315 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

316 } 
	tPOLICY_MAPPING
;

318 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

320 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

322 
	sGENERAL_SUBTREE_°
 {

323 
GENERAL_NAME
 *
ba£
;

324 
ASN1_INTEGER
 *
möimum
;

325 
ASN1_INTEGER
 *
maximum
;

326 } 
	tGENERAL_SUBTREE
;

328 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

330 
	sNAME_CONSTRAINTS_°
 {

331 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

332 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

335 
	sPOLICY_CONSTRAINTS_°
 {

336 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

337 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

338 } 
	tPOLICY_CONSTRAINTS
;

341 
	sPROXY_POLICY_°


343 
ASN1_OBJECT
 *
pﬁicyL™guage
;

344 
ASN1_OCTET_STRING
 *
pﬁicy
;

345 } 
	tPROXY_POLICY
;

347 
	sPROXY_CERT_INFO_EXTENSION_°


349 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

350 
PROXY_POLICY
 *
¥oxyPﬁicy
;

351 } 
	tPROXY_CERT_INFO_EXTENSION
;

353 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

354 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

356 
	sISSUING_DIST_POINT_°


358 
DIST_POINT_NAME
 *
di°poöt
;

359 
⁄lyu£r
;

360 
⁄lyCA
;

361 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

362 
ödúe˘CRL
;

363 
⁄ly©å
;

368 
	#IDP_PRESENT
 0x1

	)

370 
	#IDP_INVALID
 0x2

	)

372 
	#IDP_ONLYUSER
 0x4

	)

374 
	#IDP_ONLYCA
 0x8

	)

376 
	#IDP_ONLYATTR
 0x10

	)

378 
	#IDP_INDIRECT
 0x20

	)

380 
	#IDP_REASONS
 0x40

	)

382 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

383 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

385 
	#X509V3_£t_˘x_ã°
(
˘x
) \

386 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

387 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

389 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

392 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

393 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

394 
NULL
, NULL, \

395 
èbÀ
}

	)

397 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

399 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

400 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

402 
NULL
}

	)

404 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

409 
	#EXFLAG_BCONS
 0x1

	)

410 
	#EXFLAG_KUSAGE
 0x2

	)

411 
	#EXFLAG_XKUSAGE
 0x4

	)

412 
	#EXFLAG_NSCERT
 0x8

	)

414 
	#EXFLAG_CA
 0x10

	)

416 
	#EXFLAG_SI
 0x20

	)

417 
	#EXFLAG_SS
 0x20

	)

418 
	#EXFLAG_V1
 0x40

	)

419 
	#EXFLAG_INVALID
 0x80

	)

420 
	#EXFLAG_SET
 0x100

	)

421 
	#EXFLAG_CRITICAL
 0x200

	)

422 
	#EXFLAG_PROXY
 0x400

	)

424 
	#EXFLAG_INVALID_POLICY
 0x800

	)

425 
	#EXFLAG_FRESHEST
 0x1000

	)

427 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

428 
	#KU_NON_REPUDIATION
 0x0040

	)

429 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

430 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

431 
	#KU_KEY_AGREEMENT
 0x0008

	)

432 
	#KU_KEY_CERT_SIGN
 0x0004

	)

433 
	#KU_CRL_SIGN
 0x0002

	)

434 
	#KU_ENCIPHER_ONLY
 0x0001

	)

435 
	#KU_DECIPHER_ONLY
 0x8000

	)

437 
	#NS_SSL_CLIENT
 0x80

	)

438 
	#NS_SSL_SERVER
 0x40

	)

439 
	#NS_SMIME
 0x20

	)

440 
	#NS_OBJSIGN
 0x10

	)

441 
	#NS_SSL_CA
 0x04

	)

442 
	#NS_SMIME_CA
 0x02

	)

443 
	#NS_OBJSIGN_CA
 0x01

	)

444 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

446 
	#XKU_SSL_SERVER
 0x1

	)

447 
	#XKU_SSL_CLIENT
 0x2

	)

448 
	#XKU_SMIME
 0x4

	)

449 
	#XKU_CODE_SIGN
 0x8

	)

450 
	#XKU_SGC
 0x10

	)

451 
	#XKU_OCSP_SIGN
 0x20

	)

452 
	#XKU_TIMESTAMP
 0x40

	)

453 
	#XKU_DVCS
 0x80

	)

455 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

456 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

458 
	sx509_puΩo£_°
 {

459 
puΩo£
;

460 
åu°
;

461 
Êags
;

462 (*
check_puΩo£
)(c⁄° 
x509_puΩo£_°
 *,

463 c⁄° 
X509
 *, );

464 *
«me
;

465 *
¢ame
;

466 *
u§_d©a
;

467 } 
	tX509_PURPOSE
;

469 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

470 
	#X509_PURPOSE_SSL_SERVER
 2

	)

471 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

472 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

473 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

474 
	#X509_PURPOSE_CRL_SIGN
 6

	)

475 
	#X509_PURPOSE_ANY
 7

	)

476 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

477 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

479 
	#X509_PURPOSE_MIN
 1

	)

480 
	#X509_PURPOSE_MAX
 9

	)

484 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

486 
	#X509V3_EXT_DEFAULT
 0

	)

488 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

490 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

492 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

496 
	#X509V3_ADD_OP_MASK
 0xfL

	)

497 
	#X509V3_ADD_DEFAULT
 0L

	)

498 
	#X509V3_ADD_APPEND
 1L

	)

499 
	#X509V3_ADD_REPLACE
 2L

	)

500 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

501 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

502 
	#X509V3_ADD_DELETE
 5L

	)

503 
	#X509V3_ADD_SILENT
 0x10

	)

505 
DECLARE_STACK_OF
(
X509_PURPOSE
)

507 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

509 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

510 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

512 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

513 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
, 
u£æí
);

514 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
, 
u£æí
);

516 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

517 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

518 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

520 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

522 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

524 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

525 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

526 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

530 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

531 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

532 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

533 
ASN1_BIT_STRING
 *
bôs
,

534 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

536 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
GENERAL_NAME
 *
gí
, STACK_OF(CONF_VALUEË*
ªt
);

537 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

539 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

541 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

542 
GENERAL_NAMES
 *
gí
, 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

543 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

544 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

546 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

547 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

548 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

549 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

550 *
GENERAL_NAME_gë0_vÆue
(
GENERAL_NAME
 *
a
, *
±y≥
);

551 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

552 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

553 
GENERAL_NAME_gë0_ŸhîName
(
GENERAL_NAME
 *
gí
,

554 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

556 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_OCTET_STRING
 *
ü5
);

557 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
, *
°r
);

559 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

560 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
* 
a
);

562 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

563 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

564 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

565 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

566 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

568 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

569 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

570 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

571 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

573 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

575 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

577 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

578 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

580 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

581 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

582 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

584 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

585 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

587 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

588 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

590 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

591 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

593 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

594 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

595 
gí_ty≥
, *
vÆue
, 
is_nc
);

597 #ifde‡
HEADER_CONF_H


598 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

599 
CONF_VALUE
 *
˙f
);

600 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

601 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

602 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
, 
is_nc
);

603 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

605 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

606 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

607 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

608 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

609 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

610 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

612 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

613 
ext_nid
, *
vÆue
);

614 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

615 *
«me
, *
vÆue
);

616 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

617 *
£˘i⁄
, 
X509
 *
˚π
);

618 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

619 *
£˘i⁄
, 
X509_REQ
 *
ªq
);

620 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

621 *
£˘i⁄
, 
X509_CRL
 *
¸l
);

623 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

624 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

625 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

626 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

627 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

628 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

631 * 
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

632 
STACK_OF
(
CONF_VALUE
Ë* 
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

633 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

634 
X509V3_£˘i⁄_‰ì
–
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

635 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

636 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

638 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

639 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

640 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

641 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

642 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

643 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

644 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

645 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

646 * 
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

647 
ASN1_INTEGER
 * 
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

648 * 
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

649 * 
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

650 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

651 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

652 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

653 
X509V3_EXT_˛ónup
();

655 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

656 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

657 
X509V3_add_°™d¨d_exãnsi⁄s
();

658 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

659 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

660 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
, *
idx
);

663 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

664 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
, 
¸ô
, 
Êags
);

666 *
hex_to_°rög
(c⁄° *
buf„r
, 
Àn
);

667 *
°rög_to_hex
(c⁄° *
°r
, *
Àn
);

668 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

670 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

671 
ml
);

672 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

673 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

675 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
, 
Êag
, 
ödít
);

677 
X509_check_ˇ
(
X509
 *
x
);

678 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

679 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

680 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

681 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

682 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

683 
X509_PURPOSE_gë_cou¡
();

684 
X509_PURPOSE
 * 
X509_PURPOSE_gë0
(
idx
);

685 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

686 
X509_PURPOSE_gë_by_id
(
id
);

687 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

688 (*
ck
)(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

689 *
«me
, *
¢ame
, *
¨g
);

690 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

691 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

692 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

693 
X509_PURPOSE_˛ónup
();

694 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

696 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

697 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

698 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

699 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

701 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

702 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

703 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

704 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
)*
dn_sk
,

705 
chty≥
);

707 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

708 
DECLARE_STACK_OF
(
X509_POLICY_NODE
)

710 #i‚de‡
OPENSSL_NO_RFC3779


712 
	sASR™ge_°
 {

713 
ASN1_INTEGER
 *
mö
, *
max
;

714 } 
	tASR™ge
;

716 
	#ASIdOrR™ge_id
 0

	)

717 
	#ASIdOrR™ge_ønge
 1

	)

719 
	sASIdOrR™ge_°
 {

720 
ty≥
;

722 
ASN1_INTEGER
 *
id
;

723 
ASR™ge
 *
ønge
;

724 } 
u
;

725 } 
	tASIdOrR™ge
;

727 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

728 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

730 
	#ASIdítifõrChoi˚_öhîô
 0

	)

731 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

733 
	sASIdítifõrChoi˚_°
 {

734 
ty≥
;

736 
ASN1_NULL
 *
öhîô
;

737 
ASIdOrR™ges
 *
asIdsOrR™ges
;

738 } 
u
;

739 } 
	tASIdítifõrChoi˚
;

741 
	sASIdítifõrs_°
 {

742 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

743 } 
	tASIdítifõrs
;

745 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

746 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

747 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

748 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

751 
	sIPAddªssR™ge_°
 {

752 
ASN1_BIT_STRING
 *
mö
, *
max
;

753 } 
	tIPAddªssR™ge
;

755 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

756 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

758 
	sIPAddªssOrR™ge_°
 {

759 
ty≥
;

761 
ASN1_BIT_STRING
 *
addªssPªfix
;

762 
IPAddªssR™ge
 *
addªssR™ge
;

763 } 
u
;

764 } 
	tIPAddªssOrR™ge
;

766 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

767 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

769 
	#IPAddªssChoi˚_öhîô
 0

	)

770 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

772 
	sIPAddªssChoi˚_°
 {

773 
ty≥
;

775 
ASN1_NULL
 *
öhîô
;

776 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

777 } 
u
;

778 } 
	tIPAddªssChoi˚
;

780 
	sIPAddªssFamûy_°
 {

781 
ASN1_OCTET_STRING
 *
addªssFamûy
;

782 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

783 } 
	tIPAddªssFamûy
;

785 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

786 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

788 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

789 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

790 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

791 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

796 
	#V3_ASID_ASNUM
 0

	)

797 
	#V3_ASID_RDI
 1

	)

805 
	#IANA_AFI_IPV4
 1

	)

806 
	#IANA_AFI_IPV6
 2

	)

813 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

814 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

815 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

816 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

817 c⁄° 
afi
, c⁄° *
ßfi
);

818 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

819 c⁄° 
afi
, c⁄° *
ßfi
,

820 *
a
, c⁄° 
¥efixÀn
);

821 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

822 c⁄° 
afi
, c⁄° *
ßfi
,

823 *
mö
, *
max
);

824 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

825 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

826 *
mö
, *
max
,

827 c⁄° 
Àngth
);

832 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

833 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

834 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

835 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

840 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

841 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

842 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

843 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

848 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

849 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

850 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

851 
ASIdítifõrs
 *
ext
,

852 
Ælow_öhîô™˚
);

853 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

854 
IPAddrBlocks
 *
ext
,

855 
Ælow_öhîô™˚
);

863 
ERR_lﬂd_X509V3_°rögs
();

868 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

869 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

870 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

871 
	#X509V3_F_COPY_EMAIL
 122

	)

872 
	#X509V3_F_COPY_ISSUER
 123

	)

873 
	#X509V3_F_DO_DIRNAME
 144

	)

874 
	#X509V3_F_DO_EXT_CONF
 124

	)

875 
	#X509V3_F_DO_EXT_I2D
 135

	)

876 
	#X509V3_F_DO_EXT_NCONF
 151

	)

877 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

878 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

879 
	#X509V3_F_HEX_TO_STRING
 111

	)

880 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

881 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

882 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

883 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

884 
	#X509V3_F_NOTICE_SECTION
 132

	)

885 
	#X509V3_F_NREF_NOS
 133

	)

886 
	#X509V3_F_POLICY_SECTION
 131

	)

887 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

888 
	#X509V3_F_R2I_CERTPOL
 130

	)

889 
	#X509V3_F_R2I_PCI
 155

	)

890 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

891 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

892 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

893 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

894 
	#X509V3_F_S2I_SKEY_ID
 115

	)

895 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

896 
	#X509V3_F_STRING_TO_HEX
 113

	)

897 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

898 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

899 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

900 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

901 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

902 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

903 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

904 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

905 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

906 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

907 
	#X509V3_F_V2I_CRLD
 134

	)

908 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

909 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

910 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

911 
	#X509V3_F_V2I_IDP
 157

	)

912 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

913 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

914 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

915 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

916 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

917 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

918 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

919 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

920 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

921 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

922 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

923 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

924 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

925 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

926 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

927 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

928 
	#X509V3_F_X509V3_GET_STRING
 143

	)

929 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

930 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

931 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

932 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

935 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

936 
	#X509V3_R_BAD_OBJECT
 119

	)

937 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

938 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

939 
	#X509V3_R_DIRNAME_ERROR
 149

	)

940 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

941 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

942 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

943 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

944 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

945 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

946 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

947 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

948 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

949 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

950 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

951 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

952 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

953 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

954 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

955 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

956 
	#X509V3_R_INVALID_ASRANGE
 163

	)

957 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

958 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

959 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

960 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

961 
	#X509V3_R_INVALID_NAME
 106

	)

962 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

963 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

964 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

965 
	#X509V3_R_INVALID_NUMBER
 140

	)

966 
	#X509V3_R_INVALID_NUMBERS
 141

	)

967 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

968 
	#X509V3_R_INVALID_OPTION
 138

	)

969 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

970 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

971 
	#X509V3_R_INVALID_PURPOSE
 146

	)

972 
	#X509V3_R_INVALID_SAFI
 164

	)

973 
	#X509V3_R_INVALID_SECTION
 135

	)

974 
	#X509V3_R_INVALID_SYNTAX
 143

	)

975 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

976 
	#X509V3_R_MISSING_VALUE
 124

	)

977 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

978 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

979 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

980 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

981 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

982 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

983 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

984 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

985 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

986 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

987 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

988 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

989 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

990 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

991 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

992 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

993 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

994 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

995 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

996 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

997 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

998 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

999 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

1000 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

1001 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

1002 
	#X509V3_R_USER_TOO_LONG
 132

	)

1004 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap.h

45 
	~<pˇp/pˇp.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

250 
	g__BEGIN_DECLS


252 #ifde‡
__USE_GNU


255 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

256 
__THROW
;

260 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

261 
__Êags
);

265 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

266 
size_t
 
__cou¡
, 
__Êags
);

269 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

270 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

271 
__Êags
);

274 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

275 
__Êags
);

278 #i‚de‡
__USE_FILE_OFFSET64


279 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

281 #ifde‡
__REDIRECT


282 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

283 
__off64_t
 
__Àn
),

284 
ÁŒoˇã64
);

286 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

289 #ifde‡
__USE_LARGEFILE64


290 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
);

295 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


30 #ifde‡
_UAPI_LINUX_IN6_H


34 
	#__USE_KERNEL_IPV6_DEFS


	)

40 
	#IP_OPTIONS
 4

	)

41 
	#IP_HDRINCL
 3

	)

42 
	#IP_TOS
 1

	)

43 
	#IP_TTL
 2

	)

44 
	#IP_RECVOPTS
 6

	)

46 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

47 
	#IP_RETOPTS
 7

	)

48 
	#IP_MULTICAST_IF
 32

	)

49 
	#IP_MULTICAST_TTL
 33

	)

50 
	#IP_MULTICAST_LOOP
 34

	)

51 
	#IP_ADD_MEMBERSHIP
 35

	)

52 
	#IP_DROP_MEMBERSHIP
 36

	)

53 
	#IP_UNBLOCK_SOURCE
 37

	)

54 
	#IP_BLOCK_SOURCE
 38

	)

55 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

56 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

57 
	#IP_MSFILTER
 41

	)

58 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


59 
	#MCAST_JOIN_GROUP
 42

	)

60 
	#MCAST_BLOCK_SOURCE
 43

	)

61 
	#MCAST_UNBLOCK_SOURCE
 44

	)

62 
	#MCAST_LEAVE_GROUP
 45

	)

63 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

64 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

65 
	#MCAST_MSFILTER
 48

	)

67 
	#MCAST_EXCLUDE
 0

	)

68 
	#MCAST_INCLUDE
 1

	)

71 
	#IP_ROUTER_ALERT
 5

	)

72 
	#IP_PKTINFO
 8

	)

73 
	#IP_PKTOPTIONS
 9

	)

74 
	#IP_PMTUDISC
 10

	)

75 
	#IP_MTU_DISCOVER
 10

	)

76 
	#IP_RECVERR
 11

	)

77 
	#IP_RECVTTL
 12

	)

78 
	#IP_RECVTOS
 13

	)

79 
	#IP_MTU
 14

	)

80 
	#IP_FREEBIND
 15

	)

81 
	#IP_IPSEC_POLICY
 16

	)

82 
	#IP_XFRM_POLICY
 17

	)

83 
	#IP_PASSSEC
 18

	)

84 
	#IP_TRANSPARENT
 19

	)

85 
	#IP_MULTICAST_ALL
 49

	)

88 
	#IP_ORIGDSTADDR
 20

	)

89 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

91 
	#IP_MINTTL
 21

	)

95 
	#IP_PMTUDISC_DONT
 0

	)

96 
	#IP_PMTUDISC_WANT
 1

	)

97 
	#IP_PMTUDISC_DO
 2

	)

98 
	#IP_PMTUDISC_PROBE
 3

	)

101 
	#SOL_IP
 0

	)

103 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

104 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

105 
	#IP_MAX_MEMBERSHIPS
 20

	)

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


111 
	sù_›ts


113 
ö_addr
 
	mù_d°
;

114 
	mù_›ts
[40];

118 
	sù_mªqn


120 
ö_addr
 
	mimr_mu…üddr
;

121 
ö_addr
 
	mimr_addªss
;

122 
	mimr_ifödex
;

126 
	sö_pktöfo


128 
	mùi_ifödex
;

129 
ö_addr
 
	mùi_•ec_d°
;

130 
ö_addr
 
	mùi_addr
;

137 
	#IPV6_ADDRFORM
 1

	)

138 
	#IPV6_2292PKTINFO
 2

	)

139 
	#IPV6_2292HOPOPTS
 3

	)

140 
	#IPV6_2292DSTOPTS
 4

	)

141 
	#IPV6_2292RTHDR
 5

	)

142 
	#IPV6_2292PKTOPTIONS
 6

	)

143 
	#IPV6_CHECKSUM
 7

	)

144 
	#IPV6_2292HOPLIMIT
 8

	)

146 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

148 
	#IPV6_NEXTHOP
 9

	)

149 
	#IPV6_AUTHHDR
 10

	)

150 
	#IPV6_UNICAST_HOPS
 16

	)

151 
	#IPV6_MULTICAST_IF
 17

	)

152 
	#IPV6_MULTICAST_HOPS
 18

	)

153 
	#IPV6_MULTICAST_LOOP
 19

	)

154 
	#IPV6_JOIN_GROUP
 20

	)

155 
	#IPV6_LEAVE_GROUP
 21

	)

156 
	#IPV6_ROUTER_ALERT
 22

	)

157 
	#IPV6_MTU_DISCOVER
 23

	)

158 
	#IPV6_MTU
 24

	)

159 
	#IPV6_RECVERR
 25

	)

160 
	#IPV6_V6ONLY
 26

	)

161 
	#IPV6_JOIN_ANYCAST
 27

	)

162 
	#IPV6_LEAVE_ANYCAST
 28

	)

163 
	#IPV6_IPSEC_POLICY
 34

	)

164 
	#IPV6_XFRM_POLICY
 35

	)

166 
	#IPV6_RECVPKTINFO
 49

	)

167 
	#IPV6_PKTINFO
 50

	)

168 
	#IPV6_RECVHOPLIMIT
 51

	)

169 
	#IPV6_HOPLIMIT
 52

	)

170 
	#IPV6_RECVHOPOPTS
 53

	)

171 
	#IPV6_HOPOPTS
 54

	)

172 
	#IPV6_RTHDRDSTOPTS
 55

	)

173 
	#IPV6_RECVRTHDR
 56

	)

174 
	#IPV6_RTHDR
 57

	)

175 
	#IPV6_RECVDSTOPTS
 58

	)

176 
	#IPV6_DSTOPTS
 59

	)

178 
	#IPV6_RECVTCLASS
 66

	)

179 
	#IPV6_TCLASS
 67

	)

182 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

183 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

184 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

185 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

188 
	#IPV6_PMTUDISC_DONT
 0

	)

189 
	#IPV6_PMTUDISC_WANT
 1

	)

190 
	#IPV6_PMTUDISC_DO
 2

	)

191 
	#IPV6_PMTUDISC_PROBE
 3

	)

194 
	#SOL_IPV6
 41

	)

195 
	#SOL_ICMPV6
 58

	)

198 
	#IPV6_RTHDR_LOOSE
 0

	)

199 
	#IPV6_RTHDR_STRICT
 1

	)

201 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 
	~<bôs/w‹dsize.h
>

27 #i‚de‡
__exã∫_ölöe


28 
	#__MATH_INLINE
 
__ölöe


	)

30 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

34 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

37 
__MATH_INLINE
 

38 
__NTH
 (
	$__signbôf
 (
__x
))

40 #i‡
__WORDSIZE
 == 32

41 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

42  
__u
.
__i
 < 0;

44 
__m
;

45 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

46  
__m
 & 0x8;

48 
	}
}

49 
__MATH_INLINE
 

50 
__NTH
 (
	$__signbô
 (
__x
))

52 #i‡
__WORDSIZE
 == 32

53 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

54  
__u
.
__i
[1] < 0;

56 
__m
;

57 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

58  
__m
 & 0x80;

60 
	}
}

61 
__MATH_INLINE
 

62 
__NTH
 (
	$__signbôl
 (
__x
))

64 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

65  (
__u
.
__i
[2] & 0x8000) != 0;

66 
	}
}

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_PADSIZE
 \

185 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
	m__ss_∑ddög
[
_SS_PADSIZE
];

191 
__ss_Æig¡y≥
 
	m__ss_Æign
;

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

235 
	mMSG_WAITFORONE
 = 0x10000,

236 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

238 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

241 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

247 
	smsghdr


249 *
	mmsg_«me
;

250 
sockÀn_t
 
	mmsg_«mñí
;

252 
iovec
 *
	mmsg_iov
;

253 
size_t
 
	mmsg_iovÀn
;

255 *
	mmsg_c⁄åﬁ
;

256 
size_t
 
	mmsg_c⁄åﬁÀn
;

261 
	mmsg_Êags
;

264 #ifde‡
__USE_GNU


266 
	smmsghdr


268 
msghdr
 
	mmsg_hdr
;

269 
	mmsg_Àn
;

274 
	scmsghdr


276 
size_t
 
	mcmsg_Àn
;

281 
	mcmsg_Àvñ
;

282 
	mcmsg_ty≥
;

283 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

284 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

292 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

294 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

295 
	#CMSG_FIRSTHDR
(
mhdr
) \

296 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

297 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

298 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

299 & (
size_t
Ë~( (size_tË- 1))

	)

300 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

301 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

302 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

304 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

305 
cmsghdr
 *
__cmsg
Ë
__THROW
;

306 #ifde‡
__USE_EXTERN_INLINES


307 #i‚de‡
_EXTERN_INLINE


308 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

310 
_EXTERN_INLINE
 
cmsghdr
 *

311 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

313 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

317 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

318 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

319 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


320 + 
__mhdr
->
msg_c⁄åﬁÀn
)

321 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

322 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

325  
__cmsg
;

326 
	}
}

333 
	mSCM_RIGHTS
 = 0x01

334 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

335 #ifde‡
__USE_GNU


336 , 
	mSCM_CREDENTIALS
 = 0x02

337 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

341 #ifde‡
__USE_GNU


343 
	su¸ed


345 
pid_t
 
	mpid
;

346 
uid_t
 
	muid
;

347 
gid_t
 
	mgid
;

352 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


353 #i‚de‡
FIOGETOWN


354 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

356 #i‚de‡
FIOSETOWN


357 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

359 #i‚de‡
SIOCATMARK


360 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

362 #i‚de‡
SIOCGPGRP


363 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

365 #i‚de‡
SIOCGSTAMP


366 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

368 #i‚de‡
SIOCGSTAMPNS


369 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

371 #i‚de‡
SIOCSPGRP


372 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

377 
	~<asm/sockë.h
>

379 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


380 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


381 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


382 #unde‡
FIOGETOWN


384 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


385 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


386 #unde‡
FIOSETOWN


388 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


389 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


390 #unde‡
SIOCATMARK


392 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


393 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


394 #unde‡
SIOCGPGRP


396 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


397 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


398 #unde‡
SIOCGSTAMP


400 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


401 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


402 #unde‡
SIOCGSTAMPNS


404 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


405 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


406 #unde‡
SIOCSPGRP


411 
	slögî


413 
	ml_⁄off
;

414 
	ml_lögî
;

418 
__BEGIN_DECLS


425 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

426 
__vÀn
, 
__Êags
,

427 
__c⁄°
 
time•ec
 *
__tmo
);

429 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_LINK_CTL
 0x886¯

	)

76 
	#ETH_P_ATMFATE
 0x8884

	)

79 
	#ETH_P_PAE
 0x888E

	)

80 
	#ETH_P_AOE
 0x88A2

	)

81 
	#ETH_P_8021AD
 0x88A8

	)

82 
	#ETH_P_TIPC
 0x88CA

	)

83 
	#ETH_P_8021AH
 0x88E7

	)

84 
	#ETH_P_1588
 0x88F7

	)

85 
	#ETH_P_FCOE
 0x8906

	)

86 
	#ETH_P_TDLS
 0x890D

	)

87 
	#ETH_P_FIP
 0x8914

	)

88 
	#ETH_P_80221
 0x8917

	)

89 
	#ETH_P_LOOPBACK
 0x9000

	)

90 
	#ETH_P_QINQ1
 0x9100

	)

91 
	#ETH_P_QINQ2
 0x9200

	)

92 
	#ETH_P_QINQ3
 0x9300

	)

93 
	#ETH_P_EDSA
 0xDADA

	)

94 
	#ETH_P_AF_IUCV
 0xFBFB

	)

96 
	#ETH_P_802_3_MIN
 0x0600

	)

103 
	#ETH_P_802_3
 0x0001

	)

104 
	#ETH_P_AX25
 0x0002

	)

105 
	#ETH_P_ALL
 0x0003

	)

106 
	#ETH_P_802_2
 0x0004

	)

107 
	#ETH_P_SNAP
 0x0005

	)

108 
	#ETH_P_DDCMP
 0x0006

	)

109 
	#ETH_P_WAN_PPP
 0x0007

	)

110 
	#ETH_P_PPP_MP
 0x0008

	)

111 
	#ETH_P_LOCALTALK
 0x0009

	)

112 
	#ETH_P_CAN
 0x000C

	)

113 
	#ETH_P_PPPTALK
 0x0010

	)

114 
	#ETH_P_TR_802_2
 0x0011

	)

115 
	#ETH_P_MOBITEX
 0x0015

	)

116 
	#ETH_P_CONTROL
 0x0016

	)

117 
	#ETH_P_IRDA
 0x0017

	)

118 
	#ETH_P_ECONET
 0x0018

	)

119 
	#ETH_P_HDLC
 0x0019

	)

120 
	#ETH_P_ARCNET
 0x001A

	)

121 
	#ETH_P_DSA
 0x001B

	)

122 
	#ETH_P_TRAILER
 0x001C

	)

123 
	#ETH_P_PHONET
 0x00F5

	)

124 
	#ETH_P_IEEE802154
 0x00F6

	)

130 
	sëhhdr
 {

131 
	mh_de°
[
ETH_ALEN
];

132 
	mh_sour˚
[
ETH_ALEN
];

133 
__be16
 
	mh_¥Ÿo
;

134 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/net/ethernet.h

22 #i‚de‡
__NET_ETHERNET_H


23 
	#__NET_ETHERNET_H
 1

	)

25 
	~<sys/cdefs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<löux/if_ëhî.h
>

29 
__BEGIN_DECLS


33 
	sëhî_addr


35 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

36 } 
__©åibuã__
 ((
__∑cked__
));

39 
	sëhî_hódî


41 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

42 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

43 
u_öt16_t
 
	mëhî_ty≥
;

44 } 
__©åibuã__
 ((
__∑cked__
));

47 
	#ETHERTYPE_PUP
 0x0200

	)

48 
	#ETHERTYPE_SPRITE
 0x0500

	)

49 
	#ETHERTYPE_IP
 0x0800

	)

50 
	#ETHERTYPE_ARP
 0x0806

	)

51 
	#ETHERTYPE_REVARP
 0x8035

	)

52 
	#ETHERTYPE_AT
 0x809B

	)

53 
	#ETHERTYPE_AARP
 0x80F3

	)

54 
	#ETHERTYPE_VLAN
 0x8100

	)

55 
	#ETHERTYPE_IPX
 0x8137

	)

56 
	#ETHERTYPE_IPV6
 0x86dd

	)

57 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

60 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

61 
	#ETHER_TYPE_LEN
 2

	)

62 
	#ETHER_CRC_LEN
 4

	)

63 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

64 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

65 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

68 
	#ETHER_IS_VALID_LEN
(
foo
) \

69 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

76 
	#ETHERTYPE_TRAIL
 0x1000

	)

77 
	#ETHERTYPE_NTRAILER
 16

	)

79 
	#ETHERMTU
 
ETH_DATA_LEN


	)

80 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

82 
	g__END_DECLS


	@/usr/include/net/if_arp.h

23 #i‚de‡
_NET_IF_ARP_H


25 
	#_NET_IF_ARP_H
 1

	)

26 
	~<sys/cdefs.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

31 
	g__BEGIN_DECLS


34 
	#MAX_ADDR_LEN
 7

	)

40 
	#ARPOP_REQUEST
 1

	)

41 
	#ARPOP_REPLY
 2

	)

42 
	#ARPOP_RREQUEST
 3

	)

43 
	#ARPOP_RREPLY
 4

	)

44 
	#ARPOP_InREQUEST
 8

	)

45 
	#ARPOP_InREPLY
 9

	)

46 
	#ARPOP_NAK
 10

	)

55 
	s¨phdr


57 
	m¨_hrd
;

58 
	m¨_¥o
;

59 
	m¨_h 
;

60 
	m¨_∂n
;

61 
	m¨_›
;

65 
	m__¨_sha
[
ETH_ALEN
];

66 
	m__¨_sù
[4];

67 
	m__¨_tha
[
ETH_ALEN
];

68 
	m__¨_tù
[4];

74 
	#ARPHRD_NETROM
 0

	)

75 
	#ARPHRD_ETHER
 1

	)

76 
	#ARPHRD_EETHER
 2

	)

77 
	#ARPHRD_AX25
 3

	)

78 
	#ARPHRD_PRONET
 4

	)

79 
	#ARPHRD_CHAOS
 5

	)

80 
	#ARPHRD_IEEE802
 6

	)

81 
	#ARPHRD_ARCNET
 7

	)

82 
	#ARPHRD_APPLETLK
 8

	)

83 
	#ARPHRD_DLCI
 15

	)

84 
	#ARPHRD_ATM
 19

	)

85 
	#ARPHRD_METRICOM
 23

	)

86 
	#ARPHRD_IEEE1394
 24

	)

87 
	#ARPHRD_EUI64
 27

	)

88 
	#ARPHRD_INFINIBAND
 32

	)

91 
	#ARPHRD_SLIP
 256

	)

92 
	#ARPHRD_CSLIP
 257

	)

93 
	#ARPHRD_SLIP6
 258

	)

94 
	#ARPHRD_CSLIP6
 259

	)

95 
	#ARPHRD_RSRVD
 260

	)

96 
	#ARPHRD_ADAPT
 264

	)

97 
	#ARPHRD_ROSE
 270

	)

98 
	#ARPHRD_X25
 271

	)

99 
	#ARPHRD_HWX25
 272

	)

100 
	#ARPHRD_PPP
 512

	)

101 
	#ARPHRD_CISCO
 513

	)

102 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

103 
	#ARPHRD_LAPB
 516

	)

104 
	#ARPHRD_DDCMP
 517

	)

105 
	#ARPHRD_RAWHDLC
 518

	)

107 
	#ARPHRD_TUNNEL
 768

	)

108 
	#ARPHRD_TUNNEL6
 769

	)

109 
	#ARPHRD_FRAD
 770

	)

110 
	#ARPHRD_SKIP
 771

	)

111 
	#ARPHRD_LOOPBACK
 772

	)

112 
	#ARPHRD_LOCALTLK
 773

	)

113 
	#ARPHRD_FDDI
 774

	)

114 
	#ARPHRD_BIF
 775

	)

115 
	#ARPHRD_SIT
 776

	)

116 
	#ARPHRD_IPDDP
 777

	)

117 
	#ARPHRD_IPGRE
 778

	)

118 
	#ARPHRD_PIMREG
 779

	)

119 
	#ARPHRD_HIPPI
 780

	)

120 
	#ARPHRD_ASH
 781

	)

121 
	#ARPHRD_ECONET
 782

	)

122 
	#ARPHRD_IRDA
 783

	)

123 
	#ARPHRD_FCPP
 784

	)

124 
	#ARPHRD_FCAL
 785

	)

125 
	#ARPHRD_FCPL
 786

	)

126 
	#ARPHRD_FCFABRIC
 787

	)

127 
	#ARPHRD_IEEE802_TR
 800

	)

128 
	#ARPHRD_IEEE80211
 801

	)

129 
	#ARPHRD_IEEE80211_PRISM
 802

	)

130 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

131 
	#ARPHRD_IEEE802154
 804

	)

132 
	#ARPHRD_IEEE802154_PHY
 805

	)

134 
	#ARPHRD_VOID
 0xFFFF

	)

135 
	#ARPHRD_NONE
 0xFFFE

	)

139 
	s¨¥eq


141 
sockaddr
 
	m¨p_∑
;

142 
sockaddr
 
	m¨p_ha
;

143 
	m¨p_Êags
;

144 
sockaddr
 
	m¨p_√tmask
;

145 
	m¨p_dev
[16];

148 
	s¨¥eq_ﬁd


150 
sockaddr
 
	m¨p_∑
;

151 
sockaddr
 
	m¨p_ha
;

152 
	m¨p_Êags
;

153 
sockaddr
 
	m¨p_√tmask
;

157 
	#ATF_COM
 0x02

	)

158 
	#ATF_PERM
 0x04

	)

159 
	#ATF_PUBL
 0x08

	)

160 
	#ATF_USETRAILERS
 0x10

	)

161 
	#ATF_NETMASK
 0x20

	)

163 
	#ATF_DONTPUB
 0x40

	)

164 
	#ATF_MAGIC
 0x80

	)

168 
	#ARPD_UPDATE
 0x01

	)

169 
	#ARPD_LOOKUP
 0x02

	)

170 
	#ARPD_FLUSH
 0x03

	)

172 
	s¨pd_ªque°


174 
	mªq
;

175 
u_öt32_t
 
	mù
;

176 
	mdev
;

177 
	m°amp
;

178 
	mupd©ed
;

179 
	mha
[
MAX_ADDR_LEN
];

182 
	g__END_DECLS


	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


76 *
£˘i⁄
;

77 *
«me
;

78 *
vÆue
;

79 } 
	tCONF_VALUE
;

81 
DECLARE_STACK_OF
(
CONF_VALUE
)

82 
DECLARE_LHASH_OF
(
CONF_VALUE
);

84 
c⁄f_°
;

85 
c⁄f_mëhod_°
;

86 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

88 
	sc⁄f_mëhod_°


90 c⁄° *
«me
;

91 
CONF
 *(*
¸óã
)(
CONF_METHOD
 *
mëh
);

92 (*
öô
)(
CONF
 *
c⁄f
);

93 (*
de°roy
)(
CONF
 *
c⁄f
);

94 (*
de°roy_d©a
)(
CONF
 *
c⁄f
);

95 (*
lﬂd_bio
)(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

96 (*
dump
)(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

97 (*
is_numbî
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

98 (*
to_öt
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

99 (*
lﬂd
)(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

104 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

105 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

107 
DECLARE_STACK_OF
(
CONF_MODULE
)

108 
DECLARE_STACK_OF
(
CONF_IMODULE
)

111 
	tc⁄f_öô_func
(
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

112 
	tc⁄f_föish_func
(
	tCONF_IMODULE
 *
	tmd
);

114 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

115 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

116 
	#CONF_MFLAGS_SILENT
 0x4

	)

117 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

118 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

119 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

121 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

122 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
,
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

123 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
,c⁄° *
fûe
,

124 *
ñöe
);

125 #i‚de‡
OPENSSL_NO_FP_API


126 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

127 *
ñöe
);

129 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

130 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

131 c⁄° *
£˘i⁄
);

132 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

133 c⁄° *
«me
);

134 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

135 c⁄° *
«me
);

136 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

137 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

138 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

140 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

141 
OPENSSL_no_c⁄fig
();

146 
	sc⁄f_°


148 
CONF_METHOD
 *
mëh
;

149 *
mëh_d©a
;

150 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

153 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

154 
CONF_METHOD
 *
NCONF_deÁu…
();

155 
CONF_METHOD
 *
NCONF_WIN32
();

157 
CONF_METHOD
 *
NCONF_XML
();

159 
NCONF_‰ì
(
CONF
 *
c⁄f
);

160 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

162 
NCONF_lﬂd
(
CONF
 *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

163 #i‚de‡
OPENSSL_NO_FP_API


164 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

166 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

167 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
£˘i⁄
);

168 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

169 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
,

170 *
ªsu…
);

171 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

172 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

176 
NCONF_gë_numbî
(
CONF
 *
c⁄f
,*
group
,*
«me
);

178 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

183 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

184 
Êags
);

185 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

186 
Êags
);

187 
CONF_moduÀs_u∆ﬂd
(
Æl
);

188 
CONF_moduÀs_föish
();

189 
CONF_moduÀs_‰ì
();

190 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

191 
c⁄f_föish_func
 *
ffunc
);

193 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

194 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

195 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

196 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

197 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

198 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

199 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

200 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

201 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

203 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

205 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

206 (*
li°_cb
)(c⁄° *
ñem
, 
Àn
, *
u§
), *
¨g
);

208 
OPENSSL_lﬂd_buûtö_moduÀs
();

214 
ERR_lﬂd_CONF_°rögs
();

219 
	#CONF_F_CONF_DUMP_FP
 104

	)

220 
	#CONF_F_CONF_LOAD
 100

	)

221 
	#CONF_F_CONF_LOAD_BIO
 102

	)

222 
	#CONF_F_CONF_LOAD_FP
 103

	)

223 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

224 
	#CONF_F_CONF_PARSE_LIST
 119

	)

225 
	#CONF_F_DEF_LOAD
 120

	)

226 
	#CONF_F_DEF_LOAD_BIO
 121

	)

227 
	#CONF_F_MODULE_INIT
 115

	)

228 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

229 
	#CONF_F_MODULE_RUN
 118

	)

230 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

231 
	#CONF_F_NCONF_DUMP_FP
 106

	)

232 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

233 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

234 
	#CONF_F_NCONF_GET_SECTION
 108

	)

235 
	#CONF_F_NCONF_GET_STRING
 109

	)

236 
	#CONF_F_NCONF_LOAD
 113

	)

237 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

238 
	#CONF_F_NCONF_LOAD_FP
 114

	)

239 
	#CONF_F_NCONF_NEW
 111

	)

240 
	#CONF_F_STR_COPY
 101

	)

243 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

244 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

245 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

246 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

247 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

248 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

249 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

250 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

251 
	#CONF_R_NO_CONF
 105

	)

252 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

253 
	#CONF_R_NO_SECTION
 107

	)

254 
	#CONF_R_NO_SUCH_FILE
 114

	)

255 
	#CONF_R_NO_VALUE
 108

	)

256 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

257 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

258 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

260 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*
±r
);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*
±r
);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

550 
FIPS_mode
();

551 
FIPS_mode_£t
(
r
);

553 
OPENSSL_öô
();

555 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

556 
	#n⁄fùs_md_öô
(
Æg
Ë
	`n⁄fùs_md_öô_˘x
◊lg,álg)

	)

557 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

558 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

560 #ifde‡
OPENSSL_FIPS


561 
	#n⁄fùs_md_öô_˘x
(
Æg
, 
cx
) \

562 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

564 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

566  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

568 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

570 
	#fùs_cùhî_ab‹t
(
Æg
) \

571 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

572 "Cùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

575 
FIPS_£l·e°_check
();

578 
	#n⁄fùs_md_öô_˘x
(
Æg
, 
cx
Ë
	`fùs_md_öô_˘x
◊lg, cx)

	)

579 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

587 
CRYPTO_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
);

593 
ERR_lﬂd_CRYPTO_°rögs
();

595 
	#OPENSSL_HAVE_INIT
 1

	)

596 
OPENSSL_öô_libøry
();

601 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

602 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

603 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

604 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

605 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

606 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

607 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

608 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

609 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

610 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

613 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

614 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

616 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 #i‡
deföed
(
OPENSSL_SYS_VXWORKS
)

76 
	~<sys/times.h
>

78 
	~<sys/time.h
>

82 #ifde‡ 
__˝lu•lus


86 
	#DTLS1_VERSION
 0xFEFF

	)

87 
	#DTLS_MAX_VERSION
 
DTLS1_VERSION


	)

89 
	#DTLS1_BAD_VER
 0x0100

	)

93 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

97 
	#DTLS1_COOKIE_LENGTH
 256

	)

99 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

101 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

103 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

104 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

106 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

108 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


109 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

111 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

114 #i‚de‡
OPENSSL_NO_SSL_INTERN


116 #i‚de‡
OPENSSL_NO_SCTP


117 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

120 
	sdés1_bôm≠_°


122 
m≠
;

124 
max_£q_num
[8];

127 } 
	tDTLS1_BITMAP
;

129 
	sdés1_ªå™smô_°©e


131 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

132 
EVP_MD_CTX
 *
wrôe_hash
;

133 #i‚de‡
OPENSSL_NO_COMP


134 
COMP_CTX
 *
com¥ess
;

136 *
com¥ess
;

138 
SSL_SESSION
 *
£ssi⁄
;

139 
ïoch
;

142 
	shm_hódî_°


144 
ty≥
;

145 
msg_Àn
;

146 
£q
;

147 
‰ag_off
;

148 
‰ag_Àn
;

149 
is_ccs
;

150 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

153 
	sccs_hódî_°


155 
ty≥
;

156 
£q
;

159 
	sdés1_timeout_°


162 
ªad_timeouts
;

165 
wrôe_timeouts
;

168 
num_Æîts
;

171 
	sªc‹d_pqueue_°


173 
ïoch
;

174 
pqueue
 
q
;

175 } 
	tªc‹d_pqueue
;

177 
	shm_‰agmít_°


179 
hm_hódî_°
 
msg_hódî
;

180 *
‰agmít
;

181 *
ªas£mbly
;

182 } 
	thm_‰agmít
;

184 
	sdés1_°©e_°


186 
£nd_cookõ
;

187 
cookõ
[
DTLS1_COOKIE_LENGTH
];

188 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

189 
cookõ_Àn
;

196 
r_ïoch
;

197 
w_ïoch
;

200 
DTLS1_BITMAP
 
bôm≠
;

203 
DTLS1_BITMAP
 
√xt_bôm≠
;

206 
h™dshake_wrôe_£q
;

207 
√xt_h™dshake_wrôe_£q
;

209 
h™dshake_ªad_£q
;

212 
œ°_wrôe_£quí˚
[8];

215 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

216 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

219 
pqueue
 
buf„ªd_mesßges
;

222 
pqueue
 
£¡_mesßges
;

229 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

231 
mtu
;

233 
hm_hódî_°
 
w_msg_hdr
;

234 
hm_hódî_°
 
r_msg_hdr
;

236 
dés1_timeout_°
 
timeout
;

239 
timevÆ
 
√xt_timeout
;

242 
timeout_duøti⁄
;

246 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

247 
Æît_‰agmít_Àn
;

248 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

249 
h™dshake_‰agmít_Àn
;

251 
ªå™smôtög
;

252 
ch™ge_cùhî_•ec_ok
;

255 
li°í
;

257 #i‚de‡
OPENSSL_NO_SCTP


259 
√xt_°©e
;

261 
shutdown_ª˚ived
;

264 } 
	tDTLS1_STATE
;

266 
	sdés1_ªc‹d_d©a_°


268 *
∑ckë
;

269 
∑ckë_Àngth
;

270 
SSL3_BUFFER
 
rbuf
;

271 
SSL3_RECORD
 
ºec
;

272 #i‚de‡
OPENSSL_NO_SCTP


273 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

275 } 
	tDTLS1_RECORD_DATA
;

280 
	#DTLS1_TMO_READ_COUNT
 2

	)

281 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

283 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

285 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

102 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

104 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

74 #ifde‡ 
__˝lu•lus


82 #ifde‡
KRB5_HEIMDAL


83 
	tkrb5_o˘ë
;

84 
	#FAR


	)

87 #i‚de‡
FAR


88 
	#FAR


	)

99 #i‚def 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #i‚def 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

107 #i‚de‡
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #i‚de‡
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #i‚de‡
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_îr_°
 {

121 
	gªas⁄
;

122 
	gãxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_˘x_°


133 *
	g£rvi˚_«me
;

134 *
	g£rvi˚_ho°
;

135 *
	g˛õ¡_¥öc
;

136 *
	gkeyèb_fûe
;

137 *
	g¸ed_ˇche
;

138 
krb5_í˘y≥
 
	gí˘y≥
;

139 
	gÀngth
;

140 
krb5_o˘ë
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

154 
KSSL_CTX
 *
ks¶_˘x_√w
();

155 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

156 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

157 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

158 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

159 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

160 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

161 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

162 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

163 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

164 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

165 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

167 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

168 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

169 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickë_times
 *
âimes
);

171 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

172 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

173 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

175 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

176 
KSSL_CTX
 * 
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

177 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

179 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
a¢1_°rög_°
 
	tASN1_STRING
;

95 
	tASN1_BOOLEAN
;

96 
	tASN1_NULL
;

99 
ASN1_ITEM_°
 
	tASN1_ITEM
;

100 
a¢1_p˘x_°
 
	tASN1_PCTX
;

102 #ifde‡
OPENSSL_SYS_WIN32


103 #unde‡
X509_NAME


104 #unde‡
X509_EXTENSIONS


105 #unde‡
X509_CERT_PAIR


106 #unde‡
PKCS7_ISSUER_AND_SERIAL


107 #unde‡
OCSP_REQUEST


108 #unde‡
OCSP_RESPONSE


111 #ifde‡
BIGNUM


112 #unde‡
BIGNUM


114 
bignum_°
 
	tBIGNUM
;

115 
bignum_˘x
 
	tBN_CTX
;

116 
bn_blödög_°
 
	tBN_BLINDING
;

117 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

118 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

119 
bn_gícb_°
 
	tBN_GENCB
;

121 
buf_mem_°
 
	tBUF_MEM
;

123 
evp_cùhî_°
 
	tEVP_CIPHER
;

124 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

125 
ív_md_°
 
	tEVP_MD
;

126 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

127 
evp_pkey_°
 
	tEVP_PKEY
;

129 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

131 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

132 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 
dß_°
 
	tDSA
;

138 
dß_mëhod
 
	tDSA_METHOD
;

140 
rß_°
 
	tRSA
;

141 
rß_mëh_°
 
	tRSA_METHOD
;

143 
ønd_mëh_°
 
	tRAND_METHOD
;

145 
ecdh_mëhod
 
	tECDH_METHOD
;

146 
ecdß_mëhod
 
	tECDSA_METHOD
;

148 
x509_°
 
	tX509
;

149 
X509_Æg‹_°
 
	tX509_ALGOR
;

150 
X509_¸l_°
 
	tX509_CRL
;

151 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

152 
x509_ªvoked_°
 
	tX509_REVOKED
;

153 
X509_«me_°
 
	tX509_NAME
;

154 
X509_pubkey_°
 
	tX509_PUBKEY
;

155 
x509_°‹e_°
 
	tX509_STORE
;

156 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

158 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

160 
v3_ext_˘x
 
	tX509V3_CTX
;

161 
c⁄f_°
 
	tCONF
;

163 
°‹e_°
 
	tSTORE
;

164 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

166 
ui_°
 
	tUI
;

167 
ui_mëhod_°
 
	tUI_METHOD
;

169 
°_ERR_FNS
 
	tERR_FNS
;

171 
ígöe_°
 
	tENGINE
;

172 
s¶_°
 
	tSSL
;

173 
s¶_˘x_°
 
	tSSL_CTX
;

175 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

176 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

177 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

178 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

180 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

181 
DIST_POINT_°
 
	tDIST_POINT
;

182 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

183 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

186 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

189 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

191 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

195 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

198 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

199 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

200 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

497 #i‚de‡
OPENSSL_NO_EC


498 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

499 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

500 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

503 #i‚de‡
OPENSSL_NO_DH


505 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

509 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

511 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

513 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

517 *, , 
≥m_∑ssw‹d_cb
 *, *);

518 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

519 *
k°r
, 
kÀn
,

520 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

527 *
k°r
, 
kÀn
,

528 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

529 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

530 *
k°r
, 
kÀn
,

531 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

532 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

533 *
k°r
, 
kÀn
,

534 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

538 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

539 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

541 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

542 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

545 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

546 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

547 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

548 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

549 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

550 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

551 #i‚de‡
OPENSSL_NO_RC4


552 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

554 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

562 
ERR_lﬂd_PEM_°rögs
();

567 
	#PEM_F_B2I_DSS
 127

	)

568 
	#PEM_F_B2I_PVK_BIO
 128

	)

569 
	#PEM_F_B2I_RSA
 129

	)

570 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

571 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

572 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

573 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

574 
	#PEM_F_DO_B2I
 132

	)

575 
	#PEM_F_DO_B2I_BIO
 133

	)

576 
	#PEM_F_DO_BLOB_HEADER
 134

	)

577 
	#PEM_F_DO_PK8PKEY
 126

	)

578 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

579 
	#PEM_F_DO_PVK_BODY
 135

	)

580 
	#PEM_F_DO_PVK_HEADER
 136

	)

581 
	#PEM_F_I2B_PVK
 137

	)

582 
	#PEM_F_I2B_PVK_BIO
 138

	)

583 
	#PEM_F_LOAD_IV
 101

	)

584 
	#PEM_F_PEM_ASN1_READ
 102

	)

585 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

586 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

587 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

588 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

589 
	#PEM_F_PEM_DO_HEADER
 106

	)

590 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

591 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

592 
	#PEM_F_PEM_PK8PKEY
 119

	)

593 
	#PEM_F_PEM_READ
 108

	)

594 
	#PEM_F_PEM_READ_BIO
 109

	)

595 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

596 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

597 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

598 
	#PEM_F_PEM_SEALFINAL
 110

	)

599 
	#PEM_F_PEM_SEALINIT
 111

	)

600 
	#PEM_F_PEM_SIGNFINAL
 112

	)

601 
	#PEM_F_PEM_WRITE
 113

	)

602 
	#PEM_F_PEM_WRITE_BIO
 114

	)

603 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

604 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

605 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

606 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

609 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

610 
	#PEM_R_BAD_DECRYPT
 101

	)

611 
	#PEM_R_BAD_END_LINE
 102

	)

612 
	#PEM_R_BAD_IV_CHARS
 103

	)

613 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

614 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

615 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

616 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

617 
	#PEM_R_CIPHER_IS_NULL
 127

	)

618 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

619 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

620 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

621 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

622 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

623 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

624 
	#PEM_R_NOT_DEK_INFO
 105

	)

625 
	#PEM_R_NOT_ENCRYPTED
 106

	)

626 
	#PEM_R_NOT_PROC_TYPE
 107

	)

627 
	#PEM_R_NO_START_LINE
 108

	)

628 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

629 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

630 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

631 
	#PEM_R_PVK_TOO_SHORT
 125

	)

632 
	#PEM_R_READ_KEY
 111

	)

633 
	#PEM_R_SHORT_HEADER
 112

	)

634 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

635 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

636 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

638 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #i‚de‡
CHECKED_PTR_OF


61 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

62 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

70 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

71 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

73 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

74 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

76 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

77 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

79 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

81 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

83 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

84 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

86 
	#DECLARE_STACK_OF
(
ty≥
) \

87 
	`STACK_OF
(
ty≥
) \

89 
_STACK
 
°ack
; \

90 };

	)

91 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

97 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

113 *
	tOPENSSL_STRING
;

115 c⁄° *
	tOPENSSL_CSTRING
;

125 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

131 *
	tOPENSSL_BLOCK
;

132 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

136 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

137 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

138 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

139 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

140 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

141 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

142 
	#SKM_sk_num
(
ty≥
, 
°
) \

143 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

144 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

145 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

146 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

147 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

148 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

149 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

151 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

153 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

154 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

158 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

159 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

160 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

161 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

162 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

163 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

164 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

165 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

166 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

167 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

168 
	#SKM_sk_dup
(
ty≥
, 
°
) \

169 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

170 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

171 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

172 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

173 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›
(
ty≥
, 
°
) \

175 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

176 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

177 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

178 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

179 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

181 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

182 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

183 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

184 
µ
, 
Àngth
, \

185 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

186 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

187 
ex_èg
, 
ex_˛ass
)

	)

189 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

190 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

191 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

192 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

194 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

195 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

196 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

198 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

199 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

201 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

202 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

203 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

204 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

205 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

208 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

209 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

210 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

211 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

212 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

213 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

214 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

216 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

217 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

219 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

221 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

222 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

223 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

224 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

225 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

227 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

228 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

231 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

232 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

233 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

234 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

235 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

236 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

238 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

239 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

241 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

243 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

244 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

245 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

246 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

247 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

249 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

250 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

253 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

254 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

255 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

257 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

258 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

260 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

261 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

263 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

265 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

266 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

267 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

268 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

269 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

271 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

272 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

275 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

276 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

277 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

278 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

279 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

280 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

282 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

283 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

285 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

287 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

288 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

289 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

290 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

291 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

293 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

294 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

297 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

298 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

299 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

300 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

301 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

302 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

304 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

305 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

307 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

309 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

310 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

311 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

312 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

313 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

315 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

316 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

319 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

320 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

321 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

323 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

324 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

326 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

327 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

329 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

331 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

332 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

333 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

334 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

335 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

337 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

338 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

341 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

342 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

343 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

344 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

345 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

346 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

348 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

349 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

350 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

351 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

353 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

354 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

355 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

356 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

357 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

359 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

360 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

363 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

364 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

365 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

367 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

368 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

370 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

371 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

373 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

374 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

375 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

376 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

377 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

378 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

379 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

380 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

381 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

382 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

385 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

386 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

389 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

390 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

392 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

393 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

394 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

395 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

396 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

397 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

398 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

399 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

400 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

401 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

402 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

403 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

404 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

406 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

407 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

408 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

409 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

410 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

411 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

412 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

413 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

414 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

415 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

416 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

417 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

418 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

419 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

420 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

421 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

422 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

423 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

424 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

425 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

426 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

428 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

429 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

430 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

431 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

433 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

434 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

436 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

437 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

439 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

440 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

441 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

442 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

443 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

444 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

445 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

446 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

447 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

448 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

451 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

452 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

453 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

454 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

455 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

456 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

458 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

459 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

461 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

462 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

463 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

464 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

465 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

466 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

467 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

468 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

469 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

470 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

473 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

474 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

475 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

495 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

496 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

497 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

499 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

500 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

502 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

503 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

505 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

506 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

507 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

508 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

509 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

510 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

511 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

512 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

513 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

514 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

517 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

518 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

519 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

539 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

540 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

541 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

543 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

544 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

546 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

547 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

549 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

550 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

551 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

552 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

553 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

554 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

555 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

556 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

557 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

558 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

561 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

562 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

563 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

564 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

565 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

566 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

568 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

569 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

570 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

571 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

572 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

573 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

574 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

575 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

576 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

577 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

578 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

579 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

580 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

583 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

584 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

585 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

586 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

587 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

588 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

590 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

591 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

592 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

593 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

594 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

595 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

596 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

597 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

598 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

599 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

600 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

601 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

602 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

605 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

606 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

607 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

608 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

609 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

610 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

612 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

613 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

614 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

615 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

616 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

617 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

618 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

619 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

620 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

621 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

622 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

623 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

624 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

626 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

627 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

628 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

629 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

649 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

650 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

651 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

653 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

654 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

656 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

657 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

659 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

660 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

661 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

662 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

663 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

664 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

665 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

666 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

667 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

668 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

671 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

672 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

673 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

674 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

675 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

676 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

678 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

679 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

680 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

681 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

682 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

683 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

684 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

685 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

686 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

687 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

688 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

689 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

690 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

692 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

693 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

694 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

695 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

696 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

697 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

698 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

700 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

701 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

702 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

703 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

704 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

705 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

706 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

707 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

708 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

709 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

710 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

711 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

712 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

715 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

716 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

717 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

737 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

738 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

739 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

740 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

741 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

742 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

744 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

745 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

747 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

748 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

749 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

750 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

751 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

752 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

753 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

754 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

755 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

756 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

759 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

760 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

761 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

762 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

763 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

764 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

766 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

767 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

768 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

769 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

770 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

771 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

772 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

773 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

774 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

775 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

776 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

777 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

778 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

781 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

782 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

783 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

784 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

785 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

786 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

788 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

789 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

791 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

792 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

793 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

794 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

795 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

796 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

797 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

798 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

799 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

800 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

803 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

804 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

805 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

825 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

826 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

827 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

829 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

830 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

832 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

833 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

835 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

836 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

837 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

838 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

839 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

840 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

841 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

842 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

843 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

844 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

847 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

848 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

849 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

850 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

851 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

852 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

854 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

855 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

856 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

857 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

858 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

859 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

860 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

861 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

862 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

863 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

864 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

865 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

866 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

869 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

870 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

871 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

872 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

873 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

874 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

876 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

877 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

879 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

880 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

881 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

882 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

883 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

884 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

885 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

886 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

887 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

888 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

891 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

892 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

893 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

895 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

896 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

898 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

899 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

901 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

902 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

903 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

904 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

905 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

906 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

907 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

908 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

909 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

910 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

913 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

914 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

915 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

916 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

917 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

918 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

920 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

921 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

923 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

924 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

925 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

926 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

927 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

928 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

929 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

930 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

931 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

932 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

935 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

936 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

937 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

939 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

940 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

942 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

943 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

945 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

946 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

947 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

948 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

949 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

950 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

951 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

952 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

953 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

954 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

957 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

958 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

959 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

960 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

961 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

962 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

964 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

965 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

967 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

968 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

969 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

970 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

971 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

972 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

973 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

974 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

975 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

976 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

979 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

980 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

981 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

983 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

984 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

986 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

987 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

989 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

990 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

991 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

992 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

993 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

994 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

995 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

996 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

997 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

998 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1001 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1002 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1003 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1005 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1006 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1008 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1009 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1011 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1012 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1013 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1014 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1016 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1017 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1018 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1019 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1020 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1023 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1024 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1025 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1027 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1028 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1030 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1031 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1033 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1034 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1035 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1036 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1037 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1038 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1039 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1040 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1041 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1042 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1045 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1046 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1047 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1049 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1050 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1052 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1053 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1055 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1056 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1057 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1058 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1059 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1060 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1061 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1062 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1063 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1064 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1067 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1068 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1069 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1071 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1072 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1074 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1075 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1077 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1078 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1079 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1080 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1081 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1082 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1083 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1084 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1085 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1086 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1089 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1090 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1091 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1093 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1094 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1096 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1097 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1099 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1100 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1101 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1102 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1103 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1104 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1105 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1106 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1107 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1108 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1111 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1112 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1113 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1115 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1116 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1118 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1119 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1121 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1122 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1123 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1124 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1125 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1126 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1127 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1128 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1129 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1130 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1133 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1134 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1135 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1137 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1138 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1140 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1141 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1143 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1144 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1145 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1146 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1147 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1148 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1149 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1150 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1151 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1152 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1155 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1156 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1157 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1158 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1159 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1160 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1162 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1163 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1164 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1165 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1166 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1167 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1168 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1169 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1170 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1171 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1172 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1173 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1174 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1177 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1178 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1179 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1180 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1181 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1182 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1184 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1185 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1186 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1187 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1188 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1189 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1190 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1191 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1192 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1193 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1194 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1195 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1196 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1198 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1199 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1200 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1201 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1202 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1203 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1204 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1206 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1207 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1209 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1210 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1211 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1212 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1213 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1214 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1215 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1216 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1217 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1218 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1221 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1222 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1223 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1224 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1225 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1226 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1228 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1229 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1231 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1232 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1233 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1234 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1235 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1236 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1237 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1238 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1239 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1240 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1243 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1244 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1245 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1247 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1248 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1250 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1251 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1253 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1254 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1255 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1256 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1257 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1258 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1259 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1260 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1261 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1262 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1265 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1266 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1267 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1268 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1269 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1270 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1272 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1273 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1275 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1276 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1277 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1278 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1279 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1280 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1281 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1282 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1283 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1284 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1287 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1288 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1289 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1291 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1292 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1294 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1295 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1297 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1298 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1299 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1300 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1301 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1302 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1303 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1304 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1305 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1306 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1309 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1310 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1311 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1313 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1314 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1316 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1317 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1319 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1320 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1321 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1322 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1323 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1324 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1325 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1326 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1327 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1328 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1331 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1332 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1333 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1334 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1335 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1336 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1338 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1339 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1340 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1341 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1342 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1343 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1344 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1345 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1346 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1347 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1348 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1349 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1350 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1353 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1354 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1355 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1357 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1358 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1360 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1361 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1363 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1364 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1365 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1366 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1368 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1369 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1370 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1371 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1372 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1375 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1376 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1377 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1380 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1390 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1394 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1397 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1398 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1399 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1400 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1401 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1402 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1404 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1405 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1406 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1407 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1408 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1409 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1410 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1411 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1412 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1413 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1414 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1415 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1416 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1419 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1420 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1421 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1423 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1424 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1426 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1427 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1429 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1430 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1431 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1432 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1433 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1434 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1435 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1436 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1437 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1438 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1441 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1442 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1443 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1444 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1445 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1446 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1448 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1449 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1451 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1452 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1453 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1454 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1455 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1456 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1457 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1458 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1459 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1460 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1463 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1464 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1465 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1466 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1467 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1468 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1469 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1470 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1471 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1472 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1473 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1474 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1475 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1476 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1477 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1478 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1479 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1480 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1481 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1482 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1484 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1485 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1486 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1487 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1488 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1489 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1490 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1491 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1492 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1493 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1494 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1495 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1496 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1497 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1498 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1499 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1500 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1501 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1502 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1503 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1504 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1506 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1507 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1508 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1509 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1510 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1511 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1512 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1513 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1514 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1515 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1516 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1517 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1518 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1519 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1520 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1521 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1522 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1523 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1524 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1525 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1526 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1528 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1529 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1530 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1531 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1532 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1533 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1534 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1535 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1536 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1537 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1538 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1539 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1540 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1541 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1542 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1543 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1544 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1545 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1546 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1547 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1548 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1550 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1551 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1552 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1553 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1554 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1555 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1556 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1557 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1558 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1559 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1560 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1561 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1562 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1563 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1564 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1565 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1566 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1567 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1568 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1569 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1570 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1572 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1573 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1574 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1575 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1576 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1577 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1578 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1579 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1580 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1581 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1582 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1583 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1584 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1585 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1586 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1587 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1588 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1589 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1590 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1591 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1592 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1594 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1595 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1596 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1597 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1598 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1599 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1600 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1602 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1603 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1604 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1605 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1606 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1607 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1608 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1609 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1610 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1611 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1612 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1613 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1614 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1616 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1617 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1618 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1619 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1620 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1621 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1622 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1623 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1624 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1625 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1626 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1627 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1628 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1629 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1630 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1631 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1632 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1633 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1634 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1635 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1636 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1638 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1639 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1640 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1641 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1642 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1643 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1644 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1645 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1646 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1647 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1648 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1649 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1650 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1651 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1652 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1653 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1654 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1655 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1656 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1657 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1658 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1660 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1661 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1662 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1663 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1664 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1665 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1666 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1667 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1668 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1669 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1670 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1671 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1672 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1673 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1674 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1675 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1676 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1677 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1678 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1679 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1680 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1682 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1683 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1684 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1685 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1686 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1687 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1688 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1689 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1690 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1691 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1692 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1693 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1694 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1695 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1696 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1697 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1698 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1699 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1700 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1701 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1702 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1704 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1705 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1706 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1707 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1708 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1709 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1710 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1711 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1712 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1713 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1714 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1715 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1716 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1717 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1718 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1719 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1720 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1721 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1722 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1723 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1724 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1726 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1727 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1728 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1729 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1730 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1731 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1732 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1733 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1734 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1735 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1736 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1737 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1738 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1739 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1740 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1741 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1742 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1743 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1744 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1745 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1746 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1748 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1749 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1750 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1751 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1752 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1753 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1754 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1755 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1756 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1757 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1758 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1759 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1760 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1761 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1762 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1763 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1764 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1765 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1766 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1767 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1768 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1770 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1771 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1772 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1773 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1774 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1775 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1776 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1777 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1778 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1779 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1780 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1781 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1782 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1783 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1784 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1785 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1786 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1787 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1788 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1789 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1790 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1792 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1793 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1794 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1795 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1796 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1797 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1798 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1799 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1800 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1801 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1802 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1803 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1804 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1805 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1806 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1807 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1808 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1809 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1810 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1811 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1812 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1814 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1815 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1816 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1817 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1818 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1819 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1820 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1821 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1822 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1823 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1824 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1825 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1826 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1827 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1828 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1829 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1830 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1831 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1832 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1833 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1834 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1836 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1837 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1838 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1839 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1840 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1841 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1842 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1843 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1844 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1845 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1846 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1847 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1848 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1849 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1850 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1851 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1852 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1853 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1854 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1855 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1856 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1858 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1859 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1860 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1861 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1862 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1863 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1864 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1865 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1866 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1867 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1868 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1869 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1870 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1871 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1872 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1873 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1874 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1875 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1876 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1877 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1878 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1880 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1881 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1882 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1883 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1884 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1885 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1886 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1887 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1888 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1889 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1890 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1891 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1892 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1893 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1894 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1895 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1896 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1897 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1898 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1899 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1900 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1902 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1903 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1904 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1905 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1906 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1907 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1908 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1909 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1910 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1911 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1912 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1913 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1914 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1915 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1916 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1917 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1918 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1919 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1920 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1921 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1922 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1924 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1925 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1926 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1927 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1928 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1929 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1930 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1931 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1932 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1933 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1934 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1935 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1936 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1937 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1938 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1939 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1940 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1941 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1942 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1943 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1944 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1946 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1947 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1948 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1949 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1950 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1951 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1952 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1953 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1954 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1955 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1956 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1957 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1958 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1959 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1960 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1961 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1962 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1963 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1964 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1965 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1966 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1968 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1969 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1970 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1971 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1972 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1973 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1974 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1975 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1976 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1977 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1978 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1979 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1980 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1981 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1982 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1983 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1984 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1985 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1986 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1987 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1988 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1990 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1991 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1992 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1993 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1994 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1995 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1996 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1997 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1998 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1999 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2000 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2001 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2002 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2003 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2004 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2005 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2006 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2007 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2008 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2009 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2010 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2012 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2013 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2014 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2015 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2016 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2017 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2018 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2019 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2020 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2021 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2022 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2023 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2024 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2025 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2026 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2027 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2028 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2029 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2030 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2031 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2032 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2034 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2035 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2036 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2037 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2038 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2039 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2040 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2041 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2042 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2043 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2044 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2045 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2046 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2047 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2048 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2049 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2050 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2051 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2052 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2053 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2054 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2056 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2057 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2058 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2059 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2060 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2061 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2062 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2063 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2064 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2065 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2066 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2067 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2068 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2069 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2070 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2071 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2072 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2073 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2074 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2075 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2076 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2078 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2079 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2080 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2081 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2082 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2083 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2084 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2085 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2086 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2087 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2088 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2089 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2090 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2091 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2092 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2093 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2094 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2095 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2096 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2097 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2098 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2100 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2101 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2102 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2103 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2104 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2105 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2106 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2107 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2108 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2109 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2110 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2111 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2112 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2113 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2114 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2115 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2116 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2117 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2118 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2119 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2120 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2122 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2123 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2124 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2125 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2126 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2127 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2128 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2129 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2130 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2131 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2132 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2133 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2134 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2135 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2136 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2137 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2139 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2140 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2141 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2142 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2143 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2144 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2147 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2148 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2149 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2150 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2151 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2152 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2153 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2154 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2155 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2156 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2157 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2158 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2159 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2160 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2161 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2162 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2164 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2165 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2166 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2167 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2168 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2169 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2172 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2173 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2175 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2176 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2177 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2178 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2179 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2180 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2181 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2182 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2183 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2184 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2185 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2186 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2187 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2188 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2189 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2190 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2191 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2192 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2193 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2194 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2197 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2198 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2199 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2200 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2201 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2202 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2203 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2204 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2206 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2207 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2208 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2209 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2210 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2211 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2212 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2213 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2215 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2216 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2217 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2218 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2219 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2220 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2221 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2222 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2224 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2225 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2226 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2227 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2228 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2229 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2230 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2231 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2233 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2234 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2235 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2236 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2237 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2238 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2239 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2240 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2242 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2243 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2244 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2245 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2246 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2247 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2248 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2249 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2251 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2252 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2253 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2254 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2255 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2256 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2257 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2258 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2269 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2270 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2271 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2272 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2273 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2274 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2275 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2276 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2278 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2279 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2280 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2281 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2282 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2283 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2284 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2285 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2287 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2288 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2289 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2290 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2291 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2292 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2293 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2294 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2296 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2297 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2298 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2299 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2300 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2301 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2302 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2303 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2305 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2306 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2307 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2308 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2309 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2310 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2311 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2312 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2314 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2315 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2316 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2317 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2318 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2319 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2320 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2321 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2323 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2324 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2325 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2326 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2327 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2328 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2329 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2330 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2341 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2342 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2343 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2344 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2345 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2346 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2347 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2348 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2350 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2351 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2352 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2353 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2354 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2355 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2356 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2357 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2359 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2360 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2361 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2362 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2363 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2364 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2365 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2366 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2368 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2369 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2370 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2371 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2372 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2373 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2374 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2375 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2377 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2378 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2379 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2380 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2381 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2382 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2383 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2384 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2386 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2387 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2388 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2389 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2390 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2391 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2392 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2393 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2395 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2396 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2397 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2398 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2399 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2400 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2401 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2402 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2413 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2414 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2415 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2416 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2417 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2418 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2419 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2420 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2422 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2423 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2425 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2426 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2428 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2429 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2430 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2431 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2432 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2433 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2434 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2435 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2436 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2437 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2438 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2439 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2440 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2441 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2442 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2444 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2446 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2447 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2448 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2449 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2450 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2451 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2452 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2453 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2454 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2455 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2456 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2457 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2458 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2460 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2462 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2464 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2465 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2466 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2467 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2468 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2469 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2470 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2471 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2472 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2473 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2474 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2475 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2476 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2477 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2478 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2480 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2482 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2483 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2484 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2485 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2486 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2487 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2490 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2491 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2492 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2494 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2496 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2498 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2500 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2501 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2502 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2503 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2504 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2505 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2506 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2507 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2508 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2509 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2510 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2511 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2512 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2513 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2514 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2516 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2518 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2519 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2520 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2521 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2522 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2523 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2524 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2525 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2526 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2527 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2528 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2530 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2532 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2534 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2536 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2537 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2538 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2539 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2540 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2541 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2542 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2543 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2544 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2545 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2546 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2547 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2548 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2549 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2550 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2552 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2554 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2555 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2556 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2557 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2558 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2559 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2560 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2561 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2562 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2563 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2564 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2566 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2567 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2568 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2570 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2572 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2573 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2574 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2575 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2576 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2577 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2578 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2579 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2580 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2581 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2582 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2583 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2584 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2585 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2586 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2587 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2588 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2590 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2591 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2592 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2593 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2594 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2595 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2596 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2597 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2598 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2599 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2600 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2601 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2602 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2603 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2604 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2605 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2606 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2608 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2609 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2610 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2611 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2612 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2613 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2614 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2615 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2616 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2617 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2619 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2620 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2621 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2622 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2623 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2624 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2627 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2628 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2629 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2630 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2631 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2632 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2633 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2634 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2636 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2637 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2638 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2639 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2640 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2641 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2642 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2645 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2646 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2647 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2648 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2649 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2650 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2651 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2652 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2653 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2654 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2655 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2656 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2657 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2658 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2659 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2660 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

	@/usr/include/openssl/srtp.h

118 #i‚de‡
HEADER_D1_SRTP_H


119 
	#HEADER_D1_SRTP_H


	)

121 #ifde‡ 
__˝lu•lus


126 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

127 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

128 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

129 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

130 
	#SRTP_NULL_SHA1_80
 0x0005

	)

131 
	#SRTP_NULL_SHA1_32
 0x0006

	)

133 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

134 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

135 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

137 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

138 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

140 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 #i‚de‡
OPENSSL_NO_SSL_INTERN


160 
	ss¶2_°©e_°


162 
thªe_byã_hódî
;

163 
˛ór_ãxt
;

164 
esˇ≥
;

165 
s¶2_rﬁlback
;

169 
wnum
;

170 
w≥nd_tŸ
;

171 c⁄° *
w≥nd_buf
;

173 
w≥nd_off
;

174 
w≥nd_Àn
;

175 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

183 *
wrôe_±r
;

186 
∑ddög
;

187 
æígth
;

188 
ø˘_d©a_Àngth
;

189 
wÀngth
;

190 
wa˘_d©a_Àngth
;

191 *
ø˘_d©a
;

192 *
wa˘_d©a
;

193 *
mac_d©a
;

195 *
ªad_key
;

196 *
wrôe_key
;

199 
chÆÀnge_Àngth
;

200 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

201 
c⁄n_id_Àngth
;

202 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

203 
key_m©îül_Àngth
;

204 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

206 
ªad_£quí˚
;

207 
wrôe_£quí˚
;

210 
c⁄n_id_Àngth
;

211 
˚π_ty≥
;

212 
˚π_Àngth
;

213 
c¶
;

214 
˛ór
;

215 
íc
;

216 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

217 
cùhî_•ec_Àngth
;

218 
£ssi⁄_id_Àngth
;

219 
˛í
;

220 
æí
;

221 } 
tmp
;

222 } 
	tSSL2_STATE
;

228 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

242 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

244 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

245 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

247 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

263 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

264 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

265 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

266 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

268 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


133 
	#SSL3_CK_SCSV
 0x030000FF

	)

137 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

139 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

140 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

141 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

142 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

143 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

144 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

145 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

146 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

147 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

148 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

150 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

151 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

152 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

153 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

154 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

155 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

157 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

158 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

159 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

160 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

161 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

162 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

164 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

165 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

166 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

167 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

168 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

171 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

172 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

176 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

182 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

183 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

184 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

185 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

186 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

187 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

188 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

189 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

191 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

192 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

193 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

194 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

195 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

196 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

198 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

199 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

200 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

201 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

202 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

203 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

204 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

205 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

206 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

207 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

209 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

210 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

211 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

212 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

213 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

214 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

216 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

217 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

218 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

219 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

220 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

223 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

224 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

225 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

226 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

227 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

230 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

231 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

232 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

235 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

236 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

237 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

238 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

239 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

240 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

241 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

242 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

244 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

245 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

246 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

247 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

248 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

249 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

251 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

252 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

254 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

255 
	#SSL3_RANDOM_SIZE
 32

	)

256 
	#SSL3_SESSION_ID_SIZE
 32

	)

257 
	#SSL3_RT_HEADER_LENGTH
 5

	)

259 #i‚de‡
SSL3_ALIGN_PAYLOAD


266 
	#SSL3_ALIGN_PAYLOAD
 8

	)

268 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

270 #unde‡
SSL3_ALIGN_PAYLOAD


279 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

284 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

286 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

289 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

291 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

297 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

303 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

304 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

308 #ifde‡
OPENSSL_NO_COMP


309 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

311 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

312 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

314 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

315 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

316 
	#SSL3_RT_MAX_PACKET_SIZE
 \

317 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

319 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

320 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

322 
	#SSL3_VERSION
 0x0300

	)

323 
	#SSL3_VERSION_MAJOR
 0x03

	)

324 
	#SSL3_VERSION_MINOR
 0x00

	)

326 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

327 
	#SSL3_RT_ALERT
 21

	)

328 
	#SSL3_RT_HANDSHAKE
 22

	)

329 
	#SSL3_RT_APPLICATION_DATA
 23

	)

330 
	#TLS1_RT_HEARTBEAT
 24

	)

332 
	#SSL3_AL_WARNING
 1

	)

333 
	#SSL3_AL_FATAL
 2

	)

335 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

336 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

337 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

338 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

339 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

340 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

341 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

342 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

343 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

344 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

345 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

346 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

348 
	#TLS1_HB_REQUEST
 1

	)

349 
	#TLS1_HB_RESPONSE
 2

	)

351 #i‚de‡
OPENSSL_NO_SSL_INTERN


353 
	ss¶3_ªc‹d_°


355  
ty≥
;

356  
Àngth
;

357  
off
;

358  *
d©a
;

359  *
öput
;

360  *
comp
;

361  
ïoch
;

362  
£q_num
[8];

363 } 
	tSSL3_RECORD
;

365 
	ss¶3_buf„r_°


367 *
buf
;

369 
size_t
 
Àn
;

370 
off£t
;

371 
À·
;

372 } 
	tSSL3_BUFFER
;

376 
	#SSL3_CT_RSA_SIGN
 1

	)

377 
	#SSL3_CT_DSS_SIGN
 2

	)

378 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

379 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

380 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

381 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

382 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

387 
	#SSL3_CT_NUMBER
 9

	)

390 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

391 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

392 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

393 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

394 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

395 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

396 
	#SSL3_FLAGS_CCS_OK
 0x0080

	)

407 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

409 #i‚de‡
OPENSSL_NO_SSL_INTERN


411 
	ss¶3_°©e_°


413 
Êags
;

414 
dñay_buf_p›_ªt
;

416 
ªad_£quí˚
[8];

417 
ªad_mac_£¸ë_size
;

418 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

419 
wrôe_£quí˚
[8];

420 
wrôe_mac_£¸ë_size
;

421 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

423 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

424 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

427 
√ed_em±y_‰agmíts
;

428 
em±y_‰agmít_d⁄e
;

431 
öô_exåa
;

433 
SSL3_BUFFER
 
rbuf
;

434 
SSL3_BUFFER
 
wbuf
;

436 
SSL3_RECORD
 
ºec
;

437 
SSL3_RECORD
 
wªc
;

441 
Æît_‰agmít
[2];

442 
Æît_‰agmít_Àn
;

443 
h™dshake_‰agmít
[4];

444 
h™dshake_‰agmít_Àn
;

447 
wnum
;

448 
w≥nd_tŸ
;

449 
w≥nd_ty≥
;

450 
w≥nd_ªt
;

451 c⁄° *
w≥nd_buf
;

454 
BIO
 *
h™dshake_buf„r
;

458 
EVP_MD_CTX
 **
h™dshake_dg°
;

461 
ch™ge_cùhî_•ec
;

463 
w¨n_Æît
;

464 
Áèl_Æît
;

467 
Æît_di•©ch
;

468 
£nd_Æît
[2];

472 
ª√gŸüã
;

473 
tŸÆ_ª√gŸüti⁄s
;

474 
num_ª√gŸüti⁄s
;

476 
ö_ªad_≠p_d©a
;

481 *
˛õ¡_›aque_¥f_öput
;

482 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

483 *
£rvî_›aque_¥f_öput
;

484 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

488 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

491 
föish_md
[
EVP_MAX_MD_SIZE
*2];

492 
föish_md_Àn
;

493 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

494 
≥î_föish_md_Àn
;

496 
mesßge_size
;

497 
mesßge_ty≥
;

500 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

501 #i‚de‡
OPENSSL_NO_DH


502 
DH
 *
dh
;

505 #i‚de‡
OPENSSL_NO_ECDH


506 
EC_KEY
 *
ecdh
;

510 
√xt_°©e
;

512 
ªu£_mesßge
;

515 
˚π_ªq
;

516 
˘y≥_num
;

517 
˘y≥
[
SSL3_CT_NUMBER
];

518 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

520 
u£_rß_tmp
;

522 
key_block_Àngth
;

523 *
key_block
;

525 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

526 c⁄° 
EVP_MD
 *
√w_hash
;

527 
√w_mac_pkey_ty≥
;

528 
√w_mac_£¸ë_size
;

529 #i‚de‡
OPENSSL_NO_COMP


530 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

532 *
√w_com¥essi⁄
;

534 
˚π_ªque°
;

535 } 
tmp
;

538 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

539 
¥evious_˛õ¡_föished_Àn
;

540 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

541 
¥evious_£rvî_föished_Àn
;

542 
£nd_c⁄√˘i⁄_bödög
;

544 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


546 
√xt_¥Ÿo_√g_£í
;

548 } 
	tSSL3_STATE
;

555 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

556 #i‚de‡
OPENSSL_NO_SCTP


557 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

558 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

561 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

562 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

564 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

565 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

566 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

567 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

568 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

569 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

570 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

571 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

572 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

573 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

574 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

575 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

577 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

578 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

579 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

580 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

581 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

582 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

583 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

584 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

585 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

586 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

587 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


588 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

589 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

591 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

592 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

594 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

595 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

596 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

597 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

598 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

599 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

600 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

601 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

605 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

606 #i‚de‡
OPENSSL_NO_SCTP


607 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

608 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

612 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

613 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

614 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

616 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

617 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

618 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

619 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

620 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

621 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

622 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

623 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

624 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

625 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

626 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

627 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

628 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

629 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

630 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

632 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

633 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

634 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

635 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

636 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

637 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

638 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

639 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

640 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


641 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

642 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

644 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

645 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

647 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

648 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

649 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

650 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

651 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

652 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

653 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

654 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

656 
	#SSL3_MT_HELLO_REQUEST
 0

	)

657 
	#SSL3_MT_CLIENT_HELLO
 1

	)

658 
	#SSL3_MT_SERVER_HELLO
 2

	)

659 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

660 
	#SSL3_MT_CERTIFICATE
 11

	)

661 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

662 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

663 
	#SSL3_MT_SERVER_DONE
 14

	)

664 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

665 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

666 
	#SSL3_MT_FINISHED
 20

	)

667 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

668 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


669 
	#SSL3_MT_NEXT_PROTO
 67

	)

671 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

674 
	#SSL3_MT_CCS
 1

	)

677 
	#SSL3_CC_READ
 0x01

	)

678 
	#SSL3_CC_WRITE
 0x02

	)

679 
	#SSL3_CC_CLIENT
 0x10

	)

680 
	#SSL3_CC_SERVER
 0x20

	)

681 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

682 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

683 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

684 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

686 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

179 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


180 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

181 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


182 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

183 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


184 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

185 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


186 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

187 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


188 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

189 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


190 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

191 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


192 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

193 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


194 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

195 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


196 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

197 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


198 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

199 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


200 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

201 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


202 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

203 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


204 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

205 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


206 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

209 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


210 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

211 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


212 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

213 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


214 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

215 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


216 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

217 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


218 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

219 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


220 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

221 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


222 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

223 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


224 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

225 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


226 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

227 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

228 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


229 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

232 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


233 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

234 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


235 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

236 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


237 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

240 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


241 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

242 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


243 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

246 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


247 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

248 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


249 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

250 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


251 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

254 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


255 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

256 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


257 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

258 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


259 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

260 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


261 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

262 
EC_KEY_£t_pub_key_aff_co‹ds


	)

263 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


264 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

265 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

266 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


267 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

268 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

269 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


270 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

271 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


272 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

273 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


274 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

275 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


276 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

277 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


278 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

279 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


280 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

281 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

282 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


283 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

284 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


285 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

286 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


287 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

288 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


289 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

290 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


291 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

292 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


293 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

294 
ec_GF2m_smp_±_£t_af_co‹ds


	)

295 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


296 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

297 
ec_GF2m_smp_±_gë_af_co‹ds


	)

298 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


299 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

300 
ec_GF2m_smp_£t_com¥_co‹ds


	)

301 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


302 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

303 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


304 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

305 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


306 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

307 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


308 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

309 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


310 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

311 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


312 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

313 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


314 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

315 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


316 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

317 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


318 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

319 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


320 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

321 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

322 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


323 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

324 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

325 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


326 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

327 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

328 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


329 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

330 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

331 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


332 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

333 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

334 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


335 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

336 
ec_GFp_smp_±_£t_af_co‹ds


	)

337 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


338 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

339 
ec_GFp_smp_±_gë_af_co‹ds


	)

340 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


341 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

342 
ec_GFp_smp_£t_com¥_co‹ds


	)

343 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


344 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

347 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


348 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

349 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


350 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

351 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


352 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

353 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


354 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

355 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


356 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

357 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


358 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

359 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


360 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

361 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


362 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

363 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


364 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

365 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


366 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

367 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


368 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

369 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


370 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

371 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


372 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

373 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


374 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

375 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


376 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

377 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


378 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

379 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


380 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

381 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


382 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

383 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


384 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

385 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


386 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

387 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


388 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

389 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


390 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

391 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


392 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

393 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


394 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

397 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


398 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

399 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


400 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

401 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


402 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

405 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


406 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

407 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


408 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

409 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


410 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

411 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


412 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

413 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


414 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

415 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


416 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

419 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


420 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

423 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


424 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

425 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


426 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

429 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


430 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

431 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


432 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

438 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

439 #unde‡
ERR_lﬂd_CRYPTO_°rögs


440 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

441 #unde‡
OCSP_¸lID_√w


442 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

444 #unde‡
d2i_ECPARAMETERS


445 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

446 #unde‡
i2d_ECPARAMETERS


447 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

448 #unde‡
d2i_ECPKPARAMETERS


449 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

450 #unde‡
i2d_ECPKPARAMETERS


451 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

459 #unde‡
X509v3_˛ónup_exãnsi⁄s


460 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

461 #unde‡
X509v3_add_exãnsi⁄


462 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

463 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


464 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

465 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


466 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

469 #unde‡
cms_D©a_¸óã


470 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_VERSION
 0x0301

	)

163 
	#TLS1_1_VERSION
 0x0302

	)

164 
	#TLS1_2_VERSION
 0x0303

	)

165 
	#TLS_MAX_VERSION
 
TLS1_2_VERSION


	)

167 
	#TLS1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_VERSION_MINOR
 0x01

	)

170 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

171 
	#TLS1_1_VERSION_MINOR
 0x02

	)

173 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

174 
	#TLS1_2_VERSION_MINOR
 0x03

	)

176 
	#TLS1_gë_vîsi⁄
(
s
) \

177 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

179 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

180 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

182 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

183 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

184 
	#TLS1_AD_UNKNOWN_CA
 48

	)

185 
	#TLS1_AD_ACCESS_DENIED
 49

	)

186 
	#TLS1_AD_DECODE_ERROR
 50

	)

187 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

188 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

189 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

190 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

191 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

192 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

193 
	#TLS1_AD_USER_CANCELLED
 90

	)

194 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

196 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

197 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

198 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

199 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

200 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

201 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

204 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

205 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

206 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

207 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

208 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

209 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

211 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

214 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

215 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

218 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

221 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

222 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

225 
	#TLSEXT_TYPE_§p
 12

	)

228 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

231 
	#TLSEXT_TYPE_u£_§ç
 14

	)

234 
	#TLSEXT_TYPE_hóπbót
 15

	)

237 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

243 
	#TLSEXT_TYPE_›aque_¥f_öput
 ?? */

	)

247 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

249 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


251 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

255 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

257 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

260 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

261 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

262 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

263 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

264 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

268 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

269 
	#TLSEXT_sig«tuª_rß
 1

	)

270 
	#TLSEXT_sig«tuª_dß
 2

	)

271 
	#TLSEXT_sig«tuª_ecdß
 3

	)

273 
	#TLSEXT_hash_n⁄e
 0

	)

274 
	#TLSEXT_hash_md5
 1

	)

275 
	#TLSEXT_hash_sha1
 2

	)

276 
	#TLSEXT_hash_sha224
 3

	)

277 
	#TLSEXT_hash_sha256
 4

	)

278 
	#TLSEXT_hash_sha384
 5

	)

279 
	#TLSEXT_hash_sha512
 6

	)

281 #i‚de‡
OPENSSL_NO_TLSEXT


283 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

285 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

286 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

294 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

295 c⁄° *
œbñ
, 
size_t
 
Œí
, c⁄° *
p
, size_à
∂í
,

296 
u£_c⁄ãxt
);

298 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

299 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

301 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

302 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

304 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

305 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

307 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

308 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

310 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

311 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

313 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

314 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

316 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

317 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

319 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

320 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

322 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

323 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

325 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

326 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

328 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

329 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

331 
	#SSL_TLSEXT_ERR_OK
 0

	)

332 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

333 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

334 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

336 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

337 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

339 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

340 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

341 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

342 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

344 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

345 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

347 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

348 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

350 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

351 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

352 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

353 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

354 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

355 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

357 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

358 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

360 #i‚de‡
OPENSSL_NO_HEARTBEATS


361 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

362 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

363 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

365 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

366 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

367 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

368 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

373 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

374 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

375 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

376 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

383 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

384 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

385 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

386 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

387 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

388 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

389 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

393 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

394 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

395 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

396 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

397 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

398 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

400 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

401 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

402 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

403 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

404 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

405 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

408 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

409 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

410 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

411 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

412 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

413 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

416 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

417 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

418 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

419 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

420 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

421 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

424 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

425 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

426 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

427 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

428 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

429 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

430 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

433 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

434 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

435 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

436 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

437 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

438 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

441 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

442 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

443 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

444 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

445 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

446 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

449 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

450 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

451 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

452 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

453 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

454 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

455 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

456 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

457 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

458 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

459 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

460 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

463 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

464 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

465 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

466 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

467 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

469 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

470 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

471 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

472 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

473 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

475 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

476 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

477 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

478 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

479 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

481 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

482 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

483 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

484 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

485 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

487 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

488 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

489 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

490 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

491 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

494 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

495 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

496 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

497 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

498 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

499 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

500 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

501 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

502 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

506 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

507 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

508 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

509 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

510 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

511 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

512 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

513 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

516 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

517 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

518 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

519 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

520 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

521 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

522 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

523 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

532 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

533 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

534 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

535 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

536 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

537 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

538 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

541 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

542 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

543 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

544 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

545 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

546 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

548 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

549 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

550 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

551 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

552 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

553 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

556 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

557 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

558 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

559 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

560 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

562 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

563 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

564 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

565 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

566 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

568 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

569 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

570 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

571 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

572 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

574 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

575 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

576 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

577 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

578 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

580 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

581 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

582 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

583 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

584 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

587 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

588 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

589 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

590 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

593 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

594 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

595 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

596 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

597 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

598 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

599 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

600 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

601 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

604 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

605 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

606 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

607 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

608 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

609 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

611 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

612 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

613 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

614 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

615 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

616 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

619 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

620 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

621 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

622 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

623 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

624 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

627 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

628 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

629 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

630 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

631 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

632 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

633 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

634 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

635 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

636 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

637 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

638 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

639 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

642 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

643 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

644 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

645 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

646 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

647 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

648 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

649 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

650 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

651 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

652 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

653 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

657 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

658 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

659 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

660 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

661 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

662 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

663 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

664 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

667 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

668 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

669 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

670 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

671 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

672 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

673 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

674 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

676 
	#TLS_CT_RSA_SIGN
 1

	)

677 
	#TLS_CT_DSS_SIGN
 2

	)

678 
	#TLS_CT_RSA_FIXED_DH
 3

	)

679 
	#TLS_CT_DSS_FIXED_DH
 4

	)

680 
	#TLS_CT_ECDSA_SIGN
 64

	)

681 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

682 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

683 
	#TLS_CT_GOST94_SIGN
 21

	)

684 
	#TLS_CT_GOST01_SIGN
 22

	)

687 
	#TLS_CT_NUMBER
 9

	)

689 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

691 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

692 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

693 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

694 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

695 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

696 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

697 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

698 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

699 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

700 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

701 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

702 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

703 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

704 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

705 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

706 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

707 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

709 #ifde‡
CHARSET_EBCDIC


710 #unde‡
TLS_MD_CLIENT_FINISH_CONST


711 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

712 #unde‡
TLS_MD_SERVER_FINISH_CONST


713 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

714 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


715 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

716 #unde‡
TLS_MD_KEY_EXPANSION_CONST


717 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

718 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


719 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

720 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


721 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

722 #unde‡
TLS_MD_IV_BLOCK_CONST


723 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

724 #unde‡
TLS_MD_MASTER_SECRET_CONST


725 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

729 
	sés_£ssi⁄_tickë_ext_°


731 
Àngth
;

732 *
d©a
;

735 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

195 *
ˇn⁄_íc
;

196 
ˇn⁄_í˛í
;

199 
DECLARE_STACK_OF
(
X509_NAME
)

201 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

202 
	#X509_EX_V_INIT
 0x0001

	)

203 
	sX509_exãnsi⁄_°


205 
ASN1_OBJECT
 *
obje˘
;

206 
ASN1_BOOLEAN
 
¸ôiˇl
;

207 
ASN1_OCTET_STRING
 *
vÆue
;

208 } 
	tX509_EXTENSION
;

210 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

212 
DECLARE_STACK_OF
(
X509_EXTENSION
)

213 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

216 
	sx509_©åibuãs_°


218 
ASN1_OBJECT
 *
obje˘
;

219 
sögÀ
;

221 *
±r
;

222  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

223  
ASN1_TYPE
 *
sögÀ
;

224 } 
vÆue
;

225 } 
	tX509_ATTRIBUTE
;

227 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

228 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

231 
	sX509_ªq_öfo_°


233 
ASN1_ENCODING
 
íc
;

234 
ASN1_INTEGER
 *
vîsi⁄
;

235 
X509_NAME
 *
subje˘
;

236 
X509_PUBKEY
 *
pubkey
;

238 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

239 } 
	tX509_REQ_INFO
;

241 
	sX509_ªq_°


243 
X509_REQ_INFO
 *
ªq_öfo
;

244 
X509_ALGOR
 *
sig_Æg
;

245 
ASN1_BIT_STRING
 *
sig«tuª
;

246 
ª„ªn˚s
;

247 } 
	tX509_REQ
;

249 
	sx509_cöf_°


251 
ASN1_INTEGER
 *
vîsi⁄
;

252 
ASN1_INTEGER
 *
£rülNumbî
;

253 
X509_ALGOR
 *
sig«tuª
;

254 
X509_NAME
 *
issuî
;

255 
X509_VAL
 *
vÆidôy
;

256 
X509_NAME
 *
subje˘
;

257 
X509_PUBKEY
 *
key
;

258 
ASN1_BIT_STRING
 *
issuîUID
;

259 
ASN1_BIT_STRING
 *
subje˘UID
;

260 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

261 
ASN1_ENCODING
 
íc
;

262 } 
	tX509_CINF
;

270 
	sx509_˚π_aux_°


272 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

273 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

274 
ASN1_UTF8STRING
 *
Æüs
;

275 
ASN1_OCTET_STRING
 *
keyid
;

276 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

277 } 
	tX509_CERT_AUX
;

279 
	sx509_°


281 
X509_CINF
 *
˚π_öfo
;

282 
X509_ALGOR
 *
sig_Æg
;

283 
ASN1_BIT_STRING
 *
sig«tuª
;

284 
vÆid
;

285 
ª„ªn˚s
;

286 *
«me
;

287 
CRYPTO_EX_DATA
 
ex_d©a
;

289 
ex_∑thÀn
;

290 
ex_p˝©hÀn
;

291 
ex_Êags
;

292 
ex_kußge
;

293 
ex_xkußge
;

294 
ex_ns˚π
;

295 
ASN1_OCTET_STRING
 *
skid
;

296 
AUTHORITY_KEYID
 *
akid
;

297 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

298 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

299 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

300 
NAME_CONSTRAINTS
 *
nc
;

301 #i‚de‡
OPENSSL_NO_RFC3779


302 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

303 
ASIdítifõrs_°
 *
rfc3779_asid
;

305 #i‚de‡
OPENSSL_NO_SHA


306 
sha1_hash
[
SHA_DIGEST_LENGTH
];

308 
X509_CERT_AUX
 *
aux
;

311 
DECLARE_STACK_OF
(
X509
)

312 
DECLARE_ASN1_SET_OF
(
X509
)

316 
	sx509_åu°_°
 {

317 
åu°
;

318 
Êags
;

319 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

320 *
«me
;

321 
¨g1
;

322 *
¨g2
;

323 } 
	tX509_TRUST
;

325 
DECLARE_STACK_OF
(
X509_TRUST
)

327 
	sx509_˚π_∑ú_°
 {

328 
X509
 *
f‹w¨d
;

329 
X509
 *
ªvî£
;

330 } 
	tX509_CERT_PAIR
;

334 
	#X509_TRUST_DEFAULT
 -1

	)

336 
	#X509_TRUST_COMPAT
 1

	)

337 
	#X509_TRUST_SSL_CLIENT
 2

	)

338 
	#X509_TRUST_SSL_SERVER
 3

	)

339 
	#X509_TRUST_EMAIL
 4

	)

340 
	#X509_TRUST_OBJECT_SIGN
 5

	)

341 
	#X509_TRUST_OCSP_SIGN
 6

	)

342 
	#X509_TRUST_OCSP_REQUEST
 7

	)

343 
	#X509_TRUST_TSA
 8

	)

346 
	#X509_TRUST_MIN
 1

	)

347 
	#X509_TRUST_MAX
 8

	)

351 
	#X509_TRUST_DYNAMIC
 1

	)

352 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

356 
	#X509_TRUST_TRUSTED
 1

	)

357 
	#X509_TRUST_REJECTED
 2

	)

358 
	#X509_TRUST_UNTRUSTED
 3

	)

362 
	#X509_FLAG_COMPAT
 0

	)

363 
	#X509_FLAG_NO_HEADER
 1L

	)

364 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

365 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

366 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

367 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

368 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

369 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

370 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

371 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

372 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

373 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

374 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

380 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

382 
	#XN_FLAG_COMPAT
 0

	)

383 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

384 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

385 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

386 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

388 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

392 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

394 
	#XN_FLAG_FN_SN
 0

	)

395 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

396 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

397 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

399 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

405 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

407 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

411 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

412 
XN_FLAG_SEP_COMMA_PLUS
 | \

413 
XN_FLAG_DN_REV
 | \

414 
XN_FLAG_FN_SN
 | \

415 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

419 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

420 
ASN1_STRFLGS_ESC_QUOTE
 | \

421 
XN_FLAG_SEP_CPLUS_SPC
 | \

422 
XN_FLAG_SPC_EQ
 | \

423 
XN_FLAG_FN_SN
)

	)

427 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

428 
ASN1_STRFLGS_ESC_MSB
 | \

429 
XN_FLAG_SEP_MULTILINE
 | \

430 
XN_FLAG_SPC_EQ
 | \

431 
XN_FLAG_FN_LN
 | \

432 
XN_FLAG_FN_ALIGN
)

	)

434 
	sx509_ªvoked_°


436 
ASN1_INTEGER
 *
£rülNumbî
;

437 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

438 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

440 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

442 
ªas⁄
;

443 
£quí˚
;

446 
DECLARE_STACK_OF
(
X509_REVOKED
)

447 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

449 
	sX509_¸l_öfo_°


451 
ASN1_INTEGER
 *
vîsi⁄
;

452 
X509_ALGOR
 *
sig_Æg
;

453 
X509_NAME
 *
issuî
;

454 
ASN1_TIME
 *
œ°Upd©e
;

455 
ASN1_TIME
 *
√xtUpd©e
;

456 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

457 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

458 
ASN1_ENCODING
 
íc
;

459 } 
	tX509_CRL_INFO
;

461 
	sX509_¸l_°


464 
X509_CRL_INFO
 *
¸l
;

465 
X509_ALGOR
 *
sig_Æg
;

466 
ASN1_BIT_STRING
 *
sig«tuª
;

467 
ª„ªn˚s
;

468 
Êags
;

470 
AUTHORITY_KEYID
 *
akid
;

471 
ISSUING_DIST_POINT
 *
idp
;

473 
idp_Êags
;

474 
idp_ªas⁄s
;

476 
ASN1_INTEGER
 *
¸l_numbî
;

477 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

478 #i‚de‡
OPENSSL_NO_SHA


479 
sha1_hash
[
SHA_DIGEST_LENGTH
];

481 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

482 c⁄° 
X509_CRL_METHOD
 *
mëh
;

483 *
mëh_d©a
;

486 
DECLARE_STACK_OF
(
X509_CRL
)

487 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

489 
	s¥iv©e_key_°


491 
vîsi⁄
;

493 
X509_ALGOR
 *
íc_Æg‹
;

494 
ASN1_OCTET_STRING
 *
íc_pkey
;

497 
EVP_PKEY
 *
dec_pkey
;

500 
key_Àngth
;

501 *
key_d©a
;

502 
key_‰ì
;

505 
EVP_CIPHER_INFO
 
cùhî
;

507 
ª„ªn˚s
;

508 } 
	tX509_PKEY
;

510 #i‚de‡
OPENSSL_NO_EVP


511 
	sX509_öfo_°


513 
X509
 *
x509
;

514 
X509_CRL
 *
¸l
;

515 
X509_PKEY
 *
x_pkey
;

517 
EVP_CIPHER_INFO
 
íc_cùhî
;

518 
íc_Àn
;

519 *
íc_d©a
;

521 
ª„ªn˚s
;

522 } 
	tX509_INFO
;

524 
DECLARE_STACK_OF
(
X509_INFO
)

531 
	sNësˇ≥_•kac_°


533 
X509_PUBKEY
 *
pubkey
;

534 
ASN1_IA5STRING
 *
chÆÀnge
;

535 } 
	tNETSCAPE_SPKAC
;

537 
	sNësˇ≥_•ki_°


539 
NETSCAPE_SPKAC
 *
•kac
;

540 
X509_ALGOR
 *
sig_Æg‹
;

541 
ASN1_BIT_STRING
 *
sig«tuª
;

542 } 
	tNETSCAPE_SPKI
;

545 
	sNësˇ≥_˚πifiˇã_£quí˚


547 
ASN1_OBJECT
 *
ty≥
;

548 
STACK_OF
(
X509
Ë*
˚πs
;

549 } 
	tNETSCAPE_CERT_SEQUENCE
;

560 
	sPBEPARAM_°
 {

561 
ASN1_OCTET_STRING
 *
ß…
;

562 
ASN1_INTEGER
 *
ôî
;

563 } 
	tPBEPARAM
;

567 
	sPBE2PARAM_°
 {

568 
X509_ALGOR
 *
keyfunc
;

569 
X509_ALGOR
 *
í¸y±i⁄
;

570 } 
	tPBE2PARAM
;

572 
	sPBKDF2PARAM_°
 {

573 
ASN1_TYPE
 *
ß…
;

574 
ASN1_INTEGER
 *
ôî
;

575 
ASN1_INTEGER
 *
keyÀngth
;

576 
X509_ALGOR
 *
¥f
;

577 } 
	tPBKDF2PARAM
;

582 
	spkcs8_¥iv_key_öfo_°


584 
brokí
;

585 
	#PKCS8_OK
 0

	)

586 
	#PKCS8_NO_OCTET
 1

	)

587 
	#PKCS8_EMBEDDED_PARAM
 2

	)

588 
	#PKCS8_NS_DB
 3

	)

589 
	#PKCS8_NEG_PRIVKEY
 4

	)

590 
ASN1_INTEGER
 *
vîsi⁄
;

591 
X509_ALGOR
 *
pkeyÆg
;

592 
ASN1_TYPE
 *
pkey
;

593 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

596 #ifde‡ 
__˝lu•lus


600 
	~<›ís¶/x509_vfy.h
>

601 
	~<›ís¶/pkcs7.h
>

603 #ifde‡ 
__˝lu•lus


607 
	#X509_EXT_PACK_UNKNOWN
 1

	)

608 
	#X509_EXT_PACK_STRING
 2

	)

610 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

612 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

613 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

614 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

615 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

616 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

617 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

618 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

619 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

621 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

622 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

623 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

624 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

625 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

627 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

628 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

629 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

630 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

631 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

632 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

633 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

634 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

636 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

637 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

641 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

644 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

646 #i‚de‡
OPENSSL_NO_EVP


647 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

649 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

650 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

651 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

653 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

654 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

655 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

656 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

658 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

660 
X509_sig«tuª_dump
(
BIO
 *
bp
,c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

661 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

663 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

664 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

665 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

666 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

667 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

668 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

669 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

671 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

672 *
md
, *
Àn
);

673 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

674 *
md
, *
Àn
);

675 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

676 *
md
, *
Àn
);

677 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

678 *
md
, *
Àn
);

679 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

680 *
md
, *
Àn
);

683 #i‚de‡
OPENSSL_NO_FP_API


684 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

685 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

686 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

687 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

688 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

689 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

690 #i‚de‡
OPENSSL_NO_RSA


691 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

692 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

693 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

694 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

695 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

696 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

698 #i‚de‡
OPENSSL_NO_DSA


699 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

700 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

701 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

702 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

704 #i‚de‡
OPENSSL_NO_EC


705 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

706 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

707 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

708 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

710 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

711 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

712 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

713 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

714 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

715 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

716 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

717 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

718 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

719 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

722 #i‚de‡
OPENSSL_NO_BIO


723 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

724 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

725 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

726 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

727 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

728 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

729 #i‚de‡
OPENSSL_NO_RSA


730 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

731 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

732 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

733 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

734 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

735 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

737 #i‚de‡
OPENSSL_NO_DSA


738 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

739 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

740 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

741 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

743 #i‚de‡
OPENSSL_NO_EC


744 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

745 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

746 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

747 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

749 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

750 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

751 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

752 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

753 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

754 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

755 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

756 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

757 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

758 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

761 
X509
 *
X509_dup
(X509 *
x509
);

762 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

763 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

764 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

765 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

766 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

767 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

768 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

769 
X509_ALGOR
 *
Æg‹
);

770 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

771 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

773 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

774 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

776 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

777 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

778 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

779 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

780 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

781 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

783 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

784 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

785 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

786 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

787 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

788 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

790 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

791 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

793 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

794 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

795 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

797 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

799 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

800 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

801 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

802 
STACK_OF
(
X509
Ë*
chaö
);

803 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

804 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

805 
Àngth
);

806 #i‚de‡
OPENSSL_NO_RSA


807 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

808 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

809 
Àngth
);

811 #i‚de‡
OPENSSL_NO_DSA


812 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

813 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

814 
Àngth
);

816 #i‚de‡
OPENSSL_NO_EC


817 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

818 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

819 
Àngth
);

822 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

824 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

826 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

827 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

829 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

830 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

832 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

834 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

836 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

838 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

840 
DECLARE_ASN1_FUNCTIONS
(
X509
)

841 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

843 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

845 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

846 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

847 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

848 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

849 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

850 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

852 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

853 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

854 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

855 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

856 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

857 
X509_TRUST_£t
(*
t
, 
åu°
);

858 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

859 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

860 
X509_åu°_˛ór
(
X509
 *
x
);

861 
X509_ªje˘_˛ór
(
X509
 *
x
);

863 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

864 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

865 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

867 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

868 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

869 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

870 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

872 
X509_PKEY
 * 
X509_PKEY_√w
();

873 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

874 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

875 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

877 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

878 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

879 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

881 #i‚de‡
OPENSSL_NO_EVP


882 
X509_INFO
 * 
X509_INFO_√w
();

883 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

884 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

886 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

887 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

889 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

890 *
md
,*
Àn
);

892 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

893 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

894 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

896 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

897 *
md
,*
Àn
);

899 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

900 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

902 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

903 
ASN1_BIT_STRING
 *
sig«tuª
,

904 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

905 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
,

906 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

907 
ASN1_BIT_STRING
 *
sig«tuª
, *
a¢
, 
EVP_MD_CTX
 *
˘x
);

910 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

911 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

912 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

913 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

914 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

915 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

916 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

917 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

918 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

919 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

920 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

921 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

922 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

924 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

925 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

926 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

928 
X509_REQ_exãnsi⁄_nid
(
nid
);

929 * 
X509_REQ_gë_exãnsi⁄_nids
();

930 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

931 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

932 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

933 
nid
);

934 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

935 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

936 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

937 
œ°pos
);

938 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

939 
œ°pos
);

940 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

941 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

942 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

943 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

944 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

945 c⁄° *
byãs
, 
Àn
);

946 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

947 
nid
, 
ty≥
,

948 c⁄° *
byãs
, 
Àn
);

949 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

950 c⁄° *
©å«me
, 
ty≥
,

951 c⁄° *
byãs
, 
Àn
);

953 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

954 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

955 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

956 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

957 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

959 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

960 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

962 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

964 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

966 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

967 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

969 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

970 
X509_issuî_«me_hash
(
X509
 *
a
);

972 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

973 
X509_subje˘_«me_hash
(
X509
 *
x
);

975 #i‚de‡
OPENSSL_NO_MD5


976 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

977 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

980 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

981 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

982 
X509_NAME_hash
(
X509_NAME
 *
x
);

983 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

985 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

986 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

987 #i‚de‡
OPENSSL_NO_FP_API


988 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

989 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

990 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

991 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

992 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

995 #i‚de‡
OPENSSL_NO_BIO


996 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

997 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

998 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

999 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1000 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1001 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1002 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1003 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1004 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1007 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1008 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1009 *
buf
,
Àn
);

1010 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1011 *
buf
,
Àn
);

1015 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1016 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1017 
œ°pos
);

1018 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1019 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1020 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1021 
loc
, 
£t
);

1022 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1023 *
byãs
, 
Àn
, 
loc
, 
£t
);

1024 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1025 *
byãs
, 
Àn
, 
loc
, 
£t
);

1026 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1027 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1028 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1029 
ty≥
,*
byãs
, 
Àn
);

1030 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1031 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1032 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1033 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1034 
Àn
);

1035 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1036 
ASN1_OBJECT
 *
obj
);

1037 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1038 c⁄° *
byãs
, 
Àn
);

1039 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1040 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1042 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1043 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1044 
nid
, 
œ°pos
);

1045 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1046 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1047 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1048 
¸ô
, 
œ°pos
);

1049 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1050 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1051 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1052 
X509_EXTENSION
 *
ex
, 
loc
);

1054 
X509_gë_ext_cou¡
(
X509
 *
x
);

1055 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1056 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1057 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1058 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1059 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1060 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1061 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1062 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1063 
Êags
);

1065 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1066 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1067 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1068 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1069 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1070 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1071 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1072 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1073 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1074 
Êags
);

1076 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1077 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1078 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1079 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1080 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1081 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1082 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1083 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1084 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1085 
Êags
);

1087 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1088 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1089 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1090 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1091 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1092 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1093 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1094 
ASN1_OCTET_STRING
 *
d©a
);

1095 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1096 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1097 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1099 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1100 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1101 
œ°pos
);

1102 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1103 
œ°pos
);

1104 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1105 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1106 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1107 
X509_ATTRIBUTE
 *
©å
);

1108 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1109 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1110 c⁄° *
byãs
, 
Àn
);

1111 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1112 
nid
, 
ty≥
,

1113 c⁄° *
byãs
, 
Àn
);

1114 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1115 c⁄° *
©å«me
, 
ty≥
,

1116 c⁄° *
byãs
, 
Àn
);

1117 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1118 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1119 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1120 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1121 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1122 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1123 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1124 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1125 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1126 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1127 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1128 
©πy≥
, *
d©a
);

1129 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1130 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1131 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1133 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1134 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1135 
œ°pos
);

1136 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1137 
œ°pos
);

1138 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1139 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1140 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1141 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1142 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1143 c⁄° *
byãs
, 
Àn
);

1144 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1145 
nid
, 
ty≥
,

1146 c⁄° *
byãs
, 
Àn
);

1147 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1148 c⁄° *
©å«me
, 
ty≥
,

1149 c⁄° *
byãs
, 
Àn
);

1151 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1154 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1155 
ASN1_INTEGER
 *
£rül
);

1156 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1158 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1159 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1160 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1162 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1163 c⁄° *
ß…
, 
ß…Àn
);

1165 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1166 c⁄° *
ß…
, 
ß…Àn
);

1167 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1168 *
ß…
, 
ß…Àn
);

1169 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1170 *
ß…
, 
ß…Àn
,

1171 *
aiv
, 
¥f_nid
);

1173 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1174 
¥f_nid
, 
keyÀn
);

1178 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1180 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1181 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1182 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1183 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1185 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1186 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1187 *
≥nc
, 
≥n˛í
);

1188 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1189 c⁄° **
pk
, *
µkÀn
,

1190 
X509_ALGOR
 **
∑
,

1191 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1193 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1194 
±y≥
, *
pvÆ
,

1195 *
≥nc
, 
≥n˛í
);

1196 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1197 c⁄° **
pk
, *
µkÀn
,

1198 
X509_ALGOR
 **
∑
,

1199 
X509_PUBKEY
 *
pub
);

1201 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1202 
X509_TRUST_gë_cou¡
();

1203 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1204 
X509_TRUST_gë_by_id
(
id
);

1205 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1206 *
«me
, 
¨g1
, *
¨g2
);

1207 
X509_TRUST_˛ónup
();

1208 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1209 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1210 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1216 
ERR_lﬂd_X509_°rögs
();

1221 
	#X509_F_ADD_CERT_DIR
 100

	)

1222 
	#X509_F_BY_FILE_CTRL
 101

	)

1223 
	#X509_F_CHECK_POLICY
 145

	)

1224 
	#X509_F_DIR_CTRL
 102

	)

1225 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1226 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1227 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1228 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1229 
	#X509_F_X509V3_ADD_EXT
 104

	)

1230 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1231 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1232 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1233 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1234 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1235 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1236 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1237 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1238 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1239 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1240 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1241 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1242 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1243 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1244 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1245 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1246 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1247 
	#X509_F_X509_NAME_ONELINE
 116

	)

1248 
	#X509_F_X509_NAME_PRINT
 117

	)

1249 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1250 
	#X509_F_X509_PUBKEY_GET
 119

	)

1251 
	#X509_F_X509_PUBKEY_SET
 120

	)

1252 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1253 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1254 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1255 
	#X509_F_X509_REQ_TO_X509
 123

	)

1256 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1257 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1258 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1259 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1260 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1261 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1262 
	#X509_F_X509_TO_X509_REQ
 126

	)

1263 
	#X509_F_X509_TRUST_ADD
 133

	)

1264 
	#X509_F_X509_TRUST_SET
 141

	)

1265 
	#X509_F_X509_VERIFY_CERT
 127

	)

1268 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1269 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1270 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1271 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1272 
	#X509_R_ERR_ASN1_LIB
 102

	)

1273 
	#X509_R_INVALID_DIRECTORY
 113

	)

1274 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1275 
	#X509_R_INVALID_TRUST
 123

	)

1276 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1277 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1278 
	#X509_R_LOADING_CERT_DIR
 103

	)

1279 
	#X509_R_LOADING_DEFAULTS
 104

	)

1280 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1281 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1282 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1283 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1284 
	#X509_R_SHOULD_RETRY
 106

	)

1285 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1286 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1287 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1288 
	#X509_R_UNKNOWN_NID
 109

	)

1289 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1290 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1291 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1292 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1293 
	#X509_R_WRONG_TYPE
 122

	)

1295 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap/pcap.h

37 #i‚de‡
lib_pˇp_pˇp_h


38 
	#lib_pˇp_pˇp_h


	)

40 #i‡
deföed
(
WIN32
)

41 
	~<pˇp-°döc.h
>

42 #ñi‡
deföed
(
MSDOS
)

43 
	~<sys/ty≥s.h
>

44 
	~<sys/sockë.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/time.h
>

50 #i‚de‡
PCAP_DONT_INCLUDE_PCAP_BPF_H


51 
	~<pˇp/bpf.h
>

54 
	~<°dio.h
>

56 #ifde‡
__˝lu•lus


67 
	#PCAP_VERSION_MAJOR
 2

	)

68 
	#PCAP_VERSION_MINOR
 4

	)

70 
	#PCAP_ERRBUF_SIZE
 256

	)

76 #i‡
BPF_RELEASE
 - 0 < 199406

77 
	tbpf_öt32
;

78 
u_öt
 
	tbpf_u_öt32
;

81 
pˇp
 
	tpˇp_t
;

82 
pˇp_dum≥r
 
	tpˇp_dum≥r_t
;

83 
pˇp_if
 
	tpˇp_if_t
;

84 
pˇp_addr
 
	tpˇp_addr_t
;

124 
	spˇp_fûe_hódî
 {

125 
bpf_u_öt32
 
magic
;

126 
u_sh‹t
 
vîsi⁄_maj‹
;

127 
u_sh‹t
 
vîsi⁄_mö‹
;

128 
bpf_öt32
 
thisz⁄e
;

129 
bpf_u_öt32
 
sigfigs
;

130 
bpf_u_öt32
 
¢≠Àn
;

131 
bpf_u_öt32
 
lökty≥
;

140 
	#LT_FCS_LENGTH_PRESENT
(
x
Ë((xË& 0x04000000)

	)

141 
	#LT_FCS_LENGTH
(
x
Ë(((xË& 0xF0000000Ë>> 28)

	)

142 
	#LT_FCS_DATALINK_EXT
(
x
Ë((((xË& 0xFË<< 28Ë| 0x04000000)

	)

145 
PCAP_D_INOUT
 = 0,

146 
PCAP_D_IN
,

147 
PCAP_D_OUT


148 } 
	tpˇp_dúe˘i⁄_t
;

162 
	spˇp_pkthdr
 {

163 
timevÆ
 
ts
;

164 
bpf_u_öt32
 
ˇ∂í
;

165 
bpf_u_öt32
 
Àn
;

171 
	spˇp_°©
 {

172 
u_öt
 
ps_ªcv
;

173 
u_öt
 
ps_dr›
;

174 
u_öt
 
ps_ifdr›
;

175 #ifde‡
WIN32


176 
u_öt
 
bs_ˇ±
;

180 #ifde‡
MSDOS


184 
	spˇp_°©_ex
 {

185 
u_l⁄g
 
rx_∑ckës
;

186 
u_l⁄g
 
tx_∑ckës
;

187 
u_l⁄g
 
rx_byãs
;

188 
u_l⁄g
 
tx_byãs
;

189 
u_l⁄g
 
rx_îr‹s
;

190 
u_l⁄g
 
tx_îr‹s
;

191 
u_l⁄g
 
rx_dr›≥d
;

192 
u_l⁄g
 
tx_dr›≥d
;

193 
u_l⁄g
 
mu…iˇ°
;

194 
u_l⁄g
 
cﬁlisi⁄s
;

197 
u_l⁄g
 
rx_Àngth_îr‹s
;

198 
u_l⁄g
 
rx_ovî_îr‹s
;

199 
u_l⁄g
 
rx_¸c_îr‹s
;

200 
u_l⁄g
 
rx_‰ame_îr‹s
;

201 
u_l⁄g
 
rx_fifo_îr‹s
;

202 
u_l⁄g
 
rx_mis£d_îr‹s
;

205 
u_l⁄g
 
tx_ab‹ãd_îr‹s
;

206 
u_l⁄g
 
tx_ˇºõr_îr‹s
;

207 
u_l⁄g
 
tx_fifo_îr‹s
;

208 
u_l⁄g
 
tx_hóπbót_îr‹s
;

209 
u_l⁄g
 
tx_wödow_îr‹s
;

216 
	spˇp_if
 {

217 
pˇp_if
 *
√xt
;

218 *
«me
;

219 *
des¸ùti⁄
;

220 
pˇp_addr
 *
addªs£s
;

221 
bpf_u_öt32
 
Êags
;

224 
	#PCAP_IF_LOOPBACK
 0x00000001

	)

229 
	spˇp_addr
 {

230 
pˇp_addr
 *
√xt
;

231 
sockaddr
 *
addr
;

232 
sockaddr
 *
√tmask
;

233 
sockaddr
 *
brﬂdaddr
;

234 
sockaddr
 *
d°addr
;

237 (*
pˇp_h™dÀr
)(
	tu_ch¨
 *, c⁄° 
	tpˇp_pkthdr
 *,

238 c⁄° 
	tu_ch¨
 *);

246 
	#PCAP_ERROR
 -1

	)

247 
	#PCAP_ERROR_BREAK
 -2

	)

248 
	#PCAP_ERROR_NOT_ACTIVATED
 -3

	)

249 
	#PCAP_ERROR_ACTIVATED
 -4

	)

250 
	#PCAP_ERROR_NO_SUCH_DEVICE
 -5

	)

251 
	#PCAP_ERROR_RFMON_NOTSUP
 -6

	)

252 
	#PCAP_ERROR_NOT_RFMON
 -7

	)

253 
	#PCAP_ERROR_PERM_DENIED
 -8

	)

254 
	#PCAP_ERROR_IFACE_NOT_UP
 -9

	)

255 
	#PCAP_ERROR_CANTSET_TSTAMP_TYPE
 -10

	)

256 
	#PCAP_ERROR_PROMISC_PERM_DENIED
 -11

	)

257 
	#PCAP_ERROR_TSTAMP_PRECISION_NOTSUP
 -12

	)

264 
	#PCAP_WARNING
 1

	)

265 
	#PCAP_WARNING_PROMISC_NOTSUP
 2

	)

266 
	#PCAP_WARNING_TSTAMP_TYPE_NOTSUP
 3

	)

272 
	#PCAP_NETMASK_UNKNOWN
 0xffffffff

	)

274 *
pˇp_lookupdev
(*);

275 
pˇp_looku≤ë
(c⁄° *, 
bpf_u_öt32
 *, bpf_u_int32 *, *);

277 
pˇp_t
 *
pˇp_¸óã
(const *, *);

278 
pˇp_£t_¢≠Àn
(
pˇp_t
 *, );

279 
pˇp_£t_¥omisc
(
pˇp_t
 *, );

280 
pˇp_ˇn_£t_rfm⁄
(
pˇp_t
 *);

281 
pˇp_£t_rfm⁄
(
pˇp_t
 *, );

282 
pˇp_£t_timeout
(
pˇp_t
 *, );

283 
pˇp_£t_t°amp_ty≥
(
pˇp_t
 *, );

284 
pˇp_£t_immedüã_mode
(
pˇp_t
 *, );

285 
pˇp_£t_buf„r_size
(
pˇp_t
 *, );

286 
pˇp_£t_t°amp_¥ecisi⁄
(
pˇp_t
 *, );

287 
pˇp_gë_t°amp_¥ecisi⁄
(
pˇp_t
 *);

288 
pˇp_a˘iv©e
(
pˇp_t
 *);

290 
pˇp_li°_t°amp_ty≥s
(
pˇp_t
 *, **);

291 
pˇp_‰ì_t°amp_ty≥s
(*);

292 
pˇp_t°amp_ty≥_«me_to_vÆ
(const *);

293 c⁄° *
pˇp_t°amp_ty≥_vÆ_to_«me
();

294 c⁄° *
pˇp_t°amp_ty≥_vÆ_to_des¸ùti⁄
();

334 
	#PCAP_TSTAMP_HOST
 0

	)

335 
	#PCAP_TSTAMP_HOST_LOWPREC
 1

	)

336 
	#PCAP_TSTAMP_HOST_HIPREC
 2

	)

337 
	#PCAP_TSTAMP_ADAPTER
 3

	)

338 
	#PCAP_TSTAMP_ADAPTER_UNSYNCED
 4

	)

346 
	#PCAP_TSTAMP_PRECISION_MICRO
 0

	)

347 
	#PCAP_TSTAMP_PRECISION_NANO
 1

	)

349 
pˇp_t
 *
pˇp_›í_live
(const *, , , , *);

350 
pˇp_t
 *
pˇp_›í_dód
(, );

351 
pˇp_t
 *
pˇp_›í_dód_wôh_t°amp_¥ecisi⁄
(, , 
u_öt
);

352 
pˇp_t
 *
pˇp_›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(c⁄° *, 
u_öt
, *);

353 
pˇp_t
 *
pˇp_›í_ofÊöe
(const *, *);

354 #i‡
deföed
(
WIN32
)

355 
pˇp_t
 *
pˇp_h›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
öçå_t
, 
u_öt
, *);

356 
pˇp_t
 *
pˇp_h›í_ofÊöe
(
öçå_t
, *);

357 #i‡!
deföed
(
LIBPCAP_EXPORTS
)

358 
	#pˇp_f›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
f
,
p
,
b
) \

359 
	`pˇp_h›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
	`_gë_osfh™dÀ
(
	`_fûío
(
f
)), 
p
, 
b
)

	)

360 
	#pˇp_f›í_ofÊöe
(
f
,
b
) \

361 
	`pˇp_h›í_ofÊöe
(
	`_gë_osfh™dÀ
(
	`_fûío
(
f
)), 
b
)

	)

363 
pˇp_t
 *
pˇp_f›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
FILE
 *, 
u_öt
, *);

364 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

367 
pˇp_t
 *
pˇp_f›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
FILE
 *, 
u_öt
, *);

368 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

371 
pˇp_˛o£
(
pˇp_t
 *);

372 
pˇp_lo›
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

373 
pˇp_di•©ch
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

374 c⁄° 
u_ch¨
*

375 
pˇp_√xt
(
pˇp_t
 *, 
pˇp_pkthdr
 *);

376 
pˇp_√xt_ex
(
pˇp_t
 *, 
pˇp_pkthdr
 **, c⁄° 
u_ch¨
 **);

377 
pˇp_bªaklo›
(
pˇp_t
 *);

378 
pˇp_°©s
(
pˇp_t
 *, 
pˇp_°©
 *);

379 
pˇp_£tfûãr
(
pˇp_t
 *, 
bpf_¥ogøm
 *);

380 
pˇp_£tdúe˘i⁄
(
pˇp_t
 *, 
pˇp_dúe˘i⁄_t
);

381 
pˇp_gën⁄block
(
pˇp_t
 *, *);

382 
pˇp_£ä⁄block
(
pˇp_t
 *, , *);

383 
pˇp_öje˘
(
pˇp_t
 *, c⁄° *, 
size_t
);

384 
pˇp_£nd∑ckë
(
pˇp_t
 *, c⁄° 
u_ch¨
 *, );

385 c⁄° *
pˇp_°©u°o°r
();

386 c⁄° *
pˇp_°ªº‹
();

387 *
pˇp_gëîr
(
pˇp_t
 *);

388 
pˇp_≥º‹
(
pˇp_t
 *, *);

389 
pˇp_compûe
(
pˇp_t
 *, 
bpf_¥ogøm
 *, const *, ,

390 
bpf_u_öt32
);

391 
pˇp_compûe_n›ˇp
(, , 
bpf_¥ogøm
 *,

392 c⁄° *, , 
bpf_u_öt32
);

393 
pˇp_‰ìcode
(
bpf_¥ogøm
 *);

394 
pˇp_ofÊöe_fûãr
(c⁄° 
bpf_¥ogøm
 *,

395 c⁄° 
pˇp_pkthdr
 *, c⁄° 
u_ch¨
 *);

396 
pˇp_d©Æök
(
pˇp_t
 *);

397 
pˇp_d©Æök_ext
(
pˇp_t
 *);

398 
pˇp_li°_d©Æöks
(
pˇp_t
 *, **);

399 
pˇp_£t_d©Æök
(
pˇp_t
 *, );

400 
pˇp_‰ì_d©Æöks
(*);

401 
pˇp_d©Æök_«me_to_vÆ
(const *);

402 c⁄° *
pˇp_d©Æök_vÆ_to_«me
();

403 c⁄° *
pˇp_d©Æök_vÆ_to_des¸ùti⁄
();

404 
pˇp_¢≠shŸ
(
pˇp_t
 *);

405 
pˇp_is_sw≠≥d
(
pˇp_t
 *);

406 
pˇp_maj‹_vîsi⁄
(
pˇp_t
 *);

407 
pˇp_mö‹_vîsi⁄
(
pˇp_t
 *);

410 
FILE
 *
pˇp_fûe
(
pˇp_t
 *);

411 
pˇp_fûío
(
pˇp_t
 *);

413 
pˇp_dum≥r_t
 *
pˇp_dump_›í
(
pˇp_t
 *, const *);

414 
pˇp_dum≥r_t
 *
pˇp_dump_f›í
(
pˇp_t
 *, 
FILE
 *
Â
);

415 
FILE
 *
pˇp_dump_fûe
(
pˇp_dum≥r_t
 *);

416 
pˇp_dump_·ñl
(
pˇp_dum≥r_t
 *);

417 
pˇp_dump_Êush
(
pˇp_dum≥r_t
 *);

418 
pˇp_dump_˛o£
(
pˇp_dum≥r_t
 *);

419 
pˇp_dump
(
u_ch¨
 *, c⁄° 
pˇp_pkthdr
 *, const u_char *);

421 
pˇp_födÆldevs
(
pˇp_if_t
 **, *);

422 
pˇp_‰ìÆldevs
(
pˇp_if_t
 *);

424 c⁄° *
pˇp_lib_vîsi⁄
();

433 #i‚de‡
__NëBSD__


434 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

436 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *
f
, 
Àn
);

437 *
bpf_image
(c⁄° 
bpf_ö¢
 *, );

438 
bpf_dump
(c⁄° 
bpf_¥ogøm
 *, );

440 #i‡
deföed
(
WIN32
)

446 
pˇp_£tbuff
(
pˇp_t
 *
p
, 
dim
);

447 
pˇp_£tmode
(
pˇp_t
 *
p
, 
mode
);

448 
pˇp_£tmötoc›y
(
pˇp_t
 *
p
, 
size
);

449 
Ad≠ãr
 *
pˇp_gë_ad≠ãr
(
pˇp_t
 *
p
);

451 #ifde‡
WPCAP


453 
	~<Wö32-Exãnsi⁄s.h
>

456 
	#MODE_CAPT
 0

	)

457 
	#MODE_STAT
 1

	)

458 
	#MODE_MON
 2

	)

460 #ñi‡
deföed
(
MSDOS
)

466 
pˇp_°©s_ex
 (
pˇp_t
 *, 
pˇp_°©_ex
 *);

467 
pˇp_£t_waô
 (
pˇp_t
 *
p
, (*
yõld
)(), 
waô
);

468 
u_l⁄g
 
pˇp_mac_∑ckës
 ();

476 
pˇp_gë_£À˘abÀ_fd
(
pˇp_t
 *);

480 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 #i‡
__GNUC__
 >= 3

366 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

367 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

369 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

370 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

373 
	~<bôs/w‹dsize.h
>

375 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


376 
	#__LDBL_COMPAT
 1

	)

377 #ifde‡
__REDIRECT


378 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

379 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

380 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

381 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

382 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

384 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

385 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

386 
	#__LDBL_REDIR_DECL
(
«me
) \

387 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

388 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

389 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

390 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

391 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

394 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


395 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

396 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

397 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

398 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

399 
	#__LDBL_REDIR_DECL
(
«me
)

	)

400 #ifde‡
__REDIRECT


401 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/locale.h

20 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


24 #i‚de‡
_BITS_LOCALE_H


25 
	#_BITS_LOCALE_H
 1

	)

29 
	m__LC_CTYPE
 = 0,

30 
	m__LC_NUMERIC
 = 1,

31 
	m__LC_TIME
 = 2,

32 
	m__LC_COLLATE
 = 3,

33 
	m__LC_MONETARY
 = 4,

34 
	m__LC_MESSAGES
 = 5,

35 
	m__LC_ALL
 = 6,

36 
	m__LC_PAPER
 = 7,

37 
	m__LC_NAME
 = 8,

38 
	m__LC_ADDRESS
 = 9,

39 
	m__LC_TELEPHONE
 = 10,

40 
	m__LC_MEASUREMENT
 = 11,

41 
	m__LC_IDENTIFICATION
 = 12

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

41 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/krb5.h

8 
	~<krb5/krb5.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

38 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

39 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

40 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
	#SMIME_OLDMIME
 0x400

	)

162 
	#SMIME_CRLFEOL
 0x800

	)

163 
	#SMIME_STREAM
 0x1000

	)

165 
X509_Æg‹_°
;

166 
DECLARE_STACK_OF
(
X509_ALGOR
)

168 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

169 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

175 
	sa¢1_˘x_°


177 *
p
;

178 
eos
;

179 
îr‹
;

180 
öf
;

181 
èg
;

182 
x˛ass
;

183 
¶í
;

184 *
max
;

185 *
q
;

186 **
µ
;

187 
löe
;

188 } 
	tASN1_CTX
;

190 
	sa¢1_c⁄°_˘x_°


192 c⁄° *
p
;

193 
eos
;

194 
îr‹
;

195 
öf
;

196 
èg
;

197 
x˛ass
;

198 
¶í
;

199 c⁄° *
max
;

200 c⁄° *
q
;

201 c⁄° **
µ
;

202 
löe
;

203 } 
	tASN1_c⁄°_CTX
;

207 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

208 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

210 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

211 
	sa¢1_obje˘_°


213 c⁄° *
¢
,*
 
;

214 
nid
;

215 
Àngth
;

216 c⁄° *
d©a
;

217 
Êags
;

218 } 
	tASN1_OBJECT
;

220 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

225 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

232 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

236 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

238 
	sa¢1_°rög_°


240 
Àngth
;

241 
ty≥
;

242 *
d©a
;

247 
Êags
;

255 
	sASN1_ENCODING_°


257 *
íc
;

258 
Àn
;

259 
modifõd
;

260 } 
	tASN1_ENCODING
;

263 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

265 
	#STABLE_FLAGS_MALLOC
 0x01

	)

266 
	#STABLE_NO_MASK
 0x02

	)

267 
	#DIRSTRING_TYPE
 \

268 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

269 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

271 
	sa¢1_°rög_èbÀ_°
 {

272 
nid
;

273 
mösize
;

274 
maxsize
;

275 
mask
;

276 
Êags
;

277 } 
	tASN1_STRING_TABLE
;

279 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

283 
	#ub_«me
 32768

	)

284 
	#ub_comm⁄_«me
 64

	)

285 
	#ub_loˇlôy_«me
 128

	)

286 
	#ub_°©e_«me
 128

	)

287 
	#ub_‹g™iz©i⁄_«me
 64

	)

288 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

289 
	#ub_tôÀ
 64

	)

290 
	#ub_emaû_addªss
 128

	)

295 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

296 
ASN1_TLC_°
 
	tASN1_TLC
;

298 
ASN1_VALUE_°
 
	tASN1_VALUE
;

302 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

304 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

305 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

307 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

308 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

311 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

312 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

313 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

315 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

316 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

317 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

318 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

320 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

321 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

322 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

323 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

325 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

326 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

328 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

329 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

330 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

332 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

333 
ty≥
 *
«me
##
	`_√w
(); \

334 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

336 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

337 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

339 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

340 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

341 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

343 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

344 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

345 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

347 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

348 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

349 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

350 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

351 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

352 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

353 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

354 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

355 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

356 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

358 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

359 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

360 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

362 
TYPEDEF_D2I2D_OF
();

399 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


402 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

405 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

408 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

410 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

412 
	#DECLARE_ASN1_ITEM
(
«me
) \

413 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

422 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

425 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

428 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

430 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

432 
	#DECLARE_ASN1_ITEM
(
«me
) \

433 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

444 
	#ASN1_STRFLGS_ESC_2253
 1

	)

445 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

446 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

454 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

460 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

462 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

464 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

474 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

481 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

484 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

494 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

495 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

502 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

509 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

510 
ASN1_STRFLGS_ESC_CTRL
 | \

511 
ASN1_STRFLGS_ESC_MSB
 | \

512 
ASN1_STRFLGS_UTF8_CONVERT
 | \

513 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

514 
ASN1_STRFLGS_DUMP_DER
)

	)

516 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

517 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

519 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

521 
	sa¢1_ty≥_°


523 
ty≥
;

525 *
±r
;

526 
ASN1_BOOLEAN
 
boﬁón
;

527 
ASN1_STRING
 * 
a¢1_°rög
;

528 
ASN1_OBJECT
 * 
obje˘
;

529 
ASN1_INTEGER
 * 
öãgî
;

530 
ASN1_ENUMERATED
 * 
íumî©ed
;

531 
ASN1_BIT_STRING
 * 
bô_°rög
;

532 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

533 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

534 
ASN1_T61STRING
 * 
t61°rög
;

535 
ASN1_IA5STRING
 * 
ü5°rög
;

536 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

537 
ASN1_BMPSTRING
 * 
bmp°rög
;

538 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

539 
ASN1_UTCTIME
 * 
ut˘ime
;

540 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

541 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

542 
ASN1_UTF8STRING
 * 
utf8°rög
;

545 
ASN1_STRING
 * 
£t
;

546 
ASN1_STRING
 * 
£quí˚
;

547 
ASN1_VALUE
 * 
a¢1_vÆue
;

548 } 
vÆue
;

549 } 
	tASN1_TYPE
;

551 
DECLARE_STACK_OF
(
ASN1_TYPE
)

552 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

554 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

556 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

557 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

559 
	sNETSCAPE_X509_°


561 
ASN1_OCTET_STRING
 *
hódî
;

562 
X509
 *
˚π
;

563 } 
	tNETSCAPE_X509
;

566 
	sBIT_STRING_BITNAME_°
 {

567 
bônum
;

568 c⁄° *
 ame
;

569 c⁄° *
¢ame
;

570 } 
	tBIT_STRING_BITNAME
;

573 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

574 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

575 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

576 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

579 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

580 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

581 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

582 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

583 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

584 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

585 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

586 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

588 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

589 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

590 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

591 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

592 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

593 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

594 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

596 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

597 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

598 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

599 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

600 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

601 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

602 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

604 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

605 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

606 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

607 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

608 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

609 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

610 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

611 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

612 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

613 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

614 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

615 
V_ASN1_UNIVERSAL
)

	)

617 
	#B_ASN1_TIME
 \

618 
B_ASN1_UTCTIME
 | \

619 
B_ASN1_GENERALIZEDTIME


	)

621 
	#B_ASN1_PRINTABLE
 \

622 
B_ASN1_NUMERICSTRING
| \

623 
B_ASN1_PRINTABLESTRING
| \

624 
B_ASN1_T61STRING
| \

625 
B_ASN1_IA5STRING
| \

626 
B_ASN1_BIT_STRING
| \

627 
B_ASN1_UNIVERSALSTRING
|\

628 
B_ASN1_BMPSTRING
|\

629 
B_ASN1_UTF8STRING
|\

630 
B_ASN1_SEQUENCE
|\

631 
B_ASN1_UNKNOWN


	)

633 
	#B_ASN1_DIRECTORYSTRING
 \

634 
B_ASN1_PRINTABLESTRING
| \

635 
B_ASN1_TELETEXSTRING
|\

636 
B_ASN1_BMPSTRING
|\

637 
B_ASN1_UNIVERSALSTRING
|\

638 
B_ASN1_UTF8STRING


	)

640 
	#B_ASN1_DISPLAYTEXT
 \

641 
B_ASN1_IA5STRING
| \

642 
B_ASN1_VISIBLESTRING
| \

643 
B_ASN1_BMPSTRING
|\

644 
B_ASN1_UTF8STRING


	)

646 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

647 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

648 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

649 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

650 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

651 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

652 
B_ASN1_PRINTABLE
)

	)

654 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

655 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

656 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

657 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

658 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

659 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

660 
B_ASN1_DIRECTORYSTRING
)

	)

662 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

663 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

664 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

665 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

666 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

667 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

668 
B_ASN1_DISPLAYTEXT
)

	)

670 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

671 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

672 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

673 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

674 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

675 
V_ASN1_UNIVERSAL
)

	)

676 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

677 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

678 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

680 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

681 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

682 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

683 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

684 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

685 
V_ASN1_UNIVERSAL
)

	)

686 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

687 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

688 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

690 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

691 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

692 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

693 
	#M_ASN1_IA5STRING_dup
(
a
) \

694 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

695 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

696 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

697 
V_ASN1_UNIVERSAL
)

	)

698 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

699 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

700 
B_ASN1_IA5STRING
)

	)

702 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

703 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

704 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

705 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

706 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

708 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

709 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

710 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

711 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

712 (c⁄° 
ASN1_STRING
 *)
a
)

	)

714 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

715 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

716 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

717 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

718 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

720 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

721 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

722 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

723 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

724 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

725 
V_ASN1_UNIVERSAL
)

	)

726 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

727 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

728 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

730 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

731 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

732 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

733 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

734 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

735 
V_ASN1_UNIVERSAL
)

	)

736 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

737 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

738 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

740 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

741 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

742 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

743 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

744 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

745 
V_ASN1_UNIVERSAL
)

	)

746 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

747 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

748 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

750 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

751 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

752 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

753 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

754 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

755 
V_ASN1_UNIVERSAL
)

	)

756 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

757 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

758 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

760 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

761 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

762 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

763 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

764 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

765 
V_ASN1_UNIVERSAL
)

	)

766 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

767 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

768 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

771 
	#IS_SEQUENCE
 0

	)

772 
	#IS_SET
 1

	)

774 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

776 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

777 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

778 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

779 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

781 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

782 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

783 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

784 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

785 
Àngth
);

786 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

787 
Àngth
);

789 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

791 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

792 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

794 
ASN1_STRING
 * 
ASN1_STRING_√w
();

795 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

796 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

797 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

798 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

799 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

802 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

803 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

804 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

805 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

806 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

807 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

809 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

810 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

811 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

812 
Àngth
);

813 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

814 
Àngth
 );

815 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

816 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

817 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

818 *
Êags
, 
Êags_Àn
);

820 #i‚de‡
OPENSSL_NO_BIO


821 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

822 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

824 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

825 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

826 
BIT_STRING_BITNAME
 *
tbl
);

828 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

829 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

831 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

832 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

833 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

834 
Àngth
);

835 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

836 
Àngth
);

837 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

838 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

840 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

842 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

843 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

844 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

845 
off£t_day
, 
off£t_£c
);

846 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

847 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

849 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

852 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

853 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

854 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

855 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

856 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

858 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

859 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

860 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

861 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

863 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

864 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

867 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

869 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

870 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

872 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

874 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

875 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

876 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

877 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

878 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

879 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

880 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

881 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

882 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

884 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

886 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

887 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

888 
off£t_day
, 
off£t_£c
);

889 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

890 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

891 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

893 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

894 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

895 
is_£t
);

896 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

897 c⁄° **
µ
,

898 
Àngth
, 
d2i_of_void
 *
d2i
,

899 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

900 
ex_˛ass
);

902 #i‚de‡
OPENSSL_NO_BIO


903 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

904 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

905 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

906 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

907 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

908 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

909 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

911 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

913 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

914 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

915 c⁄° *
¢
, c⁄° *
 
);

917 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

918 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

919 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

920 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

922 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

923 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

924 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

925 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

929 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

931 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

932 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

933 
Àngth
, 
Pèg
, 
P˛ass
);

934 
ASN1_èg2bô
(
èg
);

936 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

937 
Àngth
,
ty≥
);

940 
a¢1_Föish
(
ASN1_CTX
 *
c
);

941 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

944 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

945 *
p˛ass
, 
omax
);

946 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

947 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

948 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

949 
èg
, 
x˛ass
);

950 
ASN1_put_eoc
(**
µ
);

951 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

954 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

956 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

957 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

958 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

959 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

961 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

962 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

963 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

964 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

966 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

970 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

971 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

972 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

974 #i‚de‡
OPENSSL_NO_FP_API


975 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

977 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

978 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

979 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

980 
ö
, \

981 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

983 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

984 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

986 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

987 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

988 
out
, \

989 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

991 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

992 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

993 
out
, \

994 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

996 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

997 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1000 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1002 #i‚de‡
OPENSSL_NO_BIO


1003 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1005 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1006 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1007 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1008 
ö
, \

1009 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1011 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1012 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1014 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1015 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1016 
out
, \

1017 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1019 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1020 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1021 
out
, \

1022 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1024 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1025 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1026 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1027 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1028 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1029 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1030 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1031 *
buf
, 
off
);

1032 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1033 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1035 c⁄° *
ASN1_èg2°r
(
èg
);

1039 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1041 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1043 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1044 *
d©a
, 
Àn
);

1045 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1046 *
d©a
, 
max_Àn
);

1047 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1048 *
d©a
, 
Àn
);

1049 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1050 *
d©a
, 
max_Àn
);

1052 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1053 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1054 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1055 **
buf
, *
Àn
 );

1056 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1057 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1058 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1059 
ASN1_OCTET_STRING
 **
o˘
);

1061 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1062 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1063 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1064 
o˘
))

	)

1066 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1068 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1069 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1070 
ASN1_STRING_gë_deÁu…_mask
();

1071 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1072 
öf‹m
, 
mask
);

1073 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1074 
öf‹m
, 
mask
,

1075 
mösize
, 
maxsize
);

1077 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1078 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1079 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1080 
ASN1_STRING_TABLE_add
(, , , , );

1081 
ASN1_STRING_TABLE_˛ónup
();

1086 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1087 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1088 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1089 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1090 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1092 
ASN1_add_oid_moduÀ
();

1094 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1095 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1100 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1102 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1104 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1106 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1108 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1110 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1112 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1114 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1116 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1118 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1119 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1120 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1121 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1122 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1123 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1124 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1125 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1126 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1127 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1128 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1129 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1130 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1131 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1133 
BIO_METHOD
 *
BIO_f_a¢1
();

1135 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1137 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1138 c⁄° 
ASN1_ITEM
 *
ô
);

1139 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1140 c⁄° *
hdr
,

1141 c⁄° 
ASN1_ITEM
 *
ô
);

1142 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1143 
˘y≥_nid
, 
ec⁄t_nid
,

1144 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1145 c⁄° 
ASN1_ITEM
 *
ô
);

1146 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1147 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1148 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1154 
ERR_lﬂd_ASN1_°rögs
();

1159 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1160 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1161 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1162 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1163 
	#ASN1_F_APPEND_EXP
 176

	)

1164 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1165 
	#ASN1_F_ASN1_CB
 177

	)

1166 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1167 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1168 
	#ASN1_F_ASN1_COLLECT
 106

	)

1169 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1170 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1171 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1172 
	#ASN1_F_ASN1_DIGEST
 184

	)

1173 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1174 
	#ASN1_F_ASN1_DUP
 111

	)

1175 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1176 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1177 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1178 
	#ASN1_F_ASN1_FIND_END
 190

	)

1179 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1180 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1181 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1182 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1183 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1184 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1185 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1186 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1187 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1188 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1189 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1190 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1191 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1192 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1193 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1194 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1195 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1196 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1197 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1198 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1199 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1200 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1201 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1202 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1203 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1204 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1205 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1206 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1207 
	#ASN1_F_ASN1_SIGN
 128

	)

1208 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1209 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1210 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1211 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1212 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1213 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1214 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1215 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1216 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1217 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1218 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1219 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1220 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1221 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1222 
	#ASN1_F_ASN1_VERIFY
 137

	)

1223 
	#ASN1_F_B64_READ_ASN1
 209

	)

1224 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1225 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1226 
	#ASN1_F_BITSTR_CB
 180

	)

1227 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1228 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1229 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1230 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1231 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1232 
	#ASN1_F_COLLECT_DATA
 140

	)

1233 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1234 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1235 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1236 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1237 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1238 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1239 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1240 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1241 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1242 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1243 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1244 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1245 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1246 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1247 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1248 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1249 
	#ASN1_F_D2I_RSA_NET
 200

	)

1250 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1251 
	#ASN1_F_D2I_X509
 156

	)

1252 
	#ASN1_F_D2I_X509_CINF
 157

	)

1253 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1254 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1255 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1256 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1257 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1258 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1259 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1260 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1261 
	#ASN1_F_I2D_RSA_NET
 162

	)

1262 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1263 
	#ASN1_F_LONG_C2I
 166

	)

1264 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1265 
	#ASN1_F_PARSE_TAGGING
 182

	)

1266 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1267 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1268 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1269 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1270 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1271 
	#ASN1_F_SMIME_TEXT
 213

	)

1272 
	#ASN1_F_X509_CINF_NEW
 168

	)

1273 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1274 
	#ASN1_F_X509_INFO_NEW
 170

	)

1275 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1276 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1277 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1278 
	#ASN1_F_X509_NEW
 172

	)

1279 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1282 
	#ASN1_R_ADDING_OBJECT
 171

	)

1283 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1284 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1285 
	#ASN1_R_AUX_ERROR
 100

	)

1286 
	#ASN1_R_BAD_CLASS
 101

	)

1287 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1288 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1289 
	#ASN1_R_BAD_TAG
 104

	)

1290 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1291 
	#ASN1_R_BN_LIB
 105

	)

1292 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1293 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1294 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1295 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1296 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1297 
	#ASN1_R_DECODE_ERROR
 110

	)

1298 
	#ASN1_R_DECODING_ERROR
 111

	)

1299 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1300 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1301 
	#ASN1_R_ENCODE_ERROR
 112

	)

1302 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1303 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1304 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1305 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1306 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1307 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1308 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1309 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1310 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1311 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1312 
	#ASN1_R_FIELD_MISSING
 121

	)

1313 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1314 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1315 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1316 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1317 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1318 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1319 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1320 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1321 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1322 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1323 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1324 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1325 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1326 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1327 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1328 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1329 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1330 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1331 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1332 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

1333 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1334 
	#ASN1_R_INVALID_DIGIT
 130

	)

1335 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1336 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1337 
	#ASN1_R_INVALID_NUMBER
 187

	)

1338 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1339 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1340 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1341 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1342 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1343 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1344 
	#ASN1_R_LENGTH_ERROR
 136

	)

1345 
	#ASN1_R_LIST_ERROR
 188

	)

1346 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1347 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1348 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1349 
	#ASN1_R_MISSING_EOC
 137

	)

1350 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1351 
	#ASN1_R_MISSING_VALUE
 189

	)

1352 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1353 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1354 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1355 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1356 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1357 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1358 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1359 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1360 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1361 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1362 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1363 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1364 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1365 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1366 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1367 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1368 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1369 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1370 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1371 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1372 
	#ASN1_R_SHORT_LINE
 150

	)

1373 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1374 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1375 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1376 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1377 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1378 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1379 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1380 
	#ASN1_R_TOO_LONG
 155

	)

1381 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1382 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1383 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1384 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1385 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1386 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1387 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1388 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1389 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1390 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1391 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1392 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1393 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1394 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1395 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1396 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1397 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1398 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1399 
	#ASN1_R_WRONG_TAG
 168

	)

1400 
	#ASN1_R_WRONG_TYPE
 169

	)

1402 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

81 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS_GEN
 (
	`gëív
("OPENSSL_ENFORCE_MODULUS_BITS")?2048:1024)

	)

83 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

84 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

98 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

105 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

107 #ifde‡ 
__˝lu•lus


115 
	sdh_mëhod


117 c⁄° *
«me
;

119 (*
gíî©e_key
)(
DH
 *
dh
);

120 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

121 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

122 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

123 
BN_MONT_CTX
 *
m_˘x
);

125 (*
öô
)(
DH
 *
dh
);

126 (*
föish
)(
DH
 *
dh
);

127 
Êags
;

128 *
≠p_d©a
;

130 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

133 
	sdh_°


137 
∑d
;

138 
vîsi⁄
;

139 
BIGNUM
 *
p
;

140 
BIGNUM
 *
g
;

141 
Àngth
;

142 
BIGNUM
 *
pub_key
;

143 
BIGNUM
 *
¥iv_key
;

145 
Êags
;

146 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

148 
BIGNUM
 *
q
;

149 
BIGNUM
 *
j
;

150 *
£ed
;

151 
£edÀn
;

152 
BIGNUM
 *
cou¡î
;

154 
ª„ªn˚s
;

155 
CRYPTO_EX_DATA
 
ex_d©a
;

156 c⁄° 
DH_METHOD
 *
mëh
;

157 
ENGINE
 *
ígöe
;

160 
	#DH_GENERATOR_2
 2

	)

162 
	#DH_GENERATOR_5
 5

	)

165 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

166 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

167 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

168 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

171 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

172 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

176 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

178 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

179 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

180 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

181 (*)(
x
))

	)

182 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

183 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

185 
DH
 *
DH∑øms_dup
(DH *);

187 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

189 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

190 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

191 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

192 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

194 
DH
 * 
DH_√w
();

195 
DH_‰ì
(
DH
 *
dh
);

196 
DH_up_ªf
(
DH
 *
dh
);

197 
DH_size
(c⁄° 
DH
 *
dh
);

198 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

199 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

200 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

201 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

204 #i‚de‡
OPENSSL_NO_DEPRECATED


205 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

206 (*
ˇŒback
)(,,*),*
cb_¨g
);

210 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

212 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

213 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

214 
DH_gíî©e_key
(
DH
 *
dh
);

215 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

216 
DH_compuã_key_∑dded
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

217 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

218 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

219 #i‚de‡
OPENSSL_NO_FP_API


220 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

222 #i‚de‡
OPENSSL_NO_BIO


223 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

225 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

228 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

229 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

230 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

232 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

233 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

234 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

236 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

237 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

244 
ERR_lﬂd_DH_°rögs
();

249 
	#DH_F_COMPUTE_KEY
 102

	)

250 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

251 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

252 
	#DH_F_DH_COMPUTE_KEY
 114

	)

253 
	#DH_F_DH_GENERATE_KEY
 115

	)

254 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

255 
	#DH_F_DH_NEW_METHOD
 105

	)

256 
	#DH_F_DH_PARAM_DECODE
 107

	)

257 
	#DH_F_DH_PRIV_DECODE
 110

	)

258 
	#DH_F_DH_PRIV_ENCODE
 111

	)

259 
	#DH_F_DH_PUB_DECODE
 108

	)

260 
	#DH_F_DH_PUB_ENCODE
 109

	)

261 
	#DH_F_DO_DH_PRINT
 100

	)

262 
	#DH_F_GENERATE_KEY
 103

	)

263 
	#DH_F_GENERATE_PARAMETERS
 104

	)

264 
	#DH_F_PKEY_DH_DERIVE
 112

	)

265 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

268 
	#DH_R_BAD_GENERATOR
 101

	)

269 
	#DH_R_BN_DECODE_ERROR
 109

	)

270 
	#DH_R_BN_ERROR
 106

	)

271 
	#DH_R_DECODE_ERROR
 104

	)

272 
	#DH_R_INVALID_PUBKEY
 102

	)

273 
	#DH_R_KEYS_NOT_SET
 108

	)

274 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

275 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

276 
	#DH_R_NON_FIPS_METHOD
 111

	)

277 
	#DH_R_NO_PARAMETERS_SET
 107

	)

278 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

279 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

281 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

92 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS_GEN
 (
	`gëív
("OPENSSL_ENFORCE_MODULUS_BITS")?2048:1024)

	)

94 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

95 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

109 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

116 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

118 #ifde‡ 
__˝lu•lus


126 
	sDSA_SIG_°


128 
BIGNUM
 *
r
;

129 
BIGNUM
 *
s
;

130 } 
	tDSA_SIG
;

132 
	sdß_mëhod


134 c⁄° *
«me
;

135 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

136 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

137 
BIGNUM
 **
Ω
);

138 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

139 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

140 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

141 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
ö_m⁄t
);

143 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

144 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

145 
BN_MONT_CTX
 *
m_˘x
);

146 (*
öô
)(
DSA
 *
dß
);

147 (*
föish
)(
DSA
 *
dß
);

148 
Êags
;

149 *
≠p_d©a
;

151 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

152 c⁄° *
£ed
, 
£ed_Àn
,

153 *
cou¡î_ªt
, *
h_ªt
,

154 
BN_GENCB
 *
cb
);

156 (*
dß_keygí
)(
DSA
 *
dß
);

159 
	sdß_°


163 
∑d
;

164 
vîsi⁄
;

165 
wrôe_∑øms
;

166 
BIGNUM
 *
p
;

167 
BIGNUM
 *
q
;

168 
BIGNUM
 *
g
;

170 
BIGNUM
 *
pub_key
;

171 
BIGNUM
 *
¥iv_key
;

173 
BIGNUM
 *
köv
;

174 
BIGNUM
 *
r
;

176 
Êags
;

178 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

179 
ª„ªn˚s
;

180 
CRYPTO_EX_DATA
 
ex_d©a
;

181 c⁄° 
DSA_METHOD
 *
mëh
;

183 
ENGINE
 *
ígöe
;

186 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

187 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

188 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

189 (*)(
x
))

	)

190 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

191 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

194 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

195 
DSA_SIG
 * 
DSA_SIG_√w
();

196 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

197 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

198 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

200 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

201 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

202 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

204 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

206 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

207 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

208 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

210 
DSA
 * 
DSA_√w
();

211 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

212 
DSA_‰ì
 (
DSA
 *
r
);

214 
DSA_up_ªf
(
DSA
 *
r
);

215 
DSA_size
(c⁄° 
DSA
 *);

217 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

218 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

219 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

220 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

221 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

222 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

223 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

224 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

225 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

227 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

228 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

232 #i‚de‡
OPENSSL_NO_DEPRECATED


233 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

234 *
£ed
,
£ed_Àn
,

235 *
cou¡î_ªt
, *
h_ªt
,

236 (*
ˇŒback
)(, , *),*
cb_¨g
);

240 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

241 c⁄° *
£ed
,
£ed_Àn
,

242 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

244 
DSA_gíî©e_key
(
DSA
 *
a
);

245 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

246 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

247 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

249 #i‚de‡
OPENSSL_NO_BIO


250 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

251 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

253 #i‚de‡
OPENSSL_NO_FP_API


254 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

255 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

258 
	#DSS_¥ime_checks
 64

	)

261 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

262 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

264 #i‚de‡
OPENSSL_NO_DH


267 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

270 #ifde‡
OPENSSL_FIPS


271 
FIPS_dß_buûtö_∑ømgí
(
DSA
 *
ªt
, 
size_t
 
bôs
, size_à
qbôs
,

272 c⁄° 
EVP_MD
 *
evpmd
, c⁄° *
£ed_ö
, 
size_t
 
£ed_Àn
,

273 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

274 
FIPS_dß_gíî©e_pq
(
BN_CTX
 *
˘x
, 
size_t
 
bôs
, size_à
qbôs
,

275 c⁄° 
EVP_MD
 *
evpmd
, *
£ed
, 
£ed_Àn
,

276 
BIGNUM
 **
p_ªt
, BIGNUM **
q_ªt
, *
cou¡î_ªt
, 
BN_GENCB
 *
cb
);

277 
FIPS_dß_gíî©e_g
(
BN_CTX
 *
˘x
, 
BIGNUM
 *
p
, BIGNUM *
q
,

278 
BIGNUM
 **
g_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

281 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

282 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

283 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

285 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

286 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

287 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

293 
ERR_lﬂd_DSA_°rögs
();

298 
	#DSA_F_D2I_DSA_SIG
 110

	)

299 
	#DSA_F_DO_DSA_PRINT
 104

	)

300 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

301 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

302 
	#DSA_F_DSA_BUILTIN_KEYGEN
 124

	)

303 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 123

	)

304 
	#DSA_F_DSA_DO_SIGN
 112

	)

305 
	#DSA_F_DSA_DO_VERIFY
 113

	)

306 
	#DSA_F_DSA_GENERATE_KEY
 126

	)

307 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 127

	)

308 
	#DSA_F_DSA_GENERATE_PARAMETERS
 125

	)

309 
	#DSA_F_DSA_NEW_METHOD
 103

	)

310 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

311 
	#DSA_F_DSA_PRINT_FP
 105

	)

312 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

313 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

314 
	#DSA_F_DSA_PUB_DECODE
 117

	)

315 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

316 
	#DSA_F_DSA_SIGN
 106

	)

317 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

318 
	#DSA_F_DSA_SIG_NEW
 109

	)

319 
	#DSA_F_DSA_SIG_PRINT
 125

	)

320 
	#DSA_F_DSA_VERIFY
 108

	)

321 
	#DSA_F_I2D_DSA_SIG
 111

	)

322 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

323 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

324 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

325 
	#DSA_F_SIG_CB
 114

	)

328 
	#DSA_R_BAD_Q_VALUE
 102

	)

329 
	#DSA_R_BN_DECODE_ERROR
 108

	)

330 
	#DSA_R_BN_ERROR
 109

	)

331 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

332 
	#DSA_R_DECODE_ERROR
 104

	)

333 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

334 
	#DSA_R_KEY_SIZE_INVALID
 113

	)

335 
	#DSA_R_KEY_SIZE_TOO_SMALL
 110

	)

336 
	#DSA_R_MISSING_PARAMETERS
 101

	)

337 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

338 
	#DSA_R_NEED_NEW_SETUP_VALUES
 112

	)

339 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

340 
	#DSA_R_NON_FIPS_METHOD
 111

	)

341 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

342 
	#DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 112

	)

343 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

345 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

100 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


101 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

109 
POINT_CONVERSION_COMPRESSED
 = 2,

111 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

114 
POINT_CONVERSION_HYBRID
 = 6

115 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

118 
ec_mëhod_°
 
	tEC_METHOD
;

120 
ec_group_°


129 
	tEC_GROUP
;

131 
ec_poöt_°
 
	tEC_POINT
;

142 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

147 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

152 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

154 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


158 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

163 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

168 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

181 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

186 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

191 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

198 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

205 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

211 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

217 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

227 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

233 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

241 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

249 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *
˘x
);

255 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

261 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

263 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

264 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

266 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

267 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

269 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

270 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

271 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

281 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

291 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

297 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

304 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

311 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

319 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

332 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

338 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

346 
nid
;

347 c⁄° *
commít
;

348 } 
	tEC_buûtö_curve
;

354 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

365 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

370 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

375 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

382 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

390 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

396 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

403 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

414 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

415 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *
˘x
);

426 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

427 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

437 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

438 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

448 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

449 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

459 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

460 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

471 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

472 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

473 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

483 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

484 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

487 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

488 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

489 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

490 
EC_POINT
 *, 
BN_CTX
 *);

491 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

492 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

493 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

494 
EC_POINT
 *, 
BN_CTX
 *);

509 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

518 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *
˘x
);

526 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

533 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

541 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

550 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

552 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

553 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
, 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

565 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
, c⁄° EC_POINT *
p
[], c⁄° BIGNUM *
m
[], 
BN_CTX
 *
˘x
);

576 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, c⁄° EC_POINT *
q
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

583 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

589 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

598 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

600 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

602 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

604 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

605 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

607 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

608 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

609 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

610 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

611 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

612 (*)(
x
))

	)

614 #i‚de‡
OPENSSL_NO_BIO


615 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

617 #i‚de‡
OPENSSL_NO_FP_API


618 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

626 
ec_key_°
 
	tEC_KEY
;

629 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

630 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

633 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

634 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

639 
EC_KEY
 *
EC_KEY_√w
();

641 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

643 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

645 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

652 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

657 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

664 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

670 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

676 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

682 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

690 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

696 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

704 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

710 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

718 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

720 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

721 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

722 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

723 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

725 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *
key
,

726 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

735 *
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *
key
, *
d©a
,

736 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

738 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

746 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

752 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

758 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

767 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
, BIGNUM *
y
);

780 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

788 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

802 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

810 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

825 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

833 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

835 #i‚de‡
OPENSSL_NO_BIO


841 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

849 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

852 #i‚de‡
OPENSSL_NO_FP_API


858 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

866 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

870 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

872 #i‚de‡
__˝lu•lus


873 #i‡
deföed
(
__SUNPRO_C
)

874 #i‡
__SUNPRO_C
 >= 0x520

875 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

880 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

881 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, 
EVP_PKEY_OP_PARAMGEN
, \

882 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

885 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

891 
ERR_lﬂd_EC_°rögs
();

896 
	#EC_F_BN_TO_FELEM
 224

	)

897 
	#EC_F_COMPUTE_WNAF
 143

	)

898 
	#EC_F_D2I_ECPARAMETERS
 144

	)

899 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

900 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

901 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

902 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

903 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

904 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

905 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

906 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

907 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

908 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

909 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

910 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

911 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

912 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

913 
	#EC_F_ECP_NIST_MOD_192
 203

	)

914 
	#EC_F_ECP_NIST_MOD_224
 204

	)

915 
	#EC_F_ECP_NIST_MOD_256
 205

	)

916 
	#EC_F_ECP_NIST_MOD_521
 206

	)

917 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

918 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

919 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

920 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

921 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

922 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

923 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

924 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

925 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

926 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

927 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

928 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

929 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

930 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

931 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

932 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

933 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

934 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

935 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

936 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

937 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

938 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

939 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

940 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

941 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

942 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

943 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

944 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

945 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

946 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

947 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

948 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

949 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

950 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

951 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

952 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

953 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

954 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

955 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

956 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

957 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

958 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

959 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

960 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

961 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

962 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

963 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

964 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

965 
	#EC_F_EC_GROUP_CHECK
 170

	)

966 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

967 
	#EC_F_EC_GROUP_COPY
 106

	)

968 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

969 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

970 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

971 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

972 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

973 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

974 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

975 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

976 
	#EC_F_EC_GROUP_NEW
 108

	)

977 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

978 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

979 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

980 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

981 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

982 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

983 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

984 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

985 
	#EC_F_EC_KEY_COPY
 178

	)

986 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

987 
	#EC_F_EC_KEY_NEW
 182

	)

988 
	#EC_F_EC_KEY_PRINT
 180

	)

989 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

990 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

991 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

992 
	#EC_F_EC_POINT_ADD
 112

	)

993 
	#EC_F_EC_POINT_CMP
 113

	)

994 
	#EC_F_EC_POINT_COPY
 114

	)

995 
	#EC_F_EC_POINT_DBL
 115

	)

996 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

997 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

998 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

999 
	#EC_F_EC_POINT_INVERT
 210

	)

1000 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1001 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1002 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1003 
	#EC_F_EC_POINT_MUL
 184

	)

1004 
	#EC_F_EC_POINT_NEW
 121

	)

1005 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1006 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1007 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1008 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1009 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1010 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1011 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1012 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1013 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1014 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1015 
	#EC_F_EC_WNAF_MUL
 187

	)

1016 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1017 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1018 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1019 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1020 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1021 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1022 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1023 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1024 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1025 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1026 
	#EC_F_PKEY_EC_CTRL
 197

	)

1027 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1028 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1029 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1030 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1031 
	#EC_F_PKEY_EC_SIGN
 218

	)

1034 
	#EC_R_ASN1_ERROR
 115

	)

1035 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1036 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1037 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1038 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1039 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1040 
	#EC_R_DECODE_ERROR
 142

	)

1041 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1042 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1043 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1044 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1045 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1046 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1047 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1048 
	#EC_R_INVALID_ARGUMENT
 112

	)

1049 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1050 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1051 
	#EC_R_INVALID_CURVE
 141

	)

1052 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1053 
	#EC_R_INVALID_ENCODING
 102

	)

1054 
	#EC_R_INVALID_FIELD
 103

	)

1055 
	#EC_R_INVALID_FORM
 104

	)

1056 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1057 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1058 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1059 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1060 
	#EC_R_KEYS_NOT_SET
 140

	)

1061 
	#EC_R_MISSING_PARAMETERS
 124

	)

1062 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1063 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1064 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1065 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1066 
	#EC_R_NOT_INITIALIZED
 111

	)

1067 
	#EC_R_NO_FIELD_MOD
 133

	)

1068 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1069 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1070 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1071 
	#EC_R_POINT_AT_INFINITY
 106

	)

1072 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1073 
	#EC_R_SLOT_FULL
 108

	)

1074 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1075 
	#EC_R_UNDEFINED_ORDER
 128

	)

1076 
	#EC_R_UNKNOWN_GROUP
 129

	)

1077 
	#EC_R_UNKNOWN_ORDER
 114

	)

1078 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1079 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1080 
	#EC_R_WRONG_ORDER
 130

	)

1082 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 
	#EC_FLAG_COFACTOR_ECDH
 0x1000

	)

90 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

92 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

93 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

94 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

96 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

97 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

99 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


100 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

101 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

102 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

109 
ERR_lﬂd_ECDH_°rögs
();

114 
	#ECDH_F_ECDH_CHECK
 102

	)

115 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

116 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

119 
	#ECDH_R_KDF_FAILED
 102

	)

120 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

121 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

122 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

124 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

87 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

92 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

100 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

109 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

118 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

142 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

143 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

145 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

150 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

155 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

162 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

168 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

177 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

178 
BIGNUM
 **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

207 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

208 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

209 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

222 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

223 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

226 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


227 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ERR_lﬂd_ECDSA_°rögs
();

241 
	#ECDSA_F_ECDSA_CHECK
 104

	)

242 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

243 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

244 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

245 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

248 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

249 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

250 
	#ECDSA_R_ERR_EC_LIB
 102

	)

251 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

252 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

253 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

254 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

255 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

257 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

78 #ifde‡
OPENSSL_FIPS


79 
	~<›ís¶/fùs.h
>

89 
	#EVP_MAX_MD_SIZE
 64

	)

90 
	#EVP_MAX_KEY_LENGTH
 64

	)

91 
	#EVP_MAX_IV_LENGTH
 16

	)

92 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

94 
	#PKCS5_SALT_LEN
 8

	)

96 
	#PKCS5_DEFAULT_ITER
 2048

	)

98 
	~<›ís¶/obje˘s.h
>

100 
	#EVP_PK_RSA
 0x0001

	)

101 
	#EVP_PK_DSA
 0x0002

	)

102 
	#EVP_PK_DH
 0x0004

	)

103 
	#EVP_PK_EC
 0x0008

	)

104 
	#EVP_PKT_SIGN
 0x0010

	)

105 
	#EVP_PKT_ENC
 0x0020

	)

106 
	#EVP_PKT_EXCH
 0x0040

	)

107 
	#EVP_PKS_RSA
 0x0100

	)

108 
	#EVP_PKS_DSA
 0x0200

	)

109 
	#EVP_PKS_EC
 0x0400

	)

110 
	#EVP_PKT_EXP
 0x1000

	)

112 
	#EVP_PKEY_NONE
 
NID_undef


	)

113 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

114 
	#EVP_PKEY_RSA2
 
NID_rß


	)

115 
	#EVP_PKEY_DSA
 
NID_dß


	)

116 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

117 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

118 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

119 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

120 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

121 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

122 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

123 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

125 #ifdef 
__˝lu•lus


132 
	sevp_pkey_°


134 
ty≥
;

135 
ßve_ty≥
;

136 
ª„ªn˚s
;

137 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

138 
ENGINE
 *
ígöe
;

140 *
±r
;

141 #i‚de‡
OPENSSL_NO_RSA


142 
rß_°
 *
rß
;

144 #i‚de‡
OPENSSL_NO_DSA


145 
dß_°
 *
dß
;

147 #i‚de‡
OPENSSL_NO_DH


148 
dh_°
 *
dh
;

150 #i‚de‡
OPENSSL_NO_EC


151 
ec_key_°
 *
ec
;

153 } 
pkey
;

154 
ßve_∑ømëîs
;

155 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

158 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

159 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

160 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

161 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

163 #i‚de‡
EVP_MD


164 
	sív_md_°


166 
ty≥
;

167 
pkey_ty≥
;

168 
md_size
;

169 
Êags
;

170 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

171 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

172 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

173 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

174 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

177 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

178 *
sigªt
, *
sigÀn
, *
key
);

179 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

180 c⁄° *
sigbuf
, 
sigÀn
,

181 *
key
);

182 
ªquúed_pkey_ty≥
[5];

183 
block_size
;

184 
˘x_size
;

186 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

189 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

190 
	tm_Àngth
,*
	tsigªt
,

191 *
	tsigÀn
, *
	tkey
);

192 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

193 
	tm_Àngth
,c⁄° *
	tsigbuf
,

194 
	tsigÀn
, *
	tkey
);

196 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

199 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

206 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

210 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

214 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

218 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

222 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

224 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

228 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

229 
	#EVP_MD_CTRL_MICALG
 0x2

	)

233 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

235 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

237 #i‚de‡
OPENSSL_NO_DSA


238 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

239 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

240 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

241 
EVP_PKEY_DSA4
,0}

	)

243 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

246 #i‚de‡
OPENSSL_NO_ECDSA


247 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

248 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

249 {
EVP_PKEY_EC
,0,0,0}

	)

251 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

254 #i‚de‡
OPENSSL_NO_RSA


255 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

256 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

257 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

258 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

259 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

260 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

261 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

263 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

264 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

269 
	sív_md_˘x_°


271 c⁄° 
EVP_MD
 *
dige°
;

272 
ENGINE
 *
ígöe
;

273 
Êags
;

274 *
md_d©a
;

276 
EVP_PKEY_CTX
 *
p˘x
;

278 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

283 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

285 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

287 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

289 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

296 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

297 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

298 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

299 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

300 
	#M_EVP_MD_CTX_FLAG_PSS_SALT
(
˘x
) \

301 ((
˘x
->
Êags
>>16Ë&0xFFFFË

	)

302 
	#EVP_MD_CTX_FLAG_PSS_MDLEN
 0xFFFF

	)

303 
	#EVP_MD_CTX_FLAG_PSS_MREC
 0xFFFE

	)

305 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

307 
	sevp_cùhî_°


309 
nid
;

310 
block_size
;

311 
key_Àn
;

312 
iv_Àn
;

313 
Êags
;

314 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

315 c⁄° *
iv
, 
íc
);

316 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

317 c⁄° *
ö
, 
size_t
 
öl
);

318 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

319 
˘x_size
;

320 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

321 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

322 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

323 *
≠p_d©a
;

330 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

331 
	#EVP_CIPH_ECB_MODE
 0x1

	)

332 
	#EVP_CIPH_CBC_MODE
 0x2

	)

333 
	#EVP_CIPH_CFB_MODE
 0x3

	)

334 
	#EVP_CIPH_OFB_MODE
 0x4

	)

335 
	#EVP_CIPH_CTR_MODE
 0x5

	)

336 
	#EVP_CIPH_GCM_MODE
 0x6

	)

337 
	#EVP_CIPH_CCM_MODE
 0x7

	)

338 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

339 
	#EVP_CIPH_MODE
 0xF0007

	)

341 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

343 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

345 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

347 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

349 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

351 
	#EVP_CIPH_NO_PADDING
 0x100

	)

353 
	#EVP_CIPH_RAND_KEY
 0x200

	)

355 
	#EVP_CIPH_CUSTOM_COPY
 0x4000

	)

357 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

359 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

361 
	#EVP_CIPH_FLAG_FIPS
 0x400

	)

363 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x800

	)

367 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

368 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

372 
	#EVP_CTRL_INIT
 0x0

	)

373 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

374 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

375 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

376 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

377 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

378 
	#EVP_CTRL_RAND_KEY
 0x6

	)

379 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

380 
	#EVP_CTRL_COPY
 0x8

	)

381 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

382 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

383 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

384 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

385 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

386 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

387 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

388 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

389 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

390 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

395 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

397 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

399 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

403 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

405 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

407 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

409 
	sevp_cùhî_öfo_°


411 c⁄° 
EVP_CIPHER
 *
cùhî
;

412 
iv
[
EVP_MAX_IV_LENGTH
];

413 } 
	tEVP_CIPHER_INFO
;

415 
	sevp_cùhî_˘x_°


417 c⁄° 
EVP_CIPHER
 *
cùhî
;

418 
ENGINE
 *
ígöe
;

419 
í¸y±
;

420 
buf_Àn
;

422 
oiv
[
EVP_MAX_IV_LENGTH
];

423 
iv
[
EVP_MAX_IV_LENGTH
];

424 
buf
[
EVP_MAX_BLOCK_LENGTH
];

425 
num
;

427 *
≠p_d©a
;

428 
key_Àn
;

429 
Êags
;

430 *
cùhî_d©a
;

431 
föÆ_u£d
;

432 
block_mask
;

433 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

436 
	sevp_Encode_Ctx_°


438 
num
;

439 
Àngth
;

444 
íc_d©a
[80];

445 
löe_num
;

446 
ex≥˘_∆
;

447 } 
	tEVP_ENCODE_CTX
;

450 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

451 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

452 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

454 #i‚de‡
OPENSSL_NO_RSA


455 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

456 (*)(
rß
))

	)

459 #i‚de‡
OPENSSL_NO_DSA


460 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

461 (*)(
dß
))

	)

464 #i‚de‡
OPENSSL_NO_DH


465 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

466 (*)(
dh
))

	)

469 #i‚de‡
OPENSSL_NO_EC


470 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

471 (*)(
eckey
))

	)

475 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

476 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

477 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

478 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

480 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

481 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

482 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

483 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

484 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

485 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

486 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

488 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

489 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

490 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

491 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

493 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

494 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

495 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

496 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

497 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

498 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

499 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

501 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

503 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

504 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

505 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

506 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

507 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

508 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

509 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

510 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

511 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

513 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

514 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

516 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

517 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

518 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

519 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

520 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

521 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

522 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

523 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

524 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

525 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

527 #ifde‡
CONST_STRICT


528 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

530 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

532 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

533 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

534 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

535 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

536 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

538 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

539 *
out
,

540 c⁄° *
ö
,

541 
öl
);

543 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

544 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

545 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

546 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

547 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

548 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

549 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

550 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

552 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

553 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

554 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

555 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

556 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

557 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

558 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

559 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

560 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

561 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

562 
size_t
 
˙t
);

563 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

564 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

565 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

567 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

568 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

569 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

571 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

572 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

573 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

574 * 
EVP_gë_pw_¥om±
();

576 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

577 c⁄° *
ß…
, c⁄° *
d©a
,

578 
d©Æ
, 
cou¡
, *
key
,*
iv
);

580 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

581 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

582 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

584 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

585 c⁄° *
key
, c⁄° *
iv
);

586 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

587 c⁄° *
key
, c⁄° *
iv
);

588 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

589 *
oué
, c⁄° *
ö
, 
öl
);

590 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

591 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

593 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

594 c⁄° *
key
, c⁄° *
iv
);

595 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

596 c⁄° *
key
, c⁄° *
iv
);

597 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

598 *
oué
, c⁄° *
ö
, 
öl
);

599 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

600 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

602 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

603 c⁄° *
key
,c⁄° *
iv
,

604 
íc
);

605 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

606 c⁄° *
key
,c⁄° *
iv
,

607 
íc
);

608 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

609 *
oué
, c⁄° *
ö
, 
öl
);

610 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

611 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

613 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

614 
EVP_PKEY
 *
pkey
);

616 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

617 
sigÀn
,
EVP_PKEY
 *
pkey
);

619 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

620 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

621 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

622 *
sigªt
, 
size_t
 *
sigÀn
);

624 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

625 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

626 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

627 *
sig
, 
size_t
 
sigÀn
);

629 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

630 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

631 
EVP_PKEY
 *
¥iv
);

632 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

634 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

635 **
ek
, *
ekl
, *
iv
,

636 
EVP_PKEY
 **
pubk
, 
≈ubk
);

637 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

639 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

640 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

641 c⁄° *
ö
,
öl
);

642 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

643 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

645 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

646 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

647 c⁄° *
ö
, 
öl
);

648 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

649 *
out
, *
oué
);

650 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

652 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

653 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

654 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

655 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

656 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

657 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

658 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

659 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

661 #i‚de‡
OPENSSL_NO_BIO


662 
BIO_METHOD
 *
BIO_f_md
();

663 
BIO_METHOD
 *
BIO_f_ba£64
();

664 
BIO_METHOD
 *
BIO_f_cùhî
();

665 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

666 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

667 c⁄° *
i
, 
íc
);

670 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

671 #i‚de‡
OPENSSL_NO_MD2


672 c⁄° 
EVP_MD
 *
EVP_md2
();

674 #i‚de‡
OPENSSL_NO_MD4


675 c⁄° 
EVP_MD
 *
EVP_md4
();

677 #i‚de‡
OPENSSL_NO_MD5


678 c⁄° 
EVP_MD
 *
EVP_md5
();

680 #i‚de‡
OPENSSL_NO_SHA


681 c⁄° 
EVP_MD
 *
EVP_sha
();

682 c⁄° 
EVP_MD
 *
EVP_sha1
();

683 c⁄° 
EVP_MD
 *
EVP_dss
();

684 c⁄° 
EVP_MD
 *
EVP_dss1
();

685 c⁄° 
EVP_MD
 *
EVP_ecdß
();

687 #i‚de‡
OPENSSL_NO_SHA256


688 c⁄° 
EVP_MD
 *
EVP_sha224
();

689 c⁄° 
EVP_MD
 *
EVP_sha256
();

691 #i‚de‡
OPENSSL_NO_SHA512


692 c⁄° 
EVP_MD
 *
EVP_sha384
();

693 c⁄° 
EVP_MD
 *
EVP_sha512
();

695 #i‚de‡
OPENSSL_NO_MDC2


696 c⁄° 
EVP_MD
 *
EVP_mdc2
();

698 #i‚de‡
OPENSSL_NO_RIPEMD


699 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

701 #i‚de‡
OPENSSL_NO_WHIRLPOOL


702 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

704 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

705 #i‚de‡
OPENSSL_NO_DES


706 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

708 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

709 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

710 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

711 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

712 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

713 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

714 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

715 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

716 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

718 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

719 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

721 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

722 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

725 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

727 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

728 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

729 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

730 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

731 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

735 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


736 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

737 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

738 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

742 #i‚de‡
OPENSSL_NO_RC4


743 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

744 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

745 #i‚de‡
OPENSSL_NO_MD5


746 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

749 #i‚de‡
OPENSSL_NO_IDEA


750 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

751 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

752 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

753 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

754 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

756 #i‚de‡
OPENSSL_NO_RC2


757 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

758 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

759 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

760 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

761 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

762 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

763 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

765 #i‚de‡
OPENSSL_NO_BF


766 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

767 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

768 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

769 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

770 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

772 #i‚de‡
OPENSSL_NO_CAST


773 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

774 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

775 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

776 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

777 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

779 #i‚de‡
OPENSSL_NO_AES


780 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

781 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

782 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

783 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

784 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

785 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

789 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

792 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

794 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

796 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

799 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

800 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

802 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

804 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

805 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

806 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

807 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

808 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

810 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

812 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

814 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

817 #i‚de‡
OPENSSL_NO_CAMELLIA


818 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

819 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

820 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

821 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

823 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

826 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

827 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

828 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

829 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

830 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

831 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

832 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

833 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

834 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

835 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

836 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

837 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

838 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

841 #i‚de‡
OPENSSL_NO_SEED


842 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

843 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

844 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

845 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

846 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

849 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

850 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

852 #ifde‡
OPENSSL_LOAD_CONF


853 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

854 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

856 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

857 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

860 
O≥nSSL_add_Æl_cùhîs
();

861 
O≥nSSL_add_Æl_dige°s
();

862 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

863 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

864 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

866 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

867 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

869 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

870 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

871 
EVP_˛ónup
();

873 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

874 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

875 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

876 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

878 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

879 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

880 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

881 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

883 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

884 c⁄° *
íc_key
,
íc_key_Àn
,

885 
EVP_PKEY
 *
¥iv©e_key
);

886 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

887 c⁄° *
key
,
key_Àn
,

888 
EVP_PKEY
 *
pub_key
);

889 
EVP_PKEY_ty≥
(
ty≥
);

890 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

891 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

892 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

893 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

894 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

895 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

896 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

897 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

899 #i‚de‡
OPENSSL_NO_RSA


900 
rß_°
;

901 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

902 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

904 #i‚de‡
OPENSSL_NO_DSA


905 
dß_°
;

906 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

907 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

909 #i‚de‡
OPENSSL_NO_DH


910 
dh_°
;

911 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

912 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

914 #i‚de‡
OPENSSL_NO_EC


915 
ec_key_°
;

916 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

917 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

920 
EVP_PKEY
 * 
EVP_PKEY_√w
();

921 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

923 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

924 
Àngth
);

925 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

927 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

928 
Àngth
);

929 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

930 
Àngth
);

931 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

933 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

934 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

935 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

936 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

938 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

940 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

941 
ödít
, 
ASN1_PCTX
 *
p˘x
);

942 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

943 
ödít
, 
ASN1_PCTX
 *
p˘x
);

944 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

945 
ödít
, 
ASN1_PCTX
 *
p˘x
);

947 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

949 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

952 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

953 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

956 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

957 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

960 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

961 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

962 
í_de
);

963 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

964 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

965 
keyÀn
, *
out
);

966 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

967 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

968 c⁄° 
EVP_MD
 *
dige°
,

969 
keyÀn
, *
out
);

970 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

971 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

972 
í_de
);

974 
PKCS5_PBE_add
();

976 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

977 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

982 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

984 
	#EVP_PBE_TYPE_PRF
 0x1

	)

986 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

987 
EVP_PBE_KEYGEN
 *
keygí
);

988 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

989 
EVP_PBE_KEYGEN
 *
keygí
);

990 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

991 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

992 
EVP_PBE_˛ónup
();

994 
	#ASN1_PKEY_ALIAS
 0x1

	)

995 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

996 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

998 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

999 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1000 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1001 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1002 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1004 
EVP_PKEY_a¢1_gë_cou¡
();

1005 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1006 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1007 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1008 c⁄° *
°r
, 
Àn
);

1009 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1010 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1011 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

1012 c⁄° **
pöfo
, c⁄° **
µem_°r
,

1013 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1015 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1016 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1017 c⁄° *
≥m_°r
, c⁄° *
öfo
);

1018 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1019 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1020 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1021 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1022 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

1023 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

1024 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1025 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1026 
ASN1_PCTX
 *
p˘x
),

1027 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

1028 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

1029 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1030 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

1031 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

1032 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1033 
ASN1_PCTX
 *
p˘x
));

1034 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1035 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

1036 c⁄° **
pdî
, 
dîÀn
),

1037 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

1038 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

1039 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

1040 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1041 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1042 
ASN1_PCTX
 *
p˘x
));

1044 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1045 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

1046 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1047 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

1048 
¨g1
, *
¨g2
));

1051 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1052 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1053 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1054 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1055 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1056 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1057 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1058 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1059 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1060 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1061 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1063 
	#EVP_PKEY_OP_TYPE_SIG
 \

1064 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1065 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1067 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1068 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1070 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1071 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1073 
	#EVP_PKEY_OP_TYPE_GEN
 \

1074 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1076 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1077 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1078 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1080 
	#EVP_PKEY_CTRL_MD
 1

	)

1081 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1083 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1084 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1086 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1088 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1090 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1093 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1095 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1096 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1097 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1099 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1101 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1104 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1108 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1110 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1111 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1112 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1113 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1114 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1115 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1116 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1118 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1119 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1120 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1121 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1123 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1124 
cmd
, 
p1
, *
p2
);

1125 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1126 c⁄° *
vÆue
);

1128 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1129 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1131 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1132 c⁄° *
key
, 
keyÀn
);

1134 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1135 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1136 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1138 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1140 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1141 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1143 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1144 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1145 *
sig
, 
size_t
 *
sigÀn
,

1146 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1147 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1148 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1149 c⁄° *
sig
, 
size_t
 
sigÀn
,

1150 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1151 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1152 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1153 *
rout
, 
size_t
 *
rouéí
,

1154 c⁄° *
sig
, 
size_t
 
sigÀn
);

1155 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1156 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1157 *
out
, 
size_t
 *
ouéí
,

1158 c⁄° *
ö
, 
size_t
 
öÀn
);

1159 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1160 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1161 *
out
, 
size_t
 *
ouéí
,

1162 c⁄° *
ö
, 
size_t
 
öÀn
);

1164 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1165 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1166 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1168 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1170 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1171 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1172 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1173 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1175 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1176 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1178 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1180 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1181 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1183 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1184 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1186 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1187 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1189 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1190 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1191 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1193 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1194 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1195 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1197 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1198 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1199 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1200 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1202 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1203 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1204 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1205 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1207 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1208 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1209 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1210 *
sig
, 
size_t
 *
sigÀn
,

1211 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1213 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1214 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1215 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1216 
EVP_MD_CTX
 *
m˘x
));

1218 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1219 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1220 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1221 
EVP_MD_CTX
 *
m˘x
));

1223 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1224 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1225 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1226 c⁄° *
ö
, 
size_t
 
öÀn
));

1228 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1229 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1230 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1231 c⁄° *
ö
, 
size_t
 
öÀn
));

1233 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1234 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1235 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1237 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1238 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1239 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1240 c⁄° *
ty≥
, c⁄° *
vÆue
));

1242 
EVP_add_Æg_moduÀ
();

1248 
ERR_lﬂd_EVP_°rögs
();

1253 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1254 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1255 
	#EVP_F_AES_INIT_KEY
 133

	)

1256 
	#EVP_F_AES_XTS
 172

	)

1257 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1258 
	#EVP_F_ALG_MODULE_INIT
 177

	)

1259 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1260 
	#EVP_F_CMAC_INIT
 173

	)

1261 
	#EVP_F_D2I_PKEY
 100

	)

1262 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1263 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1264 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1265 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1266 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1267 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1268 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1269 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1270 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1271 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1272 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1273 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1274 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1275 
	#EVP_F_EVP_MD_SIZE
 162

	)

1276 
	#EVP_F_EVP_OPENINIT
 102

	)

1277 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1278 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1279 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1280 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1281 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1282 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1283 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1284 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1285 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1286 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1287 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1288 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1289 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1290 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1291 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1292 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1293 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1294 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1295 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1296 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1297 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1298 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1299 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1300 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1301 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1302 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1303 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1304 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1305 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1306 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1307 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1308 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1309 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1310 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1311 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1312 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1313 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1314 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1315 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1316 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1317 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1318 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1319 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1320 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1321 
	#EVP_F_HMAC_INIT_EX
 174

	)

1322 
	#EVP_F_INT_CTX_NEW
 157

	)

1323 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1324 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1325 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1326 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1327 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1328 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1329 
	#EVP_F_RC5_CTRL
 125

	)

1332 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1333 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1334 
	#EVP_R_ASN1_LIB
 140

	)

1335 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1336 
	#EVP_R_BAD_DECRYPT
 100

	)

1337 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1338 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1339 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1340 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1341 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1342 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1343 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1344 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1345 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1346 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1347 
	#EVP_R_DECODE_ERROR
 114

	)

1348 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1349 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1350 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1351 
	#EVP_R_ENCODE_ERROR
 115

	)

1352 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

1353 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

1354 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1355 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1356 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1357 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1358 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1359 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1360 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

1361 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1362 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1363 
	#EVP_R_INVALID_DIGEST
 152

	)

1364 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

1365 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1366 
	#EVP_R_INVALID_OPERATION
 148

	)

1367 
	#EVP_R_IV_TOO_LARGE
 102

	)

1368 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1369 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1370 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1371 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1372 
	#EVP_R_NO_CIPHER_SET
 131

	)

1373 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1374 
	#EVP_R_NO_DIGEST_SET
 139

	)

1375 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1376 
	#EVP_R_NO_KEY_SET
 154

	)

1377 
	#EVP_R_NO_OPERATION_SET
 149

	)

1378 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1379 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1380 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1381 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1382 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1383 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1384 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1385 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1386 
	#EVP_R_TOO_LARGE
 164

	)

1387 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1388 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1389 
	#EVP_R_UNKNOWN_OPTION
 169

	)

1390 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1391 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1392 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1393 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1394 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1395 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1396 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1397 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1398 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1399 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1400 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1401 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1403 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

7 #ifde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


10 
	#›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	)

12 #i‡
deföed
(
__i386__
)

13 
	~"›ís¶c⁄f-i386.h
"

14 #ñi‡
deföed
(
__ü64__
)

15 
	~"›ís¶c⁄f-ü64.h
"

16 #ñi‡
deföed
(
__powîpc64__
)

17 
	~"›ís¶c⁄f-µc64.h
"

18 #ñi‡
deföed
(
__powîpc__
)

19 
	~"›ís¶c⁄f-µc.h
"

20 #ñi‡
deföed
(
__s390x__
)

21 
	~"›ís¶c⁄f-s390x.h
"

22 #ñi‡
deföed
(
__s390__
)

23 
	~"›ís¶c⁄f-s390.h
"

24 #ñi‡
deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

25 
	~"›ís¶c⁄f-•¨c64.h
"

26 #ñi‡
deföed
(
__•¨c__
)

27 
	~"›ís¶c⁄f-•¨c.h
"

28 #ñi‡
deföed
(
__x86_64__
)

29 
	~"›ís¶c⁄f-x86_64.h
"

34 #unde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x1000105fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1e-fù†11 Feb 2013"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1ê11 Feb 2013"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "1.0.1e"

	)

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

236 
	#PKCS7_ty≥_is_í¸y±ed
(
a
) \

237 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

239 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

241 
	#PKCS7_£t_dëached
(
p
,
v
) \

242 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

243 
	#PKCS7_gë_dëached
(
p
) \

244 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

246 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

250 
	#PKCS7_TEXT
 0x1

	)

251 
	#PKCS7_NOCERTS
 0x2

	)

252 
	#PKCS7_NOSIGS
 0x4

	)

253 
	#PKCS7_NOCHAIN
 0x8

	)

254 
	#PKCS7_NOINTERN
 0x10

	)

255 
	#PKCS7_NOVERIFY
 0x20

	)

256 
	#PKCS7_DETACHED
 0x40

	)

257 
	#PKCS7_BINARY
 0x80

	)

258 
	#PKCS7_NOATTR
 0x100

	)

259 
	#PKCS7_NOSMIMECAP
 0x200

	)

260 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

261 
	#PKCS7_CRLFEOL
 0x800

	)

262 
	#PKCS7_STREAM
 0x1000

	)

263 
	#PKCS7_NOCRL
 0x2000

	)

264 
	#PKCS7_PARTIAL
 0x4000

	)

265 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

269 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

270 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

271 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

272 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

273 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

274 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

275 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

276 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

277 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

281 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

282 *
md
,*
Àn
);

283 #i‚de‡
OPENSSL_NO_FP_API


284 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

285 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

287 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

288 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

289 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

290 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

291 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

303 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

304 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

306 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

307 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

309 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

311 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

312 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

313 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

314 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

315 c⁄° 
EVP_MD
 *
dg°
);

316 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

317 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

318 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

319 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

320 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

321 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

322 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

323 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

324 
X509
 *
x509
);

326 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

327 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

328 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

331 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

332 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

333 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

334 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

335 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

337 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

338 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

339 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

340 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

341 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

342 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

343 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

344 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

346 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

347 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

348 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

349 *
d©a
);

350 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

351 *
vÆue
);

352 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

353 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

354 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

355 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

359 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

360 
BIO
 *
d©a
, 
Êags
);

362 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

363 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

364 
Êags
);

366 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

367 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

368 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

369 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

370 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

371 
Êags
);

372 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

374 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

375 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

376 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

377 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

379 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

380 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

381 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

382 c⁄° *
md
, 
mdÀn
);

384 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

385 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

387 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

394 
ERR_lﬂd_PKCS7_°rögs
();

399 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

400 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

401 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

402 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

403 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

404 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

405 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

406 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

407 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

408 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

409 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

410 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

411 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

412 
	#PKCS7_F_PKCS7_CTRL
 104

	)

413 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

414 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

415 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

416 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

417 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

418 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

419 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

420 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

421 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

422 
	#PKCS7_F_PKCS7_FINAL
 134

	)

423 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

424 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

425 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

426 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

427 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

428 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

429 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

430 
	#PKCS7_F_PKCS7_SIGN
 116

	)

431 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

432 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

433 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

434 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

435 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

436 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

437 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

438 
	#PKCS7_F_SMIME_TEXT
 123

	)

441 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

442 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

443 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

444 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

445 
	#PKCS7_R_CTRL_ERROR
 152

	)

446 
	#PKCS7_R_DECODE_ERROR
 130

	)

447 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

448 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

449 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

450 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

451 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

452 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

453 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

454 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

455 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

456 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

457 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

458 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

459 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

460 
	#PKCS7_R_NO_CONTENT
 122

	)

461 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

462 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

463 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

464 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

465 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

466 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

467 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

468 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

469 
	#PKCS7_R_NO_SIGNERS
 142

	)

470 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

471 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

472 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

473 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

474 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

475 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

476 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

477 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

478 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

479 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

480 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

481 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

482 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

483 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

484 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

485 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

486 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

487 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

488 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

489 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

490 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

491 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

492 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

493 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

494 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 
_pqueue
 *
	tpqueue
;

69 
	s_pôem


71 
	m¥i‹ôy
[8];

72 *
	md©a
;

73 
_pôem
 *
	m√xt
;

74 } 
	tpôem
;

76 
_pôem
 *
	tpôî©‹
;

78 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

79 
pôem_‰ì
(
pôem
 *
ôem
);

81 
pqueue
 
pqueue_√w
();

82 
pqueue_‰ì
(
pqueue
 
pq
);

84 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

85 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

87 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

88 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

91 
pqueue_¥öt
(
pqueue
 
pq
);

92 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°


87 c⁄° *
«me
;

88 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

89 *
to
,

90 
RSA
 *
rß
,
∑ddög
);

91 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

92 *
to
,

93 
RSA
 *
rß
,
∑ddög
);

94 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

95 *
to
,

96 
RSA
 *
rß
,
∑ddög
);

97 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

98 *
to
,

99 
RSA
 *
rß
,
∑ddög
);

100 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

102 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

103 
BN_MONT_CTX
 *
m_˘x
);

104 (*
öô
)(
RSA
 *
rß
);

105 (*
föish
)(
RSA
 *
rß
);

106 
Êags
;

107 *
≠p_d©a
;

115 (*
rß_sign
)(
ty≥
,

116 c⁄° *
m
, 
m_Àngth
,

117 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

118 (*
rß_vîify
)(
dty≥
,

119 c⁄° *
m
, 
m_Àngth
,

120 c⁄° *
sigbuf
, 
sigÀn
,

121 c⁄° 
RSA
 *
rß
);

126 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

129 
	srß_°


133 
∑d
;

134 
vîsi⁄
;

135 c⁄° 
RSA_METHOD
 *
mëh
;

137 
ENGINE
 *
ígöe
;

138 
BIGNUM
 *
n
;

139 
BIGNUM
 *
e
;

140 
BIGNUM
 *
d
;

141 
BIGNUM
 *
p
;

142 
BIGNUM
 *
q
;

143 
BIGNUM
 *
dmp1
;

144 
BIGNUM
 *
dmq1
;

145 
BIGNUM
 *
iqmp
;

147 
CRYPTO_EX_DATA
 
ex_d©a
;

148 
ª„ªn˚s
;

149 
Êags
;

152 
BN_MONT_CTX
 *
_mëhod_mod_n
;

153 
BN_MONT_CTX
 *
_mëhod_mod_p
;

154 
BN_MONT_CTX
 *
_mëhod_mod_q
;

158 *
bignum_d©a
;

159 
BN_BLINDING
 *
blödög
;

160 
BN_BLINDING
 *
mt_blödög
;

163 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


164 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

167 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

169 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


170 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

172 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


173 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

176 
	#RSA_3
 0x3L

	)

177 
	#RSA_F4
 0x10001L

	)

179 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

181 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

182 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

183 
	#RSA_FLAG_BLINDING
 0x0008

	)

184 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

190 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

194 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

196 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

201 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

211 #i‚de‡
OPENSSL_NO_DEPRECATED


212 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

223 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

224 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

225 
∑d
, 
NULL
)

	)

227 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

228 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

229 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

231 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

232 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

233 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

234 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

235 
Àn
, 
NULL
)

	)

237 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

238 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

239 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

240 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

241 0, 
∂í
)

	)

243 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

244 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

245 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

247 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

248 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

249 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

251 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

252 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

253 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

255 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

256 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

257 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

259 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

260 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

262 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

263 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

264 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

266 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

267 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

268 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

270 
	#RSA_PKCS1_PADDING
 1

	)

271 
	#RSA_SSLV23_PADDING
 2

	)

272 
	#RSA_NO_PADDING
 3

	)

273 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

274 
	#RSA_X931_PADDING
 5

	)

276 
	#RSA_PKCS1_PSS_PADDING
 6

	)

278 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

280 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

281 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

283 
RSA
 * 
RSA_√w
();

284 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

285 
RSA_size
(c⁄° 
RSA
 *
rß
);

288 #i‚de‡
OPENSSL_NO_DEPRECATED


289 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

290 (*
ˇŒback
)(,,*),*
cb_¨g
);

294 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

295 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
, BIGNUM *
q2
,

296 c⁄° 
BIGNUM
 *
Xp1
, c⁄° BIGNUM *
Xp2
, c⁄° BIGNUM *
Xp
,

297 c⁄° 
BIGNUM
 *
Xq1
, c⁄° BIGNUM *
Xq2
, c⁄° BIGNUM *
Xq
,

298 c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

299 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

301 
RSA_check_key
(c⁄° 
RSA
 *);

303 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

304 *
to
, 
RSA
 *
rß
,
∑ddög
);

305 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

306 *
to
, 
RSA
 *
rß
,
∑ddög
);

307 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

308 *
to
, 
RSA
 *
rß
,
∑ddög
);

309 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

310 *
to
, 
RSA
 *
rß
,
∑ddög
);

311 
RSA_‰ì
 (
RSA
 *
r
);

313 
RSA_up_ªf
(
RSA
 *
r
);

315 
RSA_Êags
(c⁄° 
RSA
 *
r
);

317 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

318 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

319 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

320 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

323 
RSA_mem‹y_lock
(
RSA
 *
r
);

326 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

328 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

330 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

331 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

333 
	srß_pss_∑øms_°


335 
X509_ALGOR
 *
hashAlg‹ôhm
;

336 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

337 
ASN1_INTEGER
 *
ß…Lígth
;

338 
ASN1_INTEGER
 *
åaûîFõld
;

339 } 
	tRSA_PSS_PARAMS
;

341 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

343 #i‚de‡
OPENSSL_NO_FP_API


344 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

347 #i‚de‡
OPENSSL_NO_BIO


348 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

351 #i‚de‡
OPENSSL_NO_RC4


352 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

353 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

354 
sgckey
);

355 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

356 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

357 
sgckey
);

359 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

360 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

361 
vîify
));

362 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

363 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

364 
vîify
));

369 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

370 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

371 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

372 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

376 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

377 c⁄° *
m
, 
m_Àngth
,

378 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

379 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

380 c⁄° *
m
, 
m_Àngth
,

381 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

383 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

384 
RSA_blödög_off
(
RSA
 *
rß
);

385 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

387 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

388 c⁄° *
f
,
Ê
);

389 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

390 c⁄° *
f
,
Ê
,
rß_Àn
);

391 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

392 c⁄° *
f
,
Ê
);

393 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
,
rß_Àn
);

395 
PKCS1_MGF1
(*
mask
, 
Àn
,

396 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

397 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

398 c⁄° *
f
,
Ê
,

399 c⁄° *
p
,
∂
);

400 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

401 c⁄° *
f
,
Ê
,
rß_Àn
,

402 c⁄° *
p
,
∂
);

403 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

404 c⁄° *
f
,
Ê
);

405 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

406 c⁄° *
f
,
Ê
,
rß_Àn
);

407 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

408 c⁄° *
f
,
Ê
);

409 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

410 c⁄° *
f
,
Ê
,
rß_Àn
);

411 
RSA_∑ddög_add_X931
(*
to
,
éí
,

412 c⁄° *
f
,
Ê
);

413 
RSA_∑ddög_check_X931
(*
to
,
éí
,

414 c⁄° *
f
,
Ê
,
rß_Àn
);

415 
RSA_X931_hash_id
(
nid
);

417 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

418 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

419 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

420 c⁄° *
mHash
,

421 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

423 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

424 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

425 c⁄° *
EM
, 
sLí
);

427 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

428 c⁄° *
mHash
,

429 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
, 
sLí
);

431 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

432 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

433 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

434 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

436 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

437 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

445 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

452 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

456 
	#RSA_FLAG_CHECKED
 0x0800

	)

462 
ERR_lﬂd_RSA_°rögs
();

467 
	#RSA_F_CHECK_PADDING_MD
 140

	)

468 
	#RSA_F_DO_RSA_PRINT
 146

	)

469 
	#RSA_F_INT_RSA_VERIFY
 145

	)

470 
	#RSA_F_MEMORY_LOCK
 100

	)

471 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

472 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

473 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

474 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

475 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

476 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

477 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

478 
	#RSA_F_RSA_CHECK_KEY
 123

	)

479 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

480 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

481 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

482 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

483 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

484 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

485 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

486 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

487 
	#RSA_F_RSA_NEW_METHOD
 106

	)

488 
	#RSA_F_RSA_NULL
 124

	)

489 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

490 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

491 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

492 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

493 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

494 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

495 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

496 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

497 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 158

	)

498 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

499 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

500 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

501 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

502 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

503 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

504 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

505 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

506 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

507 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

508 
	#RSA_F_RSA_PRINT
 115

	)

509 
	#RSA_F_RSA_PRINT_FP
 116

	)

510 
	#RSA_F_RSA_PRIVATE_DECRYPT
 157

	)

511 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 148

	)

512 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

513 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

514 
	#RSA_F_RSA_PUBLIC_DECRYPT
 149

	)

515 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

516 
	#RSA_F_RSA_PUB_DECODE
 139

	)

517 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

518 
	#RSA_F_RSA_SET_DEFAULT_METHOD
 150

	)

519 
	#RSA_F_RSA_SET_METHOD
 151

	)

520 
	#RSA_F_RSA_SIGN
 117

	)

521 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

522 
	#RSA_F_RSA_VERIFY
 119

	)

523 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

524 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

525 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 152

	)

528 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

529 
	#RSA_R_BAD_E_VALUE
 101

	)

530 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

531 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

532 
	#RSA_R_BAD_SIGNATURE
 104

	)

533 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

534 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

535 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

536 
	#RSA_R_DATA_TOO_LARGE
 109

	)

537 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

538 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

539 
	#RSA_R_DATA_TOO_SMALL
 111

	)

540 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

541 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

542 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

543 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

544 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

545 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

546 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

547 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

548 
	#RSA_R_INVALID_HEADER
 137

	)

549 
	#RSA_R_INVALID_KEYBITS
 145

	)

550 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

551 
	#RSA_R_INVALID_MGF1_MD
 156

	)

552 
	#RSA_R_INVALID_PADDING
 138

	)

553 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

554 
	#RSA_R_INVALID_PSS_PARAMETERS
 157

	)

555 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

556 
	#RSA_R_INVALID_SALT_LENGTH
 158

	)

557 
	#RSA_R_INVALID_TRAILER
 139

	)

558 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

559 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

560 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

561 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

562 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

563 
	#RSA_R_NON_FIPS_RSA_METHOD
 149

	)

564 
	#RSA_R_NON_FIPS_METHOD
 149

	)

565 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

566 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

567 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

568 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

569 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 150

	)

570 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

571 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

572 
	#RSA_R_P_NOT_PRIME
 128

	)

573 
	#RSA_R_Q_NOT_PRIME
 129

	)

574 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

575 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

576 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

577 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

578 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

579 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

580 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

581 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

582 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

583 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

584 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

585 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

586 
	#RSA_R_VALUE_MISSING
 147

	)

587 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

589 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

70 #îr‹ 
SHA
 
is
 
dißbÀd
.

73 #i‡
deföed
(
OPENSSL_FIPS
)

74 
	#FIPS_SHA_SIZE_T
 
size_t


	)

84 #i‡
deföed
(
__LP32__
)

85 
	#SHA_LONG
 

	)

86 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

87 
	#SHA_LONG
 

	)

88 
	#SHA_LONG_LOG2
 3

	)

90 
	#SHA_LONG
 

	)

93 
	#SHA_LBLOCK
 16

	)

94 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

97 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

98 
	#SHA_DIGEST_LENGTH
 20

	)

100 
	sSHA°©e_°


102 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

103 
SHA_LONG
 
Nl
,
Nh
;

104 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

105 
num
;

106 } 
	tSHA_CTX
;

108 #i‚de‡
OPENSSL_NO_SHA0


109 #ifde‡
OPENSSL_FIPS


110 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

112 
SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

114 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

115 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

116 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

118 #i‚de‡
OPENSSL_NO_SHA1


119 
SHA1_Inô
(
SHA_CTX
 *
c
);

120 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

121 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

122 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

123 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

126 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

129 
	#SHA224_DIGEST_LENGTH
 28

	)

130 
	#SHA256_DIGEST_LENGTH
 32

	)

132 
	sSHA256°©e_°


134 
SHA_LONG
 
h
[8];

135 
SHA_LONG
 
Nl
,
Nh
;

136 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

137 
num
,
md_Àn
;

138 } 
	tSHA256_CTX
;

140 #i‚de‡
OPENSSL_NO_SHA256


141 
SHA224_Inô
(
SHA256_CTX
 *
c
);

142 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

143 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

144 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

145 
SHA256_Inô
(
SHA256_CTX
 *
c
);

146 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

147 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

148 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

149 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

152 
	#SHA384_DIGEST_LENGTH
 48

	)

153 
	#SHA512_DIGEST_LENGTH
 64

	)

155 #i‚de‡
OPENSSL_NO_SHA512


161 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

164 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

165 
	#SHA_LONG64
 
__öt64


	)

166 
	#U64
(
C
ËC##
UI64


	)

167 #ñi‡
deföed
(
__¨ch64__
)

168 
	#SHA_LONG64
 

	)

169 
	#U64
(
C
ËC##
UL


	)

171 
	#SHA_LONG64
 

	)

172 
	#U64
(
C
ËC##
ULL


	)

175 
	sSHA512°©e_°


177 
SHA_LONG64
 
h
[8];

178 
SHA_LONG64
 
Nl
,
Nh
;

180 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

181 
p
[
SHA512_CBLOCK
];

182 } 
u
;

183 
num
,
md_Àn
;

184 } 
	tSHA512_CTX
;

187 #i‚de‡
OPENSSL_NO_SHA512


188 
SHA384_Inô
(
SHA512_CTX
 *
c
);

189 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

190 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

191 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

192 
SHA512_Inô
(
SHA512_CTX
 *
c
);

193 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

194 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

195 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

196 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

199 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

393 
	#X509_V_FLAG_TRUSTED_FIRST
 0x8000

	)

396 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

397 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

398 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

399 
	#X509_VP_FLAG_LOCKED
 0x8

	)

400 
	#X509_VP_FLAG_ONCE
 0x10

	)

403 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

404 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

405 | 
X509_V_FLAG_INHIBIT_ANY
 \

406 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

408 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

409 
X509_NAME
 *
«me
);

410 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

411 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

412 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

413 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

414 
X509_STORE
 *
X509_STORE_√w
();

415 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

417 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

418 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

419 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

420 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

421 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

422 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

424 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

425 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

427 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

429 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

431 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

432 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

433 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

434 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

435 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

437 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

439 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

440 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

442 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

443 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

445 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

446 
X509_OBJECT
 *
ªt
);

448 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

449 
¨gl
, **
ªt
);

451 #i‚de‡
OPENSSL_NO_STDIO


452 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

453 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

454 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

458 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

459 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

460 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

461 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

462 
X509_OBJECT
 *
ªt
);

463 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

464 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

465 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

466 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

467 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

468 
Àn
, 
X509_OBJECT
 *
ªt
);

469 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

471 #i‚de‡
OPENSSL_NO_STDIO


472 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

473 c⁄° *
fûe
, c⁄° *
dú
);

474 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

477 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

478 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

479 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

480 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

481 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

482 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

483 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

484 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

485 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

486 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

487 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

488 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

489 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

490 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

491 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

492 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

493 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

494 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

495 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

496 
puΩo£
, 
åu°
);

497 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

498 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

499 
time_t
 
t
);

500 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

501 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

503 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

504 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

506 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

507 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

508 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

512 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

513 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

514 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

515 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

516 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

517 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

518 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

519 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

520 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

521 
Êags
);

522 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

523 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

524 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

525 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

526 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

527 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

528 
ASN1_OBJECT
 *
pﬁicy
);

529 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

530 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

531 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

533 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

534 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

535 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

537 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

538 
STACK_OF
(
X509
Ë*
˚πs
,

539 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

540 
Êags
);

542 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

544 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

545 
X509_POLICY_LEVEL
 *

546 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

548 
STACK_OF
(
X509_POLICY_NODE
) *

549 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

551 
STACK_OF
(
X509_POLICY_NODE
) *

552 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

554 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

556 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

558 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

560 
STACK_OF
(
POLICYQUALINFO
) *

561 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

562 c⁄° 
X509_POLICY_NODE
 *

563 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

565 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap/bpf.h

74 
	~<°döt.h
>

76 #i‡!
deföed
(
_NET_BPF_H_
Ë&& !deföed(
_BPF_H_
Ë&& !deföed(
_H_BPF
Ë&& !deföed(
lib_pˇp_bpf_h
)

77 
	#lib_pˇp_bpf_h


	)

79 #ifde‡
__˝lu•lus


84 
	#BPF_RELEASE
 199606

	)

86 #ifde‡
MSDOS


87 
	tbpf_öt32
;

88 
	tbpf_u_öt32
;

90 
	tbpf_öt32
;

91 
u_öt
 
	tbpf_u_öt32
;

100 #i‚de‡
__NëBSD__


101 
	#BPF_ALIGNMENT
 (
bpf_öt32
)

	)

103 
	#BPF_ALIGNMENT
 ()

	)

105 
	#BPF_WORDALIGN
(
x
Ë(((x)+(
BPF_ALIGNMENT
-1))&~(BPF_ALIGNMENT-1))

	)

110 
	sbpf_¥ogøm
 {

111 
u_öt
 
bf_Àn
;

112 
bpf_ö¢
 *
bf_ö¢s
;

137 
	#DLT_NULL
 0

	)

138 
	#DLT_EN10MB
 1

	)

139 
	#DLT_EN3MB
 2

	)

140 
	#DLT_AX25
 3

	)

141 
	#DLT_PRONET
 4

	)

142 
	#DLT_CHAOS
 5

	)

143 
	#DLT_IEEE802
 6

	)

144 
	#DLT_ARCNET
 7

	)

145 
	#DLT_SLIP
 8

	)

146 
	#DLT_PPP
 9

	)

147 
	#DLT_FDDI
 10

	)

158 
	#DLT_ATM_RFC1483
 11

	)

160 #ifde‡
__O≥nBSD__


161 
	#DLT_RAW
 14

	)

163 
	#DLT_RAW
 12

	)

172 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
__FªeBSD__
)

173 #i‚de‡
DLT_SLIP_BSDOS


174 
	#DLT_SLIP_BSDOS
 13

	)

175 
	#DLT_PPP_BSDOS
 14

	)

178 
	#DLT_SLIP_BSDOS
 15

	)

179 
	#DLT_PPP_BSDOS
 16

	)

210 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__Døg⁄Fly__
Ë|| deföed(
__APPLE__
)

211 
	#DLT_PFSYNC
 18

	)

214 
	#DLT_ATM_CLIP
 19

	)

220 
	#DLT_REDBACK_SMARTEDGE
 32

	)

227 
	#DLT_PPP_SERIAL
 50

	)

228 
	#DLT_PPP_ETHER
 51

	)

237 
	#DLT_SYMANTEC_FIREWALL
 99

	)

256 
	#DLT_MATCHING_MIN
 104

	)

272 
	#DLT_C_HDLC
 104

	)

273 
	#DLT_CHDLC
 
DLT_C_HDLC


	)

275 
	#DLT_IEEE802_11
 105

	)

290 
	#DLT_FRELAY
 107

	)

299 #ifde‡
__O≥nBSD__


300 
	#DLT_LOOP
 12

	)

302 
	#DLT_LOOP
 108

	)

310 #ifde‡
__O≥nBSD__


311 
	#DLT_ENC
 13

	)

313 
	#DLT_ENC
 109

	)

326 
	#DLT_LINUX_SLL
 113

	)

331 
	#DLT_LTALK
 114

	)

336 
	#DLT_ECONET
 115

	)

341 
	#DLT_IPFILTER
 116

	)

346 
	#DLT_PFLOG
 117

	)

351 
	#DLT_CISCO_IOS
 118

	)

358 
	#DLT_PRISM_HEADER
 119

	)

364 
	#DLT_AIRONET_HEADER
 120

	)

404 #ifde‡
__FªeBSD__


405 
	#DLT_PFSYNC
 121

	)

407 
	#DLT_HHDLC
 121

	)

418 
	#DLT_IP_OVER_FC
 122

	)

434 
	#DLT_SUNATM
 123

	)

440 
	#DLT_RIO
 124

	)

441 
	#DLT_PCI_EXP
 125

	)

442 
	#DLT_AURORA
 126

	)

449 
	#DLT_IEEE802_11_RADIO
 127

	)

459 
	#DLT_TZSP
 128

	)

472 
	#DLT_ARCNET_LINUX
 129

	)

480 
	#DLT_JUNIPER_MLPPP
 130

	)

481 
	#DLT_JUNIPER_MLFR
 131

	)

482 
	#DLT_JUNIPER_ES
 132

	)

483 
	#DLT_JUNIPER_GGSN
 133

	)

484 
	#DLT_JUNIPER_MFR
 134

	)

485 
	#DLT_JUNIPER_ATM2
 135

	)

486 
	#DLT_JUNIPER_SERVICES
 136

	)

487 
	#DLT_JUNIPER_ATM1
 137

	)

504 
	#DLT_APPLE_IP_OVER_IEEE1394
 138

	)

510 
	#DLT_MTP2_WITH_PHDR
 139

	)

511 
	#DLT_MTP2
 140

	)

512 
	#DLT_MTP3
 141

	)

513 
	#DLT_SCCP
 142

	)

518 
	#DLT_DOCSIS
 143

	)

535 
	#DLT_LINUX_IRDA
 144

	)

540 
	#DLT_IBM_SP
 145

	)

541 
	#DLT_IBM_SN
 146

	)

568 
	#DLT_USER0
 147

	)

569 
	#DLT_USER1
 148

	)

570 
	#DLT_USER2
 149

	)

571 
	#DLT_USER3
 150

	)

572 
	#DLT_USER4
 151

	)

573 
	#DLT_USER5
 152

	)

574 
	#DLT_USER6
 153

	)

575 
	#DLT_USER7
 154

	)

576 
	#DLT_USER8
 155

	)

577 
	#DLT_USER9
 156

	)

578 
	#DLT_USER10
 157

	)

579 
	#DLT_USER11
 158

	)

580 
	#DLT_USER12
 159

	)

581 
	#DLT_USER13
 160

	)

582 
	#DLT_USER14
 161

	)

583 
	#DLT_USER15
 162

	)

595 
	#DLT_IEEE802_11_RADIO_AVS
 163

	)

603 
	#DLT_JUNIPER_MONITOR
 164

	)

608 
	#DLT_BACNET_MS_TP
 165

	)

624 
	#DLT_PPP_PPPD
 166

	)

630 
	#DLT_PPP_WITH_DIRECTION
 
DLT_PPP_PPPD


	)

631 
	#DLT_LINUX_PPP_WITHDIRECTION
 
DLT_PPP_PPPD


	)

639 
	#DLT_JUNIPER_PPPOE
 167

	)

640 
	#DLT_JUNIPER_PPPOE_ATM
 168

	)

642 
	#DLT_GPRS_LLC
 169

	)

643 
	#DLT_GPF_T
 170

	)

644 
	#DLT_GPF_F
 171

	)

650 
	#DLT_GCOM_T1E1
 172

	)

651 
	#DLT_GCOM_SERIAL
 173

	)

658 
	#DLT_JUNIPER_PIC_PEER
 174

	)

666 
	#DLT_ERF_ETH
 175

	)

667 
	#DLT_ERF_POS
 176

	)

675 
	#DLT_LINUX_LAPD
 177

	)

684 
	#DLT_JUNIPER_ETHER
 178

	)

685 
	#DLT_JUNIPER_PPP
 179

	)

686 
	#DLT_JUNIPER_FRELAY
 180

	)

687 
	#DLT_JUNIPER_CHDLC
 181

	)

692 
	#DLT_MFR
 182

	)

700 
	#DLT_JUNIPER_VP
 183

	)

709 
	#DLT_A429
 184

	)

716 
	#DLT_A653_ICM
 185

	)

722 
	#DLT_USB
 186

	)

728 
	#DLT_BLUETOOTH_HCI_H4
 187

	)

734 
	#DLT_IEEE802_16_MAC_CPS
 188

	)

740 
	#DLT_USB_LINUX
 189

	)

749 
	#DLT_CAN20B
 190

	)

755 
	#DLT_IEEE802_15_4_LINUX
 191

	)

761 
	#DLT_PPI
 192

	)

767 
	#DLT_IEEE802_16_MAC_CPS_RADIO
 193

	)

775 
	#DLT_JUNIPER_ISM
 194

	)

783 
	#DLT_IEEE802_15_4
 195

	)

789 
	#DLT_SITA
 196

	)

796 
	#DLT_ERF
 197

	)

803 
	#DLT_RAIF1
 198

	)

810 
	#DLT_IPMB
 199

	)

817 
	#DLT_JUNIPER_ST
 200

	)

823 
	#DLT_BLUETOOTH_HCI_H4_WITH_PHDR
 201

	)

832 
	#DLT_AX25_KISS
 202

	)

839 
	#DLT_LAPD
 203

	)

847 
	#DLT_PPP_WITH_DIR
 204

	)

848 
	#DLT_C_HDLC_WITH_DIR
 205

	)

849 
	#DLT_FRELAY_WITH_DIR
 206

	)

850 
	#DLT_LAPB_WITH_DIR
 207

	)

861 
	#DLT_IPMB_LINUX
 209

	)

867 
	#DLT_FLEXRAY
 210

	)

874 
	#DLT_MOST
 211

	)

881 
	#DLT_LIN
 212

	)

887 
	#DLT_X2E_SERIAL
 213

	)

893 
	#DLT_X2E_XORAYA
 214

	)

904 
	#DLT_IEEE802_15_4_NONASK_PHY
 215

	)

912 
	#DLT_LINUX_EVDEV
 216

	)

919 
	#DLT_GSMTAP_UM
 217

	)

920 
	#DLT_GSMTAP_ABIS
 218

	)

927 
	#DLT_MPLS
 219

	)

933 
	#DLT_USB_LINUX_MMAPPED
 220

	)

939 
	#DLT_DECT
 221

	)

950 
	#DLT_AOS
 222

	)

959 
	#DLT_WIHART
 223

	)

965 
	#DLT_FC_2
 224

	)

979 
	#DLT_FC_2_WITH_FRAME_DELIMS
 225

	)

1027 
	#DLT_IPNET
 226

	)

1036 
	#DLT_CAN_SOCKETCAN
 227

	)

1042 
	#DLT_IPV4
 228

	)

1043 
	#DLT_IPV6
 229

	)

1050 
	#DLT_IEEE802_15_4_NOFCS
 230

	)

1068 
	#DLT_DBUS
 231

	)

1074 
	#DLT_JUNIPER_VS
 232

	)

1075 
	#DLT_JUNIPER_SRX_E2E
 233

	)

1076 
	#DLT_JUNIPER_FIBRECHANNEL
 234

	)

1088 
	#DLT_DVB_CI
 235

	)

1095 
	#DLT_MUX27010
 236

	)

1101 
	#DLT_STANAG_5066_D_PDU
 237

	)

1107 
	#DLT_JUNIPER_ATM_CEMIC
 238

	)

1115 
	#DLT_NFLOG
 239

	)

1125 
	#DLT_NETANALYZER
 240

	)

1136 
	#DLT_NETANALYZER_TRANSPARENT
 241

	)

1143 
	#DLT_IPOIB
 242

	)

1150 
	#DLT_MPEG_2_TS
 243

	)

1158 
	#DLT_NG40
 244

	)

1168 
	#DLT_NFC_LLCP
 245

	)

1177 #i‡!
deföed
(
__FªeBSD__
Ë&& !deföed(
__O≥nBSD__
Ë&& !deföed(
__NëBSD__
Ë&& !deföed(
__Døg⁄Fly__
Ë&& !deföed(
__APPLE__
)

1178 
	#DLT_PFSYNC
 246

	)

1186 
	#DLT_INFINIBAND
 247

	)

1193 
	#DLT_SCTP
 248

	)

1200 
	#DLT_USBPCAP
 249

	)

1208 
	#DLT_RTAC_SERIAL
 250

	)

1215 
	#DLT_BLUETOOTH_LE_LL
 251

	)

1228 
	#DLT_WIRESHARK_UPPER_PDU
 252

	)

1230 
	#DLT_MATCHING_MAX
 252

	)

1237 
	#DLT_CLASS
(
x
Ë((xË& 0x03ff0000)

	)

1246 
	#DLT_CLASS_NETBSD_RAWAF
 0x02240000

	)

1247 
	#DLT_NETBSD_RAWAF
(
af
Ë(
DLT_CLASS_NETBSD_RAWAF
 | (af))

	)

1248 
	#DLT_NETBSD_RAWAF_AF
(
x
Ë((xË& 0x0000ffff)

	)

1249 
	#DLT_IS_NETBSD_RAWAF
(
x
Ë(
	`DLT_CLASS
(xË=
DLT_CLASS_NETBSD_RAWAF
)

	)

1256 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

1257 
	#BPF_LD
 0x00

	)

1258 
	#BPF_LDX
 0x01

	)

1259 
	#BPF_ST
 0x02

	)

1260 
	#BPF_STX
 0x03

	)

1261 
	#BPF_ALU
 0x04

	)

1262 
	#BPF_JMP
 0x05

	)

1263 
	#BPF_RET
 0x06

	)

1264 
	#BPF_MISC
 0x07

	)

1267 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

1268 
	#BPF_W
 0x00

	)

1269 
	#BPF_H
 0x08

	)

1270 
	#BPF_B
 0x10

	)

1271 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

1272 
	#BPF_IMM
 0x00

	)

1273 
	#BPF_ABS
 0x20

	)

1274 
	#BPF_IND
 0x40

	)

1275 
	#BPF_MEM
 0x60

	)

1276 
	#BPF_LEN
 0x80

	)

1277 
	#BPF_MSH
 0xa0

	)

1280 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

1281 
	#BPF_ADD
 0x00

	)

1282 
	#BPF_SUB
 0x10

	)

1283 
	#BPF_MUL
 0x20

	)

1284 
	#BPF_DIV
 0x30

	)

1285 
	#BPF_OR
 0x40

	)

1286 
	#BPF_AND
 0x50

	)

1287 
	#BPF_LSH
 0x60

	)

1288 
	#BPF_RSH
 0x70

	)

1289 
	#BPF_NEG
 0x80

	)

1290 
	#BPF_JA
 0x00

	)

1291 
	#BPF_JEQ
 0x10

	)

1292 
	#BPF_JGT
 0x20

	)

1293 
	#BPF_JGE
 0x30

	)

1294 
	#BPF_JSET
 0x40

	)

1295 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

1296 
	#BPF_K
 0x00

	)

1297 
	#BPF_X
 0x08

	)

1300 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

1301 
	#BPF_A
 0x10

	)

1304 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

1305 
	#BPF_TAX
 0x00

	)

1306 
	#BPF_TXA
 0x80

	)

1311 
	sbpf_ö¢
 {

1312 
u_sh‹t
 
code
;

1313 
u_ch¨
 
jt
;

1314 
u_ch¨
 
jf
;

1315 
bpf_u_öt32
 
k
;

1323 
	sbpf_aux_d©a
 {

1324 
uöt16_t
 
vœn_èg_¥e£¡
;

1325 
uöt16_t
 
vœn_èg
;

1331 
	#BPF_STMT
(
code
, 
k
Ë{ (
u_sh‹t
)(code), 0, 0, k }

	)

1332 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ (
u_sh‹t
)(code), jt, jf, k }

	)

1334 #i‡
__STDC__
 || 
deföed
(
__˝lu•lus
)

1335 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *, );

1336 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

1337 
u_öt
 
bpf_fûãr_wôh_aux_d©a
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_öt, u_öt, c⁄° 
bpf_aux_d©a
 *);

1339 
bpf_vÆid©e
();

1340 
u_öt
 
bpf_fûãr
();

1341 
u_öt
 
bpf_fûãr
();

1347 
	#BPF_MEMWORDS
 16

	)

1349 #ifde‡
__˝lu•lus


	@/usr/include/sys/timeb.h

19 #i‚de‡
_SYS_TIMEB_H


20 
	#_SYS_TIMEB_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

28 
__BEGIN_DECLS


32 
	stimeb


34 
time_t
 
	mtime
;

35 
	mmûlôm
;

36 
	mtimez⁄e
;

37 
	md°Êag
;

42 
·ime
 (
timeb
 *
__timebuf
);

44 
	g__END_DECLS


	@/usr/include/sys/times.h

23 #i‚def 
_SYS_TIMES_H


24 
	#_SYS_TIMES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_˛ock_t


	)

29 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	stms


37 
˛ock_t
 
	mtms_utime
;

38 
˛ock_t
 
	mtms_°ime
;

40 
˛ock_t
 
	mtms_cutime
;

41 
˛ock_t
 
	mtms_c°ime
;

49 
˛ock_t
 
	$times
 (
tms
 *
__buf„r
Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_BUSY_POLL
 46

	)

69 
	#SO_BPF_EXTENSIONS
 48

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/krb5/krb5.h

2 #i‚de‡
KRB5_KRB5_H_INCLUDED


3 
	#KRB5_KRB5_H_INCLUDED


	)

55 #i‚de‡
KRB5_GENERAL__


56 
	#KRB5_GENERAL__


	)

59 #i‚de‡
KRB5_DEPRECATED


60 
	#KRB5_DEPRECATED
 0

	)

63 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

64 
	~<T¨gëC⁄dôi⁄Æs.h
>

65 #i‡
TARGET_RT_MAC_CFM


70 #i‡
deföed
(
_MSDOS
Ë|| deföed(
_WIN32
)

71 
	~<wö-mac.h
>

74 #i‚de‡
KRB5_CONFIG__


75 #i‚de‡
KRB5_CALLCONV


76 
	#KRB5_CALLCONV


	)

77 
	#KRB5_CALLCONV_C


	)

81 #i‚de‡
KRB5_CALLCONV_WRONG


82 
	#KRB5_CALLCONV_WRONG


	)

85 #i‚de‡
THREEPARAMOPEN


86 
	#THREEPARAMOPEN
(
x
,
y
,
z
Ë
	`›í
(x,y,z)

	)

89 #i‡
KRB5_PRIVATE


90 #i‚de‡
WRITABLEFOPEN


91 
	#WRITABLEFOPEN
(
x
,
y
Ë
	`f›í
(x,y)

	)

95 
	#KRB5_OLD_CRYPTO


	)

97 
	~<°dlib.h
>

98 
	~<limôs.h
>

99 
	~<°d¨g.h
>

101 #i‚de‡
KRB5INT_BEGIN_DECLS


102 #i‡
deföed
(
__˝lu•lus
)

103 
	#KRB5INT_BEGIN_DECLS
 "C" {

	)

104 
	#KRB5INT_END_DECLS
 }

	)

106 
	#KRB5INT_BEGIN_DECLS


	)

107 
	#KRB5INT_END_DECLS


	)

111 
KRB5INT_BEGIN_DECLS


113 #i‡
TARGET_OS_MAC


114 #¥agm®
∑ck
(
push
,2)

117 #i‡(
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
) >= 30203

118 
	#KRB5_ATTR_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

119 #ñi‡
deföed
 
_WIN32


120 
	#KRB5_ATTR_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

122 
	#KRB5_ATTR_DEPRECATED


	)

126 
_¥ofûe_t
;

137 
	tkrb5_o˘ë
;

139 #i‡
INT_MAX
 == 0x7fff

140 
	tkrb5_öt16
;

141 
	tkrb5_ui_2
;

142 #ñi‡
SHRT_MAX
 == 0x7fff

143 
	tkrb5_öt16
;

144 
	tkrb5_ui_2
;

146 #îr‹ 
undeföed
 16 
bô
 
ty≥


149 #i‡
INT_MAX
 == 0x7fffffffL

150 
	tkrb5_öt32
;

151 
	tkrb5_ui_4
;

152 #ñi‡
LONG_MAX
 == 0x7fffffffL

153 
	tkrb5_öt32
;

154 
	tkrb5_ui_4
;

155 #ñi‡
SHRT_MAX
 == 0x7fffffffL

156 
	tkrb5_öt32
;

157 
	tkrb5_ui_4
;

159 #îr‹: 
undeföed
 32 
bô
 
ty≥


162 
	#VALID_INT_BITS
 
INT_MAX


	)

163 
	#VALID_UINT_BITS
 
UINT_MAX


	)

165 
	#KRB5_INT32_MAX
 2147483647

	)

168 
	#KRB5_INT32_MIN
 (-
KRB5_INT32_MAX
-1)

	)

170 
	#KRB5_INT16_MAX
 65535

	)

173 
	#KRB5_INT16_MIN
 (-
KRB5_INT16_MAX
-1)

	)

187 #i‚de‡
FALSE


188 
	#FALSE
 0

	)

190 #i‚de‡
TRUE


191 
	#TRUE
 1

	)

194 
	tkrb5_boﬁón
;

195 
	tkrb5_msgty≥
;

196 
	tkrb5_kvno
;

198 
krb5_öt32
 
	tkrb5_addπy≥
;

199 
krb5_öt32
 
	tkrb5_í˘y≥
;

200 
krb5_öt32
 
	tkrb5_cksumty≥
;

201 
krb5_öt32
 
	tkrb5_authd©©y≥
;

202 
krb5_öt32
 
	tkrb5_keyußge
;

203 
krb5_öt32
 
	tkrb5_¸y±Ÿy≥
;

205 
krb5_öt32
 
	tkrb5_¥óuthty≥
;

206 
krb5_öt32
 
	tkrb5_Êags
;

207 
krb5_öt32
 
	tkrb5_time°amp
;

208 
krb5_öt32
 
	tkrb5_îr‹_code
;

209 
krb5_öt32
 
	tkrb5_dñèt
;

211 
krb5_îr‹_code
 
	tkrb5_magic
;

213 
	s_krb5_d©a
 {

214 
krb5_magic
 
	mmagic
;

215 
	mÀngth
;

216 *
	md©a
;

217 } 
	tkrb5_d©a
;

219 
	s_krb5_o˘ë_d©a
 {

220 
krb5_magic
 
	mmagic
;

221 
	mÀngth
;

222 
krb5_o˘ë
 *
	md©a
;

223 } 
	tkrb5_o˘ë_d©a
;

231 
	#SALT_TYPE_AFS_LENGTH
 
UINT_MAX


	)

232 
	#SALT_TYPE_NO_LENGTH
 
UINT_MAX


	)

234 * 
	tkrb5_poöãr
;

235 c⁄° * 
	tkrb5_c⁄°_poöãr
;

237 
	skrb5_¥öcùÆ_d©a
 {

238 
krb5_magic
 
	mmagic
;

239 
krb5_d©a
 
	mªÆm
;

240 
krb5_d©a
 *
	md©a
;

241 
krb5_öt32
 
	mÀngth
;

242 
krb5_öt32
 
	mty≥
;

243 } 
	tkrb5_¥öcùÆ_d©a
;

245 
krb5_¥öcùÆ_d©a
 * 
	tkrb5_¥öcùÆ
;

252 
	#KRB5_NT_UNKNOWN
 0

	)

254 
	#KRB5_NT_PRINCIPAL
 1

	)

256 
	#KRB5_NT_SRV_INST
 2

	)

258 
	#KRB5_NT_SRV_HST
 3

	)

260 
	#KRB5_NT_SRV_XHST
 4

	)

262 
	#KRB5_NT_UID
 5

	)

264 
	#KRB5_NT_X500_PRINCIPAL
 6

	)

266 
	#KRB5_NT_SMTP_NAME
 7

	)

268 
	#KRB5_NT_ENTERPRISE_PRINCIPAL
 10

	)

269 
	#KRB5_NT_WELLKNOWN
 11

	)

271 
	#KRB5_WELLKNOWN_NAMESTR
 "WELLKNOWN"

	)

273 
	#KRB5_NT_MS_PRINCIPAL
 -128

	)

275 
	#KRB5_NT_MS_PRINCIPAL_AND_ID
 -129

	)

277 
	#KRB5_NT_ENT_PRINCIPAL_AND_ID
 -130

	)

280 c⁄° 
	tkrb5_¥öcùÆ_d©a
 *
	tkrb5_c⁄°_¥öcùÆ
;

282 
	#krb5_¥öc_ªÆm
(
c⁄ãxt
, 
¥öc
Ë(&’röc)->
ªÆm
)

	)

283 
	#krb5_¥öc_£t_ªÆm
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë(’röc)->
ªÆm
 = *(vÆue))

	)

284 
	#krb5_¥öc_£t_ªÆm_Àngth
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
Àngth
 = (vÆue)

	)

285 
	#krb5_¥öc_£t_ªÆm_d©a
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
d©a
 = (vÆue)

	)

286 
	#krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
Ë’röc)->
Àngth


	)

287 
	#krb5_¥öc_ty≥
(
c⁄ãxt
, 
¥öc
Ë’röc)->
ty≥


	)

288 
	#krb5_¥öc_«me
(
c⁄ãxt
, 
¥öc
Ë’röc)->
d©a


	)

289 
	#krb5_¥öc_comp⁄ít
(
c⁄ãxt
, 
¥öc
,
i
) \

290 (((
i
Ë< 
	`krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
)) \

291 ? (
¥öc
)->
d©a
 + (
i
) \

292 : 
NULL
)

	)

295 
	#KRB5_REFERRAL_REALM
 ""

	)

308 
krb5_boﬁón
 
KRB5_CALLCONV


309 
krb5_is_ª„ºÆ_ªÆm
(c⁄° 
krb5_d©a
 *
r
);

318 c⁄° 
krb5_d©a
 *
KRB5_CALLCONV


319 
krb5_™⁄ymous_ªÆm
();

328 
krb5_c⁄°_¥öcùÆ
 
KRB5_CALLCONV


329 
krb5_™⁄ymous_¥öcùÆ
();

331 
	#KRB5_ANONYMOUS_REALMSTR
 "WELLKNOWN:ANONYMOUS"

	)

332 
	#KRB5_ANONYMOUS_PRINCSTR
 "ANONYMOUS"

	)

342 
	s_krb5_addªss
 {

343 
krb5_magic
 
	mmagic
;

344 
krb5_addπy≥
 
	maddπy≥
;

345 
	mÀngth
;

346 
krb5_o˘ë
 *
	mc⁄ã¡s
;

347 } 
	tkrb5_addªss
;

350 
	#ADDRTYPE_INET
 0x0002

	)

351 
	#ADDRTYPE_CHAOS
 0x0005

	)

352 
	#ADDRTYPE_XNS
 0x0006

	)

353 
	#ADDRTYPE_ISO
 0x0007

	)

354 
	#ADDRTYPE_DDP
 0x0010

	)

355 
	#ADDRTYPE_NETBIOS
 0x0014

	)

356 
	#ADDRTYPE_INET6
 0x0018

	)

358 
	#ADDRTYPE_ADDRPORT
 0x0100

	)

359 
	#ADDRTYPE_IPPORT
 0x0101

	)

362 
	#ADDRTYPE_IS_LOCAL
(
addπy≥
Ë◊ddπy≥ & 0x8000)

	)

369 
	g_krb5_c⁄ãxt
;

370 
_krb5_c⁄ãxt
 * 
	tkrb5_c⁄ãxt
;

372 
	g_krb5_auth_c⁄ãxt
;

373 
_krb5_auth_c⁄ãxt
 * 
	tkrb5_auth_c⁄ãxt
;

375 
	g_krb5_¸y±osy°em_íåy
;

382 
	s_krb5_keyblock
 {

383 
krb5_magic
 
	mmagic
;

384 
krb5_í˘y≥
 
	mí˘y≥
;

385 
	mÀngth
;

386 
krb5_o˘ë
 *
	mc⁄ã¡s
;

387 } 
	tkrb5_keyblock
;

389 
	gkrb5_key_°
;

398 
krb5_key_°
 *
	tkrb5_key
;

400 #ifde‡
KRB5_OLD_CRYPTO


401 
	s_krb5_í¸y±_block
 {

402 
krb5_magic
 
	mmagic
;

403 
krb5_í˘y≥
 
	m¸y±o_íåy
;

406 
krb5_keyblock
 *
	mkey
;

407 } 
	tkrb5_í¸y±_block
;

410 
	s_krb5_checksum
 {

411 
krb5_magic
 
	mmagic
;

412 
krb5_cksumty≥
 
	mchecksum_ty≥
;

413 
	mÀngth
;

414 
krb5_o˘ë
 *
	mc⁄ã¡s
;

415 } 
	tkrb5_checksum
;

417 
	s_krb5_íc_d©a
 {

418 
krb5_magic
 
	mmagic
;

419 
krb5_í˘y≥
 
	mí˘y≥
;

420 
krb5_kvno
 
	mkvno
;

421 
krb5_d©a
 
	mcùhîãxt
;

422 } 
	tkrb5_íc_d©a
;

434 
	s_krb5_¸y±o_iov
 {

435 
krb5_¸y±Ÿy≥
 
	mÊags
;

436 
krb5_d©a
 
	md©a
;

437 } 
	tkrb5_¸y±o_iov
;

440 
	#ENCTYPE_NULL
 0x0000

	)

441 
	#ENCTYPE_DES_CBC_CRC
 0x0001

	)

442 
	#ENCTYPE_DES_CBC_MD4
 0x0002

	)

443 
	#ENCTYPE_DES_CBC_MD5
 0x0003

	)

444 
	#ENCTYPE_DES_CBC_RAW
 0x0004

	)

445 
	#ENCTYPE_DES3_CBC_SHA
 0x0005

	)

446 
	#ENCTYPE_DES3_CBC_RAW
 0x0006

	)

447 
	#ENCTYPE_DES_HMAC_SHA1
 0x0008

	)

449 
	#ENCTYPE_DSA_SHA1_CMS
 0x0009

	)

450 
	#ENCTYPE_MD5_RSA_CMS
 0x000®

	)

451 
	#ENCTYPE_SHA1_RSA_CMS
 0x000b

	)

452 
	#ENCTYPE_RC2_CBC_ENV
 0x000¯

	)

453 
	#ENCTYPE_RSA_ENV
 0x000d

	)

454 
	#ENCTYPE_RSA_ES_OAEP_ENV
 0x000ê

	)

455 
	#ENCTYPE_DES3_CBC_ENV
 0x000‡

	)

457 
	#ENCTYPE_DES3_CBC_SHA1
 0x0010

	)

458 
	#ENCTYPE_AES128_CTS_HMAC_SHA1_96
 0x0011

	)

459 
	#ENCTYPE_AES256_CTS_HMAC_SHA1_96
 0x0012

	)

460 
	#ENCTYPE_ARCFOUR_HMAC
 0x0017

	)

461 
	#ENCTYPE_ARCFOUR_HMAC_EXP
 0x0018

	)

462 
	#ENCTYPE_UNKNOWN
 0x01ff

	)

464 
	#CKSUMTYPE_CRC32
 0x0001

	)

465 
	#CKSUMTYPE_RSA_MD4
 0x0002

	)

466 
	#CKSUMTYPE_RSA_MD4_DES
 0x0003

	)

467 
	#CKSUMTYPE_DESCBC
 0x0004

	)

470 
	#CKSUMTYPE_RSA_MD5
 0x0007

	)

471 
	#CKSUMTYPE_RSA_MD5_DES
 0x0008

	)

472 
	#CKSUMTYPE_NIST_SHA
 0x0009

	)

473 
	#CKSUMTYPE_HMAC_SHA1_DES3
 0x000c

	)

474 
	#CKSUMTYPE_HMAC_SHA1_96_AES128
 0x000‡

	)

476 
	#CKSUMTYPE_HMAC_SHA1_96_AES256
 0x0010

	)

478 
	#CKSUMTYPE_MD5_HMAC_ARCFOUR
 -137

	)

479 
	#CKSUMTYPE_HMAC_MD5_ARCFOUR
 -138

	)

491 
	mKRB5_C_RANDSOURCE_OLDAPI
 = 0,

492 
	mKRB5_C_RANDSOURCE_OSRAND
 = 1,

493 
	mKRB5_C_RANDSOURCE_TRUSTEDPARTY
 = 2,

499 
	mKRB5_C_RANDSOURCE_TIMING
 = 3,

500 
	mKRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL
 = 4,

501 
	mKRB5_C_RANDSOURCE_MAX
 = 5

504 #i‚de‡
krb5_roundup


506 
	#krb5_roundup
(
x
, 
y
Ë((((xË+ (yË- 1)/(y))*(y))

	)

512 
	#krb5_x
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),1))

	)

513 
	#krb5_xc
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),(*)0))

	)

515 
	#krb5_x
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

516 
	#krb5_xc
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

542 
krb5_îr‹_code
 
KRB5_CALLCONV


543 
krb5_c_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

544 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

545 c⁄° 
krb5_d©a
 *
öput
, 
krb5_íc_d©a
 *
ouçut
);

571 
krb5_îr‹_code
 
KRB5_CALLCONV


572 
krb5_c_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

573 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

574 c⁄° 
krb5_íc_d©a
 *
öput
, 
krb5_d©a
 *
ouçut
);

589 
krb5_îr‹_code
 
KRB5_CALLCONV


590 
krb5_c_í¸y±_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

591 
size_t
 
öpuéí
, size_à*
Àngth
);

602 
krb5_îr‹_code
 
KRB5_CALLCONV


603 
krb5_c_block_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

604 
size_t
 *
blocksize
);

616 
krb5_îr‹_code
 
KRB5_CALLCONV


617 
krb5_c_keyÀngths
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

618 
size_t
 *
keybyãs
, size_à*
keyÀngth
);

630 
krb5_îr‹_code
 
KRB5_CALLCONV


631 
krb5_c_öô_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

632 
krb5_keyußge
 
ußge
, 
krb5_d©a
 *
√w_°©e
);

643 
krb5_îr‹_code
 
KRB5_CALLCONV


644 
krb5_c_‰ì_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

645 
krb5_d©a
 *
°©e
);

662 
krb5_îr‹_code
 
KRB5_CALLCONV


663 
krb5_c_¥f
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

664 
krb5_d©a
 *
öput
, krb5_d©®*
ouçut
);

675 
krb5_îr‹_code
 
KRB5_CALLCONV


676 
krb5_c_¥f_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
, 
size_t
 *
Àn
);

696 
krb5_îr‹_code
 
KRB5_CALLCONV


697 
krb5_c_fx_cf2_sim∂e
(
krb5_c⁄ãxt
 
c⁄ãxt
,

698 
krb5_keyblock
 *
k1
, c⁄° *
≥µî1
,

699 
krb5_keyblock
 *
k2
, c⁄° *
≥µî2
,

700 
krb5_keyblock
 **
out
);

714 
krb5_îr‹_code
 
KRB5_CALLCONV


715 
krb5_c_make_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

716 
krb5_keyblock
 *
k5_øndom_key
);

736 
krb5_îr‹_code
 
KRB5_CALLCONV


737 
krb5_c_øndom_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

738 
krb5_d©a
 *
øndom_d©a
, 
krb5_keyblock
 *
k5_øndom_key
);

753 
krb5_îr‹_code
 
KRB5_CALLCONV


754 
krb5_c_øndom_add_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
øndsour˚
,

755 c⁄° 
krb5_d©a
 *
d©a
);

769 
krb5_îr‹_code
 
KRB5_CALLCONV


770 
krb5_c_øndom_make_o˘ës
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

786 
krb5_îr‹_code
 
KRB5_CALLCONV


787 
krb5_c_øndom_os_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
°r⁄g
, *
suc˚ss
);

790 
krb5_îr‹_code
 
KRB5_CALLCONV


791 
krb5_c_øndom_£ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

808 
krb5_îr‹_code
 
KRB5_CALLCONV


809 
krb5_c_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

810 c⁄° 
krb5_d©a
 *
°rög
, c⁄° krb5_d©®*
ß…
,

811 
krb5_keyblock
 *
key
);

830 
krb5_îr‹_code
 
KRB5_CALLCONV


831 
krb5_c_°rög_to_key_wôh_∑øms
(
krb5_c⁄ãxt
 
c⁄ãxt
,

832 
krb5_í˘y≥
 
í˘y≥
,

833 c⁄° 
krb5_d©a
 *
°rög
,

834 c⁄° 
krb5_d©a
 *
ß…
,

835 c⁄° 
krb5_d©a
 *
∑øms
,

836 
krb5_keyblock
 *
key
);

851 
krb5_îr‹_code
 
KRB5_CALLCONV


852 
krb5_c_í˘y≥_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
e1
, krb5_í˘y≥ 
e2
,

853 
krb5_boﬁón
 *
simû¨
);

880 
krb5_îr‹_code
 
KRB5_CALLCONV


881 
krb5_c_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

882 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

883 c⁄° 
krb5_d©a
 *
öput
, 
krb5_checksum
 *
cksum
);

906 
krb5_îr‹_code
 
KRB5_CALLCONV


907 
krb5_c_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

908 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
d©a
,

909 c⁄° 
krb5_checksum
 *
cksum
, 
krb5_boﬁón
 *
vÆid
);

920 
krb5_îr‹_code
 
KRB5_CALLCONV


921 
krb5_c_checksum_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

922 
size_t
 *
Àngth
);

937 
krb5_îr‹_code
 
KRB5_CALLCONV


938 
krb5_c_keyed_checksum_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

939 *
cou¡
, 
krb5_cksumty≥
 **
cksumty≥s
);

944 
	#KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS
 1

	)

945 
	#KRB5_KEYUSAGE_KDC_REP_TICKET
 2

	)

946 
	#KRB5_KEYUSAGE_AS_REP_ENCPART
 3

	)

947 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY
 4

	)

948 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY
 5

	)

949 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM
 6

	)

950 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH
 7

	)

951 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY
 8

	)

952 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY
 9

	)

953 
	#KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM
 10

	)

954 
	#KRB5_KEYUSAGE_AP_REQ_AUTH
 11

	)

955 
	#KRB5_KEYUSAGE_AP_REP_ENCPART
 12

	)

956 
	#KRB5_KEYUSAGE_KRB_PRIV_ENCPART
 13

	)

957 
	#KRB5_KEYUSAGE_KRB_CRED_ENCPART
 14

	)

958 
	#KRB5_KEYUSAGE_KRB_SAFE_CKSUM
 15

	)

959 
	#KRB5_KEYUSAGE_APP_DATA_ENCRYPT
 16

	)

960 
	#KRB5_KEYUSAGE_APP_DATA_CKSUM
 17

	)

961 
	#KRB5_KEYUSAGE_KRB_ERROR_CKSUM
 18

	)

962 
	#KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM
 19

	)

963 
	#KRB5_KEYUSAGE_AD_MTE
 20

	)

964 
	#KRB5_KEYUSAGE_AD_ITE
 21

	)

968 
	#KRB5_KEYUSAGE_GSS_TOK_MIC
 22

	)

969 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG
 23

	)

970 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV
 24

	)

974 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_CKSUM
 25

	)

975 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_TRACKID
 26

	)

976 
	#KRB5_KEYUSAGE_PA_SAM_RESPONSE
 27

	)

983 
	#KRB5_KEYUSAGE_PA_REFERRAL
 26

	)

986 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REQUEST
 26

	)

987 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REPLY
 27

	)

989 
	#KRB5_KEYUSAGE_AD_SIGNEDPATH
 -21

	)

990 
	#KRB5_KEYUSAGE_IAKERB_FINISHED
 42

	)

991 
	#KRB5_KEYUSAGE_PA_PKINIT_KX
 44

	)

993 
	#KRB5_KEYUSAGE_FAST_REQ_CHKSUM
 50

	)

994 
	#KRB5_KEYUSAGE_FAST_ENC
 51

	)

995 
	#KRB5_KEYUSAGE_FAST_REP
 52

	)

996 
	#KRB5_KEYUSAGE_FAST_FINISHED
 53

	)

997 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_CLIENT
 54

	)

998 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_KDC
 55

	)

999 
	#KRB5_KEYUSAGE_AS_REQ
 56

	)

1009 
krb5_boﬁón
 
KRB5_CALLCONV


1010 
krb5_c_vÆid_í˘y≥
(
krb5_í˘y≥
 
kty≥
);

1019 
krb5_boﬁón
 
KRB5_CALLCONV


1020 
krb5_c_vÆid_cksumty≥
(
krb5_cksumty≥
 
˘y≥
);

1030 
krb5_boﬁón
 
KRB5_CALLCONV


1031 
krb5_c_is_cﬁl_¥oof_cksum
(
krb5_cksumty≥
 
˘y≥
);

1040 
krb5_boﬁón
 
KRB5_CALLCONV


1041 
krb5_c_is_keyed_cksum
(
krb5_cksumty≥
 
˘y≥
);

1047 
	#KRB5_CRYPTO_TYPE_EMPTY
 0

	)

1048 
	#KRB5_CRYPTO_TYPE_HEADER
 1

	)

1049 
	#KRB5_CRYPTO_TYPE_DATA
 2

	)

1050 
	#KRB5_CRYPTO_TYPE_SIGN_ONLY
 3

	)

1051 
	#KRB5_CRYPTO_TYPE_PADDING
 4

	)

1052 
	#KRB5_CRYPTO_TYPE_TRAILER
 5

	)

1053 
	#KRB5_CRYPTO_TYPE_CHECKSUM
 6

	)

1054 
	#KRB5_CRYPTO_TYPE_STREAM
 7

	)

1080 
krb5_îr‹_code
 
KRB5_CALLCONV


1081 
krb5_c_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1082 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

1083 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1107 
krb5_îr‹_code
 
KRB5_CALLCONV


1108 
krb5_c_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1109 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

1110 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

1111 
krb5_boﬁón
 *
vÆid
);

1143 
krb5_îr‹_code
 
KRB5_CALLCONV


1144 
krb5_c_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

1145 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

1146 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1178 
krb5_îr‹_code
 
KRB5_CALLCONV


1179 
krb5_c_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

1180 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

1181 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1193 
krb5_îr‹_code
 
KRB5_CALLCONV


1194 
krb5_c_¸y±o_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1195 
krb5_¸y±Ÿy≥
 
ty≥
, *
size
);

1212 
krb5_îr‹_code
 
KRB5_CALLCONV


1213 
krb5_c_¸y±o_Àngth_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1214 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1229 
krb5_îr‹_code
 
KRB5_CALLCONV


1230 
krb5_c_∑ddög_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1231 
size_t
 
d©a_Àngth
, *
size
);

1245 
krb5_îr‹_code
 
KRB5_CALLCONV


1246 
krb5_k_¸óã_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key_d©a
,

1247 
krb5_key
 *
out
);

1250 
KRB5_CALLCONV


1251 
krb5_k_ª„ªn˚_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1254 
KRB5_CALLCONV


1255 
krb5_k_‰ì_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1258 
krb5_îr‹_code
 
KRB5_CALLCONV


1259 
krb5_k_key_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
,

1260 
krb5_keyblock
 **
key_d©a
);

1263 
krb5_í˘y≥
 
KRB5_CALLCONV


1264 
krb5_k_key_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1289 
krb5_îr‹_code
 
KRB5_CALLCONV


1290 
krb5_k_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1291 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° krb5_d©®*
öput
,

1292 
krb5_íc_d©a
 *
ouçut
);

1324 
krb5_îr‹_code
 
KRB5_CALLCONV


1325 
krb5_k_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1326 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

1327 
size_t
 
num_d©a
);

1353 
krb5_îr‹_code
 
KRB5_CALLCONV


1354 
krb5_k_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1355 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° 
krb5_íc_d©a
 *
öput
,

1356 
krb5_d©a
 *
ouçut
);

1388 
krb5_îr‹_code
 
KRB5_CALLCONV


1389 
krb5_k_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1390 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

1391 
size_t
 
num_d©a
);

1417 
krb5_îr‹_code
 
KRB5_CALLCONV


1418 
krb5_k_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1419 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
öput
,

1420 
krb5_checksum
 *
cksum
);

1443 
krb5_îr‹_code
 
KRB5_CALLCONV


1444 
krb5_k_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1445 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1446 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1469 
krb5_îr‹_code
 
KRB5_CALLCONV


1470 
krb5_k_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1471 c⁄° 
krb5_d©a
 *
d©a
, c⁄° 
krb5_checksum
 *
cksum
,

1472 
krb5_boﬁón
 *
vÆid
);

1496 
krb5_îr‹_code
 
KRB5_CALLCONV


1497 
krb5_k_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1498 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1499 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

1500 
krb5_boﬁón
 *
vÆid
);

1520 
krb5_îr‹_code
 
KRB5_CALLCONV


1521 
krb5_k_¥f
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_d©a
 *
öput
, krb5_d©®*
ouçut
);

1523 #ifde‡
KRB5_OLD_CRYPTO


1529 
krb5_îr‹_code
 
KRB5_CALLCONV


1530 
krb5_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

1531 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

1532 
krb5_poöãr
 
ivec
);

1535 
krb5_îr‹_code
 
KRB5_CALLCONV


1536 
krb5_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

1537 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

1538 
krb5_poöãr
 
ivec
);

1541 
krb5_îr‹_code
 
KRB5_CALLCONV


1542 
krb5_¥o˚ss_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

1543 c⁄° 
krb5_keyblock
 * 
key
);

1546 
krb5_îr‹_code
 
KRB5_CALLCONV


1547 
krb5_föish_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 * 
eblock
);

1550 
krb5_îr‹_code
 
KRB5_CALLCONV


1551 
krb5_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1552 
krb5_keyblock
 * 
keyblock
, c⁄° 
krb5_d©a
 *
d©a
,

1553 c⁄° 
krb5_d©a
 *
ß…
);

1556 
krb5_îr‹_code
 
KRB5_CALLCONV


1557 
krb5_öô_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1558 c⁄° 
krb5_keyblock
 *
keyblock
, 
krb5_poöãr
 *
±r
);

1561 
krb5_îr‹_code
 
KRB5_CALLCONV


1562 
krb5_föish_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1563 
krb5_poöãr
 *
±r
);

1566 
krb5_îr‹_code
 
KRB5_CALLCONV


1567 
krb5_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1568 
krb5_poöãr
 
±r
, 
krb5_keyblock
 **
keyblock
);

1571 
krb5_í˘y≥
 
KRB5_CALLCONV


1572 
krb5_eblock_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
);

1575 
krb5_îr‹_code
 
KRB5_CALLCONV


1576 
krb5_u£_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

1577 
krb5_í˘y≥
 
í˘y≥
);

1580 
size_t
 
KRB5_CALLCONV


1581 
krb5_í¸y±_size
(
size_t
 
Àngth
, 
krb5_í˘y≥
 
¸y±o
);

1584 
size_t
 
KRB5_CALLCONV


1585 
krb5_checksum_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
);

1588 
krb5_îr‹_code
 
KRB5_CALLCONV


1589 
krb5_ˇlcuœã_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

1590 
krb5_c⁄°_poöãr
 
ö
, 
size_t
 
ö_Àngth
,

1591 
krb5_c⁄°_poöãr
 
£ed
, 
size_t
 
£ed_Àngth
,

1592 
krb5_checksum
 * 
outcksum
);

1595 
krb5_îr‹_code
 
KRB5_CALLCONV


1596 
krb5_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

1597 c⁄° 
krb5_checksum
 * 
cksum
, 
krb5_c⁄°_poöãr
 
ö
,

1598 
size_t
 
ö_Àngth
, 
krb5_c⁄°_poöãr
 
£ed
,

1599 
size_t
 
£ed_Àngth
);

1615 
	#KDC_OPT_FORWARDABLE
 0x40000000

	)

1616 
	#KDC_OPT_FORWARDED
 0x20000000

	)

1617 
	#KDC_OPT_PROXIABLE
 0x10000000

	)

1618 
	#KDC_OPT_PROXY
 0x08000000

	)

1619 
	#KDC_OPT_ALLOW_POSTDATE
 0x04000000

	)

1620 
	#KDC_OPT_POSTDATED
 0x02000000

	)

1622 
	#KDC_OPT_RENEWABLE
 0x00800000

	)

1628 
	#KDC_OPT_CNAME_IN_ADDL_TKT
 0x00020000

	)

1629 
	#KDC_OPT_CANONICALIZE
 0x00010000

	)

1630 
	#KDC_OPT_REQUEST_ANONYMOUS
 0x00008000

	)

1640 
	#KDC_OPT_DISABLE_TRANSITED_CHECK
 0x00000020

	)

1641 
	#KDC_OPT_RENEWABLE_OK
 0x00000010

	)

1642 
	#KDC_OPT_ENC_TKT_IN_SKEY
 0x00000008

	)

1644 
	#KDC_OPT_RENEW
 0x00000002

	)

1645 
	#KDC_OPT_VALIDATE
 0x00000001

	)

1654 
	#KDC_TKT_COMMON_MASK
 0x54800000

	)

1664 
	#AP_OPTS_RESERVED
 0x80000000

	)

1665 
	#AP_OPTS_USE_SESSION_KEY
 0x40000000

	)

1666 
	#AP_OPTS_MUTUAL_REQUIRED
 0x20000000

	)

1668 
	#AP_OPTS_ETYPE_NEGOTIATION
 0x00000002

	)

1669 
	#AP_OPTS_USE_SUBKEY
 0x00000001

	)

1702 
	#AP_OPTS_WIRE_MASK
 0xfffffff0

	)

1706 
	#AD_TYPE_RESERVED
 0x8000

	)

1707 
	#AD_TYPE_EXTERNAL
 0x4000

	)

1708 
	#AD_TYPE_REGISTERED
 0x2000

	)

1710 
	#AD_TYPE_FIELD_TYPE_MASK
 0x1fff

	)

1716 
	#TKT_FLG_FORWARDABLE
 0x40000000

	)

1717 
	#TKT_FLG_FORWARDED
 0x20000000

	)

1718 
	#TKT_FLG_PROXIABLE
 0x10000000

	)

1719 
	#TKT_FLG_PROXY
 0x08000000

	)

1720 
	#TKT_FLG_MAY_POSTDATE
 0x04000000

	)

1721 
	#TKT_FLG_POSTDATED
 0x02000000

	)

1722 
	#TKT_FLG_INVALID
 0x01000000

	)

1723 
	#TKT_FLG_RENEWABLE
 0x00800000

	)

1724 
	#TKT_FLG_INITIAL
 0x00400000

	)

1725 
	#TKT_FLG_PRE_AUTH
 0x00200000

	)

1726 
	#TKT_FLG_HW_AUTH
 0x00100000

	)

1727 
	#TKT_FLG_TRANSIT_POLICY_CHECKED
 0x00080000

	)

1728 
	#TKT_FLG_OK_AS_DELEGATE
 0x00040000

	)

1729 
	#TKT_FLG_ENC_PA_REP
 0x00010000

	)

1730 
	#TKT_FLG_ANONYMOUS
 0x00008000

	)

1748 
	#LR_TYPE_THIS_SERVER_ONLY
 0x8000

	)

1750 
	#LR_TYPE_INTERPRETATION_MASK
 0x7fff

	)

1753 
	#MSEC_DIRBIT
 0x8000

	)

1754 
	#MSEC_VAL_MASK
 0x7fff

	)

1765 
	#KRB5_PVNO
 5

	)

1769 
	#KRB5_AS_REQ
 ((
krb5_msgty≥
)10Ë

	)

1770 
	#KRB5_AS_REP
 ((
krb5_msgty≥
)11Ë

	)

1771 
	#KRB5_TGS_REQ
 ((
krb5_msgty≥
)12Ë

	)

1772 
	#KRB5_TGS_REP
 ((
krb5_msgty≥
)13Ë

	)

1773 
	#KRB5_AP_REQ
 ((
krb5_msgty≥
)14Ë

	)

1774 
	#KRB5_AP_REP
 ((
krb5_msgty≥
)15Ë

	)

1775 
	#KRB5_SAFE
 ((
krb5_msgty≥
)20Ë

	)

1776 
	#KRB5_PRIV
 ((
krb5_msgty≥
)21Ë

	)

1777 
	#KRB5_CRED
 ((
krb5_msgty≥
)22Ë

	)

1778 
	#KRB5_ERROR
 ((
krb5_msgty≥
)30Ë

	)

1781 
	#KRB5_LRQ_NONE
 0

	)

1782 
	#KRB5_LRQ_ALL_LAST_TGT
 1

	)

1783 
	#KRB5_LRQ_ONE_LAST_TGT
 (-1)

	)

1784 
	#KRB5_LRQ_ALL_LAST_INITIAL
 2

	)

1785 
	#KRB5_LRQ_ONE_LAST_INITIAL
 (-2)

	)

1786 
	#KRB5_LRQ_ALL_LAST_TGT_ISSUED
 3

	)

1787 
	#KRB5_LRQ_ONE_LAST_TGT_ISSUED
 (-3)

	)

1788 
	#KRB5_LRQ_ALL_LAST_RENEWAL
 4

	)

1789 
	#KRB5_LRQ_ONE_LAST_RENEWAL
 (-4)

	)

1790 
	#KRB5_LRQ_ALL_LAST_REQ
 5

	)

1791 
	#KRB5_LRQ_ONE_LAST_REQ
 (-5)

	)

1792 
	#KRB5_LRQ_ALL_PW_EXPTIME
 6

	)

1793 
	#KRB5_LRQ_ONE_PW_EXPTIME
 (-6)

	)

1794 
	#KRB5_LRQ_ALL_ACCT_EXPTIME
 7

	)

1795 
	#KRB5_LRQ_ONE_ACCT_EXPTIME
 (-7)

	)

1798 
	#KRB5_PADATA_NONE
 0

	)

1799 
	#KRB5_PADATA_AP_REQ
 1

	)

1800 
	#KRB5_PADATA_TGS_REQ
 
KRB5_PADATA_AP_REQ


	)

1801 
	#KRB5_PADATA_ENC_TIMESTAMP
 2

	)

1802 
	#KRB5_PADATA_PW_SALT
 3

	)

1804 
	#KRB5_PADATA_ENC_ENCKEY
 4

	)

1806 
	#KRB5_PADATA_ENC_UNIX_TIME
 5

	)

1807 
	#KRB5_PADATA_ENC_SANDIA_SECURID
 6

	)

1808 
	#KRB5_PADATA_SESAME
 7

	)

1809 
	#KRB5_PADATA_OSF_DCE
 8

	)

1810 
	#KRB5_CYBERSAFE_SECUREID
 9

	)

1811 
	#KRB5_PADATA_AFS3_SALT
 10

	)

1812 
	#KRB5_PADATA_ETYPE_INFO
 11

	)

1813 
	#KRB5_PADATA_SAM_CHALLENGE
 12

	)

1814 
	#KRB5_PADATA_SAM_RESPONSE
 13

	)

1815 
	#KRB5_PADATA_PK_AS_REQ_OLD
 14

	)

1816 
	#KRB5_PADATA_PK_AS_REP_OLD
 15

	)

1817 
	#KRB5_PADATA_PK_AS_REQ
 16

	)

1818 
	#KRB5_PADATA_PK_AS_REP
 17

	)

1819 
	#KRB5_PADATA_ETYPE_INFO2
 19

	)

1820 
	#KRB5_PADATA_USE_SPECIFIED_KVNO
 20

	)

1821 
	#KRB5_PADATA_SVR_REFERRAL_INFO
 20

	)

1822 
	#KRB5_PADATA_SAM_REDIRECT
 21

	)

1823 
	#KRB5_PADATA_GET_FROM_TYPED_DATA
 22

	)

1824 
	#KRB5_PADATA_REFERRAL
 25

	)

1825 
	#KRB5_PADATA_SAM_CHALLENGE_2
 30

	)

1826 
	#KRB5_PADATA_SAM_RESPONSE_2
 31

	)

1827 
	#KRB5_PADATA_PAC_REQUEST
 128

	)

1828 
	#KRB5_PADATA_FOR_USER
 129

	)

1829 
	#KRB5_PADATA_S4U_X509_USER
 130

	)

1830 
	#KRB5_PADATA_FX_COOKIE
 133

	)

1831 
	#KRB5_PADATA_FX_FAST
 136

	)

1832 
	#KRB5_PADATA_FX_ERROR
 137

	)

1833 
	#KRB5_PADATA_ENCRYPTED_CHALLENGE
 138

	)

1834 
	#KRB5_PADATA_PKINIT_KX
 147

	)

1835 
	#KRB5_ENCPADATA_REQ_ENC_PA_REP
 149

	)

1837 
	#KRB5_SAM_USE_SAD_AS_KEY
 0x80000000

	)

1838 
	#KRB5_SAM_SEND_ENCRYPTED_SAD
 0x40000000

	)

1839 
	#KRB5_SAM_MUST_PK_ENCRYPT_SAD
 0x20000000

	)

1842 
	#KRB5_DOMAIN_X500_COMPRESS
 1

	)

1845 
	#KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE
 64

	)

1852 
	#KRB5_AUTHDATA_IF_RELEVANT
 1

	)

1853 
	#KRB5_AUTHDATA_KDC_ISSUED
 4

	)

1854 
	#KRB5_AUTHDATA_AND_OR
 5

	)

1855 
	#KRB5_AUTHDATA_MANDATORY_FOR_KDC
 8

	)

1856 
	#KRB5_AUTHDATA_INITIAL_VERIFIED_CAS
 9

	)

1857 
	#KRB5_AUTHDATA_OSF_DCE
 64

	)

1858 
	#KRB5_AUTHDATA_SESAME
 65

	)

1859 
	#KRB5_AUTHDATA_WIN2K_PAC
 128

	)

1860 
	#KRB5_AUTHDATA_ETYPE_NEGOTIATION
 129

	)

1861 
	#KRB5_AUTHDATA_SIGNTICKET
 512

	)

1862 
	#KRB5_AUTHDATA_FX_ARMOR
 71

	)

1866 
	#KRB5_KPASSWD_SUCCESS
 0

	)

1867 
	#KRB5_KPASSWD_MALFORMED
 1

	)

1868 
	#KRB5_KPASSWD_HARDERROR
 2

	)

1869 
	#KRB5_KPASSWD_AUTHERROR
 3

	)

1870 
	#KRB5_KPASSWD_SOFTERROR
 4

	)

1873 
	#KRB5_KPASSWD_ACCESSDENIED
 5

	)

1874 
	#KRB5_KPASSWD_BAD_VERSION
 6

	)

1875 
	#KRB5_KPASSWD_INITIAL_FLAG_NEEDED
 7

	)

1883 
	s_krb5_tickë_times
 {

1884 
krb5_time°amp
 
	mauthtime
;

1887 
krb5_time°amp
 
	m°¨âime
;

1888 
krb5_time°amp
 
	mídtime
;

1889 
krb5_time°amp
 
	mª√w_tûl
;

1890 } 
	tkrb5_tickë_times
;

1893 
	s_krb5_authd©a
 {

1894 
krb5_magic
 
	mmagic
;

1895 
krb5_authd©©y≥
 
	mad_ty≥
;

1896 
	mÀngth
;

1897 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1898 } 
	tkrb5_authd©a
;

1901 
	s_krb5_å™sôed
 {

1902 
krb5_magic
 
	mmagic
;

1903 
krb5_o˘ë
 
	må_ty≥
;

1904 
krb5_d©a
 
	må_c⁄ã¡s
;

1905 } 
	tkrb5_å™sôed
;

1908 
	s_krb5_íc_tkt_∑π
 {

1909 
krb5_magic
 
	mmagic
;

1911 
krb5_Êags
 
	mÊags
;

1912 
krb5_keyblock
 *
	m£ssi⁄
;

1913 
krb5_¥öcùÆ
 
	m˛õ¡
;

1914 
krb5_å™sôed
 
	må™sôed
;

1915 
krb5_tickë_times
 
	mtimes
;

1916 
krb5_addªss
 **
	mˇddrs
;

1917 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1918 } 
	tkrb5_íc_tkt_∑π
;

1926 
	s_krb5_tickë
 {

1927 
krb5_magic
 
	mmagic
;

1929 
krb5_¥öcùÆ
 
	m£rvî
;

1930 
krb5_íc_d©a
 
	míc_∑π
;

1931 
krb5_íc_tkt_∑π
 *
	míc_∑π2
;

1932 } 
	tkrb5_tickë
;

1940 
	s_krb5_authítiˇt‹
 {

1941 
krb5_magic
 
	mmagic
;

1942 
krb5_¥öcùÆ
 
	m˛õ¡
;

1943 
krb5_checksum
 *
	mchecksum
;

1944 
krb5_öt32
 
	mcu£c
;

1945 
krb5_time°amp
 
	m˘ime
;

1946 
krb5_keyblock
 *
	msubkey
;

1947 
krb5_ui_4
 
	m£q_numbî
;

1948 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1949 } 
	tkrb5_authítiˇt‹
;

1952 
	s_krb5_tkt_authít
 {

1953 
krb5_magic
 
	mmagic
;

1954 
krb5_tickë
 *
	mtickë
;

1955 
krb5_authítiˇt‹
 *
	mauthítiˇt‹
;

1956 
krb5_Êags
 
	m≠_›ti⁄s
;

1957 } 
	tkrb5_tkt_authít
;

1960 
	s_krb5_¸eds
 {

1961 
krb5_magic
 
	mmagic
;

1962 
krb5_¥öcùÆ
 
	m˛õ¡
;

1963 
krb5_¥öcùÆ
 
	m£rvî
;

1964 
krb5_keyblock
 
	mkeyblock
;

1965 
krb5_tickë_times
 
	mtimes
;

1966 
krb5_boﬁón
 
	mis_skey
;

1968 
krb5_Êags
 
	mtickë_Êags
;

1969 
krb5_addªss
 **
	maddªs£s
;

1970 
krb5_d©a
 
	mtickë
;

1971 
krb5_d©a
 
	m£c⁄d_tickë
;

1974 
krb5_authd©a
 **
	mauthd©a
;

1975 } 
	tkrb5_¸eds
;

1978 
	s_krb5_œ°_ªq_íåy
 {

1979 
krb5_magic
 
	mmagic
;

1980 
krb5_öt32
 
	mÃ_ty≥
;

1981 
krb5_time°amp
 
	mvÆue
;

1982 } 
	tkrb5_œ°_ªq_íåy
;

1985 
	s_krb5_∑_d©a
 {

1986 
krb5_magic
 
	mmagic
;

1987 
krb5_¥óuthty≥
 
	m∑_ty≥
;

1988 
	mÀngth
;

1989 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1990 } 
	tkrb5_∑_d©a
;

1998 
	s_krb5_ty≥d_d©a
 {

1999 
krb5_magic
 
	mmagic
;

2000 
krb5_öt32
 
	mty≥
;

2001 
	mÀngth
;

2002 
krb5_o˘ë
 *
	md©a
;

2003 } 
	tkrb5_ty≥d_d©a
;

2006 
	s_krb5_kdc_ªq
 {

2007 
krb5_magic
 
	mmagic
;

2008 
krb5_msgty≥
 
	mmsg_ty≥
;

2009 
krb5_∑_d©a
 **
	m∑d©a
;

2011 
krb5_Êags
 
	mkdc_›ti⁄s
;

2012 
krb5_¥öcùÆ
 
	m˛õ¡
;

2013 
krb5_¥öcùÆ
 
	m£rvî
;

2014 
krb5_time°amp
 
	m‰om
;

2015 
krb5_time°amp
 
	mtûl
;

2016 
krb5_time°amp
 
	mπime
;

2017 
krb5_öt32
 
	mn⁄˚
;

2018 
	mnkty≥s
;

2019 
krb5_í˘y≥
 *
	mkty≥
;

2020 
krb5_addªss
 **
	maddªs£s
;

2021 
krb5_íc_d©a
 
	mauth‹iz©i⁄_d©a
;

2022 
krb5_authd©a
 **
	mu√nc_authd©a
;

2023 
krb5_tickë
 **
	m£c⁄d_tickë
;

2024 } 
	tkrb5_kdc_ªq
;

2031 
	s_krb5_íc_kdc_ªp_∑π
 {

2032 
krb5_magic
 
	mmagic
;

2034 
krb5_msgty≥
 
	mmsg_ty≥
;

2035 
krb5_keyblock
 *
	m£ssi⁄
;

2036 
krb5_œ°_ªq_íåy
 **
	mœ°_ªq
;

2037 
krb5_öt32
 
	mn⁄˚
;

2038 
krb5_time°amp
 
	mkey_exp
;

2039 
krb5_Êags
 
	mÊags
;

2040 
krb5_tickë_times
 
	mtimes
;

2041 
krb5_¥öcùÆ
 
	m£rvî
;

2042 
krb5_addªss
 **
	mˇddrs
;

2043 
krb5_∑_d©a
 **
	míc_∑d©a
;

2044 } 
	tkrb5_íc_kdc_ªp_∑π
;

2047 
	s_krb5_kdc_ªp
 {

2048 
krb5_magic
 
	mmagic
;

2050 
krb5_msgty≥
 
	mmsg_ty≥
;

2051 
krb5_∑_d©a
 **
	m∑d©a
;

2052 
krb5_¥öcùÆ
 
	m˛õ¡
;

2053 
krb5_tickë
 *
	mtickë
;

2054 
krb5_íc_d©a
 
	míc_∑π
;

2055 
krb5_íc_kdc_ªp_∑π
 *
	míc_∑π2
;

2056 } 
	tkrb5_kdc_ªp
;

2059 
	s_krb5_îr‹
 {

2060 
krb5_magic
 
	mmagic
;

2062 
krb5_time°amp
 
	m˘ime
;

2063 
krb5_öt32
 
	mcu£c
;

2064 
krb5_öt32
 
	msu£c
;

2065 
krb5_time°amp
 
	m°ime
;

2066 
krb5_ui_4
 
	mîr‹
;

2067 
krb5_¥öcùÆ
 
	m˛õ¡
;

2068 
krb5_¥öcùÆ
 
	m£rvî
;

2069 
krb5_d©a
 
	mãxt
;

2070 
krb5_d©a
 
	me_d©a
;

2071 } 
	tkrb5_îr‹
;

2074 
	s_krb5_≠_ªq
 {

2075 
krb5_magic
 
	mmagic
;

2076 
krb5_Êags
 
	m≠_›ti⁄s
;

2077 
krb5_tickë
 *
	mtickë
;

2078 
krb5_íc_d©a
 
	mauthítiˇt‹
;

2079 } 
	tkrb5_≠_ªq
;

2086 
	s_krb5_≠_ªp
 {

2087 
krb5_magic
 
	mmagic
;

2088 
krb5_íc_d©a
 
	míc_∑π
;

2089 } 
	tkrb5_≠_ªp
;

2092 
	s_krb5_≠_ªp_íc_∑π
 {

2093 
krb5_magic
 
	mmagic
;

2094 
krb5_time°amp
 
	m˘ime
;

2095 
krb5_öt32
 
	mcu£c
;

2096 
krb5_keyblock
 *
	msubkey
;

2097 
krb5_ui_4
 
	m£q_numbî
;

2098 } 
	tkrb5_≠_ªp_íc_∑π
;

2101 
	s_krb5_ª•⁄£
 {

2102 
krb5_magic
 
	mmagic
;

2103 
krb5_o˘ë
 
	mmesßge_ty≥
;

2104 
krb5_d©a
 
	mª•⁄£
;

2105 
krb5_öt32
 
	mex≥˘ed_n⁄˚
;

2106 
krb5_time°amp
 
	mªque°_time
;

2107 } 
	tkrb5_ª•⁄£
;

2110 
	s_krb5_¸ed_öfo
 {

2111 
krb5_magic
 
	mmagic
;

2112 
krb5_keyblock
 *
	m£ssi⁄
;

2113 
krb5_¥öcùÆ
 
	m˛õ¡
;

2114 
krb5_¥öcùÆ
 
	m£rvî
;

2115 
krb5_Êags
 
	mÊags
;

2116 
krb5_tickë_times
 
	mtimes
;

2117 
krb5_addªss
 **
	mˇddrs
;

2118 } 
	tkrb5_¸ed_öfo
;

2121 
	s_krb5_¸ed_íc_∑π
 {

2122 
krb5_magic
 
	mmagic
;

2123 
krb5_öt32
 
	mn⁄˚
;

2124 
krb5_time°amp
 
	mtime°amp
;

2125 
krb5_öt32
 
	mu£c
;

2126 
krb5_addªss
 *
	ms_addªss
;

2127 
krb5_addªss
 *
	mr_addªss
;

2128 
krb5_¸ed_öfo
 **
	mtickë_öfo
;

2129 } 
	tkrb5_¸ed_íc_∑π
;

2132 
	s_krb5_¸ed
 {

2133 
krb5_magic
 
	mmagic
;

2134 
krb5_tickë
 **
	mtickës
;

2135 
krb5_íc_d©a
 
	míc_∑π
;

2136 
krb5_¸ed_íc_∑π
 *
	míc_∑π2
;

2137 } 
	tkrb5_¸ed
;

2143 
	s_∑sswd_phø£_ñemít
 {

2144 
krb5_magic
 
	mmagic
;

2145 
krb5_d©a
 *
	m∑sswd
;

2146 
krb5_d©a
 *
	mphø£
;

2147 } 
	t∑sswd_phø£_ñemít
;

2153 
	s_krb5_pwd_d©a
 {

2154 
krb5_magic
 
	mmagic
;

2155 
	m£quí˚_cou¡
;

2156 
∑sswd_phø£_ñemít
 **
	mñemít
;

2157 } 
	tkrb5_pwd_d©a
;

2164 
	s_krb5_∑_svr_ª„ºÆ_d©a
 {

2166 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

2167 } 
	tkrb5_∑_svr_ª„ºÆ_d©a
;

2169 
	s_krb5_∑_£rvî_ª„ºÆ_d©a
 {

2170 
krb5_d©a
 *
	mª„ºed_ªÆm
;

2171 
krb5_¥öcùÆ
 
	måue_¥öcùÆ_«me
;

2172 
krb5_¥öcùÆ
 
	mªque°ed_¥öcùÆ_«me
;

2173 
krb5_time°amp
 
	mª„ºÆ_vÆid_u¡û
;

2174 
krb5_checksum
 
	mªp_cksum
;

2175 } 
	tkrb5_∑_£rvî_ª„ºÆ_d©a
;

2177 
	s_krb5_∑_∑c_ªq
 {

2179 
krb5_boﬁón
 
	mö˛ude_∑c
;

2180 } 
	tkrb5_∑_∑c_ªq
;

2189 
	#KRB5_AUTH_CONTEXT_DO_TIME
 0x00000001

	)

2190 
	#KRB5_AUTH_CONTEXT_RET_TIME
 0x00000002

	)

2191 
	#KRB5_AUTH_CONTEXT_DO_SEQUENCE
 0x00000004

	)

2192 
	#KRB5_AUTH_CONTEXT_RET_SEQUENCE
 0x00000008

	)

2193 
	#KRB5_AUTH_CONTEXT_PERMIT_ALL
 0x00000010

	)

2194 
	#KRB5_AUTH_CONTEXT_USE_SUBKEY
 0x00000020

	)

2203 
	skrb5_ª∂ay_d©a
 {

2204 
krb5_time°amp
 
	mtime°amp
;

2205 
krb5_öt32
 
	mu£c
;

2206 
krb5_ui_4
 
	m£q
;

2207 } 
	tkrb5_ª∂ay_d©a
;

2212 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR
 0x00000001

	)

2214 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR
 0x00000002

	)

2216 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR
 0x00000004

	)

2218 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR
 0x00000008

	)

2221 
	gkrb5_îr‹_code


2222 (
	tKRB5_CALLCONV
 * 
	tkrb5_mk_ªq_checksum_func
)(
	tkrb5_c⁄ãxt
, 
	tkrb5_auth_c⁄ãxt
,

2223 *, 
	tkrb5_d©a
 **);

2235 
krb5_poöãr
 
	tkrb5_cc_curs‹
;

2237 
	g_krb5_cˇche
;

2238 
_krb5_cˇche
 *
	tkrb5_cˇche
;

2239 
	g_krb5_cc_›s
;

2240 
_krb5_cc_›s
 
	tkrb5_cc_›s
;

2242 
	g_krb5_cccﬁ_curs‹
;

2244 
_krb5_cccﬁ_curs‹
 *
	tkrb5_cccﬁ_curs‹
;

2248 
	#KRB5_TC_MATCH_TIMES
 0x00000001

	)

2250 
	#KRB5_TC_MATCH_IS_SKEY
 0x00000002

	)

2252 
	#KRB5_TC_MATCH_FLAGS
 0x00000004

	)

2254 
	#KRB5_TC_MATCH_TIMES_EXACT
 0x00000008

	)

2256 
	#KRB5_TC_MATCH_FLAGS_EXACT
 0x00000010

	)

2258 
	#KRB5_TC_MATCH_AUTHDATA
 0x00000020

	)

2260 
	#KRB5_TC_MATCH_SRV_NAMEONLY
 0x00000040

	)

2262 
	#KRB5_TC_MATCH_2ND_TKT
 0x00000080

	)

2264 
	#KRB5_TC_MATCH_KTYPE
 0x00000100

	)

2266 
	#KRB5_TC_SUPPORTED_KTYPES
 0x00000200

	)

2270 
	#KRB5_TC_OPENCLOSE
 0x00000001

	)

2271 
	#KRB5_TC_NOTICKET
 0x00000002

	)

2287 c⁄° * 
KRB5_CALLCONV


2288 
krb5_cc_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2298 
krb5_îr‹_code
 
KRB5_CALLCONV


2299 
krb5_cc_gë_fuŒ_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2300 **
fuŒ«me_out
);

2302 #i‡
KRB5_DEPRECATED


2303 
krb5_îr‹_code
 
KRB5_CALLCONV


2304 
krb5_cc_gí_√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 *
ˇche
);

2322 
krb5_îr‹_code
 
KRB5_CALLCONV


2323 
krb5_cc_öôülize
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2324 
krb5_¥öcùÆ
 
¥öcùÆ
);

2340 
krb5_îr‹_code
 
KRB5_CALLCONV


2341 
krb5_cc_de°roy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2357 
krb5_îr‹_code
 
KRB5_CALLCONV


2358 
krb5_cc_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2375 
krb5_îr‹_code
 
KRB5_CALLCONV


2376 
krb5_cc_°‹e_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_¸eds
 *
¸eds
);

2411 
krb5_îr‹_code
 
KRB5_CALLCONV


2412 
krb5_cc_ªåõve_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2413 
krb5_Êags
 
Êags
, 
krb5_¸eds
 *
m¸eds
,

2414 
krb5_¸eds
 *
¸eds
);

2433 
krb5_îr‹_code
 
KRB5_CALLCONV


2434 
krb5_cc_gë_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2435 
krb5_¥öcùÆ
 *
¥öcùÆ
);

2451 
krb5_îr‹_code
 
KRB5_CALLCONV


2452 
krb5_cc_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2453 
krb5_cc_curs‹
 *
curs‹
);

2472 
krb5_îr‹_code
 
KRB5_CALLCONV


2473 
krb5_cc_√xt_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2474 
krb5_cc_curs‹
 *
curs‹
, 
krb5_¸eds
 *
¸eds
);

2490 
krb5_îr‹_code
 
KRB5_CALLCONV


2491 
krb5_cc_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2492 
krb5_cc_curs‹
 *
curs‹
);

2509 
krb5_îr‹_code
 
KRB5_CALLCONV


2510 
krb5_cc_ªmove_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
,

2511 
krb5_¸eds
 *
¸eds
);

2524 
krb5_îr‹_code
 
KRB5_CALLCONV


2525 
krb5_cc_£t_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
);

2538 
krb5_îr‹_code
 
KRB5_CALLCONV


2539 
krb5_cc_gë_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 *
Êags
);

2550 c⁄° * 
KRB5_CALLCONV


2551 
krb5_cc_gë_ty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2568 
krb5_îr‹_code
 
KRB5_CALLCONV


2569 
krb5_cc_move
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
§c
, krb5_cˇchê
d°
);

2580 
krb5_îr‹_code
 
KRB5_CALLCONV


2581 
krb5_cc_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

2582 
krb5_time°amp
 *
ch™ge_time
);

2594 
krb5_îr‹_code
 
KRB5_CALLCONV


2595 
krb5_cc_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

2607 
krb5_îr‹_code
 
KRB5_CALLCONV


2608 
krb5_cc_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

2626 
krb5_îr‹_code
 
KRB5_CALLCONV


2627 
krb5_cccﬁ_curs‹_√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

2645 
krb5_îr‹_code
 
KRB5_CALLCONV


2646 
krb5_cccﬁ_curs‹_√xt
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 
curs‹
,

2647 
krb5_cˇche
 *
cˇche
);

2659 
krb5_îr‹_code
 
KRB5_CALLCONV


2660 
krb5_cccﬁ_curs‹_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

2676 
krb5_îr‹_code
 
KRB5_CALLCONV


2677 
krb5_cccﬁ_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
ch™ge_time
);

2693 
krb5_îr‹_code
 
KRB5_CALLCONV


2694 
krb5_cccﬁ_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2705 
krb5_îr‹_code
 
KRB5_CALLCONV


2706 
krb5_cccﬁ_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2721 
krb5_îr‹_code
 
KRB5_CALLCONV


2722 
krb5_cc_√w_unique
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ty≥
, c⁄° *
höt
,

2723 
krb5_cˇche
 *
id
);

2733 
	gkrb5_rc_°
;

2734 
krb5_rc_°
 *
	tkrb5_rˇche
;

2746 
	#MAX_KEYTAB_NAME_LEN
 1100

	)

2748 
krb5_poöãr
 
	tkrb5_kt_curs‹
;

2751 
	skrb5_keyèb_íåy_°
 {

2752 
krb5_magic
 
	mmagic
;

2753 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

2754 
krb5_time°amp
 
	mtime°amp
;

2755 
krb5_kvno
 
	mvno
;

2756 
krb5_keyblock
 
	mkey
;

2757 } 
	tkrb5_keyèb_íåy
;

2759 
	g_krb5_kt
;

2760 
_krb5_kt
 *
	tkrb5_keyèb
;

2771 c⁄° * 
KRB5_CALLCONV


2772 
krb5_kt_gë_ty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

2794 
krb5_îr‹_code
 
KRB5_CALLCONV


2795 
krb5_kt_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
, *
«me
,

2796 
«mñí
);

2806 
krb5_îr‹_code
 
KRB5_CALLCONV


2807 
krb5_kt_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

2835 
krb5_îr‹_code
 
KRB5_CALLCONV


2836 
krb5_kt_gë_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2837 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
, 
krb5_kvno
 
vno
,

2838 
krb5_í˘y≥
 
í˘y≥
, 
krb5_keyèb_íåy
 *
íåy
);

2857 
krb5_îr‹_code
 
KRB5_CALLCONV


2858 
krb5_kt_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2859 
krb5_kt_curs‹
 *
curs‹
);

2880 
krb5_îr‹_code
 
KRB5_CALLCONV


2881 
krb5_kt_√xt_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2882 
krb5_keyèb_íåy
 *
íåy
, 
krb5_kt_curs‹
 *
curs‹
);

2899 
krb5_îr‹_code
 
KRB5_CALLCONV


2900 
krb5_kt_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2901 
krb5_kt_curs‹
 *
curs‹
);

2911 
	#KRB5_INIT_CONTEXT_SECURE
 0x1

	)

2912 
	#KRB5_INIT_CONTEXT_KDC
 0x2

	)

2931 
krb5_îr‹_code
 
KRB5_CALLCONV


2932 
krb5_öô_c⁄ãxt
(
krb5_c⁄ãxt
 *
c⁄ãxt
);

2950 
krb5_îr‹_code
 
KRB5_CALLCONV


2951 
krb5_öô_£cuª_c⁄ãxt
(
krb5_c⁄ãxt
 *
c⁄ãxt
);

2969 
krb5_îr‹_code
 
KRB5_CALLCONV


2970 
krb5_öô_c⁄ãxt_¥ofûe
(
_¥ofûe_t
 *
¥ofûe
, 
krb5_Êags
 
Êags
,

2971 
krb5_c⁄ãxt
 *
c⁄ãxt
);

2981 
KRB5_CALLCONV


2982 
krb5_‰ì_c⁄ãxt
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2998 
krb5_îr‹_code
 
KRB5_CALLCONV


2999 
krb5_c›y_c⁄ãxt
(
krb5_c⁄ãxt
 
˘x
, krb5_c⁄ãxà*
n˘x_out
);

3019 
krb5_îr‹_code
 
KRB5_CALLCONV


3020 
krb5_£t_deÁu…_tgs_í˘y≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í˘y≥
 *
ëy≥s
);

3034 
krb5_îr‹_code
 
KRB5_CALLCONV


3035 
krb5_gë_≥rmôãd_í˘y≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 **
kty≥s
);

3043 
krb5_boﬁón
 
KRB5_CALLCONV


3044 
krb5_is_thªad_ß„
();

3060 
krb5_îr‹_code
 
KRB5_CALLCONV


3061 
krb5_£rvî_de¸y±_tickë_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyèb
 
kt
,

3062 
krb5_tickë
 *
tickë
);

3072 
KRB5_CALLCONV


3073 
krb5_‰ì_tgt_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 **
tgts
);

3078 
	#KRB5_GC_USER_USER
 1

	)

3079 
	#KRB5_GC_CACHED
 2

	)

3080 
	#KRB5_GC_CANONICALIZE
 4

	)

3081 
	#KRB5_GC_NO_STORE
 8

	)

3082 
	#KRB5_GC_FORWARDABLE
 16

	)

3083 
	#KRB5_GC_NO_TRANSIT_CHECK
 32

	)

3084 
	#KRB5_GC_CONSTRAINED_DELEGATION
 64

	)

3126 
krb5_îr‹_code
 
KRB5_CALLCONV


3127 
krb5_gë_¸edítüls
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3128 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3129 
krb5_¸eds
 **
out_¸eds
);

3132 
krb5_îr‹_code
 
KRB5_CALLCONV


3133 
krb5_gë_¸edítüls_vÆid©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3134 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3135 
krb5_¸eds
 **
out_¸eds
);

3138 
krb5_îr‹_code
 
KRB5_CALLCONV


3139 
krb5_gë_¸edítüls_ª√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3140 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3141 
krb5_¸eds
 **
out_¸eds
);

3165 
krb5_îr‹_code
 
KRB5_CALLCONV


3166 
krb5_mk_ªq
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

3167 
krb5_Êags
 
≠_ªq_›ti⁄s
, *
£rvi˚
, *
ho°«me
,

3168 
krb5_d©a
 *
ö_d©a
, 
krb5_cˇche
 
cˇche
, krb5_d©®*
outbuf
);

3207 
krb5_îr‹_code
 
KRB5_CALLCONV


3208 
krb5_mk_ªq_exãnded
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

3209 
krb5_Êags
 
≠_ªq_›ti⁄s
, 
krb5_d©a
 *
ö_d©a
,

3210 
krb5_¸eds
 *
ö_¸eds
, 
krb5_d©a
 *
outbuf
);

3232 
krb5_îr‹_code
 
KRB5_CALLCONV


3233 
krb5_mk_ªp
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_d©a
 *
outbuf
);

3246 
krb5_îr‹_code
 
KRB5_CALLCONV


3247 
krb5_mk_ªp_d˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_d©a
 *
outbuf
);

3265 
krb5_îr‹_code
 
KRB5_CALLCONV


3266 
krb5_rd_ªp
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3267 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_≠_ªp_íc_∑π
 **
ª∂
);

3282 
krb5_îr‹_code
 
KRB5_CALLCONV


3283 
krb5_rd_ªp_d˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3284 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_ui_4
 *
n⁄˚
);

3298 
krb5_îr‹_code
 
KRB5_CALLCONV


3299 
krb5_mk_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_îr‹
 *
dec_îr
,

3300 
krb5_d©a
 *
íc_îr
);

3315 
krb5_îr‹_code
 
KRB5_CALLCONV


3316 
krb5_rd_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
íc_îrbuf
,

3317 
krb5_îr‹
 **
dec_îr‹
);

3355 
krb5_îr‹_code
 
KRB5_CALLCONV


3356 
krb5_rd_ß„
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3357 c⁄° 
krb5_d©a
 *
öbuf
, krb5_d©®*
outbuf
,

3358 
krb5_ª∂ay_d©a
 *
outd©a
);

3395 
krb5_îr‹_code
 
KRB5_CALLCONV


3396 
krb5_rd_¥iv
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3397 c⁄° 
krb5_d©a
 *
öbuf
, krb5_d©®*
outbuf
,

3398 
krb5_ª∂ay_d©a
 *
outd©a
);

3431 
krb5_îr‹_code
 
KRB5_CALLCONV


3432 
krb5_∑r£_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_¥öcùÆ
 *
≈röcùÆ
);

3434 
	#KRB5_PRINCIPAL_PARSE_NO_REALM
 0x1

	)

3435 
	#KRB5_PRINCIPAL_PARSE_REQUIRE_REALM
 0x2

	)

3436 
	#KRB5_PRINCIPAL_PARSE_ENTERPRISE
 0x4

	)

3463 
krb5_îr‹_code
 
KRB5_CALLCONV


3464 
krb5_∑r£_«me_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
,

3465 
Êags
, 
krb5_¥öcùÆ
 *
≈röcùÆ
);

3484 
krb5_îr‹_code
 
KRB5_CALLCONV


3485 
krb5_u≈¨£_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3486 **
«me
);

3504 
krb5_îr‹_code
 
KRB5_CALLCONV


3505 
krb5_u≈¨£_«me_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3506 **
«me
, *
size
);

3508 
	#KRB5_PRINCIPAL_UNPARSE_SHORT
 0x1

	)

3509 
	#KRB5_PRINCIPAL_UNPARSE_NO_REALM
 0x2

	)

3510 
	#KRB5_PRINCIPAL_UNPARSE_DISPLAY
 0x4

	)

3535 
krb5_îr‹_code
 
KRB5_CALLCONV


3536 
krb5_u≈¨£_«me_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3537 
Êags
, **
«me
);

3555 
krb5_îr‹_code
 
KRB5_CALLCONV


3556 
krb5_u≈¨£_«me_Êags_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3557 
Êags
, **
«me
, *
size
);

3574 
krb5_îr‹_code
 
KRB5_CALLCONV


3575 
krb5_£t_¥öcùÆ_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
¥öcùÆ
,

3576 c⁄° *
ªÆm
);

3592 
krb5_boﬁón
 
KRB5_CALLCONV_WRONG


3593 
krb5_addªss_£¨ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr
,

3594 
krb5_addªss
 *c⁄° *
addæi°
);

3606 
krb5_boﬁón
 
KRB5_CALLCONV


3607 
krb5_addªss_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr1
,

3608 c⁄° 
krb5_addªss
 *
addr2
);

3624 
KRB5_CALLCONV


3625 
krb5_addªss_‹dî
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr1
,

3626 c⁄° 
krb5_addªss
 *
addr2
);

3638 
krb5_boﬁón
 
KRB5_CALLCONV


3639 
krb5_ªÆm_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3640 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3652 
krb5_boﬁón
 
KRB5_CALLCONV


3653 
krb5_¥öcùÆ_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3654 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3655 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3670 
krb5_boﬁón
 
KRB5_CALLCONV


3671 
krb5_¥öcùÆ_com∑ª_™y_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3672 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3673 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3675 
	#KRB5_PRINCIPAL_COMPARE_IGNORE_REALM
 1

	)

3676 
	#KRB5_PRINCIPAL_COMPARE_ENTERPRISE
 2

	)

3677 
	#KRB5_PRINCIPAL_COMPARE_CASEFOLD
 4

	)

3678 
	#KRB5_PRINCIPAL_COMPARE_UTF8
 8

	)

3699 
krb5_boﬁón
 
KRB5_CALLCONV


3700 
krb5_¥öcùÆ_com∑ª_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3701 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3702 
krb5_c⁄°_¥öcùÆ
 
¥öc2
,

3703 
Êags
);

3722 
krb5_îr‹_code
 
KRB5_CALLCONV


3723 
krb5_öô_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

3724 
size_t
 
Àngth
, 
krb5_keyblock
 **
out
);

3738 
krb5_îr‹_code
 
KRB5_CALLCONV


3739 
krb5_c›y_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
‰om
,

3740 
krb5_keyblock
 **
to
);

3754 
krb5_îr‹_code
 
KRB5_CALLCONV


3755 
krb5_c›y_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
‰om
,

3756 
krb5_keyblock
 *
to
);

3770 
krb5_îr‹_code
 
KRB5_CALLCONV


3771 
krb5_c›y_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_¸eds
 *
ö¸ed
, krb5_¸ed†**
out¸ed
);

3785 
krb5_îr‹_code
 
KRB5_CALLCONV


3786 
krb5_c›y_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
öd©a
, krb5_d©®**
outd©a
);

3801 
krb5_îr‹_code
 
KRB5_CALLCONV


3802 
krb5_c›y_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
ö¥öc
,

3803 
krb5_¥öcùÆ
 *
ouçröc
);

3817 
krb5_îr‹_code
 
KRB5_CALLCONV


3818 
krb5_c›y_addªs£s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 *c⁄° *
öaddr
,

3819 
krb5_addªss
 ***
ouèddr
);

3833 
krb5_îr‹_code
 
KRB5_CALLCONV


3834 
krb5_c›y_tickë
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_tickë
 *
‰om
, krb5_tickë **
±o
);

3851 
krb5_îr‹_code
 
KRB5_CALLCONV


3852 
krb5_c›y_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3853 
krb5_authd©a
 *c⁄° *
ö_authd©
, krb5_authd©®***
out
);

3871 
krb5_îr‹_code
 
KRB5_CALLCONV


3872 
krb5_föd_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authd©a
 *c⁄° *
tickë_authd©a
,

3873 
krb5_authd©a
 *c⁄° *
≠_ªq_authd©a
,

3874 
krb5_authd©©y≥
 
ad_ty≥
, 
krb5_authd©a
 ***
ªsu…s
);

3893 
krb5_îr‹_code
 
KRB5_CALLCONV


3894 
krb5_mîge_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3895 
krb5_authd©a
 *c⁄° *
öauthd©1
,

3896 
krb5_authd©a
 * c⁄° *
öauthd©2
,

3897 
krb5_authd©a
 ***
ouèuthd©
);

3912 
krb5_îr‹_code
 
KRB5_CALLCONV


3913 
krb5_c›y_authítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_authítiˇt‹
 *
auth‰om
,

3914 
krb5_authítiˇt‹
 **
authto
);

3929 
krb5_îr‹_code
 
KRB5_CALLCONV


3930 
krb5_c›y_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_checksum
 *
ck‰om
,

3931 
krb5_checksum
 **
ckto
);

3947 
krb5_îr‹_code
 
KRB5_CALLCONV


3948 
krb5_gë_£rvî_rˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
põ˚
,

3949 
krb5_rˇche
 *
r˝å
);

3980 
krb5_îr‹_code
 
KRB5_CALLCONV_C


3981 
krb5_buûd_¥öcùÆ_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 * 
¥öc
,

3982 
æí
, c⁄° * 
ªÆm
, ...);

4010 
krb5_îr‹_code
 
KRB5_CALLCONV_C


4011 
	$krb5_buûd_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4012 
krb5_¥öcùÆ
 * 
¥öc
,

4013 
æí
,

4014 c⁄° * 
ªÆm
, ...)

4015 #i‡
__GNUC__
 >= 4

4016 
	`__©åibuã__
 ((
£¡öñ
))

4019 #i‡
KRB5_DEPRECATED


4021 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


4022 
	`krb5_buûd_¥öcùÆ_va
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4023 
krb5_¥öcùÆ
 
¥öc
,

4024 
æí
,

4025 c⁄° *
ªÆm
,

4026 
va_li°
 
≠
);

4057 
krb5_îr‹_code
 
KRB5_CALLCONV


4058 
	`krb5_buûd_¥öcùÆ_Æloc_va
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4059 
krb5_¥öcùÆ
 *
¥öc
,

4060 
æí
,

4061 c⁄° *
ªÆm
,

4062 
va_li°
 
≠
);

4080 
krb5_îr‹_code
 
KRB5_CALLCONV


4081 
	`krb5_425_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
,

4082 c⁄° *
ö°™˚
, c⁄° *
ªÆm
,

4083 
krb5_¥öcùÆ
 *
¥öc
);

4106 
krb5_îr‹_code
 
KRB5_CALLCONV


4107 
	`krb5_524_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öc
,

4108 *
«me
, *
ö°
, *
ªÆm
);

4112 
¸edítüls
;

4121 
KRB5_CALLCONV


4122 
	`krb5_524_c⁄vît_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
v5¸eds
,

4123 
¸edítüls
 *
v4¸eds
);

4125 #i‡
KRB5_DEPRECATED


4126 
	#krb524_c⁄vît_¸eds_kdc
 
krb5_524_c⁄vît_¸eds


	)

4127 
	#krb524_öô_ës
(
x
Ë(0)

	)

4157 
krb5_îr‹_code
 
KRB5_CALLCONV


4158 
	`krb5_kt_ªsﬁve
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_keyèb
 *
ktid
);

4179 
krb5_îr‹_code
 
KRB5_CALLCONV


4180 
	`krb5_kt_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
«me
, 
«me_size
);

4195 
krb5_îr‹_code
 
KRB5_CALLCONV


4196 
	`krb5_kt_deÁu…
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 *
id
);

4208 
krb5_îr‹_code
 
KRB5_CALLCONV


4209 
	`krb5_‰ì_keyèb_íåy_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb_íåy
 *
íåy
);

4212 
krb5_îr‹_code
 
KRB5_CALLCONV


4213 
	`krb5_kt_‰ì_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb_íåy
 *
íåy
);

4233 
krb5_îr‹_code
 
KRB5_CALLCONV


4234 
	`krb5_kt_ªmove_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
id
, 
krb5_keyèb_íåy
 *
íåy
);

4252 
krb5_îr‹_code
 
KRB5_CALLCONV


4253 
	`krb5_kt_add_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
id
, 
krb5_keyèb_íåy
 *
íåy
);

4264 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


4265 
	`krb5_¥öcùÆ2ß…
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4266 
krb5_c⁄°_¥öcùÆ
 
¥
, 
krb5_d©a
 *
ªt
);

4292 
krb5_îr‹_code
 
KRB5_CALLCONV


4293 
	`krb5_cc_ªsﬁve
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_cˇche
 *
ˇche
);

4305 
krb5_îr‹_code
 
KRB5_CALLCONV


4306 
	`krb5_cc_dup
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ö
, krb5_cˇchê*
out
);

4319 c⁄° *
KRB5_CALLCONV


4320 
	`krb5_cc_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
);

4338 
krb5_îr‹_code
 
KRB5_CALLCONV


4339 
	`krb5_cc_£t_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
);

4357 
krb5_îr‹_code
 
KRB5_CALLCONV


4358 
	`krb5_cc_deÁu…
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 *
cˇche
);

4369 
krb5_îr‹_code
 
KRB5_CALLCONV


4370 
	`krb5_cc_c›y_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
öcc
, krb5_cˇchê
outcc
);

4389 
krb5_îr‹_code
 
KRB5_CALLCONV


4390 
	`krb5_cc_gë_c⁄fig
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
id
,

4391 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

4392 c⁄° *
key
, 
krb5_d©a
 *
d©a
);

4413 
krb5_îr‹_code
 
KRB5_CALLCONV


4414 
	`krb5_cc_£t_c⁄fig
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
id
,

4415 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

4416 c⁄° *
key
, 
krb5_d©a
 *
d©a
);

4428 
krb5_boﬁón
 
KRB5_CALLCONV


4429 
	`krb5_is_c⁄fig_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
);

4445 
krb5_îr‹_code
 
KRB5_CALLCONV


4446 
	`krb5_cc_swôch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

4457 
krb5_boﬁón
 
KRB5_CALLCONV


4458 
	`krb5_cc_suµ‹t_swôch
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ty≥
);

4475 
krb5_îr‹_code
 
KRB5_CALLCONV


4476 
	`krb5_cc_ˇche_m©ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
˛õ¡
,

4477 
krb5_cˇche
 *
ˇche_out
);

4511 
krb5_îr‹_code
 
KRB5_CALLCONV


4512 
	`krb5_cc_£À˘
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
£rvî
,

4513 
krb5_cˇche
 *
ˇche_out
, 
krb5_¥öcùÆ
 *
¥öc_out
);

4522 
KRB5_CALLCONV


4523 
	`krb5_‰ì_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
vÆ
);

4533 
KRB5_CALLCONV


4534 
	`krb5_‰ì_authítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authítiˇt‹
 *
vÆ
);

4546 
KRB5_CALLCONV


4547 
	`krb5_‰ì_addªs£s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 **
vÆ
);

4559 
KRB5_CALLCONV


4560 
	`krb5_‰ì_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authd©a
 **
vÆ
);

4570 
KRB5_CALLCONV


4571 
	`krb5_‰ì_tickë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tickë
 *
vÆ
);

4581 
KRB5_CALLCONV


4582 
	`krb5_‰ì_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_îr‹
 *
vÆ
);

4592 
KRB5_CALLCONV


4593 
	`krb5_‰ì_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
vÆ
);

4603 
KRB5_CALLCONV


4604 
	`krb5_‰ì_¸ed_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
vÆ
);

4614 
KRB5_CALLCONV


4615 
	`krb5_‰ì_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_checksum
 *
vÆ
);

4625 
KRB5_CALLCONV


4626 
	`krb5_‰ì_checksum_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_checksum
 *
vÆ
);

4636 
KRB5_CALLCONV


4637 
	`krb5_‰ì_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyblock
 *
vÆ
);

4647 
KRB5_CALLCONV


4648 
	`krb5_‰ì_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyblock
 *
key
);

4658 
KRB5_CALLCONV


4659 
	`krb5_‰ì_≠_ªp_íc_∑π
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_≠_ªp_íc_∑π
 *
vÆ
);

4669 
KRB5_CALLCONV


4670 
	`krb5_‰ì_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
vÆ
);

4681 
KRB5_CALLCONV


4682 
	`krb5_‰ì_o˘ë_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_o˘ë_d©a
 *
vÆ
);

4692 
KRB5_CALLCONV


4693 
	`krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
vÆ
);

4701 
KRB5_CALLCONV


4702 
	`krb5_‰ì_u≈¨£d_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
vÆ
);

4710 
KRB5_CALLCONV


4711 
	`krb5_‰ì_°rög
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
vÆ
);

4719 
KRB5_CALLCONV


4720 
	`krb5_‰ì_cksumty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 *
vÆ
);

4740 
krb5_îr‹_code
 
KRB5_CALLCONV


4741 
	`krb5_us_timeofday
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4742 
krb5_time°amp
 *
£c⁄ds
, 
krb5_öt32
 *
mi¸o£c⁄ds
);

4758 
krb5_îr‹_code
 
KRB5_CALLCONV


4759 
	`krb5_timeofday
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
timîë
);

4773 
krb5_îr‹_code
 
KRB5_CALLCONV


4774 
	`krb5_check_˛ockskew
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 
d©e
);

4787 
krb5_îr‹_code
 
KRB5_CALLCONV


4788 
	`krb5_os_loˇœddr
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 ***
addr
);

4806 
krb5_îr‹_code
 
KRB5_CALLCONV


4807 
	`krb5_gë_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, **
Ãólm
);

4822 
krb5_îr‹_code
 
KRB5_CALLCONV


4823 
	`krb5_£t_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
Ãólm
);

4831 
KRB5_CALLCONV


4832 
	`krb5_‰ì_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
Ãólm
);

4863 
krb5_îr‹_code
 
KRB5_CALLCONV


4864 
	`krb5_¢ame_to_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ho°«me
, c⁄° *
¢ame
,

4865 
krb5_öt32
 
ty≥
, 
krb5_¥öcùÆ
 *
ªt_¥öc
);

4887 
krb5_boﬁón
 
KRB5_CALLCONV


4888 
	`krb5_¢ame_m©ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
m©chög
,

4889 
krb5_c⁄°_¥öcùÆ
 
¥öc
);

4913 
krb5_îr‹_code
 
KRB5_CALLCONV


4914 
	`krb5_ch™ge_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

4915 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

4916 
krb5_d©a
 *
ªsu…_°rög
);

4948 
krb5_îr‹_code
 
KRB5_CALLCONV


4949 
	`krb5_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

4950 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
, *
ªsu…_code
,

4951 
krb5_d©a
 *
ªsu…_code_°rög
, krb5_d©®*
ªsu…_°rög
);

4983 
krb5_îr‹_code
 
KRB5_CALLCONV


4984 
	`krb5_£t_∑ssw‹d_usög_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

4985 *
√wpw
, 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
,

4986 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

4987 
krb5_d©a
 *
ªsu…_°rög
);

5006 
krb5_îr‹_code
 
KRB5_CALLCONV


5007 
	`krb5_gë_¥ofûe
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
_¥ofûe_t
 ** 
¥ofûe
);

5009 #i‡
KRB5_DEPRECATED


5011 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5012 
	`krb5_gë_ö_tkt_wôh_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5013 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5014 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5015 c⁄° *
∑ssw‹d
, 
krb5_cˇche
 
cˇche
,

5016 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5019 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5020 
	`krb5_gë_ö_tkt_wôh_skey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5021 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5022 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5023 c⁄° 
krb5_keyblock
 *
key
, 
krb5_cˇche
 
cˇche
,

5024 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5027 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5028 
	`krb5_gë_ö_tkt_wôh_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5029 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5030 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5031 
krb5_keyèb
 
¨g_keyèb
, 
krb5_cˇche
 
cˇche
,

5032 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5082 
krb5_îr‹_code
 
KRB5_CALLCONV


5083 
	`krb5_rd_ªq
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5084 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_c⁄°_¥öcùÆ
 
£rvî
,

5085 
krb5_keyèb
 
keyèb
, 
krb5_Êags
 *
≠_ªq_›ti⁄s
,

5086 
krb5_tickë
 **
tickë
);

5110 
krb5_îr‹_code
 
KRB5_CALLCONV


5111 
	`krb5_kt_ªad_£rvi˚_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_poöãr
 
key¥oˇrg
,

5112 
krb5_¥öcùÆ
 
¥öcùÆ
, 
krb5_kvno
 
vno
,

5113 
krb5_í˘y≥
 
í˘y≥
, 
krb5_keyblock
 **
key
);

5153 
krb5_îr‹_code
 
KRB5_CALLCONV


5154 
	`krb5_mk_ß„
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5155 c⁄° 
krb5_d©a
 *
u£rd©a
, krb5_d©®*
outbuf
,

5156 
krb5_ª∂ay_d©a
 *
outd©a
);

5192 
krb5_îr‹_code
 
KRB5_CALLCONV


5193 
	`krb5_mk_¥iv
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5194 c⁄° 
krb5_d©a
 *
u£rd©a
, krb5_d©®*
outbuf
,

5195 
krb5_ª∂ay_d©a
 *
outd©a
);

5246 
krb5_îr‹_code
 
KRB5_CALLCONV


5247 
	`krb5_£ndauth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5248 
krb5_poöãr
 
fd
, *
≠∂_vîsi⁄
, 
krb5_¥öcùÆ
 
˛õ¡
,

5249 
krb5_¥öcùÆ
 
£rvî
, 
krb5_Êags
 
≠_ªq_›ti⁄s
,

5250 
krb5_d©a
 *
ö_d©a
, 
krb5_¸eds
 *
ö_¸eds
, 
krb5_cˇche
 
cˇche
,

5251 
krb5_îr‹
 **
îr‹
, 
krb5_≠_ªp_íc_∑π
 **
ªp_ªsu…
,

5252 
krb5_¸eds
 **
out_¸eds
);

5276 
krb5_îr‹_code
 
KRB5_CALLCONV


5277 
	`krb5_ªcvauth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5278 
krb5_poöãr
 
fd
, *
≠∂_vîsi⁄
, 
krb5_¥öcùÆ
 
£rvî
,

5279 
krb5_öt32
 
Êags
, 
krb5_keyèb
 
keyèb
, 
krb5_tickë
 **
tickë
);

5298 
krb5_îr‹_code
 
KRB5_CALLCONV


5299 
	`krb5_ªcvauth_vîsi⁄
(
krb5_c⁄ãxt
 
c⁄ãxt
,

5300 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5301 
krb5_poöãr
 
fd
,

5302 
krb5_¥öcùÆ
 
£rvî
,

5303 
krb5_öt32
 
Êags
,

5304 
krb5_keyèb
 
keyèb
,

5305 
krb5_tickë
 **
tickë
,

5306 
krb5_d©a
 *
vîsi⁄
);

5335 
krb5_îr‹_code
 
KRB5_CALLCONV


5336 
	`krb5_mk_n¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5337 
krb5_¸eds
 **
µ¸eds
, 
krb5_d©a
 **
µd©a
,

5338 
krb5_ª∂ay_d©a
 *
outd©a
);

5361 
krb5_îr‹_code
 
KRB5_CALLCONV


5362 
	`krb5_mk_1¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5363 
krb5_¸eds
 *
p¸eds
, 
krb5_d©a
 **
µd©a
,

5364 
krb5_ª∂ay_d©a
 *
outd©a
);

5386 
krb5_îr‹_code
 
KRB5_CALLCONV


5387 
	`krb5_rd_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5388 
krb5_d©a
 *
p¸edd©a
, 
krb5_¸eds
 ***
µp¸eds
,

5389 
krb5_ª∂ay_d©a
 *
outd©a
);

5420 
krb5_îr‹_code
 
KRB5_CALLCONV


5421 
	`krb5_fwd_tgt_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5422 *
rho°
, 
krb5_¥öcùÆ
 
˛õ¡
, krb5_¥öcùÆ 
£rvî
,

5423 
krb5_cˇche
 
cc
, 
f‹w¨dabÀ
, 
krb5_d©a
 *
outbuf
);

5444 
krb5_îr‹_code
 
KRB5_CALLCONV


5445 
	`krb5_auth_c⁄_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
);

5457 
krb5_îr‹_code
 
KRB5_CALLCONV


5458 
	`krb5_auth_c⁄_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
);

5475 
krb5_îr‹_code
 
KRB5_CALLCONV


5476 
	`krb5_auth_c⁄_£tÊags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_öt32
 
Êags
);

5493 
krb5_îr‹_code
 
KRB5_CALLCONV


5494 
	`krb5_auth_c⁄_gëÊags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5495 
krb5_öt32
 *
Êags
);

5511 
krb5_îr‹_code
 
KRB5_CALLCONV


5512 
	`krb5_auth_c⁄_£t_checksum_func
–
krb5_c⁄ãxt
 
c⁄ãxt
,

5513 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5514 
krb5_mk_ªq_checksum_func
 
func
,

5515 *
d©a
);

5527 
krb5_îr‹_code
 
KRB5_CALLCONV


5528 
	`krb5_auth_c⁄_gë_checksum_func
–
krb5_c⁄ãxt
 
c⁄ãxt
,

5529 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5530 
krb5_mk_ªq_checksum_func
 *
func
,

5531 **
d©a
);

5549 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


5550 
	`krb5_auth_c⁄_£èddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5551 
krb5_addªss
 *
loˇl_addr
, krb5_addªs†*
ªmŸe_addr
);

5563 
krb5_îr‹_code
 
KRB5_CALLCONV


5564 
	`krb5_auth_c⁄_gëaddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5565 
krb5_addªss
 **
loˇl_addr
, krb5_addªs†**
ªmŸe_addr
);

5583 
krb5_îr‹_code
 
KRB5_CALLCONV


5584 
	`krb5_auth_c⁄_£ç‹ts
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5585 
krb5_addªss
 *
loˇl_p‹t
, krb5_addªs†*
ªmŸe_p‹t
);

5596 
krb5_îr‹_code
 
KRB5_CALLCONV


5597 
	`krb5_auth_c⁄_£tu£ru£rkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5598 
krb5_keyblock
 *
keyblock
);

5613 
krb5_îr‹_code
 
KRB5_CALLCONV


5614 
	`krb5_auth_c⁄_gëkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5615 
krb5_keyblock
 **
keyblock
);

5629 
krb5_îr‹_code
 
KRB5_CALLCONV


5630 
	`krb5_auth_c⁄_gëkey_k
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5631 
krb5_key
 *
key
);

5646 
krb5_îr‹_code
 
KRB5_CALLCONV


5647 
	`krb5_auth_c⁄_gë£ndsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_keyblock
 **
keyblock
);

5661 
krb5_îr‹_code
 
KRB5_CALLCONV


5662 
	`krb5_auth_c⁄_gë£ndsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5663 
krb5_key
 *
key
);

5678 
krb5_îr‹_code
 
KRB5_CALLCONV


5679 
	`krb5_auth_c⁄_gëªcvsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_keyblock
 **
keyblock
);

5693 
krb5_îr‹_code
 
KRB5_CALLCONV


5694 
	`krb5_auth_c⁄_gëªcvsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_key
 *
key
);

5707 
krb5_îr‹_code
 
KRB5_CALLCONV


5708 
	`krb5_auth_c⁄_£t£ndsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5709 
krb5_keyblock
 *
keyblock
);

5723 
krb5_îr‹_code
 
KRB5_CALLCONV


5724 
	`krb5_auth_c⁄_£t£ndsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_key
 
key
);

5737 
krb5_îr‹_code
 
KRB5_CALLCONV


5738 
	`krb5_auth_c⁄_£åecvsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5739 
krb5_keyblock
 *
keyblock
);

5753 
krb5_îr‹_code
 
KRB5_CALLCONV


5754 
	`krb5_auth_c⁄_£åecvsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5755 
krb5_key
 
key
);

5757 #i‡
KRB5_DEPRECATED


5759 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5760 
	`krb5_auth_c⁄_gëloˇlsubkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5761 
krb5_keyblock
 **
keyblock
);

5764 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5765 
	`krb5_auth_c⁄_gëªmŸesubkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5766 
krb5_keyblock
 **
keyblock
);

5782 
krb5_îr‹_code
 
KRB5_CALLCONV


5783 
	`krb5_auth_c⁄_gëloˇl£qnumbî
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5784 
krb5_öt32
 *
£qnumbî
);

5799 
krb5_îr‹_code
 
KRB5_CALLCONV


5800 
	`krb5_auth_c⁄_gëªmŸe£qnumbî
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5801 
krb5_öt32
 *
£qnumbî
);

5803 #i‡
KRB5_DEPRECATED


5809 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5810 
	`krb5_auth_c⁄_öôive˘‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
);

5826 
krb5_îr‹_code
 
KRB5_CALLCONV


5827 
	`krb5_auth_c⁄_£åˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5828 
krb5_rˇche
 
rˇche
);

5842 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


5843 
	`krb5_auth_c⁄_gërˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5844 
krb5_rˇche
 *
rˇche
);

5858 
krb5_îr‹_code
 
KRB5_CALLCONV


5859 
	`krb5_auth_c⁄_gëauthítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5860 
krb5_authítiˇt‹
 **
authítiˇt‹
);

5874 
krb5_îr‹_code
 
KRB5_CALLCONV


5875 
	`krb5_auth_c⁄_£t_ªq_cksumty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5876 
krb5_cksumty≥
 
cksumty≥
);

5878 
	#KRB5_REALM_BRANCH_CHAR
 '.'

	)

5919 
krb5_îr‹_code
 
KRB5_CALLCONV


5920 
	`krb5_ªad_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
,

5921 c⁄° *
¥om±
, c⁄° *
¥om±2
,

5922 *
ªtu∫_pwd
, *
size_ªtu∫
);

5947 
krb5_îr‹_code
 
KRB5_CALLCONV


5948 
	`krb5_™ame_to_loˇ ame
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
™ame
,

5949 
 size_ö
, *
 ame
);

5974 
krb5_îr‹_code
 
KRB5_CALLCONV


5975 
	`krb5_gë_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ho°
, ***
ªÆm•
);

5992 
krb5_îr‹_code
 
KRB5_CALLCONV


5993 
	`krb5_gë_ÁŒback_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
,

5994 
krb5_d©a
 *
hd©a
, ***
ªÆm•
);

6007 
krb5_îr‹_code
 
KRB5_CALLCONV


6008 
	`krb5_‰ì_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, *c⁄° *
ªÆmli°
);

6023 
krb5_boﬁón
 
KRB5_CALLCONV


6024 
	`krb5_ku£rok
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
¥öcùÆ
, c⁄° *
lu£r
);

6045 
krb5_îr‹_code
 
KRB5_CALLCONV


6046 
	`krb5_auth_c⁄_gíaddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

6047 
öfd
, 
Êags
);

6062 
krb5_îr‹_code
 
KRB5_CALLCONV


6063 
	`krb5_£t_ªÆ_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 
£c⁄ds
,

6064 
krb5_öt32
 
mi¸o£c⁄ds
);

6077 
krb5_îr‹_code
 
KRB5_CALLCONV


6078 
	`krb5_gë_time_off£ts
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
£c⁄ds
, 
krb5_öt32
 *
mi¸o£c⁄ds
);

6089 
krb5_îr‹_code
 
KRB5_CALLCONV


6090 
	`krb5_°rög_to_í˘y≥
(*
°rög
, 
krb5_í˘y≥
 *
í˘y≥p
);

6100 
krb5_îr‹_code
 
KRB5_CALLCONV


6101 
	`krb5_°rög_to_ß…ty≥
(*
°rög
, 
krb5_öt32
 *
ß…ty≥p
);

6111 
krb5_îr‹_code
 
KRB5_CALLCONV


6112 
	`krb5_°rög_to_cksumty≥
(*
°rög
, 
krb5_cksumty≥
 *
cksumty≥p
);

6122 
krb5_îr‹_code
 
KRB5_CALLCONV


6123 
	`krb5_°rög_to_time°amp
(*
°rög
, 
krb5_time°amp
 *
time°amµ
);

6133 
krb5_îr‹_code
 
KRB5_CALLCONV


6134 
	`krb5_°rög_to_dñèt
(*
°rög
, 
krb5_dñèt
 *
dñèç
);

6145 
krb5_îr‹_code
 
KRB5_CALLCONV


6146 
	`krb5_í˘y≥_to_°rög
(
krb5_í˘y≥
 
í˘y≥
, *
buf„r
, 
size_t
 
buÊí
);

6162 
krb5_îr‹_code
 
KRB5_CALLCONV


6163 
	`krb5_í˘y≥_to_«me
(
krb5_í˘y≥
 
í˘y≥
, 
krb5_boﬁón
 
sh‹ã°
,

6164 *
buf„r
, 
size_t
 
buÊí
);

6175 
krb5_îr‹_code
 
KRB5_CALLCONV


6176 
	`krb5_ß…ty≥_to_°rög
(
krb5_öt32
 
ß…ty≥
, *
buf„r
, 
size_t
 
buÊí
);

6187 
krb5_îr‹_code
 
KRB5_CALLCONV


6188 
	`krb5_cksumty≥_to_°rög
(
krb5_cksumty≥
 
cksumty≥
, *
buf„r
, 
size_t
 
buÊí
);

6202 
krb5_îr‹_code
 
KRB5_CALLCONV


6203 
	`krb5_time°amp_to_°rög
(
krb5_time°amp
 
time°amp
, *
buf„r
, 
size_t
 
buÊí
);

6219 
krb5_îr‹_code
 
KRB5_CALLCONV


6220 
	`krb5_time°amp_to_sf°rög
(
krb5_time°amp
 
time°amp
, *
buf„r
,

6221 
size_t
 
buÊí
, *
∑d
);

6232 
krb5_îr‹_code
 
KRB5_CALLCONV


6233 
	`krb5_dñèt_to_°rög
(
krb5_dñèt
 
dñèt
, *
buf„r
, 
size_t
 
buÊí
);

6236 
	#KRB5_TGS_NAME
 "krbtgt"

	)

6237 
	#KRB5_TGS_NAME_SIZE
 6

	)

6240 
	#KRB5_RECVAUTH_SKIP_VERSION
 0x0001

	)

6241 
	#KRB5_RECVAUTH_BADAUTHVERS
 0x0002

	)

6245 
	s_krb5_¥om±
 {

6246 *
¥om±
;

6247 
hiddí
;

6248 
krb5_d©a
 *
ª∂y
;

6249 } 
	tkrb5_¥om±
;

6252 
krb5_îr‹_code


6253 (
	tKRB5_CALLCONV
 *
	tkrb5_¥om±î_f˘
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
, *
	td©a
,

6254 c⁄° *
	t«me
, c⁄° *
	tb™√r
,

6255 
	tnum_¥om±s
, 
	tkrb5_¥om±
 
	t¥om±s
[]);

6282 
krb5_îr‹_code
 
KRB5_CALLCONV


6283 
	`krb5_¥om±î_posix
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
d©a
, c⁄° *
«me
,

6284 c⁄° *
b™√r
, 
num_¥om±s
,

6285 
krb5_¥om±
 
¥om±s
[]);

6288 
	s_krb5_gë_öô_¸eds_›t
 {

6289 
krb5_Êags
 
Êags
;

6290 
krb5_dñèt
 
tkt_li„
;

6291 
krb5_dñèt
 
ª√w_li„
;

6292 
f‹w¨dabÀ
;

6293 
¥oxübÀ
;

6294 
krb5_í˘y≥
 *
ëy≥_li°
;

6295 
ëy≥_li°_Àngth
;

6296 
krb5_addªss
 **
addªss_li°
;

6297 
krb5_¥óuthty≥
 *
¥óuth_li°
;

6298 
¥óuth_li°_Àngth
;

6299 
krb5_d©a
 *
ß…
;

6300 } 
	tkrb5_gë_öô_¸eds_›t
;

6302 
	#KRB5_GET_INIT_CREDS_OPT_TKT_LIFE
 0x0001

	)

6303 
	#KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE
 0x0002

	)

6304 
	#KRB5_GET_INIT_CREDS_OPT_FORWARDABLE
 0x0004

	)

6305 
	#KRB5_GET_INIT_CREDS_OPT_PROXIABLE
 0x0008

	)

6306 
	#KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST
 0x0010

	)

6307 
	#KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST
 0x0020

	)

6308 
	#KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST
 0x0040

	)

6309 
	#KRB5_GET_INIT_CREDS_OPT_SALT
 0x0080

	)

6310 
	#KRB5_GET_INIT_CREDS_OPT_CHG_PWD_PRMPT
 0x0100

	)

6311 
	#KRB5_GET_INIT_CREDS_OPT_CANONICALIZE
 0x0200

	)

6312 
	#KRB5_GET_INIT_CREDS_OPT_ANONYMOUS
 0x0400

	)

6328 
krb5_îr‹_code
 
KRB5_CALLCONV


6329 
	`krb5_gë_öô_¸eds_›t_Æloc
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6330 
krb5_gë_öô_¸eds_›t
 **
›t
);

6340 
KRB5_CALLCONV


6341 
	`krb5_gë_öô_¸eds_›t_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6342 
krb5_gë_öô_¸eds_›t
 *
›t
);

6345 
KRB5_CALLCONV


6346 
	`krb5_gë_öô_¸eds_›t_öô
(
krb5_gë_öô_¸eds_›t
 *
›t
);

6354 
KRB5_CALLCONV


6355 
	`krb5_gë_öô_¸eds_›t_£t_tkt_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6356 
krb5_dñèt
 
tkt_li„
);

6364 
KRB5_CALLCONV


6365 
	`krb5_gë_öô_¸eds_›t_£t_ª√w_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6366 
krb5_dñèt
 
ª√w_li„
);

6374 
KRB5_CALLCONV


6375 
	`krb5_gë_öô_¸eds_›t_£t_f‹w¨dabÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6376 
f‹w¨dabÀ
);

6384 
KRB5_CALLCONV


6385 
	`krb5_gë_öô_¸eds_›t_£t_¥oxübÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6386 
¥oxübÀ
);

6394 
KRB5_CALLCONV


6395 
	`krb5_gë_öô_¸eds_›t_£t_ˇn⁄iˇlize
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6396 
ˇn⁄iˇlize
);

6409 
KRB5_CALLCONV


6410 
	`krb5_gë_öô_¸eds_›t_£t_™⁄ymous
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6411 
™⁄ymous
);

6420 
KRB5_CALLCONV


6421 
	`krb5_gë_öô_¸eds_›t_£t_ëy≥_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6422 
krb5_í˘y≥
 *
ëy≥_li°
,

6423 
ëy≥_li°_Àngth
);

6431 
KRB5_CALLCONV


6432 
	`krb5_gë_öô_¸eds_›t_£t_addªss_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6433 
krb5_addªss
 **
addªs£s
);

6446 
KRB5_CALLCONV


6447 
	`krb5_gë_öô_¸eds_›t_£t_¥óuth_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6448 
krb5_¥óuthty≥
 *
¥óuth_li°
,

6449 
¥óuth_li°_Àngth
);

6462 
KRB5_CALLCONV


6463 
	`krb5_gë_öô_¸eds_›t_£t_ß…
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6464 
krb5_d©a
 *
ß…
);

6476 
KRB5_CALLCONV


6477 
	`krb5_gë_öô_¸eds_›t_£t_ch™ge_∑ssw‹d_¥om±
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6478 
¥om±
);

6481 
	s_krb5_gic_›t_∑_d©a
 {

6482 *
©å
;

6483 *
vÆue
;

6484 } 
	tkrb5_gic_›t_∑_d©a
;

6498 
krb5_îr‹_code
 
KRB5_CALLCONV


6499 
	`krb5_gë_öô_¸eds_›t_£t_∑
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6500 
krb5_gë_öô_¸eds_›t
 *
›t
, c⁄° *
©å
,

6501 c⁄° *
vÆue
);

6518 
krb5_îr‹_code
 
KRB5_CALLCONV


6519 
	`krb5_gë_öô_¸eds_›t_£t_Á°_cˇche_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6520 
krb5_gë_öô_¸eds_›t
 *
›t
,

6521 c⁄° *
Á°_cˇche_«me
);

6533 
krb5_îr‹_code
 
KRB5_CALLCONV


6534 
	`krb5_gë_öô_¸eds_›t_£t_Á°_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6535 
krb5_gë_öô_¸eds_›t
 *
›t
,

6536 
krb5_cˇche
 
cˇche
);

6551 
krb5_îr‹_code
 
KRB5_CALLCONV


6552 
	`krb5_gë_öô_¸eds_›t_£t_out_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6553 
krb5_gë_öô_¸eds_›t
 *
›t
,

6554 
krb5_cˇche
 
cˇche
);

6569 
krb5_îr‹_code
 
KRB5_CALLCONV


6570 
	`krb5_gë_öô_¸eds_›t_£t_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6571 
krb5_gë_öô_¸eds_›t
 *
›t
,

6572 
krb5_Êags
 
Êags
);

6584 
krb5_îr‹_code
 
KRB5_CALLCONV


6585 
	`krb5_gë_öô_¸eds_›t_gë_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6586 
krb5_gë_öô_¸eds_›t
 *
›t
,

6587 
krb5_Êags
 *
out_Êags
);

6590 
	#KRB5_FAST_REQUIRED
 1l<<0

	)

6593 (
	tKRB5_CALLCONV
 *
	tkrb5_expúe_ˇŒback_func
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
, *
	td©a
,

6594 
	tkrb5_time°amp
 
	t∑ssw‹d_expú©i⁄
,

6595 
	tkrb5_time°amp
 
	taccou¡_expú©i⁄
,

6596 
	tkrb5_boﬁón
 
	tis_œ°_ªq
);

6635 
krb5_îr‹_code
 
KRB5_CALLCONV


6636 
	`krb5_gë_öô_¸eds_›t_£t_expúe_ˇŒback
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6637 
krb5_gë_öô_¸eds_›t
 *
›t
,

6638 
krb5_expúe_ˇŒback_func
 
cb
,

6639 *
d©a
);

6685 
krb5_îr‹_code
 
KRB5_CALLCONV


6686 
	`krb5_gë_öô_¸eds_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

6687 
krb5_¥öcùÆ
 
˛õ¡
, *
∑ssw‹d
,

6688 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

6689 
krb5_dñèt
 
°¨t_time
, *
ö_tkt_£rvi˚
,

6690 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

6692 
_krb5_öô_¸eds_c⁄ãxt
;

6693 
_krb5_öô_¸eds_c⁄ãxt
 *
	tkrb5_öô_¸eds_c⁄ãxt
;

6695 
	#KRB5_INIT_CREDS_STEP_FLAG_CONTINUE
 0x1

	)

6703 
KRB5_CALLCONV


6704 
	`krb5_öô_¸eds_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

6718 
krb5_îr‹_code
 
KRB5_CALLCONV


6719 
	`krb5_öô_¸eds_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

6735 
krb5_îr‹_code
 
KRB5_CALLCONV


6736 
	`krb5_öô_¸eds_gë_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6737 
krb5_¸eds
 *
¸eds
);

6748 
krb5_îr‹_code
 
KRB5_CALLCONV


6749 
	`krb5_öô_¸eds_gë_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6750 
krb5_îr‹
 **
îr‹
);

6768 
krb5_îr‹_code
 
KRB5_CALLCONV


6769 
	`krb5_öô_¸eds_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
˛õ¡
,

6770 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

6771 
krb5_dñèt
 
°¨t_time
, 
krb5_gë_öô_¸eds_›t
 *
›ti⁄s
,

6772 
krb5_öô_¸eds_c⁄ãxt
 *
˘x
);

6786 
krb5_îr‹_code
 
KRB5_CALLCONV


6787 
	`krb5_öô_¸eds_£t_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6788 
krb5_keyèb
 
keyèb
);

6817 
krb5_îr‹_code
 
KRB5_CALLCONV


6818 
	`krb5_öô_¸eds_°ï
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6819 
krb5_d©a
 *
ö
, krb5_d©®*
out
, krb5_d©®*
ªÆm
,

6820 *
Êags
);

6834 
krb5_îr‹_code
 
KRB5_CALLCONV


6835 
	`krb5_öô_¸eds_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6836 c⁄° *
∑ssw‹d
);

6851 
krb5_îr‹_code
 
KRB5_CALLCONV


6852 
	`krb5_öô_¸eds_£t_£rvi˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6853 c⁄° *
£rvi˚
);

6867 
krb5_îr‹_code
 
KRB5_CALLCONV


6868 
	`krb5_öô_¸eds_gë_times
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

6869 
krb5_tickë_times
 *
times
);

6871 
_krb5_tkt_¸eds_c⁄ãxt
;

6872 
_krb5_tkt_¸eds_c⁄ãxt
 *
	tkrb5_tkt_¸eds_c⁄ãxt
;

6896 
krb5_îr‹_code
 
KRB5_CALLCONV


6897 
	`krb5_tkt_¸eds_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

6898 
krb5_¸eds
 *
¸eds
, 
krb5_Êags
 
›ti⁄s
,

6899 
krb5_tkt_¸eds_c⁄ãxt
 *
˘x
);

6913 
krb5_îr‹_code
 
KRB5_CALLCONV


6914 
	`krb5_tkt_¸eds_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
);

6930 
krb5_îr‹_code
 
KRB5_CALLCONV


6931 
	`krb5_tkt_¸eds_gë_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

6932 
krb5_¸eds
 *
¸eds
);

6940 
KRB5_CALLCONV


6941 
	`krb5_tkt_¸eds_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
);

6943 
	#KRB5_TKT_CREDS_STEP_FLAG_CONTINUE
 0x1

	)

6971 
krb5_îr‹_code
 
KRB5_CALLCONV


6972 
	`krb5_tkt_¸eds_°ï
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

6973 
krb5_d©a
 *
ö
, krb5_d©®*
out
, krb5_d©®*
ªÆm
,

6974 *
Êags
);

6988 
krb5_îr‹_code
 
KRB5_CALLCONV


6989 
	`krb5_tkt_¸eds_gë_times
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

6990 
krb5_tickë_times
 *
times
);

7016 
krb5_îr‹_code
 
KRB5_CALLCONV


7017 
	`krb5_gë_öô_¸eds_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7018 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_keyèb
 
¨g_keyèb
,

7019 
krb5_dñèt
 
°¨t_time
, *
ö_tkt_£rvi˚
,

7020 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

7022 
	s_krb5_vîify_öô_¸eds_›t
 {

7023 
krb5_Êags
 
Êags
;

7024 
≠_ªq_noÁû
;

7025 } 
	tkrb5_vîify_öô_¸eds_›t
;

7027 
	#KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL
 0x0001

	)

7034 
KRB5_CALLCONV


7035 
	`krb5_vîify_öô_¸eds_›t_öô
(
krb5_vîify_öô_¸eds_›t
 *
k5_vic_›ti⁄s
);

7052 
KRB5_CALLCONV


7053 
	`krb5_vîify_öô_¸eds_›t_£t_≠_ªq_noÁû
(
krb5_vîify_öô_¸eds_›t
 * 
k5_vic_›ti⁄s
,

7054 
≠_ªq_noÁû
);

7087 
krb5_îr‹_code
 
KRB5_CALLCONV


7088 
	`krb5_vîify_öô_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7089 
krb5_¥öcùÆ
 
£rvî_¨g
, 
krb5_keyèb
 
keyèb_¨g
,

7090 
krb5_cˇche
 *
cˇche_¨g
, 
krb5_vîify_öô_¸eds_›t
 *
›ti⁄s
);

7125 
krb5_îr‹_code
 
KRB5_CALLCONV


7126 
	`krb5_gë_vÆid©ed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7127 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

7128 *
ö_tkt_£rvi˚
);

7151 
krb5_îr‹_code
 
KRB5_CALLCONV


7152 
	`krb5_gë_ª√wed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7153 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

7154 *
ö_tkt_£rvi˚
);

7164 
krb5_îr‹_code
 
KRB5_CALLCONV


7165 
	`krb5_decode_tickë
(c⁄° 
krb5_d©a
 *
code
, 
krb5_tickë
 **
ªp
);

7182 
KRB5_CALLCONV


7183 
	`krb5_≠pdeÁu…_°rög
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

7184 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

7185 c⁄° *
deÁu…_vÆue
, ** 
ªt_vÆue
);

7202 
KRB5_CALLCONV


7203 
	`krb5_≠pdeÁu…_boﬁón
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

7204 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

7205 
deÁu…_vÆue
, *
ªt_vÆue
);

7210 
	#KRB5_PROMPT_TYPE_PASSWORD
 0x1

	)

7211 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD
 0x2

	)

7212 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN
 0x3

	)

7213 
	#KRB5_PROMPT_TYPE_PREAUTH
 0x4

	)

7215 
krb5_öt32
 
	tkrb5_¥om±_ty≥
;

7230 
krb5_¥om±_ty≥
* 
KRB5_CALLCONV


7231 
	`krb5_gë_¥om±_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
);

7242 
KRB5_CALLCONV_C


7243 
	$krb5_£t_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
, c⁄° *
fmt
, ...)

7244 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

7245 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 4)))

7257 
KRB5_CALLCONV


7258 
	$krb5_v£t_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
,

7259 c⁄° *
fmt
, 
va_li°
 
¨gs
)

7260 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

7261 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 0)))

7271 
KRB5_CALLCONV


7272 
	`krb5_c›y_îr‹_mesßge
(
krb5_c⁄ãxt
 
de°_˘x
, krb5_c⁄ãxà
§c_˘x
);

7294 c⁄° * 
KRB5_CALLCONV


7295 
	`krb5_gë_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
);

7303 
KRB5_CALLCONV


7304 
	`krb5_‰ì_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, c⁄° *
msg
);

7314 
KRB5_CALLCONV


7315 
	`krb5_˛ór_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
);

7329 
krb5_îr‹_code
 
KRB5_CALLCONV


7330 
	`krb5_decode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7331 
krb5_authd©©y≥
 
ty≥
,

7332 c⁄° 
krb5_authd©a
 *
c⁄èöî
,

7333 
krb5_authd©a
 ***
authd©a
);

7348 
krb5_îr‹_code
 
KRB5_CALLCONV


7349 
	`krb5_ícode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7350 
krb5_authd©©y≥
 
ty≥
,

7351 
krb5_authd©a
 * c⁄°*
authd©a
,

7352 
krb5_authd©a
 ***
c⁄èöî
);

7370 
krb5_îr‹_code
 
KRB5_CALLCONV


7371 
	`krb5_make_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7372 c⁄° 
krb5_keyblock
 *
key
,

7373 
krb5_c⁄°_¥öcùÆ
 
issuî
,

7374 
krb5_authd©a
 *c⁄° *
authd©a
,

7375 
krb5_authd©a
 ***
ad_kdcissued
);

7391 
krb5_îr‹_code
 
KRB5_CALLCONV


7392 
	`krb5_vîify_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7393 c⁄° 
krb5_keyblock
 *
key
,

7394 c⁄° 
krb5_authd©a
 *
ad_kdcissued
,

7395 
krb5_¥öcùÆ
 *
issuî
,

7396 
krb5_authd©a
 ***
authd©a
);

7403 
	#KRB5_PAC_LOGON_INFO
 1

	)

7404 
	#KRB5_PAC_CREDENTIALS_INFO
 2

	)

7405 
	#KRB5_PAC_SERVER_CHECKSUM
 6

	)

7406 
	#KRB5_PAC_PRIVSVR_CHECKSUM
 7

	)

7407 
	#KRB5_PAC_CLIENT_INFO
 10

	)

7408 
	#KRB5_PAC_DELEGATION_INFO
 11

	)

7409 
	#KRB5_PAC_UPN_DNS_INFO
 12

	)

7411 
krb5_∑c_d©a
;

7413 
krb5_∑c_d©a
 *
	tkrb5_∑c
;

7437 
krb5_îr‹_code
 
KRB5_CALLCONV


7438 
	`krb5_∑c_add_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

7439 c⁄° 
krb5_d©a
 *
d©a
);

7449 
KRB5_CALLCONV


7450 
	`krb5_∑c_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
);

7464 
krb5_îr‹_code
 
KRB5_CALLCONV


7465 
	`krb5_∑c_gë_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

7466 
krb5_d©a
 *
d©a
);

7478 
krb5_îr‹_code
 
KRB5_CALLCONV


7479 
	`krb5_∑c_gë_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
size_t
 *
Àn
,

7480 
krb5_ui_4
 **
ty≥s
);

7492 
krb5_îr‹_code
 
KRB5_CALLCONV


7493 
	`krb5_∑c_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 *
∑c
);

7507 
krb5_îr‹_code
 
KRB5_CALLCONV


7508 
	`krb5_∑c_∑r£
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
±r
, 
size_t
 
Àn
,

7509 
krb5_∑c
 *
∑c
);

7537 
krb5_îr‹_code
 
KRB5_CALLCONV


7538 
	`krb5_∑c_vîify
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_∑c
 
∑c
,

7539 
krb5_time°amp
 
authtime
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

7540 c⁄° 
krb5_keyblock
 *
£rvî
, c⁄° krb5_keyblock *
¥ivsvr
);

7558 
krb5_îr‹_code
 
KRB5_CALLCONV


7559 
	`krb5_∑c_sign
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_time°amp
 
authtime
,

7560 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
, c⁄° 
krb5_keyblock
 *
£rvî_key
,

7561 c⁄° 
krb5_keyblock
 *
¥ivsvr_key
, 
krb5_d©a
 *
d©a
);

7574 
krb5_îr‹_code
 
KRB5_CALLCONV


7575 
	`krb5_Ælow_wók_¸y±o
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_boﬁón
 
íabÀ
);

7578 
	skrb5_åa˚_öfo
 {

7579 c⁄° *
mesßge
;

7583 (
	tKRB5_CALLCONV
 *
	tkrb5_åa˚_ˇŒback
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
,

7584 c⁄° 
	tkrb5_åa˚_öfo
 *
	töfo
,

7585 *
	tcb_d©a
);

7605 
krb5_îr‹_code
 
KRB5_CALLCONV


7606 
	`krb5_£t_åa˚_ˇŒback
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_åa˚_ˇŒback
 
‚
,

7607 *
cb_d©a
);

7620 
krb5_îr‹_code
 
KRB5_CALLCONV


7621 
	`krb5_£t_åa˚_fûíame
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
fûíame
);

7623 #i‡
TARGET_OS_MAC


7624 #¥agm®
	`∑ck
(
p›
)

7627 
KRB5INT_END_DECLS


7631 
	#krb5_c⁄°
 c⁄°

	)

7633 #unde‡
KRB5_ATTR_DEPRECATED


7641 
	~<ë/com_îr.h
>

7643 
	#KRB5KDC_ERR_NONE
 (-1765328384L)

	)

7644 
	#KRB5KDC_ERR_NAME_EXP
 (-1765328383L)

	)

7645 
	#KRB5KDC_ERR_SERVICE_EXP
 (-1765328382L)

	)

7646 
	#KRB5KDC_ERR_BAD_PVNO
 (-1765328381L)

	)

7647 
	#KRB5KDC_ERR_C_OLD_MAST_KVNO
 (-1765328380L)

	)

7648 
	#KRB5KDC_ERR_S_OLD_MAST_KVNO
 (-1765328379L)

	)

7649 
	#KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN
 (-1765328378L)

	)

7650 
	#KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN
 (-1765328377L)

	)

7651 
	#KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE
 (-1765328376L)

	)

7652 
	#KRB5KDC_ERR_NULL_KEY
 (-1765328375L)

	)

7653 
	#KRB5KDC_ERR_CANNOT_POSTDATE
 (-1765328374L)

	)

7654 
	#KRB5KDC_ERR_NEVER_VALID
 (-1765328373L)

	)

7655 
	#KRB5KDC_ERR_POLICY
 (-1765328372L)

	)

7656 
	#KRB5KDC_ERR_BADOPTION
 (-1765328371L)

	)

7657 
	#KRB5KDC_ERR_ETYPE_NOSUPP
 (-1765328370L)

	)

7658 
	#KRB5KDC_ERR_SUMTYPE_NOSUPP
 (-1765328369L)

	)

7659 
	#KRB5KDC_ERR_PADATA_TYPE_NOSUPP
 (-1765328368L)

	)

7660 
	#KRB5KDC_ERR_TRTYPE_NOSUPP
 (-1765328367L)

	)

7661 
	#KRB5KDC_ERR_CLIENT_REVOKED
 (-1765328366L)

	)

7662 
	#KRB5KDC_ERR_SERVICE_REVOKED
 (-1765328365L)

	)

7663 
	#KRB5KDC_ERR_TGT_REVOKED
 (-1765328364L)

	)

7664 
	#KRB5KDC_ERR_CLIENT_NOTYET
 (-1765328363L)

	)

7665 
	#KRB5KDC_ERR_SERVICE_NOTYET
 (-1765328362L)

	)

7666 
	#KRB5KDC_ERR_KEY_EXP
 (-1765328361L)

	)

7667 
	#KRB5KDC_ERR_PREAUTH_FAILED
 (-1765328360L)

	)

7668 
	#KRB5KDC_ERR_PREAUTH_REQUIRED
 (-1765328359L)

	)

7669 
	#KRB5KDC_ERR_SERVER_NOMATCH
 (-1765328358L)

	)

7670 
	#KRB5KDC_ERR_MUST_USE_USER2USER
 (-1765328357L)

	)

7671 
	#KRB5KDC_ERR_PATH_NOT_ACCEPTED
 (-1765328356L)

	)

7672 
	#KRB5KDC_ERR_SVC_UNAVAILABLE
 (-1765328355L)

	)

7673 
	#KRB5PLACEHOLD_30
 (-1765328354L)

	)

7674 
	#KRB5KRB_AP_ERR_BAD_INTEGRITY
 (-1765328353L)

	)

7675 
	#KRB5KRB_AP_ERR_TKT_EXPIRED
 (-1765328352L)

	)

7676 
	#KRB5KRB_AP_ERR_TKT_NYV
 (-1765328351L)

	)

7677 
	#KRB5KRB_AP_ERR_REPEAT
 (-1765328350L)

	)

7678 
	#KRB5KRB_AP_ERR_NOT_US
 (-1765328349L)

	)

7679 
	#KRB5KRB_AP_ERR_BADMATCH
 (-1765328348L)

	)

7680 
	#KRB5KRB_AP_ERR_SKEW
 (-1765328347L)

	)

7681 
	#KRB5KRB_AP_ERR_BADADDR
 (-1765328346L)

	)

7682 
	#KRB5KRB_AP_ERR_BADVERSION
 (-1765328345L)

	)

7683 
	#KRB5KRB_AP_ERR_MSG_TYPE
 (-1765328344L)

	)

7684 
	#KRB5KRB_AP_ERR_MODIFIED
 (-1765328343L)

	)

7685 
	#KRB5KRB_AP_ERR_BADORDER
 (-1765328342L)

	)

7686 
	#KRB5KRB_AP_ERR_ILL_CR_TKT
 (-1765328341L)

	)

7687 
	#KRB5KRB_AP_ERR_BADKEYVER
 (-1765328340L)

	)

7688 
	#KRB5KRB_AP_ERR_NOKEY
 (-1765328339L)

	)

7689 
	#KRB5KRB_AP_ERR_MUT_FAIL
 (-1765328338L)

	)

7690 
	#KRB5KRB_AP_ERR_BADDIRECTION
 (-1765328337L)

	)

7691 
	#KRB5KRB_AP_ERR_METHOD
 (-1765328336L)

	)

7692 
	#KRB5KRB_AP_ERR_BADSEQ
 (-1765328335L)

	)

7693 
	#KRB5KRB_AP_ERR_INAPP_CKSUM
 (-1765328334L)

	)

7694 
	#KRB5KRB_AP_PATH_NOT_ACCEPTED
 (-1765328333L)

	)

7695 
	#KRB5KRB_ERR_RESPONSE_TOO_BIG
 (-1765328332L)

	)

7696 
	#KRB5PLACEHOLD_53
 (-1765328331L)

	)

7697 
	#KRB5PLACEHOLD_54
 (-1765328330L)

	)

7698 
	#KRB5PLACEHOLD_55
 (-1765328329L)

	)

7699 
	#KRB5PLACEHOLD_56
 (-1765328328L)

	)

7700 
	#KRB5PLACEHOLD_57
 (-1765328327L)

	)

7701 
	#KRB5PLACEHOLD_58
 (-1765328326L)

	)

7702 
	#KRB5PLACEHOLD_59
 (-1765328325L)

	)

7703 
	#KRB5KRB_ERR_GENERIC
 (-1765328324L)

	)

7704 
	#KRB5KRB_ERR_FIELD_TOOLONG
 (-1765328323L)

	)

7705 
	#KRB5KDC_ERR_CLIENT_NOT_TRUSTED
 (-1765328322L)

	)

7706 
	#KRB5KDC_ERR_KDC_NOT_TRUSTED
 (-1765328321L)

	)

7707 
	#KRB5KDC_ERR_INVALID_SIG
 (-1765328320L)

	)

7708 
	#KRB5KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED
 (-1765328319L)

	)

7709 
	#KRB5KDC_ERR_CERTIFICATE_MISMATCH
 (-1765328318L)

	)

7710 
	#KRB5KRB_AP_ERR_NO_TGT
 (-1765328317L)

	)

7711 
	#KRB5KDC_ERR_WRONG_REALM
 (-1765328316L)

	)

7712 
	#KRB5KRB_AP_ERR_USER_TO_USER_REQUIRED
 (-1765328315L)

	)

7713 
	#KRB5KDC_ERR_CANT_VERIFY_CERTIFICATE
 (-1765328314L)

	)

7714 
	#KRB5KDC_ERR_INVALID_CERTIFICATE
 (-1765328313L)

	)

7715 
	#KRB5KDC_ERR_REVOKED_CERTIFICATE
 (-1765328312L)

	)

7716 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNKNOWN
 (-1765328311L)

	)

7717 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNAVAILABLE
 (-1765328310L)

	)

7718 
	#KRB5KDC_ERR_CLIENT_NAME_MISMATCH
 (-1765328309L)

	)

7719 
	#KRB5KDC_ERR_KDC_NAME_MISMATCH
 (-1765328308L)

	)

7720 
	#KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE
 (-1765328307L)

	)

7721 
	#KRB5KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED
 (-1765328306L)

	)

7722 
	#KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED
 (-1765328305L)

	)

7723 
	#KRB5KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
 (-1765328304L)

	)

7724 
	#KRB5KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED
 (-1765328303L)

	)

7725 
	#KRB5KDC_ERR_NO_ACCEPTABLE_KDF
 (-1765328302L)

	)

7726 
	#KRB5PLACEHOLD_83
 (-1765328301L)

	)

7727 
	#KRB5PLACEHOLD_84
 (-1765328300L)

	)

7728 
	#KRB5KRB_AP_ERR_IAKERB_KDC_NOT_FOUND
 (-1765328299L)

	)

7729 
	#KRB5KRB_AP_ERR_IAKERB_KDC_NO_RESPONSE
 (-1765328298L)

	)

7730 
	#KRB5PLACEHOLD_87
 (-1765328297L)

	)

7731 
	#KRB5PLACEHOLD_88
 (-1765328296L)

	)

7732 
	#KRB5PLACEHOLD_89
 (-1765328295L)

	)

7733 
	#KRB5PLACEHOLD_90
 (-1765328294L)

	)

7734 
	#KRB5PLACEHOLD_91
 (-1765328293L)

	)

7735 
	#KRB5PLACEHOLD_92
 (-1765328292L)

	)

7736 
	#KRB5KDC_ERR_UNKNOWN_CRITICAL_FAST_OPTION
 (-1765328291L)

	)

7737 
	#KRB5PLACEHOLD_94
 (-1765328290L)

	)

7738 
	#KRB5PLACEHOLD_95
 (-1765328289L)

	)

7739 
	#KRB5PLACEHOLD_96
 (-1765328288L)

	)

7740 
	#KRB5PLACEHOLD_97
 (-1765328287L)

	)

7741 
	#KRB5PLACEHOLD_98
 (-1765328286L)

	)

7742 
	#KRB5PLACEHOLD_99
 (-1765328285L)

	)

7743 
	#KRB5PLACEHOLD_100
 (-1765328284L)

	)

7744 
	#KRB5PLACEHOLD_101
 (-1765328283L)

	)

7745 
	#KRB5PLACEHOLD_102
 (-1765328282L)

	)

7746 
	#KRB5PLACEHOLD_103
 (-1765328281L)

	)

7747 
	#KRB5PLACEHOLD_104
 (-1765328280L)

	)

7748 
	#KRB5PLACEHOLD_105
 (-1765328279L)

	)

7749 
	#KRB5PLACEHOLD_106
 (-1765328278L)

	)

7750 
	#KRB5PLACEHOLD_107
 (-1765328277L)

	)

7751 
	#KRB5PLACEHOLD_108
 (-1765328276L)

	)

7752 
	#KRB5PLACEHOLD_109
 (-1765328275L)

	)

7753 
	#KRB5PLACEHOLD_110
 (-1765328274L)

	)

7754 
	#KRB5PLACEHOLD_111
 (-1765328273L)

	)

7755 
	#KRB5PLACEHOLD_112
 (-1765328272L)

	)

7756 
	#KRB5PLACEHOLD_113
 (-1765328271L)

	)

7757 
	#KRB5PLACEHOLD_114
 (-1765328270L)

	)

7758 
	#KRB5PLACEHOLD_115
 (-1765328269L)

	)

7759 
	#KRB5PLACEHOLD_116
 (-1765328268L)

	)

7760 
	#KRB5PLACEHOLD_117
 (-1765328267L)

	)

7761 
	#KRB5PLACEHOLD_118
 (-1765328266L)

	)

7762 
	#KRB5PLACEHOLD_119
 (-1765328265L)

	)

7763 
	#KRB5PLACEHOLD_120
 (-1765328264L)

	)

7764 
	#KRB5PLACEHOLD_121
 (-1765328263L)

	)

7765 
	#KRB5PLACEHOLD_122
 (-1765328262L)

	)

7766 
	#KRB5PLACEHOLD_123
 (-1765328261L)

	)

7767 
	#KRB5PLACEHOLD_124
 (-1765328260L)

	)

7768 
	#KRB5PLACEHOLD_125
 (-1765328259L)

	)

7769 
	#KRB5PLACEHOLD_126
 (-1765328258L)

	)

7770 
	#KRB5PLACEHOLD_127
 (-1765328257L)

	)

7771 
	#KRB5_ERR_RCSID
 (-1765328256L)

	)

7772 
	#KRB5_LIBOS_BADLOCKFLAG
 (-1765328255L)

	)

7773 
	#KRB5_LIBOS_CANTREADPWD
 (-1765328254L)

	)

7774 
	#KRB5_LIBOS_BADPWDMATCH
 (-1765328253L)

	)

7775 
	#KRB5_LIBOS_PWDINTR
 (-1765328252L)

	)

7776 
	#KRB5_PARSE_ILLCHAR
 (-1765328251L)

	)

7777 
	#KRB5_PARSE_MALFORMED
 (-1765328250L)

	)

7778 
	#KRB5_CONFIG_CANTOPEN
 (-1765328249L)

	)

7779 
	#KRB5_CONFIG_BADFORMAT
 (-1765328248L)

	)

7780 
	#KRB5_CONFIG_NOTENUFSPACE
 (-1765328247L)

	)

7781 
	#KRB5_BADMSGTYPE
 (-1765328246L)

	)

7782 
	#KRB5_CC_BADNAME
 (-1765328245L)

	)

7783 
	#KRB5_CC_UNKNOWN_TYPE
 (-1765328244L)

	)

7784 
	#KRB5_CC_NOTFOUND
 (-1765328243L)

	)

7785 
	#KRB5_CC_END
 (-1765328242L)

	)

7786 
	#KRB5_NO_TKT_SUPPLIED
 (-1765328241L)

	)

7787 
	#KRB5KRB_AP_WRONG_PRINC
 (-1765328240L)

	)

7788 
	#KRB5KRB_AP_ERR_TKT_INVALID
 (-1765328239L)

	)

7789 
	#KRB5_PRINC_NOMATCH
 (-1765328238L)

	)

7790 
	#KRB5_KDCREP_MODIFIED
 (-1765328237L)

	)

7791 
	#KRB5_KDCREP_SKEW
 (-1765328236L)

	)

7792 
	#KRB5_IN_TKT_REALM_MISMATCH
 (-1765328235L)

	)

7793 
	#KRB5_PROG_ETYPE_NOSUPP
 (-1765328234L)

	)

7794 
	#KRB5_PROG_KEYTYPE_NOSUPP
 (-1765328233L)

	)

7795 
	#KRB5_WRONG_ETYPE
 (-1765328232L)

	)

7796 
	#KRB5_PROG_SUMTYPE_NOSUPP
 (-1765328231L)

	)

7797 
	#KRB5_REALM_UNKNOWN
 (-1765328230L)

	)

7798 
	#KRB5_SERVICE_UNKNOWN
 (-1765328229L)

	)

7799 
	#KRB5_KDC_UNREACH
 (-1765328228L)

	)

7800 
	#KRB5_NO_LOCALNAME
 (-1765328227L)

	)

7801 
	#KRB5_MUTUAL_FAILED
 (-1765328226L)

	)

7802 
	#KRB5_RC_TYPE_EXISTS
 (-1765328225L)

	)

7803 
	#KRB5_RC_MALLOC
 (-1765328224L)

	)

7804 
	#KRB5_RC_TYPE_NOTFOUND
 (-1765328223L)

	)

7805 
	#KRB5_RC_UNKNOWN
 (-1765328222L)

	)

7806 
	#KRB5_RC_REPLAY
 (-1765328221L)

	)

7807 
	#KRB5_RC_IO
 (-1765328220L)

	)

7808 
	#KRB5_RC_NOIO
 (-1765328219L)

	)

7809 
	#KRB5_RC_PARSE
 (-1765328218L)

	)

7810 
	#KRB5_RC_IO_EOF
 (-1765328217L)

	)

7811 
	#KRB5_RC_IO_MALLOC
 (-1765328216L)

	)

7812 
	#KRB5_RC_IO_PERM
 (-1765328215L)

	)

7813 
	#KRB5_RC_IO_IO
 (-1765328214L)

	)

7814 
	#KRB5_RC_IO_UNKNOWN
 (-1765328213L)

	)

7815 
	#KRB5_RC_IO_SPACE
 (-1765328212L)

	)

7816 
	#KRB5_TRANS_CANTOPEN
 (-1765328211L)

	)

7817 
	#KRB5_TRANS_BADFORMAT
 (-1765328210L)

	)

7818 
	#KRB5_LNAME_CANTOPEN
 (-1765328209L)

	)

7819 
	#KRB5_LNAME_NOTRANS
 (-1765328208L)

	)

7820 
	#KRB5_LNAME_BADFORMAT
 (-1765328207L)

	)

7821 
	#KRB5_CRYPTO_INTERNAL
 (-1765328206L)

	)

7822 
	#KRB5_KT_BADNAME
 (-1765328205L)

	)

7823 
	#KRB5_KT_UNKNOWN_TYPE
 (-1765328204L)

	)

7824 
	#KRB5_KT_NOTFOUND
 (-1765328203L)

	)

7825 
	#KRB5_KT_END
 (-1765328202L)

	)

7826 
	#KRB5_KT_NOWRITE
 (-1765328201L)

	)

7827 
	#KRB5_KT_IOERR
 (-1765328200L)

	)

7828 
	#KRB5_NO_TKT_IN_RLM
 (-1765328199L)

	)

7829 
	#KRB5DES_BAD_KEYPAR
 (-1765328198L)

	)

7830 
	#KRB5DES_WEAK_KEY
 (-1765328197L)

	)

7831 
	#KRB5_BAD_ENCTYPE
 (-1765328196L)

	)

7832 
	#KRB5_BAD_KEYSIZE
 (-1765328195L)

	)

7833 
	#KRB5_BAD_MSIZE
 (-1765328194L)

	)

7834 
	#KRB5_CC_TYPE_EXISTS
 (-1765328193L)

	)

7835 
	#KRB5_KT_TYPE_EXISTS
 (-1765328192L)

	)

7836 
	#KRB5_CC_IO
 (-1765328191L)

	)

7837 
	#KRB5_FCC_PERM
 (-1765328190L)

	)

7838 
	#KRB5_FCC_NOFILE
 (-1765328189L)

	)

7839 
	#KRB5_FCC_INTERNAL
 (-1765328188L)

	)

7840 
	#KRB5_CC_WRITE
 (-1765328187L)

	)

7841 
	#KRB5_CC_NOMEM
 (-1765328186L)

	)

7842 
	#KRB5_CC_FORMAT
 (-1765328185L)

	)

7843 
	#KRB5_CC_NOT_KTYPE
 (-1765328184L)

	)

7844 
	#KRB5_INVALID_FLAGS
 (-1765328183L)

	)

7845 
	#KRB5_NO_2ND_TKT
 (-1765328182L)

	)

7846 
	#KRB5_NOCREDS_SUPPLIED
 (-1765328181L)

	)

7847 
	#KRB5_SENDAUTH_BADAUTHVERS
 (-1765328180L)

	)

7848 
	#KRB5_SENDAUTH_BADAPPLVERS
 (-1765328179L)

	)

7849 
	#KRB5_SENDAUTH_BADRESPONSE
 (-1765328178L)

	)

7850 
	#KRB5_SENDAUTH_REJECTED
 (-1765328177L)

	)

7851 
	#KRB5_PREAUTH_BAD_TYPE
 (-1765328176L)

	)

7852 
	#KRB5_PREAUTH_NO_KEY
 (-1765328175L)

	)

7853 
	#KRB5_PREAUTH_FAILED
 (-1765328174L)

	)

7854 
	#KRB5_RCACHE_BADVNO
 (-1765328173L)

	)

7855 
	#KRB5_CCACHE_BADVNO
 (-1765328172L)

	)

7856 
	#KRB5_KEYTAB_BADVNO
 (-1765328171L)

	)

7857 
	#KRB5_PROG_ATYPE_NOSUPP
 (-1765328170L)

	)

7858 
	#KRB5_RC_REQUIRED
 (-1765328169L)

	)

7859 
	#KRB5_ERR_BAD_HOSTNAME
 (-1765328168L)

	)

7860 
	#KRB5_ERR_HOST_REALM_UNKNOWN
 (-1765328167L)

	)

7861 
	#KRB5_SNAME_UNSUPP_NAMETYPE
 (-1765328166L)

	)

7862 
	#KRB5KRB_AP_ERR_V4_REPLY
 (-1765328165L)

	)

7863 
	#KRB5_REALM_CANT_RESOLVE
 (-1765328164L)

	)

7864 
	#KRB5_TKT_NOT_FORWARDABLE
 (-1765328163L)

	)

7865 
	#KRB5_FWD_BAD_PRINCIPAL
 (-1765328162L)

	)

7866 
	#KRB5_GET_IN_TKT_LOOP
 (-1765328161L)

	)

7867 
	#KRB5_CONFIG_NODEFREALM
 (-1765328160L)

	)

7868 
	#KRB5_SAM_UNSUPPORTED
 (-1765328159L)

	)

7869 
	#KRB5_SAM_INVALID_ETYPE
 (-1765328158L)

	)

7870 
	#KRB5_SAM_NO_CHECKSUM
 (-1765328157L)

	)

7871 
	#KRB5_SAM_BAD_CHECKSUM
 (-1765328156L)

	)

7872 
	#KRB5_KT_NAME_TOOLONG
 (-1765328155L)

	)

7873 
	#KRB5_KT_KVNONOTFOUND
 (-1765328154L)

	)

7874 
	#KRB5_APPL_EXPIRED
 (-1765328153L)

	)

7875 
	#KRB5_LIB_EXPIRED
 (-1765328152L)

	)

7876 
	#KRB5_CHPW_PWDNULL
 (-1765328151L)

	)

7877 
	#KRB5_CHPW_FAIL
 (-1765328150L)

	)

7878 
	#KRB5_KT_FORMAT
 (-1765328149L)

	)

7879 
	#KRB5_NOPERM_ETYPE
 (-1765328148L)

	)

7880 
	#KRB5_CONFIG_ETYPE_NOSUPP
 (-1765328147L)

	)

7881 
	#KRB5_OBSOLETE_FN
 (-1765328146L)

	)

7882 
	#KRB5_EAI_FAIL
 (-1765328145L)

	)

7883 
	#KRB5_EAI_NODATA
 (-1765328144L)

	)

7884 
	#KRB5_EAI_NONAME
 (-1765328143L)

	)

7885 
	#KRB5_EAI_SERVICE
 (-1765328142L)

	)

7886 
	#KRB5_ERR_NUMERIC_REALM
 (-1765328141L)

	)

7887 
	#KRB5_ERR_BAD_S2K_PARAMS
 (-1765328140L)

	)

7888 
	#KRB5_ERR_NO_SERVICE
 (-1765328139L)

	)

7889 
	#KRB5_CC_READONLY
 (-1765328138L)

	)

7890 
	#KRB5_CC_NOSUPP
 (-1765328137L)

	)

7891 
	#KRB5_DELTAT_BADFORMAT
 (-1765328136L)

	)

7892 
	#KRB5_PLUGIN_NO_HANDLE
 (-1765328135L)

	)

7893 
	#KRB5_PLUGIN_OP_NOTSUPP
 (-1765328134L)

	)

7894 
	#KRB5_ERR_INVALID_UTF8
 (-1765328133L)

	)

7895 
	#KRB5_ERR_FAST_REQUIRED
 (-1765328132L)

	)

7896 
	#KRB5_LOCAL_ADDR_REQUIRED
 (-1765328131L)

	)

7897 
	#KRB5_REMOTE_ADDR_REQUIRED
 (-1765328130L)

	)

7898 
	#KRB5_TRACE_NOSUPP
 (-1765328129L)

	)

7899 c⁄° 
îr‹_èbÀ
 
ë_krb5_îr‹_èbÀ
;

7900 
	`öôülize_krb5_îr‹_èbÀ
();

7903 
	`öôülize_krb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

7905 
	#ERROR_TABLE_BASE_krb5
 (-1765328384L)

	)

7908 
	#öô_krb5_îr_tbl
 
öôülize_krb5_îr‹_èbÀ


	)

7909 
	#krb5_îr_ba£
 
ERROR_TABLE_BASE_krb5


	)

7915 
	~<ë/com_îr.h
>

7917 
	#KRB5_PLUGIN_VER_NOTSUPP
 (-1750600192L)

	)

7918 
	#KRB5_PLUGIN_BAD_MODULE_SPEC
 (-1750600191L)

	)

7919 
	#KRB5_PLUGIN_NAME_NOTFOUND
 (-1750600190L)

	)

7920 
	#KRB5KDC_ERR_DISCARD
 (-1750600189L)

	)

7921 
	#KRB5_DCC_CANNOT_CREATE
 (-1750600188L)

	)

7922 c⁄° 
îr‹_èbÀ
 
ë_k5e1_îr‹_èbÀ
;

7923 
	`öôülize_k5e1_îr‹_èbÀ
();

7926 
	`öôülize_k5e1_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

7928 
	#ERROR_TABLE_BASE_k5e1
 (-1750600192L)

	)

7931 
	#öô_k5e1_îr_tbl
 
öôülize_k5e1_îr‹_èbÀ


	)

7932 
	#k5e1_îr_ba£
 
ERROR_TABLE_BASE_k5e1


	)

7938 
	~<ë/com_îr.h
>

7940 
	#KRB5_KDB_RCSID
 (-1780008448L)

	)

7941 
	#KRB5_KDB_INUSE
 (-1780008447L)

	)

7942 
	#KRB5_KDB_UK_SERROR
 (-1780008446L)

	)

7943 
	#KRB5_KDB_UK_RERROR
 (-1780008445L)

	)

7944 
	#KRB5_KDB_UNAUTH
 (-1780008444L)

	)

7945 
	#KRB5_KDB_NOENTRY
 (-1780008443L)

	)

7946 
	#KRB5_KDB_ILL_WILDCARD
 (-1780008442L)

	)

7947 
	#KRB5_KDB_DB_INUSE
 (-1780008441L)

	)

7948 
	#KRB5_KDB_DB_CHANGED
 (-1780008440L)

	)

7949 
	#KRB5_KDB_TRUNCATED_RECORD
 (-1780008439L)

	)

7950 
	#KRB5_KDB_RECURSIVELOCK
 (-1780008438L)

	)

7951 
	#KRB5_KDB_NOTLOCKED
 (-1780008437L)

	)

7952 
	#KRB5_KDB_BADLOCKMODE
 (-1780008436L)

	)

7953 
	#KRB5_KDB_DBNOTINITED
 (-1780008435L)

	)

7954 
	#KRB5_KDB_DBINITED
 (-1780008434L)

	)

7955 
	#KRB5_KDB_ILLDIRECTION
 (-1780008433L)

	)

7956 
	#KRB5_KDB_NOMASTERKEY
 (-1780008432L)

	)

7957 
	#KRB5_KDB_BADMASTERKEY
 (-1780008431L)

	)

7958 
	#KRB5_KDB_INVALIDKEYSIZE
 (-1780008430L)

	)

7959 
	#KRB5_KDB_CANTREAD_STORED
 (-1780008429L)

	)

7960 
	#KRB5_KDB_BADSTORED_MKEY
 (-1780008428L)

	)

7961 
	#KRB5_KDB_NOACTMASTERKEY
 (-1780008427L)

	)

7962 
	#KRB5_KDB_KVNONOMATCH
 (-1780008426L)

	)

7963 
	#KRB5_KDB_STORED_MKEY_NOTCURRENT
 (-1780008425L)

	)

7964 
	#KRB5_KDB_CANTLOCK_DB
 (-1780008424L)

	)

7965 
	#KRB5_KDB_DB_CORRUPT
 (-1780008423L)

	)

7966 
	#KRB5_KDB_BAD_VERSION
 (-1780008422L)

	)

7967 
	#KRB5_KDB_BAD_SALTTYPE
 (-1780008421L)

	)

7968 
	#KRB5_KDB_BAD_ENCTYPE
 (-1780008420L)

	)

7969 
	#KRB5_KDB_BAD_CREATEFLAGS
 (-1780008419L)

	)

7970 
	#KRB5_KDB_NO_PERMITTED_KEY
 (-1780008418L)

	)

7971 
	#KRB5_KDB_NO_MATCHING_KEY
 (-1780008417L)

	)

7972 
	#KRB5_KDB_DBTYPE_NOTFOUND
 (-1780008416L)

	)

7973 
	#KRB5_KDB_DBTYPE_NOSUP
 (-1780008415L)

	)

7974 
	#KRB5_KDB_DBTYPE_INIT
 (-1780008414L)

	)

7975 
	#KRB5_KDB_SERVER_INTERNAL_ERR
 (-1780008413L)

	)

7976 
	#KRB5_KDB_ACCESS_ERROR
 (-1780008412L)

	)

7977 
	#KRB5_KDB_INTERNAL_ERROR
 (-1780008411L)

	)

7978 
	#KRB5_KDB_CONSTRAINT_VIOLATION
 (-1780008410L)

	)

7979 
	#KRB5_LOG_CONV
 (-1780008409L)

	)

7980 
	#KRB5_LOG_UNSTABLE
 (-1780008408L)

	)

7981 
	#KRB5_LOG_CORRUPT
 (-1780008407L)

	)

7982 
	#KRB5_LOG_ERROR
 (-1780008406L)

	)

7983 
	#KRB5_KDB_DBTYPE_MISMATCH
 (-1780008405L)

	)

7984 
	#KRB5_KDB_POLICY_REF
 (-1780008404L)

	)

7985 
	#KRB5_KDB_STRINGS_TOOLONG
 (-1780008403L)

	)

7986 c⁄° 
îr‹_èbÀ
 
ë_kdb5_îr‹_èbÀ
;

7987 
	`öôülize_kdb5_îr‹_èbÀ
();

7990 
	`öôülize_kdb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

7992 
	#ERROR_TABLE_BASE_kdb5
 (-1780008448L)

	)

7995 
	#öô_kdb5_îr_tbl
 
öôülize_kdb5_îr‹_èbÀ


	)

7996 
	#kdb5_îr_ba£
 
ERROR_TABLE_BASE_kdb5


	)

8002 
	~<ë/com_îr.h
>

8004 
	#KV5M_NONE
 (-1760647424L)

	)

8005 
	#KV5M_PRINCIPAL
 (-1760647423L)

	)

8006 
	#KV5M_DATA
 (-1760647422L)

	)

8007 
	#KV5M_KEYBLOCK
 (-1760647421L)

	)

8008 
	#KV5M_CHECKSUM
 (-1760647420L)

	)

8009 
	#KV5M_ENCRYPT_BLOCK
 (-1760647419L)

	)

8010 
	#KV5M_ENC_DATA
 (-1760647418L)

	)

8011 
	#KV5M_CRYPTOSYSTEM_ENTRY
 (-1760647417L)

	)

8012 
	#KV5M_CS_TABLE_ENTRY
 (-1760647416L)

	)

8013 
	#KV5M_CHECKSUM_ENTRY
 (-1760647415L)

	)

8014 
	#KV5M_AUTHDATA
 (-1760647414L)

	)

8015 
	#KV5M_TRANSITED
 (-1760647413L)

	)

8016 
	#KV5M_ENC_TKT_PART
 (-1760647412L)

	)

8017 
	#KV5M_TICKET
 (-1760647411L)

	)

8018 
	#KV5M_AUTHENTICATOR
 (-1760647410L)

	)

8019 
	#KV5M_TKT_AUTHENT
 (-1760647409L)

	)

8020 
	#KV5M_CREDS
 (-1760647408L)

	)

8021 
	#KV5M_LAST_REQ_ENTRY
 (-1760647407L)

	)

8022 
	#KV5M_PA_DATA
 (-1760647406L)

	)

8023 
	#KV5M_KDC_REQ
 (-1760647405L)

	)

8024 
	#KV5M_ENC_KDC_REP_PART
 (-1760647404L)

	)

8025 
	#KV5M_KDC_REP
 (-1760647403L)

	)

8026 
	#KV5M_ERROR
 (-1760647402L)

	)

8027 
	#KV5M_AP_REQ
 (-1760647401L)

	)

8028 
	#KV5M_AP_REP
 (-1760647400L)

	)

8029 
	#KV5M_AP_REP_ENC_PART
 (-1760647399L)

	)

8030 
	#KV5M_RESPONSE
 (-1760647398L)

	)

8031 
	#KV5M_SAFE
 (-1760647397L)

	)

8032 
	#KV5M_PRIV
 (-1760647396L)

	)

8033 
	#KV5M_PRIV_ENC_PART
 (-1760647395L)

	)

8034 
	#KV5M_CRED
 (-1760647394L)

	)

8035 
	#KV5M_CRED_INFO
 (-1760647393L)

	)

8036 
	#KV5M_CRED_ENC_PART
 (-1760647392L)

	)

8037 
	#KV5M_PWD_DATA
 (-1760647391L)

	)

8038 
	#KV5M_ADDRESS
 (-1760647390L)

	)

8039 
	#KV5M_KEYTAB_ENTRY
 (-1760647389L)

	)

8040 
	#KV5M_CONTEXT
 (-1760647388L)

	)

8041 
	#KV5M_OS_CONTEXT
 (-1760647387L)

	)

8042 
	#KV5M_ALT_METHOD
 (-1760647386L)

	)

8043 
	#KV5M_ETYPE_INFO_ENTRY
 (-1760647385L)

	)

8044 
	#KV5M_DB_CONTEXT
 (-1760647384L)

	)

8045 
	#KV5M_AUTH_CONTEXT
 (-1760647383L)

	)

8046 
	#KV5M_KEYTAB
 (-1760647382L)

	)

8047 
	#KV5M_RCACHE
 (-1760647381L)

	)

8048 
	#KV5M_CCACHE
 (-1760647380L)

	)

8049 
	#KV5M_PREAUTH_OPS
 (-1760647379L)

	)

8050 
	#KV5M_SAM_CHALLENGE
 (-1760647378L)

	)

8051 
	#KV5M_SAM_CHALLENGE_2
 (-1760647377L)

	)

8052 
	#KV5M_SAM_KEY
 (-1760647376L)

	)

8053 
	#KV5M_ENC_SAM_RESPONSE_ENC
 (-1760647375L)

	)

8054 
	#KV5M_ENC_SAM_RESPONSE_ENC_2
 (-1760647374L)

	)

8055 
	#KV5M_SAM_RESPONSE
 (-1760647373L)

	)

8056 
	#KV5M_SAM_RESPONSE_2
 (-1760647372L)

	)

8057 
	#KV5M_PREDICTED_SAM_RESPONSE
 (-1760647371L)

	)

8058 
	#KV5M_PASSWD_PHRASE_ELEMENT
 (-1760647370L)

	)

8059 
	#KV5M_GSS_OID
 (-1760647369L)

	)

8060 
	#KV5M_GSS_QUEUE
 (-1760647368L)

	)

8061 
	#KV5M_FAST_ARMORED_REQ
 (-1760647367L)

	)

8062 
	#KV5M_FAST_REQ
 (-1760647366L)

	)

8063 
	#KV5M_FAST_RESPONSE
 (-1760647365L)

	)

8064 
	#KV5M_AUTHDATA_CONTEXT
 (-1760647364L)

	)

8065 c⁄° 
îr‹_èbÀ
 
ë_kv5m_îr‹_èbÀ
;

8066 
	`öôülize_kv5m_îr‹_èbÀ
();

8069 
	`öôülize_kv5m_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8071 
	#ERROR_TABLE_BASE_kv5m
 (-1760647424L)

	)

8074 
	#öô_kv5m_îr_tbl
 
öôülize_kv5m_îr‹_èbÀ


	)

8075 
	#kv5m_îr_ba£
 
ERROR_TABLE_BASE_kv5m


	)

8081 
	~<ë/com_îr.h
>

8083 
	#KRB524_BADKEY
 (-1750206208L)

	)

8084 
	#KRB524_BADADDR
 (-1750206207L)

	)

8085 
	#KRB524_BADPRINC
 (-1750206206L)

	)

8086 
	#KRB524_BADREALM
 (-1750206205L)

	)

8087 
	#KRB524_V4ERR
 (-1750206204L)

	)

8088 
	#KRB524_ENCFULL
 (-1750206203L)

	)

8089 
	#KRB524_DECEMPTY
 (-1750206202L)

	)

8090 
	#KRB524_NOTRESP
 (-1750206201L)

	)

8091 
	#KRB524_KRB4_DISABLED
 (-1750206200L)

	)

8092 c⁄° 
îr‹_èbÀ
 
ë_k524_îr‹_èbÀ
;

8093 
	`öôülize_k524_îr‹_èbÀ
();

8096 
	`öôülize_k524_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8098 
	#ERROR_TABLE_BASE_k524
 (-1750206208L)

	)

8101 
	#öô_k524_îr_tbl
 
öôülize_k524_îr‹_èbÀ


	)

8102 
	#k524_îr_ba£
 
ERROR_TABLE_BASE_k524


	)

8108 
	~<ë/com_îr.h
>

8110 
	#ASN1_BAD_TIMEFORMAT
 (1859794432L)

	)

8111 
	#ASN1_MISSING_FIELD
 (1859794433L)

	)

8112 
	#ASN1_MISPLACED_FIELD
 (1859794434L)

	)

8113 
	#ASN1_TYPE_MISMATCH
 (1859794435L)

	)

8114 
	#ASN1_OVERFLOW
 (1859794436L)

	)

8115 
	#ASN1_OVERRUN
 (1859794437L)

	)

8116 
	#ASN1_BAD_ID
 (1859794438L)

	)

8117 
	#ASN1_BAD_LENGTH
 (1859794439L)

	)

8118 
	#ASN1_BAD_FORMAT
 (1859794440L)

	)

8119 
	#ASN1_PARSE_ERROR
 (1859794441L)

	)

8120 
	#ASN1_BAD_GMTIME
 (1859794442L)

	)

8121 
	#ASN1_MISMATCH_INDEF
 (1859794443L)

	)

8122 
	#ASN1_MISSING_EOC
 (1859794444L)

	)

8123 c⁄° 
îr‹_èbÀ
 
ë_a¢1_îr‹_èbÀ
;

8124 
	`öôülize_a¢1_îr‹_èbÀ
();

8127 
	`öôülize_a¢1_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8129 
	#ERROR_TABLE_BASE_a¢1
 (1859794432L)

	)

8132 
	#öô_a¢1_îr_tbl
 
öôülize_a¢1_îr‹_èbÀ


	)

8133 
	#a¢1_îr_ba£
 
ERROR_TABLE_BASE_a¢1


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<limôs.h
>

133 
	~<›ís¶/os¶_typ.h
>

134 
	~<›ís¶/¸y±o.h
>

136 #ifde‡ 
__˝lu•lus


152 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


153 
	#BN_MUL_COMBA


	)

154 
	#BN_SQR_COMBA


	)

155 
	#BN_RECURSION


	)

169 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

170 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

171 #i‚de‡
BN_DIV2W


172 
	#BN_DIV2W


	)

179 #ifde‡
SIXTY_FOUR_BIT_LONG


180 
	#BN_ULLONG
 

	)

181 
	#BN_ULONG
 

	)

182 
	#BN_LONG
 

	)

183 
	#BN_BITS
 128

	)

184 
	#BN_BYTES
 8

	)

185 
	#BN_BITS2
 64

	)

186 
	#BN_BITS4
 32

	)

187 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

188 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

189 
	#BN_MASK2l
 (0xffffffffL)

	)

190 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

191 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

192 
	#BN_TBIT
 (0x8000000000000000L)

	)

193 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

194 
	#BN_DEC_FMT1
 "%lu"

	)

195 
	#BN_DEC_FMT2
 "%019lu"

	)

196 
	#BN_DEC_NUM
 19

	)

197 
	#BN_HEX_FMT1
 "%lX"

	)

198 
	#BN_HEX_FMT2
 "%016lX"

	)

206 #ifde‡
SIXTY_FOUR_BIT


207 #unde‡
BN_LLONG


208 #unde‡
BN_ULLONG


209 
	#BN_ULONG
 

	)

210 
	#BN_LONG
 

	)

211 
	#BN_BITS
 128

	)

212 
	#BN_BYTES
 8

	)

213 
	#BN_BITS2
 64

	)

214 
	#BN_BITS4
 32

	)

215 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

216 
	#BN_MASK2l
 (0xffffffffL)

	)

217 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

218 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

219 
	#BN_TBIT
 (0x8000000000000000LL)

	)

220 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

221 
	#BN_DEC_FMT1
 "%Œu"

	)

222 
	#BN_DEC_FMT2
 "%019Œu"

	)

223 
	#BN_DEC_NUM
 19

	)

224 
	#BN_HEX_FMT1
 "%ŒX"

	)

225 
	#BN_HEX_FMT2
 "%016ŒX"

	)

228 #ifde‡
THIRTY_TWO_BIT


229 #ifde‡
BN_LLONG


230 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

231 
	#BN_ULLONG
 
__öt64


	)

232 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

234 
	#BN_ULLONG
 

	)

235 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

238 
	#BN_ULONG
 

	)

239 
	#BN_LONG
 

	)

240 
	#BN_BITS
 64

	)

241 
	#BN_BYTES
 4

	)

242 
	#BN_BITS2
 32

	)

243 
	#BN_BITS4
 16

	)

244 
	#BN_MASK2
 (0xffffffffL)

	)

245 
	#BN_MASK2l
 (0xffff)

	)

246 
	#BN_MASK2h1
 (0xffff8000L)

	)

247 
	#BN_MASK2h
 (0xffff0000L)

	)

248 
	#BN_TBIT
 (0x80000000L)

	)

249 
	#BN_DEC_CONV
 (1000000000L)

	)

250 
	#BN_DEC_FMT1
 "%u"

	)

251 
	#BN_DEC_FMT2
 "%09u"

	)

252 
	#BN_DEC_NUM
 9

	)

253 
	#BN_HEX_FMT1
 "%X"

	)

254 
	#BN_HEX_FMT2
 "%08X"

	)

265 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

266 #i‡
__INITIAL_POINTER_SIZE
 == 64

267 
	#PTR_SIZE_INT
 

	)

269 
	#PTR_SIZE_INT
 

	)

272 
	#PTR_SIZE_INT
 
size_t


	)

275 
	#BN_DEFAULT_BITS
 1280

	)

277 
	#BN_FLG_MALLOCED
 0x01

	)

278 
	#BN_FLG_STATIC_DATA
 0x02

	)

279 
	#BN_FLG_CONSTTIME
 0x04

	)

285 #i‚de‡
OPENSSL_NO_DEPRECATED


286 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

291 #i‚de‡
OPENSSL_NO_DEPRECATED


292 
	#BN_FLG_FREE
 0x8000

	)

294 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

295 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

299 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

300 (
de°
)->
t›
=(
b
)->top, \

301 (
de°
)->
dmax
=(
b
)->dmax, \

302 (
de°
)->
√g
=(
b
)->neg, \

303 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

304 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

305 | 
BN_FLG_STATIC_DATA
 \

306 | (
n
)))

	)

310 
bignum_°
 
	tBIGNUM
;

312 
bignum_˘x
 
	tBN_CTX
;

313 
bn_blödög_°
 
	tBN_BLINDING
;

314 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

315 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

316 
bn_gícb_°
 
	tBN_GENCB
;

319 
	sbignum_°


321 
BN_ULONG
 *
d
;

322 
t›
;

324 
dmax
;

325 
√g
;

326 
Êags
;

330 
	sbn_m⁄t_˘x_°


332 
ri
;

333 
BIGNUM
 
RR
;

334 
BIGNUM
 
N
;

335 
BIGNUM
 
Ni
;

337 
BN_ULONG
 
n0
[2];

339 
Êags
;

345 
	sbn_ª˝_˘x_°


347 
BIGNUM
 
N
;

348 
BIGNUM
 
Nr
;

349 
num_bôs
;

350 
shi·
;

351 
Êags
;

355 
	sbn_gícb_°


357 
vî
;

358 *
¨g
;

362 (*
cb_1
)(, , *);

364 (*
cb_2
)(, , 
BN_GENCB
 *);

365 } 
cb
;

368 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

370 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

371 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

372 
tmp_gícb
->
vî
 = 1; \

373 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

374 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

376 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

377 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

378 
tmp_gícb
->
vî
 = 2; \

379 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

380 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

382 
	#BN_¥ime_checks
 0

	)

390 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

391 (
b
) >= 850 ? 3 : \

392 (
b
) >= 650 ? 4 : \

393 (
b
) >= 550 ? 5 : \

394 (
b
) >= 450 ? 6 : \

395 (
b
) >= 400 ? 7 : \

396 (
b
) >= 350 ? 8 : \

397 (
b
) >= 300 ? 9 : \

398 (
b
) >= 250 ? 12 : \

399 (
b
) >= 200 ? 15 : \

400 (
b
) >= 150 ? 18 : \

401  27)

	)

403 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

406 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

407 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

408 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

409 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

410 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

411 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

413 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

414 
	#BN_zîo_ex
(
a
) \

416 
BIGNUM
 *
_tmp_bn
 = (
a
); \

417 
_tmp_bn
->
t›
 = 0; \

418 
_tmp_bn
->
√g
 = 0; \

419 } 0)

	)

420 #ifde‡
OPENSSL_NO_DEPRECATED


421 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

423 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

426 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

427 * 
	`BN_›ti⁄s
();

428 
BN_CTX
 *
	`BN_CTX_√w
();

429 #i‚de‡
OPENSSL_NO_DEPRECATED


430 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

432 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

433 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

434 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

435 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

436 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

438 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

440 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

441 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

442 
BIGNUM
 *
	`BN_√w
();

443 
	`BN_öô
(
BIGNUM
 *);

444 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

445 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

446 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

447 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

448 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

449 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

450 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

451 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

455 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

456 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

461 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

466 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

468 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

469 
BN_CTX
 *
˘x
);

470 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

471 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

473 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

474 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

475 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

476 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

477 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

480 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

481 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

482 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

484 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

486 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

490 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

492 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

493 
	`BN_‰ì
(
BIGNUM
 *
a
);

494 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

495 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

496 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

497 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

499 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

500 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

501 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

502 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

503 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

504 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

505 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

506 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

507 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

508 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

509 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

510 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

511 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

513 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

514 #i‚de‡
OPENSSL_NO_FP_API


515 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

517 #ifde‡
HEADER_BIO_H


518 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

520 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

522 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

523 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

524 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

525 
	`BN_˛ór
(
BIGNUM
 *
a
);

526 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

527 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

528 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

529 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

530 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

531 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

532 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

535 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

537 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

538 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

539 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

540 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

543 #i‚de‡
OPENSSL_NO_DEPRECATED


544 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

545 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

546 (*
ˇŒback
)(,,*),*
cb_¨g
);

547 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

548 (*
ˇŒback
)(,,*),

549 
BN_CTX
 *
˘x
,*
cb_¨g
);

550 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

551 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

552 
do_åül_divisi⁄
);

556 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

557 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

558 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

559 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

560 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

562 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

564 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

565 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

566 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

567 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

568 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

569 c⁄° 
BIGNUM
 *
Xp
,

570 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

571 
BN_GENCB
 *
cb
);

573 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

574 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

575 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

576 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

577 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

578 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

579 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

580 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

581 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

582 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

583 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

584 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

585 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

588 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

589 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

591 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

592 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

593 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

594 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

595 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

596 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

597 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

598 #i‚de‡
OPENSSL_NO_DEPRECATED


599 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

600 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

602 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

603 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

604 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

605 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

606 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

607 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

608 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

609 
BN_MONT_CTX
 *
m_˘x
);

611 #i‚de‡
OPENSSL_NO_DEPRECATED


612 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

613 
	`BN_gë_∑øms
(
which
);

616 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

617 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

618 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

619 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

620 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

621 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

622 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

623 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

624 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

625 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

630 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

631 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

632 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

633 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

634 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

636 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

637 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

638 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

639 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

640 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

644 
	#bn_ex∑nd
(
a
,
bôs
Ë(bô†> (
INT_MAX
 - 
BN_BITS2
 + 1)?\

645 
NULL
:(((((
bôs
+
BN_BITS2
-1))/BN_BITS2)Ë<(
a
)->
dmax
)?\

646 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

647 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

648 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

649 #i‚de‡
OPENSSL_NO_DEPRECATED


650 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

681 #ifde‡
BN_DEBUG


684 
	~<as£π.h
>

686 #ifde‡
BN_DEBUG_RAND


688 #i‚de‡
RAND_p£udo_byãs


689 
	`RAND_p£udo_byãs
(*
buf
,
num
);

690 
	#BN_DEBUG_TRIX


	)

692 
	#bn_pﬁluã
(
a
) \

694 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

695 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

696 
_tmp_ch¨
; \

700 
BN_ULONG
 *
_nŸ_c⁄°
; \

701 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

702 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

703 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

704 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

706 } 0)

	)

707 #ifde‡
BN_DEBUG_TRIX


708 #unde‡
RAND_p£udo_byãs


711 
	#bn_pﬁluã
(
a
)

	)

713 
	#bn_check_t›
(
a
) \

715 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

716 i‡(
_bnum2
 !
NULL
) { \

717 
	`as£π
((
_bnum2
->
t›
 == 0) || \

718 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

719 
	`bn_pﬁluã
(
_bnum2
); \

721 } 0)

	)

723 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

727 
	#bn_pﬁluã
(
a
)

	)

728 
	#bn_check_t›
(
a
)

	)

729 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

733 
	#bn_c‹ª˘_t›
(
a
) \

735 
BN_ULONG
 *
·l
; \

736 
tmp_t›
 = (
a
)->
t›
; \

737 i‡(
tmp_t›
 > 0) \

739 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

740 i‡(*(
·l
--)) ; \

741 (
a
)->
t›
 = 
tmp_t›
; \

743 
	`bn_pﬁluã
(
a
); \

744 }

	)

746 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

747 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

748 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

749 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

750 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

751 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

754 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

755 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

758 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

759 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

760 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

761 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

762 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

763 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

765 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

771 
	`ERR_lﬂd_BN_°rögs
();

776 
	#BN_F_BNRAND
 127

	)

777 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

778 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

779 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

780 
	#BN_F_BN_BLINDING_NEW
 102

	)

781 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

782 
	#BN_F_BN_BN2DEC
 104

	)

783 
	#BN_F_BN_BN2HEX
 105

	)

784 
	#BN_F_BN_CTX_GET
 116

	)

785 
	#BN_F_BN_CTX_NEW
 106

	)

786 
	#BN_F_BN_CTX_START
 129

	)

787 
	#BN_F_BN_DIV
 107

	)

788 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

789 
	#BN_F_BN_DIV_RECP
 130

	)

790 
	#BN_F_BN_EXP
 123

	)

791 
	#BN_F_BN_EXPAND2
 108

	)

792 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

793 
	#BN_F_BN_GF2M_MOD
 131

	)

794 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

795 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

796 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

797 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

798 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

799 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

800 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

801 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

802 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

803 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

804 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

805 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

806 
	#BN_F_BN_MOD_INVERSE
 110

	)

807 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

808 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

809 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

810 
	#BN_F_BN_MOD_SQRT
 121

	)

811 
	#BN_F_BN_MPI2BN
 112

	)

812 
	#BN_F_BN_NEW
 113

	)

813 
	#BN_F_BN_RAND
 114

	)

814 
	#BN_F_BN_RAND_RANGE
 122

	)

815 
	#BN_F_BN_USUB
 115

	)

818 
	#BN_R_ARG2_LT_ARG3
 100

	)

819 
	#BN_R_BAD_RECIPROCAL
 101

	)

820 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

821 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

822 
	#BN_R_DIV_BY_ZERO
 103

	)

823 
	#BN_R_ENCODING_ERROR
 104

	)

824 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

825 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

826 
	#BN_R_INVALID_LENGTH
 106

	)

827 
	#BN_R_INVALID_RANGE
 115

	)

828 
	#BN_R_NOT_A_SQUARE
 111

	)

829 
	#BN_R_NOT_INITIALIZED
 107

	)

830 
	#BN_R_NO_INVERSE
 108

	)

831 
	#BN_R_NO_SOLUTION
 116

	)

832 
	#BN_R_P_IS_NOT_PRIME
 112

	)

833 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

834 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

836 #ifde‡ 
__˝lu•lus


837 
	}
}

	@/usr/include/openssl/fips.h

50 
	~<›ís¶/›ís¶c⁄f.h
>

51 
	~<›ís¶/¸y±o.h
>

52 
	~<°d¨g.h
>

54 #i‚de‡
OPENSSL_FIPS


55 #îr‹ 
FIPS
 
is
 
dißbÀd
.

58 #ifde‡
OPENSSL_FIPS


60 #ifde‡ 
__˝lu•lus


64 
dß_°
;

65 
rß_°
;

66 
evp_pkey_°
;

67 
ív_md_°
;

68 
ív_md_˘x_°
;

69 
evp_cùhî_°
;

70 
evp_cùhî_˘x_°
;

71 
dh_mëhod
;

72 
CMAC_CTX_°
;

73 
hmac_˘x_°
;

75 
FIPS_moduÀ_mode_£t
(
⁄off
, c⁄° *
auth
);

76 
FIPS_moduÀ_mode
();

77 
FIPS_moduÀ_ö°ÆÀd
();

78 c⁄° *
FIPS_ønd_check
();

79 
FIPS_£l·e°
();

80 
FIPS_£l·e°_Áûed
();

81 
FIPS_c‹ru±_sha1
();

82 
FIPS_£l·e°_sha1
();

83 
FIPS_£l·e°_sha2
();

84 
FIPS_c‹ru±_´s
();

85 
FIPS_£l·e°_´s_ccm
();

86 
FIPS_£l·e°_´s_gcm
();

87 
FIPS_£l·e°_´s_xts
();

88 
FIPS_£l·e°_´s
();

89 
FIPS_c‹ru±_des
();

90 
FIPS_£l·e°_des
();

91 
FIPS_c‹ru±_rß
();

92 
FIPS_c‹ru±_rß_keygí
();

93 
FIPS_£l·e°_rß
();

94 
FIPS_c‹ru±_dß
();

95 
FIPS_c‹ru±_dß_keygí
();

96 
FIPS_£l·e°_dß
();

97 
FIPS_£l·e°_ecdß
();

98 
FIPS_£l·e°_ecdh
();

99 
FIPS_£l·e°_dh
();

100 
FIPS_c‹ru±_∫g
();

101 
FIPS_∫g_°ick
();

102 
FIPS_x931_°ick
(
⁄off
);

103 
FIPS_drbg_°ick
(
⁄off
);

104 
FIPS_£l·e°_∫g
();

105 
FIPS_£l·e°_x931
();

106 
FIPS_£l·e°_hmac
();

107 
FIPS_£l·e°_drbg
();

108 
FIPS_£l·e°_drbg_Æl
();

109 
FIPS_£l·e°_cmac
();

111 
FIPS_gë_timevec
(*
buf
, *
p˘r
);

113 
	#FIPS_ERROR_IGNORED
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

114 
Æg
 "Öªviou†FIPS f‹biddíálg‹ôhmÉº‹ ign‹ed");

	)

116 
fùs_pkey_sig«tuª_ã°
(
evp_pkey_°
 *
pkey
,

117 c⁄° *
tbs
, 
tb¶í
,

118 c⁄° *
k©
, 
k©Àn
,

119 c⁄° 
ív_md_°
 *
dige°
, 
md_Êags
,

120 c⁄° *
Áû_°r
);

122 
fùs_cùhî_ã°
(
evp_cùhî_˘x_°
 *
˘x
,

123 c⁄° 
evp_cùhî_°
 *
cùhî
,

124 c⁄° *
key
,

125 c⁄° *
iv
,

126 c⁄° *
∂aöãxt
,

127 c⁄° *
cùhîãxt
,

128 
Àn
);

130 
fùs_£t_£l·e°_Áû
();

132 c⁄° 
ív_md_°
 *
FIPS_gë_dige°bynid
(
nid
);

134 c⁄° 
evp_cùhî_°
 *
FIPS_gë_cùhîbynid
(
nid
);

141 
ERR_lﬂd_FIPS_°rögs
();

146 
	#FIPS_F_DH_BUILTIN_GENPARAMS
 100

	)

147 
	#FIPS_F_DH_INIT
 148

	)

148 
	#FIPS_F_DRBG_RESEED
 162

	)

149 
	#FIPS_F_DSA_BUILTIN_PARAMGEN
 101

	)

150 
	#FIPS_F_DSA_BUILTIN_PARAMGEN2
 107

	)

151 
	#FIPS_F_DSA_DO_SIGN
 102

	)

152 
	#FIPS_F_DSA_DO_VERIFY
 103

	)

153 
	#FIPS_F_ECDH_COMPUTE_KEY
 163

	)

154 
	#FIPS_F_ECDSA_DO_SIGN
 164

	)

155 
	#FIPS_F_ECDSA_DO_VERIFY
 165

	)

156 
	#FIPS_F_EC_KEY_GENERATE_KEY
 166

	)

157 
	#FIPS_F_EVP_CIPHERINIT_EX
 124

	)

158 
	#FIPS_F_EVP_DIGESTINIT_EX
 125

	)

159 
	#FIPS_F_FIPS_CHECK_DSA
 104

	)

160 
	#FIPS_F_FIPS_CHECK_DSA_PRNG
 151

	)

161 
	#FIPS_F_FIPS_CHECK_EC
 142

	)

162 
	#FIPS_F_FIPS_CHECK_EC_PRNG
 152

	)

163 
	#FIPS_F_FIPS_CHECK_INCORE_FINGERPRINT
 105

	)

164 
	#FIPS_F_FIPS_CHECK_RSA
 106

	)

165 
	#FIPS_F_FIPS_CHECK_RSA_PRNG
 150

	)

166 
	#FIPS_F_FIPS_CIPHER
 160

	)

167 
	#FIPS_F_FIPS_CIPHERINIT
 143

	)

168 
	#FIPS_F_FIPS_CIPHER_CTX_CTRL
 161

	)

169 
	#FIPS_F_FIPS_DIGESTFINAL
 158

	)

170 
	#FIPS_F_FIPS_DIGESTINIT
 128

	)

171 
	#FIPS_F_FIPS_DIGESTUPDATE
 159

	)

172 
	#FIPS_F_FIPS_DRBG_BYTES
 131

	)

173 
	#FIPS_F_FIPS_DRBG_CHECK
 146

	)

174 
	#FIPS_F_FIPS_DRBG_CPRNG_TEST
 132

	)

175 
	#FIPS_F_FIPS_DRBG_ERROR_CHECK
 136

	)

176 
	#FIPS_F_FIPS_DRBG_GENERATE
 134

	)

177 
	#FIPS_F_FIPS_DRBG_INIT
 135

	)

178 
	#FIPS_F_FIPS_DRBG_INSTANTIATE
 138

	)

179 
	#FIPS_F_FIPS_DRBG_NEW
 139

	)

180 
	#FIPS_F_FIPS_DRBG_RESEED
 140

	)

181 
	#FIPS_F_FIPS_DRBG_SINGLE_KAT
 141

	)

182 
	#FIPS_F_FIPS_DSA_CHECK
 107

	)

183 
	#FIPS_F_FIPS_DSA_SIGN_DIGEST
 154

	)

184 
	#FIPS_F_FIPS_DSA_VERIFY_DIGEST
 155

	)

185 
	#FIPS_F_FIPS_GET_ENTROPY
 147

	)

186 
	#FIPS_F_FIPS_MODE_SET
 108

	)

187 
	#FIPS_F_FIPS_MODULE_MODE_SET
 108

	)

188 
	#FIPS_F_FIPS_PKEY_SIGNATURE_TEST
 109

	)

189 
	#FIPS_F_FIPS_RAND_ADD
 137

	)

190 
	#FIPS_F_FIPS_RAND_BYTES
 122

	)

191 
	#FIPS_F_FIPS_RAND_PSEUDO_BYTES
 167

	)

192 
	#FIPS_F_FIPS_RAND_SEED
 168

	)

193 
	#FIPS_F_FIPS_RAND_SET_METHOD
 126

	)

194 
	#FIPS_F_FIPS_RAND_STATUS
 127

	)

195 
	#FIPS_F_FIPS_RSA_SIGN_DIGEST
 156

	)

196 
	#FIPS_F_FIPS_RSA_VERIFY_DIGEST
 157

	)

197 
	#FIPS_F_FIPS_SELFTEST_AES
 110

	)

198 
	#FIPS_F_FIPS_SELFTEST_AES_CCM
 145

	)

199 
	#FIPS_F_FIPS_SELFTEST_AES_GCM
 129

	)

200 
	#FIPS_F_FIPS_SELFTEST_AES_XTS
 144

	)

201 
	#FIPS_F_FIPS_SELFTEST_CMAC
 130

	)

202 
	#FIPS_F_FIPS_SELFTEST_DES
 111

	)

203 
	#FIPS_F_FIPS_SELFTEST_DSA
 112

	)

204 
	#FIPS_F_FIPS_SELFTEST_ECDSA
 133

	)

205 
	#FIPS_F_FIPS_SELFTEST_HMAC
 113

	)

206 
	#FIPS_F_FIPS_SELFTEST_RNG
 114

	)

207 
	#FIPS_F_FIPS_SELFTEST_SHA1
 115

	)

208 
	#FIPS_F_FIPS_SELFTEST_X931
 114

	)

209 
	#FIPS_F_FIPS_SET_PRNG_KEY
 153

	)

210 
	#FIPS_F_HASH_FINAL
 123

	)

211 
	#FIPS_F_RSA_BUILTIN_KEYGEN
 116

	)

212 
	#FIPS_F_RSA_EAY_INIT
 149

	)

213 
	#FIPS_F_RSA_EAY_PRIVATE_DECRYPT
 117

	)

214 
	#FIPS_F_RSA_EAY_PRIVATE_ENCRYPT
 118

	)

215 
	#FIPS_F_RSA_EAY_PUBLIC_DECRYPT
 119

	)

216 
	#FIPS_F_RSA_EAY_PUBLIC_ENCRYPT
 120

	)

217 
	#FIPS_F_RSA_X931_GENERATE_KEY_EX
 121

	)

218 
	#FIPS_F_SSLEAY_RAND_BYTES
 122

	)

221 
	#FIPS_R_ADDITIONAL_INPUT_ERROR_UNDETECTED
 150

	)

222 
	#FIPS_R_ADDITIONAL_INPUT_TOO_LONG
 125

	)

223 
	#FIPS_R_ALREADY_INSTANTIATED
 134

	)

224 
	#FIPS_R_AUTHENTICATION_FAILURE
 151

	)

225 
	#FIPS_R_CANNOT_READ_EXE
 103

	)

226 
	#FIPS_R_CANNOT_READ_EXE_DIGEST
 104

	)

227 
	#FIPS_R_CONTRADICTING_EVIDENCE
 114

	)

228 
	#FIPS_R_DRBG_NOT_INITIALISED
 152

	)

229 
	#FIPS_R_DRBG_STUCK
 103

	)

230 
	#FIPS_R_ENTROPY_ERROR_UNDETECTED
 104

	)

231 
	#FIPS_R_ENTROPY_NOT_REQUESTED_FOR_RESEED
 105

	)

232 
	#FIPS_R_ENTROPY_SOURCE_STUCK
 142

	)

233 
	#FIPS_R_ERROR_INITIALISING_DRBG
 115

	)

234 
	#FIPS_R_ERROR_INSTANTIATING_DRBG
 127

	)

235 
	#FIPS_R_ERROR_RETRIEVING_ADDITIONAL_INPUT
 124

	)

236 
	#FIPS_R_ERROR_RETRIEVING_ENTROPY
 122

	)

237 
	#FIPS_R_ERROR_RETRIEVING_NONCE
 140

	)

238 
	#FIPS_R_EXE_DIGEST_DOES_NOT_MATCH
 105

	)

239 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH
 110

	)

240 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_NONPIC_RELOCATED
 111

	)

241 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_SEGMENT_ALIASING
 112

	)

242 
	#FIPS_R_FIPS_MODE_ALREADY_SET
 102

	)

243 
	#FIPS_R_FIPS_SELFTEST_FAILED
 106

	)

244 
	#FIPS_R_FUNCTION_ERROR
 116

	)

245 
	#FIPS_R_GENERATE_ERROR
 137

	)

246 
	#FIPS_R_GENERATE_ERROR_UNDETECTED
 118

	)

247 
	#FIPS_R_INSTANTIATE_ERROR
 119

	)

248 
	#FIPS_R_INSUFFICIENT_SECURITY_STRENGTH
 120

	)

249 
	#FIPS_R_INTERNAL_ERROR
 121

	)

250 
	#FIPS_R_INVALID_KEY_LENGTH
 109

	)

251 
	#FIPS_R_INVALID_PARAMETERS
 144

	)

252 
	#FIPS_R_IN_ERROR_STATE
 123

	)

253 
	#FIPS_R_KEY_TOO_SHORT
 108

	)

254 
	#FIPS_R_NONCE_ERROR_UNDETECTED
 149

	)

255 
	#FIPS_R_NON_FIPS_METHOD
 100

	)

256 
	#FIPS_R_NOPR_TEST1_FAILURE
 145

	)

257 
	#FIPS_R_NOPR_TEST2_FAILURE
 146

	)

258 
	#FIPS_R_NOT_INSTANTIATED
 126

	)

259 
	#FIPS_R_PAIRWISE_TEST_FAILED
 107

	)

260 
	#FIPS_R_PERSONALISATION_ERROR_UNDETECTED
 128

	)

261 
	#FIPS_R_PERSONALISATION_STRING_TOO_LONG
 129

	)

262 
	#FIPS_R_PRNG_STRENGTH_TOO_LOW
 143

	)

263 
	#FIPS_R_PR_TEST1_FAILURE
 147

	)

264 
	#FIPS_R_PR_TEST2_FAILURE
 148

	)

265 
	#FIPS_R_REQUEST_LENGTH_ERROR_UNDETECTED
 130

	)

266 
	#FIPS_R_REQUEST_TOO_LARGE_FOR_DRBG
 131

	)

267 
	#FIPS_R_RESEED_COUNTER_ERROR
 132

	)

268 
	#FIPS_R_RESEED_ERROR
 133

	)

269 
	#FIPS_R_RSA_DECRYPT_ERROR
 115

	)

270 
	#FIPS_R_RSA_ENCRYPT_ERROR
 116

	)

271 
	#FIPS_R_SELFTEST_FAILED
 101

	)

272 
	#FIPS_R_SELFTEST_FAILURE
 135

	)

273 
	#FIPS_R_STRENGTH_ERROR_UNDETECTED
 136

	)

274 
	#FIPS_R_TEST_FAILURE
 117

	)

275 
	#FIPS_R_UNINSTANTIATE_ERROR
 141

	)

276 
	#FIPS_R_UNINSTANTIATE_ZEROISE_ERROR
 138

	)

277 
	#FIPS_R_UNSUPPORTED_DRBG_TYPE
 139

	)

278 
	#FIPS_R_UNSUPPORTED_PLATFORM
 113

	)

280 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/et/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

47 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

48 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

49 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

52 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

53 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

54 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

55 c⁄° **
mesßges
,

56 
num_îr‹s
,

57 
ba£
);

58 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

61 
	`ë_li°_lock
();

62 
	`ë_li°_u∆ock
();

64 
	#__COM_ERR_H


	)

65 
	#__COM_ERR_H__


	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

22 
	#off£to„nd
(
TYPE
, 
MEMBER
) \

23 (
	`off£tof
(
TYPE
, 
MEMBER
Ë+ (((TYPE *)0)->MEMBER))

	)

	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

594 
	#LN_rßsßPss
 "rßsßPss"

	)

595 
	#NID_rßsßPss
 912

	)

596 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

598 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

599 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

601 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

603 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

604 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

606 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

608 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

609 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

611 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

613 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

614 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

616 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

618 
	#SN_pkcs3
 "pkcs3"

	)

619 
	#NID_pkcs3
 27

	)

620 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

622 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

623 
	#NID_dhKeyAgªemít
 28

	)

624 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

626 
	#SN_pkcs5
 "pkcs5"

	)

627 
	#NID_pkcs5
 187

	)

628 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

630 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

631 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

632 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

633 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

635 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

636 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

637 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

638 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

640 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

641 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

642 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

643 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

645 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

646 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

648 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

650 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

651 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

652 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

653 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

655 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

656 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

657 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

658 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

660 
	#LN_id_pbkdf2
 "PBKDF2"

	)

661 
	#NID_id_pbkdf2
 69

	)

662 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

664 
	#LN_pbes2
 "PBES2"

	)

665 
	#NID_pbes2
 161

	)

666 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

668 
	#LN_pbmac1
 "PBMAC1"

	)

669 
	#NID_pbmac1
 162

	)

670 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

672 
	#SN_pkcs7
 "pkcs7"

	)

673 
	#NID_pkcs7
 20

	)

674 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

676 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

677 
	#NID_pkcs7_d©a
 21

	)

678 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

680 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

681 
	#NID_pkcs7_sig√d
 22

	)

682 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

684 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

685 
	#NID_pkcs7_ívñ›ed
 23

	)

686 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

688 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

689 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

690 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

692 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

693 
	#NID_pkcs7_dige°
 25

	)

694 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

696 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

697 
	#NID_pkcs7_í¸y±ed
 26

	)

698 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

700 
	#SN_pkcs9
 "pkcs9"

	)

701 
	#NID_pkcs9
 47

	)

702 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

704 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

705 
	#NID_pkcs9_emaûAddªss
 48

	)

706 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

708 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

709 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

710 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

712 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

713 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

714 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

716 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

717 
	#NID_pkcs9_mesßgeDige°
 51

	)

718 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

720 
	#LN_pkcs9_signögTime
 "signögTime"

	)

721 
	#NID_pkcs9_signögTime
 52

	)

722 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

724 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

725 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

726 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

728 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

729 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

730 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

732 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

733 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

734 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

736 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

737 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

738 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

740 
	#SN_ext_ªq
 "extReq"

	)

741 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

742 
	#NID_ext_ªq
 172

	)

743 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

745 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

746 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

747 
	#NID_SMIMEC≠abûôõs
 167

	)

748 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

750 
	#SN_SMIME
 "SMIME"

	)

751 
	#LN_SMIME
 "S/MIME"

	)

752 
	#NID_SMIME
 188

	)

753 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

755 
	#SN_id_smime_mod
 "id-smime-mod"

	)

756 
	#NID_id_smime_mod
 189

	)

757 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

759 
	#SN_id_smime_˘
 "id-smime-˘"

	)

760 
	#NID_id_smime_˘
 190

	)

761 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

763 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

764 
	#NID_id_smime_Ø
 191

	)

765 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

767 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

768 
	#NID_id_smime_Æg
 192

	)

769 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

771 
	#SN_id_smime_cd
 "id-smime-cd"

	)

772 
	#NID_id_smime_cd
 193

	)

773 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

775 
	#SN_id_smime_•q
 "id-smime-•q"

	)

776 
	#NID_id_smime_•q
 194

	)

777 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

779 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

780 
	#NID_id_smime_˘i
 195

	)

781 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

783 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

784 
	#NID_id_smime_mod_cms
 196

	)

785 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

787 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

788 
	#NID_id_smime_mod_ess
 197

	)

789 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

791 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

792 
	#NID_id_smime_mod_oid
 198

	)

793 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

795 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

796 
	#NID_id_smime_mod_msg_v3
 199

	)

797 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

799 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

800 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

801 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

803 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

804 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

805 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

807 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

808 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

809 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

811 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

812 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

813 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

815 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

816 
	#NID_id_smime_˘_ª˚ùt
 204

	)

817 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

819 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

820 
	#NID_id_smime_˘_authD©a
 205

	)

821 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

823 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

824 
	#NID_id_smime_˘_publishCît
 206

	)

825 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

827 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

828 
	#NID_id_smime_˘_TSTInfo
 207

	)

829 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

831 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

832 
	#NID_id_smime_˘_TDTInfo
 208

	)

833 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

835 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

836 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

837 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

839 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

840 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

841 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

843 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

844 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

845 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

847 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

848 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

849 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

851 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

852 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

853 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

855 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

856 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

857 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

859 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

860 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

861 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

863 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

864 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

865 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

867 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

868 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

869 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

871 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

872 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

873 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

875 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

876 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

877 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

879 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

880 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

881 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

883 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

884 
	#NID_id_smime_Ø_macVÆue
 219

	)

885 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

887 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

888 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

889 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

891 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

892 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

893 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

895 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

896 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

897 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

899 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

900 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

901 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

903 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

904 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

905 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

907 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

908 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

909 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

911 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

912 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

913 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

915 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

916 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

917 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

919 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

920 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

921 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

923 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

924 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

925 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

927 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

928 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

929 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

931 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

932 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

933 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

935 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

936 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

937 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

939 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

940 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

941 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

943 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

944 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

945 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

947 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

948 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

949 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

951 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

952 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

953 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

955 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

956 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

957 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

959 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

960 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

961 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

963 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

964 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

965 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

967 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

968 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

969 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

971 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

972 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

973 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

975 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

976 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

977 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

979 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

980 
	#NID_id_smime_Æg_3DESwøp
 243

	)

981 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

983 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

984 
	#NID_id_smime_Æg_RC2wøp
 244

	)

985 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

987 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

988 
	#NID_id_smime_Æg_ESDH
 245

	)

989 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

991 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

992 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

993 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

995 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

996 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

997 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

999 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1000 
	#NID_id_Æg_PWRI_KEK
 893

	)

1001 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1003 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1004 
	#NID_id_smime_cd_ld≠
 248

	)

1005 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1007 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1008 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1009 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1011 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1012 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1013 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1015 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1016 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1017 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1019 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1020 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1021 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1023 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1024 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1025 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1027 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1028 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1029 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1031 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1032 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1033 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1035 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1036 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1037 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1039 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1040 
	#NID_‰õndlyName
 156

	)

1041 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1043 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1044 
	#NID_loˇlKeyID
 157

	)

1045 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1047 
	#SN_ms_c•_«me
 "CSPName"

	)

1048 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1049 
	#NID_ms_c•_«me
 417

	)

1050 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1052 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1053 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1054 
	#NID_LoˇlKeySë
 856

	)

1055 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1057 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1059 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1060 
	#NID_x509Cîtifiˇã
 158

	)

1061 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1063 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1064 
	#NID_sdsiCîtifiˇã
 159

	)

1065 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1067 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1069 
	#LN_x509Cæ
 "x509Cæ"

	)

1070 
	#NID_x509Cæ
 160

	)

1071 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1073 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1075 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1077 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1078 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1079 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1080 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1082 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1083 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1085 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1087 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1088 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1089 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1090 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1092 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1093 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1095 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1097 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1098 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1100 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1102 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1103 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1105 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1107 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1109 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1111 
	#LN_keyBag
 "keyBag"

	)

1112 
	#NID_keyBag
 150

	)

1113 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1115 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1116 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1117 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1119 
	#LN_˚πBag
 "˚πBag"

	)

1120 
	#NID_˚πBag
 152

	)

1121 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1123 
	#LN_¸lBag
 "¸lBag"

	)

1124 
	#NID_¸lBag
 153

	)

1125 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1127 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1128 
	#NID_£¸ëBag
 154

	)

1129 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1131 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1132 
	#NID_ß„C⁄ã¡sBag
 155

	)

1133 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1135 
	#SN_md2
 "MD2"

	)

1136 
	#LN_md2
 "md2"

	)

1137 
	#NID_md2
 3

	)

1138 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1140 
	#SN_md4
 "MD4"

	)

1141 
	#LN_md4
 "md4"

	)

1142 
	#NID_md4
 257

	)

1143 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1145 
	#SN_md5
 "MD5"

	)

1146 
	#LN_md5
 "md5"

	)

1147 
	#NID_md5
 4

	)

1148 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1150 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1151 
	#LN_md5_sha1
 "md5-sha1"

	)

1152 
	#NID_md5_sha1
 114

	)

1154 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1155 
	#NID_hmacWôhMD5
 797

	)

1156 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1158 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1159 
	#NID_hmacWôhSHA1
 163

	)

1160 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1162 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1163 
	#NID_hmacWôhSHA224
 798

	)

1164 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1166 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1167 
	#NID_hmacWôhSHA256
 799

	)

1168 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1170 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1171 
	#NID_hmacWôhSHA384
 800

	)

1172 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1174 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1175 
	#NID_hmacWôhSHA512
 801

	)

1176 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1178 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1179 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1180 
	#NID_rc2_cbc
 37

	)

1181 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1183 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1184 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1185 
	#NID_rc2_ecb
 38

	)

1187 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1188 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1189 
	#NID_rc2_cfb64
 39

	)

1191 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1192 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1193 
	#NID_rc2_ofb64
 40

	)

1195 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1196 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1197 
	#NID_rc2_40_cbc
 98

	)

1199 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1200 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1201 
	#NID_rc2_64_cbc
 166

	)

1203 
	#SN_rc4
 "RC4"

	)

1204 
	#LN_rc4
 "rc4"

	)

1205 
	#NID_rc4
 5

	)

1206 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1208 
	#SN_rc4_40
 "RC4-40"

	)

1209 
	#LN_rc4_40
 "rc4-40"

	)

1210 
	#NID_rc4_40
 97

	)

1212 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1213 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1214 
	#NID_des_ede3_cbc
 44

	)

1215 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1217 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1218 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1219 
	#NID_rc5_cbc
 120

	)

1220 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1222 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1223 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1224 
	#NID_rc5_ecb
 121

	)

1226 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1227 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1228 
	#NID_rc5_cfb64
 122

	)

1230 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1231 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1232 
	#NID_rc5_ofb64
 123

	)

1234 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1235 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1236 
	#NID_ms_ext_ªq
 171

	)

1237 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1239 
	#SN_ms_code_öd
 "msCodeInd"

	)

1240 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1241 
	#NID_ms_code_öd
 134

	)

1242 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1244 
	#SN_ms_code_com
 "msCodeCom"

	)

1245 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1246 
	#NID_ms_code_com
 135

	)

1247 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1249 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1250 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1251 
	#NID_ms_˘l_sign
 136

	)

1252 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1254 
	#SN_ms_sgc
 "msSGC"

	)

1255 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1256 
	#NID_ms_sgc
 137

	)

1257 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1259 
	#SN_ms_efs
 "msEFS"

	)

1260 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1261 
	#NID_ms_efs
 138

	)

1262 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1264 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1265 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1266 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1267 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1269 
	#SN_ms_u≤
 "msUPN"

	)

1270 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1271 
	#NID_ms_u≤
 649

	)

1272 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1274 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1275 
	#LN_idó_cbc
 "idó-cbc"

	)

1276 
	#NID_idó_cbc
 34

	)

1277 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1279 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1280 
	#LN_idó_ecb
 "idó-ecb"

	)

1281 
	#NID_idó_ecb
 36

	)

1283 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1284 
	#LN_idó_cfb64
 "idó-cfb"

	)

1285 
	#NID_idó_cfb64
 35

	)

1287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1288 
	#LN_idó_ofb64
 "idó-ofb"

	)

1289 
	#NID_idó_ofb64
 46

	)

1291 
	#SN_bf_cbc
 "BF-CBC"

	)

1292 
	#LN_bf_cbc
 "bf-cbc"

	)

1293 
	#NID_bf_cbc
 91

	)

1294 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1296 
	#SN_bf_ecb
 "BF-ECB"

	)

1297 
	#LN_bf_ecb
 "bf-ecb"

	)

1298 
	#NID_bf_ecb
 92

	)

1300 
	#SN_bf_cfb64
 "BF-CFB"

	)

1301 
	#LN_bf_cfb64
 "bf-cfb"

	)

1302 
	#NID_bf_cfb64
 93

	)

1304 
	#SN_bf_ofb64
 "BF-OFB"

	)

1305 
	#LN_bf_ofb64
 "bf-ofb"

	)

1306 
	#NID_bf_ofb64
 94

	)

1308 
	#SN_id_pkix
 "PKIX"

	)

1309 
	#NID_id_pkix
 127

	)

1310 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1312 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1313 
	#NID_id_pkix_mod
 258

	)

1314 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1316 
	#SN_id_≥
 "id-≥"

	)

1317 
	#NID_id_≥
 175

	)

1318 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1320 
	#SN_id_qt
 "id-qt"

	)

1321 
	#NID_id_qt
 259

	)

1322 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1324 
	#SN_id_kp
 "id-kp"

	)

1325 
	#NID_id_kp
 128

	)

1326 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1328 
	#SN_id_ô
 "id-ô"

	)

1329 
	#NID_id_ô
 260

	)

1330 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1332 
	#SN_id_pkù
 "id-pkù"

	)

1333 
	#NID_id_pkù
 261

	)

1334 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1336 
	#SN_id_Æg
 "id-Æg"

	)

1337 
	#NID_id_Æg
 262

	)

1338 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1340 
	#SN_id_cmc
 "id-cmc"

	)

1341 
	#NID_id_cmc
 263

	)

1342 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1344 
	#SN_id_⁄
 "id-⁄"

	)

1345 
	#NID_id_⁄
 264

	)

1346 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1348 
	#SN_id_pda
 "id-pda"

	)

1349 
	#NID_id_pda
 265

	)

1350 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1352 
	#SN_id_aˇ
 "id-aˇ"

	)

1353 
	#NID_id_aˇ
 266

	)

1354 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1356 
	#SN_id_qcs
 "id-qcs"

	)

1357 
	#NID_id_qcs
 267

	)

1358 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1360 
	#SN_id_c˘
 "id-c˘"

	)

1361 
	#NID_id_c˘
 268

	)

1362 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1364 
	#SN_id_µl
 "id-µl"

	)

1365 
	#NID_id_µl
 662

	)

1366 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1368 
	#SN_id_ad
 "id-ad"

	)

1369 
	#NID_id_ad
 176

	)

1370 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1372 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1373 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1374 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1376 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1377 
	#NID_id_pkix1_im∂icô_88
 270

	)

1378 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1380 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1381 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1382 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1384 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1385 
	#NID_id_pkix1_im∂icô_93
 272

	)

1386 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1388 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1389 
	#NID_id_mod_¸mf
 273

	)

1390 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1392 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1393 
	#NID_id_mod_cmc
 274

	)

1394 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1396 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1397 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1398 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1400 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1401 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1402 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1404 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1405 
	#NID_id_mod_cmp
 277

	)

1406 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1408 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1409 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1410 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1412 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1413 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1414 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1416 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1417 
	#NID_id_mod_©åibuã_˚π
 280

	)

1418 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1420 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1421 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1422 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1424 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1425 
	#NID_id_mod_oc•
 282

	)

1426 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1428 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1429 
	#NID_id_mod_dvcs
 283

	)

1430 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1432 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1433 
	#NID_id_mod_cmp2000
 284

	)

1434 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1436 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1437 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1438 
	#NID_öfo_ac˚ss
 177

	)

1439 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1441 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1442 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1443 
	#NID_biomëricInfo
 285

	)

1444 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1446 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1447 
	#NID_qcSèãmíts
 286

	)

1448 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1450 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1451 
	#NID_ac_audôE¡ôy
 287

	)

1452 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1454 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1455 
	#NID_ac_èrgëög
 288

	)

1456 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1458 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1459 
	#NID_ØC⁄åﬁs
 289

	)

1460 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1462 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1463 
	#NID_sbgp_ùAddrBlock
 290

	)

1464 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1466 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1467 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1468 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1470 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1471 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1472 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1474 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1475 
	#NID_ac_¥oxyög
 397

	)

1476 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1478 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1479 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1480 
	#NID_söfo_ac˚ss
 398

	)

1481 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1483 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1484 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1485 
	#NID_¥oxyCîtInfo
 663

	)

1486 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1488 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1489 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1490 
	#NID_id_qt_˝s
 164

	)

1491 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1493 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1494 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1495 
	#NID_id_qt_unŸi˚
 165

	)

1496 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1498 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1499 
	#NID_ãxtNŸi˚
 293

	)

1500 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1502 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1503 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1504 
	#NID_£rvî_auth
 129

	)

1505 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1507 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1508 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1509 
	#NID_˛õ¡_auth
 130

	)

1510 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1512 
	#SN_code_sign
 "codeSignög"

	)

1513 
	#LN_code_sign
 "CodêSignög"

	)

1514 
	#NID_code_sign
 131

	)

1515 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1517 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1518 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1519 
	#NID_emaû_¥Ÿe˘
 132

	)

1520 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1522 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1523 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1524 
	#NID_ù£cEndSy°em
 294

	)

1525 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1527 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1528 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1529 
	#NID_ù£cTu¬ñ
 295

	)

1530 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1532 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1533 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1534 
	#NID_ù£cU£r
 296

	)

1535 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1537 
	#SN_time_°amp
 "timeSèmpög"

	)

1538 
	#LN_time_°amp
 "TimêSèmpög"

	)

1539 
	#NID_time_°amp
 133

	)

1540 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1542 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1543 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1544 
	#NID_OCSP_sign
 180

	)

1545 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1547 
	#SN_dvcs
 "DVCS"

	)

1548 
	#LN_dvcs
 "dvcs"

	)

1549 
	#NID_dvcs
 297

	)

1550 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1552 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1553 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1554 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1556 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1557 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1558 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1560 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1561 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1562 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1564 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1565 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1566 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1568 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1569 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1570 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1572 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1573 
	#NID_id_ô_cuºítCRL
 303

	)

1574 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1576 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1577 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1578 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1580 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1581 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1582 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1584 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1585 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1586 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1588 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1589 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1590 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1592 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1593 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1594 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1596 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1597 
	#NID_id_ô_ªvPas•hø£
 309

	)

1598 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1600 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1601 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1602 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1604 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1605 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1606 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1608 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1609 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1610 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1612 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1613 
	#NID_id_ô_suµL™gTags
 784

	)

1614 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1616 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1617 
	#NID_id_ªgCål
 313

	)

1618 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1620 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1621 
	#NID_id_ªgInfo
 314

	)

1622 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1624 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1625 
	#NID_id_ªgCål_ªgTokí
 315

	)

1626 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1628 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1629 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1630 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1632 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1633 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1634 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1636 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1637 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1638 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1640 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1641 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1642 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1644 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1645 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1646 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1648 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1649 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1650 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1652 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1653 
	#NID_id_ªgInfo_˚πReq
 322

	)

1654 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1656 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1657 
	#NID_id_Æg_des40
 323

	)

1658 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1660 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1661 
	#NID_id_Æg_noSig«tuª
 324

	)

1662 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1664 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1665 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1666 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1668 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1669 
	#NID_id_Æg_dh_p›
 326

	)

1670 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1672 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1673 
	#NID_id_cmc_°©usInfo
 327

	)

1674 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1676 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1677 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1678 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1680 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1681 
	#NID_id_cmc_idítôyProof
 329

	)

1682 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1684 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1685 
	#NID_id_cmc_d©aRëu∫
 330

	)

1686 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1688 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1689 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1690 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1692 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1693 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1694 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1696 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1697 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1698 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1700 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1701 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1702 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1704 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1705 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1706 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1708 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1709 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1710 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1712 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1713 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1714 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1716 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1717 
	#NID_id_cmc_gëCît
 338

	)

1718 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1720 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1721 
	#NID_id_cmc_gëCRL
 339

	)

1722 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1724 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1725 
	#NID_id_cmc_ªvokeReque°
 340

	)

1726 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1728 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1729 
	#NID_id_cmc_ªgInfo
 341

	)

1730 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1732 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1733 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1734 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1736 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1737 
	#NID_id_cmc_quîyPídög
 343

	)

1738 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1740 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1741 
	#NID_id_cmc_p›LökR™dom
 344

	)

1742 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1744 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1745 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1746 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1748 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1749 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1750 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1752 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1753 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1754 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1756 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1757 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1758 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1759 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1761 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1762 
	#NID_id_pda_d©eOfBúth
 348

	)

1763 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1765 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1766 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1767 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1769 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1770 
	#NID_id_pda_gídî
 351

	)

1771 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1773 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1774 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1775 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1777 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1778 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1779 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1781 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1782 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1783 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1785 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1786 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1787 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1789 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1790 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1791 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1793 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1794 
	#NID_id_aˇ_group
 357

	)

1795 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1797 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1798 
	#NID_id_aˇ_rﬁe
 358

	)

1799 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1801 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1802 
	#NID_id_aˇ_ícAârs
 399

	)

1803 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1805 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1806 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1807 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1809 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1810 
	#NID_id_c˘_¸s
 360

	)

1811 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1813 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1814 
	#NID_id_c˘_PKID©a
 361

	)

1815 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1817 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1818 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1819 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1821 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1822 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1823 
	#NID_id_µl_™yL™guage
 664

	)

1824 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1826 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1827 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1828 
	#NID_id_µl_öhîôAŒ
 665

	)

1829 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1831 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1832 
	#LN_Indïídít
 "Indïídít"

	)

1833 
	#NID_Indïídít
 667

	)

1834 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1836 
	#SN_ad_OCSP
 "OCSP"

	)

1837 
	#LN_ad_OCSP
 "OCSP"

	)

1838 
	#NID_ad_OCSP
 178

	)

1839 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1841 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1842 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1843 
	#NID_ad_ˇ_issuîs
 179

	)

1844 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1846 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1847 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1848 
	#NID_ad_timeSèmpög
 363

	)

1849 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1851 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1852 
	#LN_ad_dvcs
 "ad dvcs"

	)

1853 
	#NID_ad_dvcs
 364

	)

1854 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1856 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1857 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1858 
	#NID_ˇRïosô‹y
 785

	)

1859 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1861 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1863 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1864 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1865 
	#NID_id_pkix_OCSP_basic
 365

	)

1866 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1868 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1869 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1870 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1871 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1873 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1874 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1875 
	#NID_id_pkix_OCSP_CæID
 367

	)

1876 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1878 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1879 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1880 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1881 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1883 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1884 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1885 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1886 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1888 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1889 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1890 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1891 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1893 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1894 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1895 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1896 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1898 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1899 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1900 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1901 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1903 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1904 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1905 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1907 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1908 
	#NID_id_pkix_OCSP_∑th
 374

	)

1909 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1911 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1912 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1913 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1914 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1916 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1917 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1918 
	#NID_Æg‹ôhm
 376

	)

1919 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1921 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1922 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1923 
	#NID_md5WôhRSA
 104

	)

1924 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1926 
	#SN_des_ecb
 "DES-ECB"

	)

1927 
	#LN_des_ecb
 "des-ecb"

	)

1928 
	#NID_des_ecb
 29

	)

1929 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1931 
	#SN_des_cbc
 "DES-CBC"

	)

1932 
	#LN_des_cbc
 "des-cbc"

	)

1933 
	#NID_des_cbc
 31

	)

1934 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1936 
	#SN_des_ofb64
 "DES-OFB"

	)

1937 
	#LN_des_ofb64
 "des-ofb"

	)

1938 
	#NID_des_ofb64
 45

	)

1939 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1941 
	#SN_des_cfb64
 "DES-CFB"

	)

1942 
	#LN_des_cfb64
 "des-cfb"

	)

1943 
	#NID_des_cfb64
 30

	)

1944 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1946 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1947 
	#NID_rßSig«tuª
 377

	)

1948 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1950 
	#SN_dß_2
 "DSA-ﬁd"

	)

1951 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1952 
	#NID_dß_2
 67

	)

1953 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1955 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1956 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1957 
	#NID_dßWôhSHA
 66

	)

1958 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1960 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1961 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1962 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1963 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1965 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1966 
	#LN_des_ede_ecb
 "des-ede"

	)

1967 
	#NID_des_ede_ecb
 32

	)

1968 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1970 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1971 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1972 
	#NID_des_ede3_ecb
 33

	)

1974 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1975 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1976 
	#NID_des_ede_cbc
 43

	)

1978 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1979 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1980 
	#NID_des_ede_cfb64
 60

	)

1982 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1983 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1984 
	#NID_des_ede3_cfb64
 61

	)

1986 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1987 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1988 
	#NID_des_ede_ofb64
 62

	)

1990 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1991 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1992 
	#NID_des_ede3_ofb64
 63

	)

1994 
	#SN_desx_cbc
 "DESX-CBC"

	)

1995 
	#LN_desx_cbc
 "desx-cbc"

	)

1996 
	#NID_desx_cbc
 80

	)

1998 
	#SN_sha
 "SHA"

	)

1999 
	#LN_sha
 "sha"

	)

2000 
	#NID_sha
 41

	)

2001 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2003 
	#SN_sha1
 "SHA1"

	)

2004 
	#LN_sha1
 "sha1"

	)

2005 
	#NID_sha1
 64

	)

2006 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2008 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2009 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2010 
	#NID_dßWôhSHA1_2
 70

	)

2011 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2013 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2014 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2015 
	#NID_sha1WôhRSA
 115

	)

2016 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2018 
	#SN_rùemd160
 "RIPEMD160"

	)

2019 
	#LN_rùemd160
 "rùemd160"

	)

2020 
	#NID_rùemd160
 117

	)

2021 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2023 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2024 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2025 
	#NID_rùemd160WôhRSA
 119

	)

2026 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2028 
	#SN_sx√t
 "SXNëID"

	)

2029 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2030 
	#NID_sx√t
 143

	)

2031 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2033 
	#SN_X500
 "X500"

	)

2034 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2035 
	#NID_X500
 11

	)

2036 
	#OBJ_X500
 2L,5L

	)

2038 
	#SN_X509
 "X509"

	)

2039 
	#NID_X509
 12

	)

2040 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2042 
	#SN_comm⁄Name
 "CN"

	)

2043 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2044 
	#NID_comm⁄Name
 13

	)

2045 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2047 
	#SN_su∫ame
 "SN"

	)

2048 
	#LN_su∫ame
 "su∫ame"

	)

2049 
	#NID_su∫ame
 100

	)

2050 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2052 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2053 
	#NID_£rülNumbî
 105

	)

2054 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2056 
	#SN_cou¡ryName
 "C"

	)

2057 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2058 
	#NID_cou¡ryName
 14

	)

2059 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2061 
	#SN_loˇlôyName
 "L"

	)

2062 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2063 
	#NID_loˇlôyName
 15

	)

2064 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2066 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2067 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2068 
	#NID_°©eOrProvö˚Name
 16

	)

2069 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2071 
	#SN_°ªëAddªss
 "°ªë"

	)

2072 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2073 
	#NID_°ªëAddªss
 660

	)

2074 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2076 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2077 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2078 
	#NID_‹g™iz©i⁄Name
 17

	)

2079 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2081 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2082 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2083 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2084 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2086 
	#SN_tôÀ
 "tôÀ"

	)

2087 
	#LN_tôÀ
 "tôÀ"

	)

2088 
	#NID_tôÀ
 106

	)

2089 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2091 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2092 
	#NID_des¸ùti⁄
 107

	)

2093 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2095 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2096 
	#NID_£¨chGuide
 859

	)

2097 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2099 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2100 
	#NID_busöessC©eg‹y
 860

	)

2101 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2103 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2104 
	#NID_po°ÆAddªss
 861

	)

2105 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2107 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2108 
	#NID_po°ÆCode
 661

	)

2109 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2111 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2112 
	#NID_po°Offi˚Box
 862

	)

2113 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2115 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2116 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2117 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2119 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2120 
	#NID_ãÀph⁄eNumbî
 864

	)

2121 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2123 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2124 
	#NID_ãÀxNumbî
 865

	)

2125 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2127 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2128 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2129 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2131 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2132 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2133 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2135 
	#LN_x121Addªss
 "x121Addªss"

	)

2136 
	#NID_x121Addªss
 868

	)

2137 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2139 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2140 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2141 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2143 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2144 
	#NID_ªgi°îedAddªss
 870

	)

2145 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2147 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2148 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2149 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2151 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2152 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2153 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2155 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2156 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2157 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2159 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2160 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2161 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2163 
	#SN_membî
 "membî"

	)

2164 
	#NID_membî
 875

	)

2165 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2167 
	#SN_ow√r
 "ow√r"

	)

2168 
	#NID_ow√r
 876

	)

2169 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2171 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2172 
	#NID_rﬁeOccu∑¡
 877

	)

2173 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2175 
	#SN_£eAlso
 "£eAlso"

	)

2176 
	#NID_£eAlso
 878

	)

2177 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2179 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2180 
	#NID_u£rPassw‹d
 879

	)

2181 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2183 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2184 
	#NID_u£rCîtifiˇã
 880

	)

2185 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2187 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2188 
	#NID_cACîtifiˇã
 881

	)

2189 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2191 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2192 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2193 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2195 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2196 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2197 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2199 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2200 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2201 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2203 
	#SN_«me
 "«me"

	)

2204 
	#LN_«me
 "«me"

	)

2205 
	#NID_«me
 173

	)

2206 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2208 
	#SN_givíName
 "GN"

	)

2209 
	#LN_givíName
 "givíName"

	)

2210 
	#NID_givíName
 99

	)

2211 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2213 
	#SN_öôüls
 "öôüls"

	)

2214 
	#LN_öôüls
 "öôüls"

	)

2215 
	#NID_öôüls
 101

	)

2216 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2218 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2219 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2220 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2222 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2223 
	#NID_x500UniqueIdítifõr
 503

	)

2224 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2226 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2227 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2228 
	#NID_dnQuÆifõr
 174

	)

2229 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2231 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2232 
	#NID_íh™˚dSórchGuide
 885

	)

2233 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2235 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2236 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2237 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2239 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2240 
	#NID_di°öguishedName
 887

	)

2241 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2243 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2244 
	#NID_uniqueMembî
 888

	)

2245 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2247 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2248 
	#NID_hou£Idítifõr
 889

	)

2249 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2251 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2252 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2253 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2255 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2256 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2257 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2259 
	#SN_dmdName
 "dmdName"

	)

2260 
	#NID_dmdName
 892

	)

2261 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2263 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2264 
	#NID_p£ud⁄ym
 510

	)

2265 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2267 
	#SN_rﬁe
 "rﬁe"

	)

2268 
	#LN_rﬁe
 "rﬁe"

	)

2269 
	#NID_rﬁe
 400

	)

2270 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2272 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2273 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2274 
	#NID_X500Æg‹ôhms
 378

	)

2275 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2277 
	#SN_rß
 "RSA"

	)

2278 
	#LN_rß
 "rß"

	)

2279 
	#NID_rß
 19

	)

2280 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2282 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2283 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2284 
	#NID_mdc2WôhRSA
 96

	)

2285 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2287 
	#SN_mdc2
 "MDC2"

	)

2288 
	#LN_mdc2
 "mdc2"

	)

2289 
	#NID_mdc2
 95

	)

2290 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2292 
	#SN_id_˚
 "id-˚"

	)

2293 
	#NID_id_˚
 81

	)

2294 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2296 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2297 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2298 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2299 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2301 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2302 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2303 
	#NID_subje˘_key_idítifõr
 82

	)

2304 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2306 
	#SN_key_ußge
 "keyUßge"

	)

2307 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2308 
	#NID_key_ußge
 83

	)

2309 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2311 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2312 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2313 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2314 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2316 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2317 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2318 
	#NID_subje˘_Æt_«me
 85

	)

2319 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2321 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2322 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2323 
	#NID_issuî_Æt_«me
 86

	)

2324 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2326 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2327 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2328 
	#NID_basic_c⁄°øöts
 87

	)

2329 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2331 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2332 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2333 
	#NID_¸l_numbî
 88

	)

2334 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2336 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2337 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2338 
	#NID_¸l_ªas⁄
 141

	)

2339 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2341 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2342 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2343 
	#NID_övÆidôy_d©e
 142

	)

2344 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2346 
	#SN_dñè_¸l
 "dñèCRL"

	)

2347 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2348 
	#NID_dñè_¸l
 140

	)

2349 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2351 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2352 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2353 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2354 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2356 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2357 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2358 
	#NID_˚πifiˇã_issuî
 771

	)

2359 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2361 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2362 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2363 
	#NID_«me_c⁄°øöts
 666

	)

2364 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2366 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2367 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2368 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2369 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2371 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2372 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2373 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2374 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2376 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2377 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2378 
	#NID_™y_pﬁicy
 746

	)

2379 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2381 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2382 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2383 
	#NID_pﬁicy_m≠pögs
 747

	)

2384 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2386 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2387 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2388 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2389 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2391 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2392 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2393 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2394 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2396 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2397 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2398 
	#NID_ext_key_ußge
 126

	)

2399 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2401 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2402 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2403 
	#NID_‰eshe°_¸l
 857

	)

2404 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2406 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2407 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2408 
	#NID_öhibô_™y_pﬁicy
 748

	)

2409 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2411 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2412 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2413 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2414 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2416 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2417 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2418 
	#NID_no_ªv_avaû
 403

	)

2419 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2421 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2422 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2423 
	#NID_™yExãndedKeyUßge
 910

	)

2424 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2426 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2427 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2428 
	#NID_√tsˇ≥
 57

	)

2429 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2431 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2432 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2433 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2434 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2436 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2437 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2438 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2439 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2441 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2442 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2443 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2444 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2446 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2447 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2448 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2449 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2451 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2452 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2453 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2454 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2456 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2459 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2461 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2462 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2463 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2464 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2466 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2467 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2468 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2469 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2471 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2472 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2473 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2474 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2476 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2477 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2478 
	#NID_√tsˇ≥_commít
 78

	)

2479 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2481 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2482 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2483 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2484 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2486 
	#SN_ns_sgc
 "nsSGC"

	)

2487 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2488 
	#NID_ns_sgc
 139

	)

2489 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2491 
	#SN_‹g
 "ORG"

	)

2492 
	#LN_‹g
 "‹g"

	)

2493 
	#NID_‹g
 379

	)

2494 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2496 
	#SN_dod
 "DOD"

	)

2497 
	#LN_dod
 "dod"

	)

2498 
	#NID_dod
 380

	)

2499 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2501 
	#SN_ü«
 "IANA"

	)

2502 
	#LN_ü«
 "ü«"

	)

2503 
	#NID_ü«
 381

	)

2504 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2506 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2508 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2509 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2510 
	#NID_Dúe˘‹y
 382

	)

2511 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2513 
	#SN_M™agemít
 "mgmt"

	)

2514 
	#LN_M™agemít
 "M™agemít"

	)

2515 
	#NID_M™agemít
 383

	)

2516 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2518 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2519 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2520 
	#NID_Ex≥rimíèl
 384

	)

2521 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2523 
	#SN_Priv©e
 "¥iv©e"

	)

2524 
	#LN_Priv©e
 "Priv©e"

	)

2525 
	#NID_Priv©e
 385

	)

2526 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2528 
	#SN_Securôy
 "£curôy"

	)

2529 
	#LN_Securôy
 "Securôy"

	)

2530 
	#NID_Securôy
 386

	)

2531 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2533 
	#SN_SNMPv2
 "¢mpv2"

	)

2534 
	#LN_SNMPv2
 "SNMPv2"

	)

2535 
	#NID_SNMPv2
 387

	)

2536 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2538 
	#LN_Maû
 "Maû"

	)

2539 
	#NID_Maû
 388

	)

2540 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2542 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2543 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2544 
	#NID_E¡î¥i£s
 389

	)

2545 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2547 
	#SN_dcObje˘
 "dcobje˘"

	)

2548 
	#LN_dcObje˘
 "dcObje˘"

	)

2549 
	#NID_dcObje˘
 390

	)

2550 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2552 
	#SN_mime_mhs
 "mime-mhs"

	)

2553 
	#LN_mime_mhs
 "MIME MHS"

	)

2554 
	#NID_mime_mhs
 504

	)

2555 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2557 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2558 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2559 
	#NID_mime_mhs_hódögs
 505

	)

2560 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2562 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2563 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2564 
	#NID_mime_mhs_bodõs
 506

	)

2565 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2567 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2568 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2569 
	#NID_id_hex_∑πül_mesßge
 507

	)

2570 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2572 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2573 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2574 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2575 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2577 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2578 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2579 
	#NID_æe_com¥essi⁄
 124

	)

2580 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2582 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2583 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2584 
	#NID_zlib_com¥essi⁄
 125

	)

2585 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2587 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2589 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2591 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2593 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2594 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2595 
	#NID_´s_128_ecb
 418

	)

2596 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2598 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2599 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2600 
	#NID_´s_128_cbc
 419

	)

2601 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2603 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2604 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2605 
	#NID_´s_128_ofb128
 420

	)

2606 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2608 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2609 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2610 
	#NID_´s_128_cfb128
 421

	)

2611 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2613 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2614 
	#NID_id_´s128_wøp
 788

	)

2615 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2617 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2618 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2619 
	#NID_´s_128_gcm
 895

	)

2620 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2622 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2623 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2624 
	#NID_´s_128_ccm
 896

	)

2625 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2627 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2628 
	#NID_id_´s128_wøp_∑d
 897

	)

2629 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2631 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2632 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2633 
	#NID_´s_192_ecb
 422

	)

2634 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2636 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2637 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2638 
	#NID_´s_192_cbc
 423

	)

2639 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2641 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2642 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2643 
	#NID_´s_192_ofb128
 424

	)

2644 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2646 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2647 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2648 
	#NID_´s_192_cfb128
 425

	)

2649 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2651 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2652 
	#NID_id_´s192_wøp
 789

	)

2653 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2655 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2656 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2657 
	#NID_´s_192_gcm
 898

	)

2658 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2660 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2661 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2662 
	#NID_´s_192_ccm
 899

	)

2663 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2665 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2666 
	#NID_id_´s192_wøp_∑d
 900

	)

2667 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2669 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2670 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2671 
	#NID_´s_256_ecb
 426

	)

2672 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2674 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2675 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2676 
	#NID_´s_256_cbc
 427

	)

2677 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2679 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2680 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2681 
	#NID_´s_256_ofb128
 428

	)

2682 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2684 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2685 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2686 
	#NID_´s_256_cfb128
 429

	)

2687 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2689 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2690 
	#NID_id_´s256_wøp
 790

	)

2691 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2693 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2694 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2695 
	#NID_´s_256_gcm
 901

	)

2696 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2698 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2699 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2700 
	#NID_´s_256_ccm
 902

	)

2701 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2703 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2704 
	#NID_id_´s256_wøp_∑d
 903

	)

2705 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2707 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2708 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2709 
	#NID_´s_128_cfb1
 650

	)

2711 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2712 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2713 
	#NID_´s_192_cfb1
 651

	)

2715 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2716 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2717 
	#NID_´s_256_cfb1
 652

	)

2719 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2720 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2721 
	#NID_´s_128_cfb8
 653

	)

2723 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2724 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2725 
	#NID_´s_192_cfb8
 654

	)

2727 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2728 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2729 
	#NID_´s_256_cfb8
 655

	)

2731 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2732 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2733 
	#NID_´s_128_˘r
 904

	)

2735 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2736 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2737 
	#NID_´s_192_˘r
 905

	)

2739 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2740 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2741 
	#NID_´s_256_˘r
 906

	)

2743 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2744 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2745 
	#NID_´s_128_xts
 913

	)

2747 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2748 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2749 
	#NID_´s_256_xts
 914

	)

2751 
	#SN_des_cfb1
 "DES-CFB1"

	)

2752 
	#LN_des_cfb1
 "des-cfb1"

	)

2753 
	#NID_des_cfb1
 656

	)

2755 
	#SN_des_cfb8
 "DES-CFB8"

	)

2756 
	#LN_des_cfb8
 "des-cfb8"

	)

2757 
	#NID_des_cfb8
 657

	)

2759 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2760 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2761 
	#NID_des_ede3_cfb1
 658

	)

2763 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2764 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2765 
	#NID_des_ede3_cfb8
 659

	)

2767 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2769 
	#SN_sha256
 "SHA256"

	)

2770 
	#LN_sha256
 "sha256"

	)

2771 
	#NID_sha256
 672

	)

2772 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2774 
	#SN_sha384
 "SHA384"

	)

2775 
	#LN_sha384
 "sha384"

	)

2776 
	#NID_sha384
 673

	)

2777 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2779 
	#SN_sha512
 "SHA512"

	)

2780 
	#LN_sha512
 "sha512"

	)

2781 
	#NID_sha512
 674

	)

2782 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2784 
	#SN_sha224
 "SHA224"

	)

2785 
	#LN_sha224
 "sha224"

	)

2786 
	#NID_sha224
 675

	)

2787 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2789 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2791 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2792 
	#NID_dß_wôh_SHA224
 802

	)

2793 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2795 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2796 
	#NID_dß_wôh_SHA256
 803

	)

2797 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2799 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2800 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2801 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2802 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2804 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2806 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2807 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2808 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2809 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2821 
	#SN_d©a
 "d©a"

	)

2822 
	#NID_d©a
 434

	)

2823 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2825 
	#SN_pss
 "pss"

	)

2826 
	#NID_pss
 435

	)

2827 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2829 
	#SN_u˛
 "u˛"

	)

2830 
	#NID_u˛
 436

	)

2831 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2833 
	#SN_pûŸ
 "pûŸ"

	)

2834 
	#NID_pûŸ
 437

	)

2835 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2837 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2838 
	#NID_pûŸAâribuãTy≥
 438

	)

2839 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2841 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2842 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2843 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2845 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2846 
	#NID_pûŸObje˘Cœss
 440

	)

2847 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2849 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2850 
	#NID_pûŸGroups
 441

	)

2851 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2853 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2854 
	#NID_iA5SåögSy¡ax
 442

	)

2855 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2857 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2858 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2859 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2861 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2862 
	#NID_pûŸObje˘
 444

	)

2863 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2865 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2866 
	#NID_pûŸPîs⁄
 445

	)

2867 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2869 
	#SN_accou¡
 "accou¡"

	)

2870 
	#NID_accou¡
 446

	)

2871 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2873 
	#SN_documít
 "documít"

	)

2874 
	#NID_documít
 447

	)

2875 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2877 
	#SN_room
 "room"

	)

2878 
	#NID_room
 448

	)

2879 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2881 
	#LN_documítSîõs
 "documítSîõs"

	)

2882 
	#NID_documítSîõs
 449

	)

2883 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2885 
	#SN_Domaö
 "domaö"

	)

2886 
	#LN_Domaö
 "Domaö"

	)

2887 
	#NID_Domaö
 392

	)

2888 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2890 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2891 
	#NID_rFC822loˇlP¨t
 450

	)

2892 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2894 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2895 
	#NID_dNSDomaö
 451

	)

2896 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2898 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2899 
	#NID_domaöRñ©edObje˘
 452

	)

2900 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2902 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2903 
	#NID_‰õndlyCou¡ry
 453

	)

2904 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2906 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2907 
	#NID_sim∂eSecurôyObje˘
 454

	)

2908 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2910 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2911 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2912 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2914 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2915 
	#NID_pûŸDSA
 456

	)

2916 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2918 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2919 
	#NID_quÆôyLabñÀdD©a
 457

	)

2920 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2922 
	#SN_u£rId
 "UID"

	)

2923 
	#LN_u£rId
 "u£rId"

	)

2924 
	#NID_u£rId
 458

	)

2925 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2927 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2928 
	#NID_ãxtEncodedORAddªss
 459

	)

2929 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2931 
	#SN_rfc822Maûbox
 "maû"

	)

2932 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2933 
	#NID_rfc822Maûbox
 460

	)

2934 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2936 
	#SN_öfo
 "öfo"

	)

2937 
	#NID_öfo
 461

	)

2938 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2940 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2941 
	#NID_ÁvourôeDrök
 462

	)

2942 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2944 
	#LN_roomNumbî
 "roomNumbî"

	)

2945 
	#NID_roomNumbî
 463

	)

2946 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2948 
	#SN_phŸo
 "phŸo"

	)

2949 
	#NID_phŸo
 464

	)

2950 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2952 
	#LN_u£rCœss
 "u£rCœss"

	)

2953 
	#NID_u£rCœss
 465

	)

2954 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2956 
	#SN_ho°
 "ho°"

	)

2957 
	#NID_ho°
 466

	)

2958 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2960 
	#SN_m™agî
 "m™agî"

	)

2961 
	#NID_m™agî
 467

	)

2962 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2964 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2965 
	#NID_documítIdítifõr
 468

	)

2966 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2968 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2969 
	#NID_documítTôÀ
 469

	)

2970 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2972 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2973 
	#NID_documítVîsi⁄
 470

	)

2974 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2976 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2977 
	#NID_documítAuth‹
 471

	)

2978 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2980 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2981 
	#NID_documítLoˇti⁄
 472

	)

2982 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2984 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2985 
	#NID_homeTñïh⁄eNumbî
 473

	)

2986 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2988 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2989 
	#NID_£¸ë¨y
 474

	)

2990 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2992 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2993 
	#NID_ŸhîMaûbox
 475

	)

2994 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2996 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2997 
	#NID_œ°ModifõdTime
 476

	)

2998 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3000 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3001 
	#NID_œ°ModifõdBy
 477

	)

3002 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3004 
	#SN_domaöComp⁄ít
 "DC"

	)

3005 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3006 
	#NID_domaöComp⁄ít
 391

	)

3007 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3009 
	#LN_aRec‹d
 "aRec‹d"

	)

3010 
	#NID_aRec‹d
 478

	)

3011 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3013 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3014 
	#NID_pûŸAâribuãTy≥27
 479

	)

3015 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3017 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3018 
	#NID_mXRec‹d
 480

	)

3019 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3021 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3022 
	#NID_nSRec‹d
 481

	)

3023 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3025 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3026 
	#NID_sOARec‹d
 482

	)

3027 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3029 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3030 
	#NID_cNAMERec‹d
 483

	)

3031 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3033 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3034 
	#NID_assocüãdDomaö
 484

	)

3035 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3037 
	#LN_assocüãdName
 "assocüãdName"

	)

3038 
	#NID_assocüãdName
 485

	)

3039 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3041 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3042 
	#NID_homePo°ÆAddªss
 486

	)

3043 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3045 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3046 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3047 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3049 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3050 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3051 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3053 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3054 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3055 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3057 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3058 
	#NID_‰õndlyCou¡ryName
 490

	)

3059 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3061 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3062 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3063 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3065 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3066 
	#NID_j™ëMaûbox
 492

	)

3067 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3069 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3070 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3071 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3073 
	#LN_buûdögName
 "buûdögName"

	)

3074 
	#NID_buûdögName
 494

	)

3075 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3077 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3078 
	#NID_dSAQuÆôy
 495

	)

3079 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3081 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3082 
	#NID_sögÀLevñQuÆôy
 496

	)

3083 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3085 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3086 
	#NID_subåìMöimumQuÆôy
 497

	)

3087 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3089 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3090 
	#NID_subåìMaximumQuÆôy
 498

	)

3091 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3093 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3094 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3095 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3097 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3098 
	#NID_dITRedúe˘
 500

	)

3099 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3101 
	#SN_audio
 "audio"

	)

3102 
	#NID_audio
 501

	)

3103 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3105 
	#LN_documítPublishî
 "documítPublishî"

	)

3106 
	#NID_documítPublishî
 502

	)

3107 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3109 
	#SN_id_£t
 "id-£t"

	)

3110 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3111 
	#NID_id_£t
 512

	)

3112 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3114 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3115 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3116 
	#NID_£t_˘y≥
 513

	)

3117 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3119 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3120 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3121 
	#NID_£t_msgExt
 514

	)

3122 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3124 
	#SN_£t_©å
 "£t-©å"

	)

3125 
	#NID_£t_©å
 515

	)

3126 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3128 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3129 
	#NID_£t_pﬁicy
 516

	)

3130 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3132 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3133 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3134 
	#NID_£t_˚πExt
 517

	)

3135 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3137 
	#SN_£t_bønd
 "£t-bønd"

	)

3138 
	#NID_£t_bønd
 518

	)

3139 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3141 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3142 
	#NID_£t˘_PAND©a
 519

	)

3143 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3145 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3146 
	#NID_£t˘_PANTokí
 520

	)

3147 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3149 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3150 
	#NID_£t˘_PANO∆y
 521

	)

3151 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3153 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3154 
	#NID_£t˘_OID©a
 522

	)

3155 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3157 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3158 
	#NID_£t˘_PI
 523

	)

3159 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3161 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3162 
	#NID_£t˘_PID©a
 524

	)

3163 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3165 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3166 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3167 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3169 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3170 
	#NID_£t˘_HODI≈ut
 526

	)

3171 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3173 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3174 
	#NID_£t˘_AuthResBaggage
 527

	)

3175 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3177 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3178 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3179 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3181 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3182 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3183 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3185 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3186 
	#NID_£t˘_C≠TokíSeq
 530

	)

3187 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3189 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3190 
	#NID_£t˘_PInôResD©a
 531

	)

3191 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3193 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3194 
	#NID_£t˘_PI_TBS
 532

	)

3195 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3197 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3198 
	#NID_£t˘_PResD©a
 533

	)

3199 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3201 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3202 
	#NID_£t˘_AuthReqTBS
 534

	)

3203 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3205 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3206 
	#NID_£t˘_AuthResTBS
 535

	)

3207 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3209 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3210 
	#NID_£t˘_AuthResTBSX
 536

	)

3211 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3213 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3214 
	#NID_£t˘_AuthTokíTBS
 537

	)

3215 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3217 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3218 
	#NID_£t˘_C≠TokíD©a
 538

	)

3219 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3221 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3222 
	#NID_£t˘_C≠TokíTBS
 539

	)

3223 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3225 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3226 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3227 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3229 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3230 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3231 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3233 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3234 
	#NID_£t˘_AuthRevResD©a
 542

	)

3235 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3237 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3238 
	#NID_£t˘_AuthRevResTBS
 543

	)

3239 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3241 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3242 
	#NID_£t˘_C≠ReqTBS
 544

	)

3243 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3245 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3246 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3247 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3249 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3250 
	#NID_£t˘_C≠ResD©a
 546

	)

3251 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3253 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3254 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3255 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3257 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3258 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3259 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3261 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3262 
	#NID_£t˘_C≠RevResD©a
 549

	)

3263 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3265 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3266 
	#NID_£t˘_CªdReqTBS
 550

	)

3267 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3269 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3270 
	#NID_£t˘_CªdReqTBSX
 551

	)

3271 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3273 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3274 
	#NID_£t˘_CªdResD©a
 552

	)

3275 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3277 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3278 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3279 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3281 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3282 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3283 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3285 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3286 
	#NID_£t˘_CªdRevResD©a
 555

	)

3287 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3289 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3290 
	#NID_£t˘_PCîtReqD©a
 556

	)

3291 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3293 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3294 
	#NID_£t˘_PCîtResTBS
 557

	)

3295 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3297 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3298 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3299 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3301 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3302 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3303 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3305 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3306 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3307 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3309 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3310 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3311 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3313 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3314 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3315 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3317 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3318 
	#NID_£t˘_CîtReqD©a
 563

	)

3319 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3321 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3322 
	#NID_£t˘_CîtReqTBS
 564

	)

3323 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3325 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3326 
	#NID_£t˘_CîtResD©a
 565

	)

3327 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3329 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3330 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3331 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3333 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3334 
	#NID_£t˘_Eº‹TBS
 567

	)

3335 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3337 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3338 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3339 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3341 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3342 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3343 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3345 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3346 
	#NID_£t˘_AuthReqTBE
 570

	)

3347 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3349 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3350 
	#NID_£t˘_AuthResTBE
 571

	)

3351 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3353 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3354 
	#NID_£t˘_AuthResTBEX
 572

	)

3355 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3357 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3358 
	#NID_£t˘_AuthTokíTBE
 573

	)

3359 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3361 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3362 
	#NID_£t˘_C≠TokíTBE
 574

	)

3363 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3365 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3366 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3367 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3369 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3370 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3371 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3373 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3374 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3375 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3377 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3378 
	#NID_£t˘_AuthRevResTBE
 578

	)

3379 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3381 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3382 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3383 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3385 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3386 
	#NID_£t˘_C≠ReqTBE
 580

	)

3387 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3389 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3390 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3391 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3393 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3394 
	#NID_£t˘_C≠ResTBE
 582

	)

3395 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3397 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3398 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3399 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3401 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3402 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3403 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3405 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3406 
	#NID_£t˘_C≠RevResTBE
 585

	)

3407 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3409 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3410 
	#NID_£t˘_CªdReqTBE
 586

	)

3411 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3413 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3414 
	#NID_£t˘_CªdReqTBEX
 587

	)

3415 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3417 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3418 
	#NID_£t˘_CªdResTBE
 588

	)

3419 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3421 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3422 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3423 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3425 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3426 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3427 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3429 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3430 
	#NID_£t˘_CªdRevResTBE
 591

	)

3431 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3433 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3434 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3435 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3437 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3438 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3439 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3441 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3442 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3443 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3445 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3446 
	#NID_£t˘_CîtReqTBE
 595

	)

3447 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3449 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3450 
	#NID_£t˘_CîtReqTBEX
 596

	)

3451 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3453 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3454 
	#NID_£t˘_CîtResTBE
 597

	)

3455 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3457 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3458 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3459 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3461 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3462 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3463 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3465 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3466 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3467 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3469 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3470 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3471 
	#NID_£ãxt_gíCry±
 601

	)

3472 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3474 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3475 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3476 
	#NID_£ãxt_miAuth
 602

	)

3477 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3479 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3480 
	#NID_£ãxt_pöSecuª
 603

	)

3481 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3483 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3484 
	#NID_£ãxt_pöAny
 604

	)

3485 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3487 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3488 
	#NID_£ãxt_åack2
 605

	)

3489 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3491 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3492 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3493 
	#NID_£ãxt_cv
 606

	)

3494 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3496 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3497 
	#NID_£t_pﬁicy_roŸ
 607

	)

3498 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3500 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3501 
	#NID_£tCext_hashedRoŸ
 608

	)

3502 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3504 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3505 
	#NID_£tCext_˚πTy≥
 609

	)

3506 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3508 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3509 
	#NID_£tCext_mîchD©a
 610

	)

3510 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3512 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3513 
	#NID_£tCext_cCîtRequúed
 611

	)

3514 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3516 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3517 
	#NID_£tCext_tu¬ñög
 612

	)

3518 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3520 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3521 
	#NID_£tCext_£tExt
 613

	)

3522 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3524 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3525 
	#NID_£tCext_£tQuÆf
 614

	)

3526 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3528 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3529 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3530 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3532 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3533 
	#NID_£tCext_TokíIdítifõr
 616

	)

3534 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3536 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3537 
	#NID_£tCext_Tøck2D©a
 617

	)

3538 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3540 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3541 
	#NID_£tCext_TokíTy≥
 618

	)

3542 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3544 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3545 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3546 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3548 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3549 
	#NID_£tAâr_Cît
 620

	)

3550 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3552 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3553 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3554 
	#NID_£tAâr_PGWYˇp
 621

	)

3555 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3557 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3558 
	#NID_£tAâr_TokíTy≥
 622

	)

3559 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3561 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3562 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3563 
	#NID_£tAâr_IssC≠
 623

	)

3564 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3566 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3567 
	#NID_£t_roŸKeyThumb
 624

	)

3568 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3570 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3571 
	#NID_£t_addPﬁicy
 625

	)

3572 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3574 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3575 
	#NID_£tAâr_Tokí_EMV
 626

	)

3576 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3578 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3579 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3580 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3582 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3583 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3584 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3586 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3587 
	#NID_£tAâr_IssC≠_T2
 629

	)

3588 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3590 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3591 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3592 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3594 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3595 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3596 
	#NID_£tAâr_GíCry±grm
 631

	)

3597 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3599 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3600 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3601 
	#NID_£tAâr_T2Enc
 632

	)

3602 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3604 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3605 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3606 
	#NID_£tAâr_T2˛óπxt
 633

	)

3607 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3609 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3610 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3611 
	#NID_£tAâr_TokICCsig
 634

	)

3612 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3614 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3615 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3616 
	#NID_£tAâr_SecDevSig
 635

	)

3617 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3619 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3620 
	#NID_£t_bønd_IATA_ATA
 636

	)

3621 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3623 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3624 
	#NID_£t_bønd_Döîs
 637

	)

3625 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3627 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3628 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3629 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3631 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3632 
	#NID_£t_bønd_JCB
 639

	)

3633 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3635 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3636 
	#NID_£t_bønd_Viß
 640

	)

3637 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3639 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3640 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3641 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3643 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3644 
	#NID_£t_bønd_Novus
 642

	)

3645 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3647 
	#SN_des_cdmf
 "DES-CDMF"

	)

3648 
	#LN_des_cdmf
 "des-cdmf"

	)

3649 
	#NID_des_cdmf
 643

	)

3650 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3652 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3653 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3654 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3656 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3657 
	#LN_ù£c3
 "ù£c3"

	)

3658 
	#NID_ù£c3
 749

	)

3660 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3661 
	#LN_ù£c4
 "ù£c4"

	)

3662 
	#NID_ù£c4
 750

	)

3664 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3665 
	#NID_whúÕoﬁ
 804

	)

3666 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3668 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3669 
	#NID_¸y±›ro
 805

	)

3670 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3672 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3673 
	#NID_¸y±ocom
 806

	)

3674 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3676 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3677 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3678 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3679 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3686 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3687 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3688 
	#NID_id_Go°R3411_94
 809

	)

3689 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3691 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3692 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3693 
	#NID_id_HMACGo°R3411_94
 810

	)

3694 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3696 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3697 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3698 
	#NID_id_Go°R3410_2001
 811

	)

3699 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3701 
	#SN_id_Go°R3410_94
 "go°94"

	)

3702 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3703 
	#NID_id_Go°R3410_94
 812

	)

3704 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3706 
	#SN_id_Go°28147_89
 "go°89"

	)

3707 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3708 
	#NID_id_Go°28147_89
 813

	)

3709 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3711 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3712 
	#NID_go°89_˙t
 814

	)

3714 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3715 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3716 
	#NID_id_Go°28147_89_MAC
 815

	)

3717 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3719 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3720 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3721 
	#NID_id_Go°R3411_94_¥f
 816

	)

3722 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3724 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3725 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3726 
	#NID_id_Go°R3410_2001DH
 817

	)

3727 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3729 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3730 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3731 
	#NID_id_Go°R3410_94DH
 818

	)

3732 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3734 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3735 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3736 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3738 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3739 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3740 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3742 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3743 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3744 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3746 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3747 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3748 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3750 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3751 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3752 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3754 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3755 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3756 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3758 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3759 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3760 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3762 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3763 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3764 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3766 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3767 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3768 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3770 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3771 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3772 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3774 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3775 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3776 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3778 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3779 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3780 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3782 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3783 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3784 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3786 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3787 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3788 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3790 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3791 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3792 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3794 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3795 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3796 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3798 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3799 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3800 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3802 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3803 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3804 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3806 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3807 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3808 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3810 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3811 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3812 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3814 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3815 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3816 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3818 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3819 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3820 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3822 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3823 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3824 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3826 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3827 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3828 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3830 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3831 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3832 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3834 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3835 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3836 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3838 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3839 
	#NID_id_Go°R3410_94_a
 845

	)

3840 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3842 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3843 
	#NID_id_Go°R3410_94_aBis
 846

	)

3844 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3846 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3847 
	#NID_id_Go°R3410_94_b
 847

	)

3848 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3850 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3851 
	#NID_id_Go°R3410_94_bBis
 848

	)

3852 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3854 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3855 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3856 
	#NID_id_Go°28147_89_cc
 849

	)

3857 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3859 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3860 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3861 
	#NID_id_Go°R3410_94_cc
 850

	)

3862 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3864 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3865 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_2001_cc
 851

	)

3867 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3869 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3870 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3871 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3872 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3879 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3880 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3881 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3882 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3884 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3885 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3886 
	#NID_ˇmñlü_128_cbc
 751

	)

3887 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3889 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3890 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3891 
	#NID_ˇmñlü_192_cbc
 752

	)

3892 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3894 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3895 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3896 
	#NID_ˇmñlü_256_cbc
 753

	)

3897 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3899 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3900 
	#NID_id_ˇmñlü128_wøp
 907

	)

3901 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3903 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3904 
	#NID_id_ˇmñlü192_wøp
 908

	)

3905 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3907 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3908 
	#NID_id_ˇmñlü256_wøp
 909

	)

3909 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3911 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3913 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3915 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3916 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3917 
	#NID_ˇmñlü_128_ecb
 754

	)

3918 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3920 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3921 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3922 
	#NID_ˇmñlü_128_ofb128
 766

	)

3923 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3925 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3926 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3927 
	#NID_ˇmñlü_128_cfb128
 757

	)

3928 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3930 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3931 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3932 
	#NID_ˇmñlü_192_ecb
 755

	)

3933 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3935 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3936 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3937 
	#NID_ˇmñlü_192_ofb128
 767

	)

3938 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3940 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3941 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3942 
	#NID_ˇmñlü_192_cfb128
 758

	)

3943 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3945 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3946 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3947 
	#NID_ˇmñlü_256_ecb
 756

	)

3948 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3950 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3951 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3952 
	#NID_ˇmñlü_256_ofb128
 768

	)

3953 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3955 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3956 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3957 
	#NID_ˇmñlü_256_cfb128
 759

	)

3958 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3960 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3961 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3962 
	#NID_ˇmñlü_128_cfb1
 760

	)

3964 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3965 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3966 
	#NID_ˇmñlü_192_cfb1
 761

	)

3968 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3969 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3970 
	#NID_ˇmñlü_256_cfb1
 762

	)

3972 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3973 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3974 
	#NID_ˇmñlü_128_cfb8
 763

	)

3976 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3977 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3978 
	#NID_ˇmñlü_192_cfb8
 764

	)

3980 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3981 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3982 
	#NID_ˇmñlü_256_cfb8
 765

	)

3984 
	#SN_kiß
 "KISA"

	)

3985 
	#LN_kiß
 "kiß"

	)

3986 
	#NID_kiß
 773

	)

3987 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3989 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3990 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3991 
	#NID_£ed_ecb
 776

	)

3992 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3994 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3995 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3996 
	#NID_£ed_cbc
 777

	)

3997 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3999 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4000 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4001 
	#NID_£ed_cfb128
 779

	)

4002 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4004 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4005 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4006 
	#NID_£ed_ofb128
 778

	)

4007 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4009 
	#SN_hmac
 "HMAC"

	)

4010 
	#LN_hmac
 "hmac"

	)

4011 
	#NID_hmac
 855

	)

4013 
	#SN_cmac
 "CMAC"

	)

4014 
	#LN_cmac
 "cmac"

	)

4015 
	#NID_cmac
 894

	)

4017 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4018 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4019 
	#NID_rc4_hmac_md5
 915

	)

4021 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4022 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4023 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4025 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4026 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4027 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4029 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4030 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4031 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
247
6959
include/ac_app_api.h
include/ac_app_defs.h
include/ac_database.h
include/ac_types.h
include/ipfix_def.h
libipfix_110224/collector/collector.c
libipfix_110224/config.h
libipfix_110224/examples/example_collector.c
libipfix_110224/examples/example_collector_db.c
libipfix_110224/examples/example_exporter.c
libipfix_110224/lib/ipfix.c
libipfix_110224/lib/ipfix.h
libipfix_110224/lib/ipfix_col.c
libipfix_110224/lib/ipfix_col.h
libipfix_110224/lib/ipfix_col_db.c
libipfix_110224/lib/ipfix_col_db.h
libipfix_110224/lib/ipfix_col_files.c
libipfix_110224/lib/ipfix_db.c
libipfix_110224/lib/ipfix_db.h
libipfix_110224/lib/ipfix_def.h
libipfix_110224/lib/ipfix_def_fokus.h
libipfix_110224/lib/ipfix_fields.h
libipfix_110224/lib/ipfix_fields_fokus.h
libipfix_110224/lib/ipfix_print.c
libipfix_110224/lib/ipfix_reverse_fields.h
libipfix_110224/lib/ipfix_ssl.c
libipfix_110224/lib/ipfix_ssl.h
libipfix_110224/libmisc/getopt.c
libipfix_110224/libmisc/getopt.h
libipfix_110224/libmisc/getopt1.c
libipfix_110224/libmisc/hashtable.c
libipfix_110224/libmisc/hashtable.h
libipfix_110224/libmisc/hashtable_private.h
libipfix_110224/libmisc/mhash.c
libipfix_110224/libmisc/misc.c
libipfix_110224/libmisc/misc.h
libipfix_110224/libmisc/mlist.c
libipfix_110224/libmisc/mlog.c
libipfix_110224/libmisc/mlog.h
libipfix_110224/libmisc/mpoll.c
libipfix_110224/libmisc/mpoll.h
libipfix_110224/libmisc/testmhash.c
libipfix_110224/probe/ipflow.c
libipfix_110224/probe/ipflow.h
libipfix_110224/probe/probe.c
libipfix_110224/test/exporter.c
libipfix_110224/test/exporter_sb.c
libipfix_110224/test/ipfixtee.c
src/ac_app_handlers.c
src/ac_database.c
src/acop.c
src/acop_data_exporter.c
src/test_cap1.c
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/gnu-versions.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/if_ether.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip6.h
/usr/include/openssl/bio.h
/usr/include/openssl/err.h
/usr/include/openssl/rand.h
/usr/include/openssl/ssl.h
/usr/include/openssl/x509v3.h
/usr/include/pcap.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/param.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/if_ether.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/locale.h
/usr/include/net/ethernet.h
/usr/include/net/if_arp.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/conf.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/hmac.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/pcap/pcap.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/param.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/locale.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/krb5.h
/usr/include/linux/errno.h
/usr/include/linux/types.h
/usr/include/openssl/asn1.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/evp.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/rsa.h
/usr/include/openssl/sha.h
/usr/include/openssl/stack.h
/usr/include/openssl/x509_vfy.h
/usr/include/pcap/bpf.h
/usr/include/sys/timeb.h
/usr/include/sys/times.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/asm/types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/krb5/krb5.h
/usr/include/linux/posix_types.h
/usr/include/openssl/bn.h
/usr/include/openssl/fips.h
/usr/include/openssl/objects.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/asm/sockios.h
/usr/include/assert.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/et/com_err.h
/usr/include/linux/stddef.h
/usr/include/openssl/obj_mac.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
